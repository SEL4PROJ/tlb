(* ARM_Monadic.thy - generated by L3 - 19/05/2016 *)
theory ARM_Monadic
imports "HOL-Word.Word"  TLB
begin

ML_file "$ISABELLE_HOME/src/HOL/Word/Tools/word_lib.ML"
ML_file "./../L3_Lib/L3.ML"

datatype Architecture = ARMv4 | ARMv4T | ARMv5T | ARMv5TE | ARMv6 | ARMv6K | ARMv6T2 | ARMv7_A |
  ARMv7_R

datatype Extensions = Extension_ThumbEE | Extension_Security | Extension_Multiprocessing |
  Extension_Virtualization | Extension_VFP | Extension_AdvanvedSIMD

record PSR =
  A :: bool
  C :: bool  E :: bool
  F :: bool
  GE :: "4 word"
  I :: bool
  IT :: "8 word"
  J :: bool
  M :: "5 word"
  N :: bool
  Q :: bool
  T :: bool
  V :: bool
  Z :: bool
  psr'rst :: "4 word"

record CP14 = TEEHBR :: "32 word"

record SCTLR =
  A :: bool
  B :: bool
  BR :: bool
  C :: bool
  DZ :: bool
  EE :: bool
  FI :: bool
  I :: bool
  IE :: bool
  M :: bool
  NMFI :: bool
  RR :: bool
  SW :: bool
  TE :: bool
  U :: bool
  V :: bool
  VE :: bool
  Z :: bool
  sctlr'rst :: "14 word"

record HSCTLR =
  A :: bool
  C :: bool
  CP15BEN :: bool
  EE :: bool
  FI :: bool
  I :: bool
  M :: bool
  TE :: bool
  WXN :: bool
  hsctlr'rst :: "23 word"

record HSR = EC :: "6 word" IL :: bool ISS :: "25 word"

record SCR =
  AW :: bool
  EA :: bool
  FIQ :: bool
  FW :: bool
  HCE :: bool
  IRQ :: bool
  NS :: bool
  SCD :: bool
  SIF :: bool
  nET :: bool
  scr'rst :: "22 word"

record NSACR =
  NSASEDIS :: bool
  NSD32DIS :: bool
  NSTRCDIS :: bool
  RFR :: bool
  cp :: "14 word"
  nsacr'rst :: "14 word"

record HCR =
  AMO :: bool
  BSU :: "2 word"
  DC :: bool
  FB :: bool
  FMO :: bool
  IMO :: bool
  PTW :: bool
  SWIO :: bool
  TAC :: bool
  TGE :: bool
  TID :: "4 word"
  TIDCP :: bool
  TPC :: bool
  TPU :: bool
  TSC :: bool
  TSW :: bool
  TTLB :: bool
  TVM :: bool
  TWE :: bool
  TWI :: bool
  VA :: bool
  VF :: bool
  VI :: bool
  VM :: bool
  hcr'rst :: "4 word"

record CP15 =
  HCR :: HCR
  HSCTLR :: HSCTLR
  HSR :: HSR
  MVBAR :: "32 word"
  NSACR :: NSACR
  SCR :: SCR
  SCTLR :: SCTLR
  VBAR :: "32 word"

datatype InstrSet = InstrSet_ARM | InstrSet_Thumb | InstrSet_Jazelle | InstrSet_ThumbEE

datatype Encoding = Encoding_Thumb | Encoding_Thumb2 | Encoding_ARM

datatype RName = RName_0usr | RName_1usr | RName_2usr | RName_3usr | RName_4usr | RName_5usr |
  RName_6usr | RName_7usr | RName_8usr | RName_8fiq | RName_9usr | RName_9fiq | RName_10usr |
  RName_10fiq | RName_11usr | RName_11fiq | RName_12usr | RName_12fiq | RName_SPusr | RName_SPfiq |
  RName_SPirq | RName_SPsvc | RName_SPabt | RName_SPund | RName_SPmon | RName_SPhyp | RName_LRusr |
  RName_LRfiq | RName_LRirq | RName_LRsvc | RName_LRabt | RName_LRund | RName_LRmon | RName_PC

datatype SRType = SRType_LSL | SRType_LSR | SRType_ASR | SRType_ROR | SRType_RRX

record FPSCR =
  AHP :: bool
  C :: bool
  DN :: bool
  DZC :: bool
  DZE :: bool
  FZ :: bool
  IDC :: bool
  IDE :: bool
  IOC :: bool
  IOE :: bool
  IXC :: bool
  IXE :: bool
  N :: bool
  OFC :: bool
  OFE :: bool
  QC :: bool
  RMode :: "2 word"
  UFC :: bool
  UFE :: bool
  V :: bool
  Z :: bool
  fpscr'rst :: "10 word"

record FP = FPSCR :: FPSCR REG :: "5 word \<Rightarrow> 64 word"

datatype VFPNegMul = VFPNegMul_VNMLA | VFPNegMul_VNMLS | VFPNegMul_VNMUL

datatype offset1 = immediate_form1 "32 word" | register_form1 "4 word \<times> SRType \<times> nat"

datatype offset2 = immediate_form2 "32 word" | register_form2 "4 word"

datatype Hint =
    Breakpoint "32 word"
  | DataMemoryBarrier "4 word"
  | DataSynchronizationBarrier "4 word"
  | Debug "4 word"
  | InstructionSynchronizationBarrier "4 word"
  | PreloadData "bool \<times> bool \<times> 4 word \<times> offset1"
  | PreloadDataLiteral "bool \<times> 32 word"
  | PreloadInstruction "bool \<times> 4 word \<times> offset1"
  | SendEvent
  | WaitForEvent
  | WaitForInterrupt
  | Yield

datatype System =
    ChangeProcessorState
        "bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> 5 word option"
  | EnterxLeavex bool
  | ExceptionReturn
  | HypervisorCall "16 word"
  | MoveToBankedOrSpecialRegister "bool \<times> 5 word \<times> 4 word"
  | MoveToRegisterFromBankedOrSpecial "bool \<times> 5 word \<times> 4 word"
  | MoveToRegisterFromSpecial "bool \<times> 4 word"
  | MoveToSpecialFromImmediate "bool \<times> 32 word \<times> 4 word"
  | MoveToSpecialFromRegister "bool \<times> 4 word \<times> 4 word"
  | ReturnFromException "bool \<times> bool \<times> bool \<times> 4 word"
  | SecureMonitorCall "4 word"
  | Setend bool
  | StoreReturnState "bool \<times> bool \<times> bool \<times> 5 word"
  | SupervisorCall "32 word"

datatype Store =
    StoreByte "bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"
  | StoreByteUnprivileged "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"
  | StoreDual
      "bool \<times>
       bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> offset2"
  | StoreExclusive "4 word \<times> 4 word \<times> 4 word \<times> 32 word"
  | StoreExclusiveByte "4 word \<times> 4 word \<times> 4 word"
  | StoreExclusiveDoubleword "4 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | StoreExclusiveHalf "4 word \<times> 4 word \<times> 4 word"
  | StoreHalf "bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"
  | StoreHalfUnprivileged "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset2"
  | StoreMultiple "bool \<times> bool \<times> bool \<times> 4 word \<times> 16 word"
  | StoreMultipleUserRegisters "bool \<times> bool \<times> 4 word \<times> 16 word"
  | StoreUnprivileged "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"
  | StoreWord "bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"

datatype Load =
    LoadByte
        "bool \<times>
         bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"
  | LoadByteLiteral "bool \<times> bool \<times> 4 word \<times> 32 word"
  | LoadByteUnprivileged "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"
  | LoadDual
      "bool \<times>
       bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> offset2"
  | LoadDualLiteral "bool \<times> 4 word \<times> 4 word \<times> 32 word"
  | LoadExclusive "4 word \<times> 4 word \<times> 32 word"
  | LoadExclusiveByte "4 word \<times> 4 word"
  | LoadExclusiveDoubleword "4 word \<times> 4 word \<times> 4 word"
  | LoadExclusiveHalf "4 word \<times> 4 word"
  | LoadHalf
      "bool \<times>
       bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"
  | LoadHalfLiteral "bool \<times> bool \<times> 4 word \<times> 32 word"
  | LoadHalfUnprivileged
      "bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset2"
  | LoadLiteral "bool \<times> 4 word \<times> 32 word"
  | LoadMultiple "bool \<times> bool \<times> bool \<times> 4 word \<times> 16 word"
  | LoadMultipleExceptionReturn "bool \<times> bool \<times> bool \<times> 4 word \<times> 15 word"
  | LoadMultipleUserRegisters "bool \<times> bool \<times> 4 word \<times> 15 word"
  | LoadSignedByteUnprivileged "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset2"
  | LoadUnprivileged "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"
  | LoadWord "bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1"

datatype Media =
    BitFieldClearOrInsert "4 word \<times> 4 word \<times> nat \<times> nat"
  | BitFieldExtract "bool \<times> 4 word \<times> 4 word \<times> nat \<times> nat"
  | ByteReverse "4 word \<times> 4 word"
  | ByteReversePackedHalfword "4 word \<times> 4 word"
  | ByteReverseSignedHalfword "4 word \<times> 4 word"
  | ExtendByte "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> nat"
  | ExtendByte16 "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> nat"
  | ExtendHalfword "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> nat"
  | PackHalfword "SRType \<times> nat \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word"
  | ReverseBits "4 word \<times> 4 word"
  | Saturate "SRType \<times> nat \<times> nat \<times> bool \<times> 4 word \<times> 4 word"
  | Saturate16 "nat \<times> bool \<times> 4 word \<times> 4 word"
  | SaturatingAddSubtract "2 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | SelectBytes "4 word \<times> 4 word \<times> 4 word"

datatype SIMD =
    SignedAddSub16 "2 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | SignedAddSub8 "bool \<times> 4 word \<times> 4 word \<times> 4 word"
  | SignedHalvingAddSub16 "2 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | SignedHalvingAddSub8 "bool \<times> 4 word \<times> 4 word \<times> 4 word"
  | SignedSaturatingAddSub16 "2 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | SignedSaturatingAddSub8 "bool \<times> 4 word \<times> 4 word \<times> 4 word"
  | UnsignedAddSub16 "2 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | UnsignedAddSub8 "bool \<times> 4 word \<times> 4 word \<times> 4 word"
  | UnsignedHalvingAddSub16 "2 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | UnsignedHalvingAddSub8 "bool \<times> 4 word \<times> 4 word \<times> 4 word"
  | UnsignedSaturatingAddSub16 "2 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | UnsignedSaturatingAddSub8 "bool \<times> 4 word \<times> 4 word \<times> 4 word"
  | UnsignedSumAbsoluteDifferences "4 word \<times> 4 word \<times> 4 word \<times> 4 word"

datatype Multiply =
    Multiply32 "bool \<times> 4 word \<times> 4 word \<times> 4 word"
  | MultiplyAccumulate "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | MultiplyAccumulateAccumulate "4 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | MultiplyLong
      "bool \<times>
       bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | MultiplySubtract "4 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | Signed16Multiply32Accumulate
      "bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | Signed16Multiply32Result "bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word"
  | Signed16Multiply64Accumulate
      "bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | Signed16x32Multiply32Accumulate
      "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | Signed16x32Multiply32Result "bool \<times> 4 word \<times> 4 word \<times> 4 word"
  | SignedMostSignificantMultiply
      "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | SignedMostSignificantMultiplySubtract
      "bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | SignedMultiplyDual
      "bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"
  | SignedMultiplyLongDual
      "bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word"

datatype Data =
    AddSub "bool \<times> 4 word \<times> 4 word \<times> 12 word"
  | ArithLogicImmediate "4 word \<times> bool \<times> 4 word \<times> 4 word \<times> 12 word"
  | CountLeadingZeroes "4 word \<times> 4 word"
  | Move "bool \<times> bool \<times> 4 word \<times> 12 word"
  | MoveHalfword "bool \<times> 4 word \<times> 16 word"
  | Register
      "4 word \<times>
       bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> SRType \<times> nat"
  | RegisterShiftedRegister
      "4 word \<times>
       bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> SRType \<times> 4 word"
  | ShiftImmediate "bool \<times> bool \<times> 4 word \<times> 4 word \<times> SRType \<times> nat"
  | ShiftRegister
      "bool \<times> bool \<times> 4 word \<times> 4 word \<times> SRType \<times> 4 word"
  | TestCompareImmediate "2 word \<times> 4 word \<times> 12 word"
  | TestCompareRegister "2 word \<times> 4 word \<times> 4 word \<times> SRType \<times> nat"

datatype Branch =
    BranchExchange "4 word"
  | BranchLinkExchangeImmediate "InstrSet \<times> 32 word"
  | BranchLinkExchangeRegister "4 word"
  | BranchTarget "32 word"
  | CheckArray "4 word \<times> 4 word"
  | CompareBranch "bool \<times> 4 word \<times> 32 word"
  | HandlerBranchLink "bool \<times> 32 word"
  | HandlerBranchLinkParameter "32 word \<times> 32 word"
  | HandlerBranchParameter "32 word \<times> 32 word"
  | TableBranchByte "bool \<times> 4 word \<times> 4 word"

datatype VFP =
    UndefinedVFP
  | vadd "bool \<times> 5 word \<times> 5 word \<times> 5 word"
  | vcmp "bool \<times> 5 word \<times> 5 word option"
  | vldr "bool \<times> bool \<times> 5 word \<times> 4 word \<times> 32 word"
  | vmla_vmls "bool \<times> bool \<times> 5 word \<times> 5 word \<times> 5 word"
  | vmov "bool \<times> 5 word \<times> 5 word"
  | vmov_imm "bool \<times> 5 word \<times> 64 word"
  | vmrs "4 word"
  | vmul "bool \<times> 5 word \<times> 5 word \<times> 5 word"
  | vneg_mul "bool \<times> VFPNegMul \<times> 5 word \<times> 5 word \<times> 5 word"
  | vstr "bool \<times> bool \<times> 5 word \<times> 4 word \<times> 32 word"
  | vsub "bool \<times> 5 word \<times> 5 word \<times> 5 word"

datatype instruction =
    Branch Branch
  | ClearExclusive
  | Data Data
  | Divide "bool \<times> 4 word \<times> 4 word \<times> 4 word"
  | Hint Hint
  | IfThen "4 word \<times> 4 word"
  | Load Load
  | Media Media
  | Multiply Multiply
  | NoOperation
  | SIMD SIMD
  | Store Store
  | Swap "bool \<times> 4 word \<times> 4 word \<times> 4 word"
  | System System
  | Undefined "32 word"
  | VFP VFP

datatype MachineCode =
    ARM "32 word"
  | BadCode string
  | Thumb "16 word"
  | Thumb2 "16 word \<times> 16 word"
  | ThumbEE "16 word"

datatype exception =
    ASSERT string
  | AlignmentFault "32 word"
  | IMPLEMENTATION_DEFINED string
  | NoException
  | UNPREDICTABLE string
  | PAGE_FAULT string (* MMU *)

record state =
  Architecture :: Architecture
  CP14 :: CP14
  CP15 :: CP15
  CPSR :: PSR
  CurrentCondition :: "4 word"
  ELR_hyp :: "32 word"
  Encoding :: Encoding
  Extensions :: "Extensions set"
  FP :: FP
  MEM :: "paddr \<rightharpoonup> byte"
  REG :: "RName \<Rightarrow> 32 word"
  SPSR_abt :: PSR
  SPSR_fiq :: PSR
  SPSR_hyp :: PSR
  SPSR_irq :: PSR
  SPSR_mon :: PSR
  SPSR_svc :: PSR
  SPSR_und :: PSR
  exception :: exception
  undefined :: bool
  (* additional MMU 'b state_scheme *)
  TTBR0 :: paddr 
  ASID :: asid
  (* for program 'b state_scheme *)
 
fun nat_to_Architecture :: "nat \<Rightarrow> Architecture" where
  "nat_to_Architecture x =
   (if x = 0 then ARM_Monadic.ARMv4
    else if x = 1 then ARM_Monadic.ARMv4T
    else if x = 2 then ARM_Monadic.ARMv5T
    else if x = 3 then ARM_Monadic.ARMv5TE
    else if x = 4 then ARM_Monadic.ARMv6
    else if x = 5 then ARM_Monadic.ARMv6K
    else if x = 6 then ARM_Monadic.ARMv6T2
    else if x = 7 then ARM_Monadic.ARMv7_A
    else if x = 8 then ARM_Monadic.ARMv7_R
    else HOL.undefined)"

fun nat_to_Extensions :: "nat \<Rightarrow> Extensions" where
  "nat_to_Extensions x =
   (if x = 0 then ARM_Monadic.Extension_ThumbEE
    else if x = 1 then ARM_Monadic.Extension_Security
    else if x = 2 then ARM_Monadic.Extension_Multiprocessing
    else if x = 3 then ARM_Monadic.Extension_Virtualization
    else if x = 4 then ARM_Monadic.Extension_VFP
    else if x = 5 then ARM_Monadic.Extension_AdvanvedSIMD
    else HOL.undefined)"

fun nat_to_InstrSet :: "nat \<Rightarrow> InstrSet" where
  "nat_to_InstrSet x =
   (if x = 0 then ARM_Monadic.InstrSet_ARM
    else if x = 1 then ARM_Monadic.InstrSet_Thumb
    else if x = 2 then ARM_Monadic.InstrSet_Jazelle
    else if x = 3 then ARM_Monadic.InstrSet_ThumbEE
    else HOL.undefined)"

fun nat_to_Encoding :: "nat \<Rightarrow> Encoding" where
  "nat_to_Encoding x =
   (if x = 0 then ARM_Monadic.Encoding_Thumb
    else if x = 1 then ARM_Monadic.Encoding_Thumb2
    else if x = 2 then ARM_Monadic.Encoding_ARM
    else HOL.undefined)"

fun nat_to_RName :: "nat \<Rightarrow> RName" where
  "nat_to_RName x =
   (if x = 0 then ARM_Monadic.RName_0usr
    else if x = 1 then ARM_Monadic.RName_1usr
    else if x = 2 then ARM_Monadic.RName_2usr
    else if x = 3 then ARM_Monadic.RName_3usr
    else if x = 4 then ARM_Monadic.RName_4usr
    else if x = 5 then ARM_Monadic.RName_5usr
    else if x = 6 then ARM_Monadic.RName_6usr
    else if x = 7 then ARM_Monadic.RName_7usr
    else if x = 8 then ARM_Monadic.RName_8usr
    else if x = 9 then ARM_Monadic.RName_8fiq
    else if x = 10 then ARM_Monadic.RName_9usr
    else if x = 11 then ARM_Monadic.RName_9fiq
    else if x = 12 then ARM_Monadic.RName_10usr
    else if x = 13 then ARM_Monadic.RName_10fiq
    else if x = 14 then ARM_Monadic.RName_11usr
    else if x = 15 then ARM_Monadic.RName_11fiq
    else if x = 16 then ARM_Monadic.RName_12usr
    else if x = 17 then ARM_Monadic.RName_12fiq
    else if x = 18 then ARM_Monadic.RName_SPusr
    else if x = 19 then ARM_Monadic.RName_SPfiq
    else if x = 20 then ARM_Monadic.RName_SPirq
    else if x = 21 then ARM_Monadic.RName_SPsvc
    else if x = 22 then ARM_Monadic.RName_SPabt
    else if x = 23 then ARM_Monadic.RName_SPund
    else if x = 24 then ARM_Monadic.RName_SPmon
    else if x = 25 then ARM_Monadic.RName_SPhyp
    else if x = 26 then ARM_Monadic.RName_LRusr
    else if x = 27 then ARM_Monadic.RName_LRfiq
    else if x = 28 then ARM_Monadic.RName_LRirq
    else if x = 29 then ARM_Monadic.RName_LRsvc
    else if x = 30 then ARM_Monadic.RName_LRabt
    else if x = 31 then ARM_Monadic.RName_LRund
    else if x = 32 then ARM_Monadic.RName_LRmon
    else if x = 33 then ARM_Monadic.RName_PC
    else HOL.undefined)"

fun nat_to_SRType :: "nat \<Rightarrow> SRType" where
  "nat_to_SRType x =
   (if x = 0 then ARM_Monadic.SRType_LSL
    else if x = 1 then ARM_Monadic.SRType_LSR
    else if x = 2 then ARM_Monadic.SRType_ASR
    else if x = 3 then ARM_Monadic.SRType_ROR
    else if x = 4 then ARM_Monadic.SRType_RRX
    else HOL.undefined)"

fun nat_to_VFPNegMul :: "nat \<Rightarrow> VFPNegMul" where
  "nat_to_VFPNegMul x =
   (if x = 0 then ARM_Monadic.VFPNegMul_VNMLA
    else if x = 1 then ARM_Monadic.VFPNegMul_VNMLS
    else if x = 2 then ARM_Monadic.VFPNegMul_VNMUL
    else HOL.undefined)"

fun Architecture_to_nat :: "Architecture \<Rightarrow> nat" where
  "Architecture_to_nat x =
   (case x of
       ARM_Monadic.ARMv4 => 0
          | ARM_Monadic.ARMv4T => 1
          | ARM_Monadic.ARMv5T => 2
          | ARM_Monadic.ARMv5TE => 3
          | ARM_Monadic.ARMv6 => 4
          | ARM_Monadic.ARMv6K => 5
          | ARM_Monadic.ARMv6T2 => 6
          | ARM_Monadic.ARMv7_A => 7
          | ARM_Monadic.ARMv7_R => 8)"

fun Extensions_to_nat :: "Extensions \<Rightarrow> nat" where
  "Extensions_to_nat x =
   (case x of
       ARM_Monadic.Extension_ThumbEE => 0
          | ARM_Monadic.Extension_Security => 1
          | ARM_Monadic.Extension_Multiprocessing => 2
          | ARM_Monadic.Extension_Virtualization => 3
          | ARM_Monadic.Extension_VFP => 4
          | ARM_Monadic.Extension_AdvanvedSIMD => 5)"

fun InstrSet_to_nat :: "InstrSet \<Rightarrow> nat" where
  "InstrSet_to_nat x =
   (case x of
       ARM_Monadic.InstrSet_ARM => 0
          | ARM_Monadic.InstrSet_Thumb => 1
          | ARM_Monadic.InstrSet_Jazelle => 2
          | ARM_Monadic.InstrSet_ThumbEE => 3)"

fun Encoding_to_nat :: "Encoding \<Rightarrow> nat" where
  "Encoding_to_nat x =
   (case x of
       ARM_Monadic.Encoding_Thumb => 0
          | ARM_Monadic.Encoding_Thumb2 => 1
          | ARM_Monadic.Encoding_ARM => 2)"

fun RName_to_nat :: "RName \<Rightarrow> nat" where
  "RName_to_nat x =
   (case x of
       ARM_Monadic.RName_0usr => 0
          | ARM_Monadic.RName_1usr => 1
          | ARM_Monadic.RName_2usr => 2
          | ARM_Monadic.RName_3usr => 3
          | ARM_Monadic.RName_4usr => 4
          | ARM_Monadic.RName_5usr => 5
          | ARM_Monadic.RName_6usr => 6
          | ARM_Monadic.RName_7usr => 7
          | ARM_Monadic.RName_8usr => 8
          | ARM_Monadic.RName_8fiq => 9
          | ARM_Monadic.RName_9usr => 10
          | ARM_Monadic.RName_9fiq => 11
          | ARM_Monadic.RName_10usr => 12
          | ARM_Monadic.RName_10fiq => 13
          | ARM_Monadic.RName_11usr => 14
          | ARM_Monadic.RName_11fiq => 15
          | ARM_Monadic.RName_12usr => 16
          | ARM_Monadic.RName_12fiq => 17
          | ARM_Monadic.RName_SPusr => 18
          | ARM_Monadic.RName_SPfiq => 19
          | ARM_Monadic.RName_SPirq => 20
          | ARM_Monadic.RName_SPsvc => 21
          | ARM_Monadic.RName_SPabt => 22
          | ARM_Monadic.RName_SPund => 23
          | ARM_Monadic.RName_SPmon => 24
          | ARM_Monadic.RName_SPhyp => 25
          | ARM_Monadic.RName_LRusr => 26
          | ARM_Monadic.RName_LRfiq => 27
          | ARM_Monadic.RName_LRirq => 28
          | ARM_Monadic.RName_LRsvc => 29
          | ARM_Monadic.RName_LRabt => 30
          | ARM_Monadic.RName_LRund => 31
          | ARM_Monadic.RName_LRmon => 32
          | ARM_Monadic.RName_PC => 33)"

fun SRType_to_nat :: "SRType \<Rightarrow> nat" where
  "SRType_to_nat x =
   (case x of
       ARM_Monadic.SRType_LSL => 0
          | ARM_Monadic.SRType_LSR => 1
          | ARM_Monadic.SRType_ASR => 2
          | ARM_Monadic.SRType_ROR => 3
          | ARM_Monadic.SRType_RRX => 4)"

fun VFPNegMul_to_nat :: "VFPNegMul \<Rightarrow> nat" where
  "VFPNegMul_to_nat x =
   (case x of
       ARM_Monadic.VFPNegMul_VNMLA => 0
          | ARM_Monadic.VFPNegMul_VNMLS => 1
          | ARM_Monadic.VFPNegMul_VNMUL => 2)"

fun Architecture_to_string :: "Architecture \<Rightarrow> string" where
  "Architecture_to_string x =
   (case x of
       ARM_Monadic.ARMv4 => ''ARMv4''
          | ARM_Monadic.ARMv4T => ''ARMv4T''
          | ARM_Monadic.ARMv5T => ''ARMv5T''
          | ARM_Monadic.ARMv5TE => ''ARMv5TE''
          | ARM_Monadic.ARMv6 => ''ARMv6''
          | ARM_Monadic.ARMv6K => ''ARMv6K''
          | ARM_Monadic.ARMv6T2 => ''ARMv6T2''
          | ARM_Monadic.ARMv7_A => ''ARMv7_A''
          | ARM_Monadic.ARMv7_R => ''ARMv7_R'')"

fun Extensions_to_string :: "Extensions \<Rightarrow> string" where
  "Extensions_to_string x =
   (case x of
       ARM_Monadic.Extension_ThumbEE => ''Extension_ThumbEE''
          | ARM_Monadic.Extension_Security => ''Extension_Security''
          | ARM_Monadic.Extension_Multiprocessing => ''Extension_Multiprocessing''
          | ARM_Monadic.Extension_Virtualization => ''Extension_Virtualization''
          | ARM_Monadic.Extension_VFP => ''Extension_VFP''
          | ARM_Monadic.Extension_AdvanvedSIMD => ''Extension_AdvanvedSIMD'')"

fun InstrSet_to_string :: "InstrSet \<Rightarrow> string" where
  "InstrSet_to_string x =
   (case x of
       ARM_Monadic.InstrSet_ARM => ''InstrSet_ARM''
          | ARM_Monadic.InstrSet_Thumb => ''InstrSet_Thumb''
          | ARM_Monadic.InstrSet_Jazelle => ''InstrSet_Jazelle''
          | ARM_Monadic.InstrSet_ThumbEE => ''InstrSet_ThumbEE'')"

fun Encoding_to_string :: "Encoding \<Rightarrow> string" where
  "Encoding_to_string x =
   (case x of
       ARM_Monadic.Encoding_Thumb => ''Encoding_Thumb''
          | ARM_Monadic.Encoding_Thumb2 => ''Encoding_Thumb2''
          | ARM_Monadic.Encoding_ARM => ''Encoding_ARM'')"

fun RName_to_string :: "RName \<Rightarrow> string" where
  "RName_to_string x =
   (case x of
       ARM_Monadic.RName_0usr => ''RName_0usr''
          | ARM_Monadic.RName_1usr => ''RName_1usr''
          | ARM_Monadic.RName_2usr => ''RName_2usr''
          | ARM_Monadic.RName_3usr => ''RName_3usr''
          | ARM_Monadic.RName_4usr => ''RName_4usr''
          | ARM_Monadic.RName_5usr => ''RName_5usr''
          | ARM_Monadic.RName_6usr => ''RName_6usr''
          | ARM_Monadic.RName_7usr => ''RName_7usr''
          | ARM_Monadic.RName_8usr => ''RName_8usr''
          | ARM_Monadic.RName_8fiq => ''RName_8fiq''
          | ARM_Monadic.RName_9usr => ''RName_9usr''
          | ARM_Monadic.RName_9fiq => ''RName_9fiq''
          | ARM_Monadic.RName_10usr => ''RName_10usr''
          | ARM_Monadic.RName_10fiq => ''RName_10fiq''
          | ARM_Monadic.RName_11usr => ''RName_11usr''
          | ARM_Monadic.RName_11fiq => ''RName_11fiq''
          | ARM_Monadic.RName_12usr => ''RName_12usr''
          | ARM_Monadic.RName_12fiq => ''RName_12fiq''
          | ARM_Monadic.RName_SPusr => ''RName_SPusr''
          | ARM_Monadic.RName_SPfiq => ''RName_SPfiq''
          | ARM_Monadic.RName_SPirq => ''RName_SPirq''
          | ARM_Monadic.RName_SPsvc => ''RName_SPsvc''
          | ARM_Monadic.RName_SPabt => ''RName_SPabt''
          | ARM_Monadic.RName_SPund => ''RName_SPund''
          | ARM_Monadic.RName_SPmon => ''RName_SPmon''
          | ARM_Monadic.RName_SPhyp => ''RName_SPhyp''
          | ARM_Monadic.RName_LRusr => ''RName_LRusr''
          | ARM_Monadic.RName_LRfiq => ''RName_LRfiq''
          | ARM_Monadic.RName_LRirq => ''RName_LRirq''
          | ARM_Monadic.RName_LRsvc => ''RName_LRsvc''
          | ARM_Monadic.RName_LRabt => ''RName_LRabt''
          | ARM_Monadic.RName_LRund => ''RName_LRund''
          | ARM_Monadic.RName_LRmon => ''RName_LRmon''
          | ARM_Monadic.RName_PC => ''RName_PC'')"

fun SRType_to_string :: "SRType \<Rightarrow> string" where
  "SRType_to_string x =
   (case x of
       ARM_Monadic.SRType_LSL => ''SRType_LSL''
          | ARM_Monadic.SRType_LSR => ''SRType_LSR''
          | ARM_Monadic.SRType_ASR => ''SRType_ASR''
          | ARM_Monadic.SRType_ROR => ''SRType_ROR''
          | ARM_Monadic.SRType_RRX => ''SRType_RRX'')"

fun VFPNegMul_to_string :: "VFPNegMul \<Rightarrow> string" where
  "VFPNegMul_to_string x =
   (case x of
       ARM_Monadic.VFPNegMul_VNMLA => ''VFPNegMul_VNMLA''
          | ARM_Monadic.VFPNegMul_VNMLS => ''VFPNegMul_VNMLS''
          | ARM_Monadic.VFPNegMul_VNMUL => ''VFPNegMul_VNMUL'')"

fun string_to_Architecture :: "string \<Rightarrow> Architecture" where
  "string_to_Architecture x =
   (if x = ''ARMv4'' then ARM_Monadic.ARMv4
    else if x = ''ARMv4T'' then ARM_Monadic.ARMv4T
    else if x = ''ARMv5T'' then ARM_Monadic.ARMv5T
    else if x = ''ARMv5TE'' then ARM_Monadic.ARMv5TE
    else if x = ''ARMv6'' then ARM_Monadic.ARMv6
    else if x = ''ARMv6K'' then ARM_Monadic.ARMv6K
    else if x = ''ARMv6T2'' then ARM_Monadic.ARMv6T2
    else if x = ''ARMv7_A'' then ARM_Monadic.ARMv7_A
    else if x = ''ARMv7_R'' then ARM_Monadic.ARMv7_R
    else HOL.undefined)"

fun string_to_Extensions :: "string \<Rightarrow> Extensions" where
  "string_to_Extensions x =
   (if x = ''Extension_ThumbEE'' then ARM_Monadic.Extension_ThumbEE
    else if x = ''Extension_Security'' then ARM_Monadic.Extension_Security
    else if x = ''Extension_Multiprocessing'' then ARM_Monadic.Extension_Multiprocessing
    else if x = ''Extension_Virtualization'' then ARM_Monadic.Extension_Virtualization
    else if x = ''Extension_VFP'' then ARM_Monadic.Extension_VFP
    else if x = ''Extension_AdvanvedSIMD'' then ARM_Monadic.Extension_AdvanvedSIMD
    else HOL.undefined)"

fun string_to_InstrSet :: "string \<Rightarrow> InstrSet" where
  "string_to_InstrSet x =
   (if x = ''InstrSet_ARM'' then ARM_Monadic.InstrSet_ARM
    else if x = ''InstrSet_Thumb'' then ARM_Monadic.InstrSet_Thumb
    else if x = ''InstrSet_Jazelle'' then ARM_Monadic.InstrSet_Jazelle
    else if x = ''InstrSet_ThumbEE'' then ARM_Monadic.InstrSet_ThumbEE
    else HOL.undefined)"

fun string_to_Encoding :: "string \<Rightarrow> Encoding" where
  "string_to_Encoding x =
   (if x = ''Encoding_Thumb'' then ARM_Monadic.Encoding_Thumb
    else if x = ''Encoding_Thumb2'' then ARM_Monadic.Encoding_Thumb2
    else if x = ''Encoding_ARM'' then ARM_Monadic.Encoding_ARM
    else HOL.undefined)"

fun string_to_RName :: "string \<Rightarrow> RName" where
  "string_to_RName x =
   (if x = ''RName_0usr'' then ARM_Monadic.RName_0usr
    else if x = ''RName_1usr'' then ARM_Monadic.RName_1usr
    else if x = ''RName_2usr'' then ARM_Monadic.RName_2usr
    else if x = ''RName_3usr'' then ARM_Monadic.RName_3usr
    else if x = ''RName_4usr'' then ARM_Monadic.RName_4usr
    else if x = ''RName_5usr'' then ARM_Monadic.RName_5usr
    else if x = ''RName_6usr'' then ARM_Monadic.RName_6usr
    else if x = ''RName_7usr'' then ARM_Monadic.RName_7usr
    else if x = ''RName_8usr'' then ARM_Monadic.RName_8usr
    else if x = ''RName_8fiq'' then ARM_Monadic.RName_8fiq
    else if x = ''RName_9usr'' then ARM_Monadic.RName_9usr
    else if x = ''RName_9fiq'' then ARM_Monadic.RName_9fiq
    else if x = ''RName_10usr'' then ARM_Monadic.RName_10usr
    else if x = ''RName_10fiq'' then ARM_Monadic.RName_10fiq
    else if x = ''RName_11usr'' then ARM_Monadic.RName_11usr
    else if x = ''RName_11fiq'' then ARM_Monadic.RName_11fiq
    else if x = ''RName_12usr'' then ARM_Monadic.RName_12usr
    else if x = ''RName_12fiq'' then ARM_Monadic.RName_12fiq
    else if x = ''RName_SPusr'' then ARM_Monadic.RName_SPusr
    else if x = ''RName_SPfiq'' then ARM_Monadic.RName_SPfiq
    else if x = ''RName_SPirq'' then ARM_Monadic.RName_SPirq
    else if x = ''RName_SPsvc'' then ARM_Monadic.RName_SPsvc
    else if x = ''RName_SPabt'' then ARM_Monadic.RName_SPabt
    else if x = ''RName_SPund'' then ARM_Monadic.RName_SPund
    else if x = ''RName_SPmon'' then ARM_Monadic.RName_SPmon
    else if x = ''RName_SPhyp'' then ARM_Monadic.RName_SPhyp
    else if x = ''RName_LRusr'' then ARM_Monadic.RName_LRusr
    else if x = ''RName_LRfiq'' then ARM_Monadic.RName_LRfiq
    else if x = ''RName_LRirq'' then ARM_Monadic.RName_LRirq
    else if x = ''RName_LRsvc'' then ARM_Monadic.RName_LRsvc
    else if x = ''RName_LRabt'' then ARM_Monadic.RName_LRabt
    else if x = ''RName_LRund'' then ARM_Monadic.RName_LRund
    else if x = ''RName_LRmon'' then ARM_Monadic.RName_LRmon
    else if x = ''RName_PC'' then ARM_Monadic.RName_PC
    else HOL.undefined)"

fun string_to_SRType :: "string \<Rightarrow> SRType" where
  "string_to_SRType x =
   (if x = ''SRType_LSL'' then ARM_Monadic.SRType_LSL
    else if x = ''SRType_LSR'' then ARM_Monadic.SRType_LSR
    else if x = ''SRType_ASR'' then ARM_Monadic.SRType_ASR
    else if x = ''SRType_ROR'' then ARM_Monadic.SRType_ROR
    else if x = ''SRType_RRX'' then ARM_Monadic.SRType_RRX
    else HOL.undefined)"

fun string_to_VFPNegMul :: "string \<Rightarrow> VFPNegMul" where
  "string_to_VFPNegMul x =
   (if x = ''VFPNegMul_VNMLA'' then ARM_Monadic.VFPNegMul_VNMLA
    else if x = ''VFPNegMul_VNMLS'' then ARM_Monadic.VFPNegMul_VNMLS
    else if x = ''VFPNegMul_VNMUL'' then ARM_Monadic.VFPNegMul_VNMUL
    else HOL.undefined)"

fun boolify'3 :: "3 word \<Rightarrow> (bool \<times> bool \<times> bool)" where
  "boolify'3 w =
   (case to_bl w of
     [b0,b1,b2] \<Rightarrow>
     (b0,b1,b2))"

fun boolify'4 :: "4 word \<Rightarrow> (bool \<times> bool \<times> bool \<times> bool)" where
  "boolify'4 w =
   (case to_bl w of
     [b0,b1,b2,b3] \<Rightarrow>
     (b0,b1,b2,b3))"

fun boolify'8 :: "8 word \<Rightarrow>
  (bool \<times>
   bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool)" where
  "boolify'8 w =
   (case to_bl w of
     [b0,b1,b2,b3,b4,b5,b6,b7] \<Rightarrow>
     (b0,b1,b2,b3,b4,b5,b6,b7))"

fun boolify'16 :: "16 word \<Rightarrow>
  (bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool)" where
  "boolify'16 w =
   (case to_bl w of
     [b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15] \<Rightarrow>
     (b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15))"

fun boolify'28 :: "28 word \<Rightarrow>
  (bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times>
   bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool)" where
  "boolify'28 w =
   (case to_bl w of
     [b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,
      b26,b27] \<Rightarrow>
     (b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,
      b26,b27))"



definition
  raise'exception :: "exception \<Rightarrow> 'b state_scheme \<Rightarrow> 'a \<times> 'b state_scheme"
where
"raise'exception \<equiv> \<lambda>e. do {
                        v \<leftarrow> read_state exception;
                         do {
                            b \<leftarrow> return (v = NoException);
                            if b then update_state (exception_update (\<lambda>_. e)) else return ()
                          };
                        return HOL.undefined
                      }"



definition
  ArchVersion :: "unit \<Rightarrow> 'b state_scheme \<Rightarrow> nat \<times> 'b state_scheme"
where
  "ArchVersion \<equiv> \<lambda>_. do {
                    x \<leftarrow> read_state Architecture;
                    return (case x of ARMv4 \<Rightarrow> 4 | ARMv4T \<Rightarrow> 4 | ARMv5T \<Rightarrow> 5 | ARMv5TE \<Rightarrow> 5 | ARMv7_A \<Rightarrow> 7 | ARMv7_R \<Rightarrow> 7 | _ \<Rightarrow> 6)
                  }"



definition
  HaveDSPSupport :: "unit \<Rightarrow> 'b state_scheme \<Rightarrow> bool \<times> 'b state_scheme"
where
  "HaveDSPSupport \<equiv> \<lambda>_. do {
                       v \<leftarrow> read_state Architecture;
                       v \<leftarrow> return (v \<in> set [ARMv4, ARMv4T, ARMv5T]);
                       return (\<not> v)
                     }"


definition
  HaveThumb2 :: "unit \<Rightarrow> 'b state_scheme \<Rightarrow> bool \<times> 'b state_scheme"
where
  "HaveThumb2 \<equiv> \<lambda>_. do {
                   v \<leftarrow> read_state Architecture;
                   return (v \<in> set [ARMv6T2, ARMv7_A, ARMv7_R])
                 }"



definition
  HaveThumbEE :: "unit \<Rightarrow> 'b state_scheme \<Rightarrow> bool \<times> 'b state_scheme"
where
  "HaveThumbEE \<equiv> \<lambda>_. do {
                    v \<leftarrow> read_state Architecture;
                    b \<leftarrow> return (v = ARMv7_A);
                    if b then return True else do {
                                                 v \<leftarrow> read_state Architecture;
                                                 b \<leftarrow> return (v = ARMv7_R);
                                                 if b then do {
                                                             v \<leftarrow> read_state Extensions;
                                                             return (Extension_ThumbEE \<in> v)
                                                           }
                                                 else return False
                                               }
                  }"



definition
  HaveMPExt :: "unit \<Rightarrow> 'b state_scheme \<Rightarrow> bool \<times> 'b state_scheme"
where
  "HaveMPExt \<equiv> \<lambda>_. do {
                  v \<leftarrow> ArchVersion ();
                  b \<leftarrow> return (7 \<le> v);
                  if b then do {
                              v \<leftarrow> read_state Extensions;
                              return (Extension_Multiprocessing \<in> v)
                            }
                  else return False
                }"


definition
  HaveSecurityExt:: "unit \<Rightarrow> 'b state_scheme \<Rightarrow> bool \<times> 'b state_scheme"
where
  "HaveSecurityExt \<equiv> \<lambda>_. do {
                        v \<leftarrow> read_state Architecture;
                        b \<leftarrow> return (v \<in> set [ARMv6K, ARMv7_A]);
                        if b then do {
                                    v \<leftarrow> read_state Extensions;
                                    return (Extension_Security \<in> v)
                                  }
                        else return False
                      }"


definition
  HaveVirtExt:: "unit \<Rightarrow> 'b state_scheme \<Rightarrow> bool \<times> 'b state_scheme"
where
  "HaveVirtExt\<equiv> \<lambda>_. do {
                    v \<leftarrow> ArchVersion ();
                    b \<leftarrow> return (7 \<le> v);
                    if b then do {
                                v \<leftarrow> read_state Extensions;
                                return (Extension_Virtualization \<in> v)
                              }
                    else return False
                  }"




ML \<open>
local 
open L3 
in
val () = def
  ("rec'PSR",
   close
     (var_w("x",32),
      record
        ("PSR",
         [bop(Bit,var_w("x",32),ln 8),bop(Bit,var_w("x",32),ln 29),bop(Bit,var_w("x",32),ln 9),
          bop(Bit,var_w("x",32),ln 6),ex(var_w("x",32),ln 19,ln 16,w4),bop(Bit,var_w("x",32),ln 7),
          cc[ex(var_w("x",32),ln 15,ln 10,(Word_Lib.mk_wordT 6)),
             ex(var_w("x",32),ln 26,ln 25,(Word_Lib.mk_wordT 2))],bop(Bit,var_w("x",32),ln 24),
          ex(var_w("x",32),ln 4,ln 0,(Word_Lib.mk_wordT 5)),bop(Bit,var_w("x",32),ln 31),
          bop(Bit,var_w("x",32),ln 27),bop(Bit,var_w("x",32),ln 5),bop(Bit,var_w("x",32),ln 28),
          bop(Bit,var_w("x",32),ln 30),ex(var_w("x",32),ln 23,ln 20,w4)],@{theory})))
end
\<close>



ML \<open>
local 
open L3 
in
val () = def
  ("reg'PSR",
   close
     (var("x",@{typ PSR}),
      let'
        (var_w("IT",8),call("PSR.IT",w8,var("x",@{typ PSR}),@{theory}),
         cc[mop(Cast w1,call("PSR.N",HOLogic.boolT,var("x",@{typ PSR}),@{theory})),
            mop(Cast w1,call("PSR.Z",HOLogic.boolT,var("x",@{typ PSR}),@{theory})),
            mop(Cast w1,call("PSR.C",HOLogic.boolT,var("x",@{typ PSR}),@{theory})),
            mop(Cast w1,call("PSR.V",HOLogic.boolT,var("x",@{typ PSR}),@{theory})),
            mop(Cast w1,call("PSR.Q",HOLogic.boolT,var("x",@{typ PSR}),@{theory})),
            ex(var_w("IT",8),ln 1,ln 0,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("PSR.J",HOLogic.boolT,var("x",@{typ PSR}),@{theory})),
            call("PSR.psr'rst",w4,var("x",@{typ PSR}),@{theory}),
            call("PSR.GE",w4,var("x",@{typ PSR}),@{theory}),
            ex(var_w("IT",8),ln 7,ln 2,(Word_Lib.mk_wordT 6)),
            mop(Cast w1,call("PSR.E",HOLogic.boolT,var("x",@{typ PSR}),@{theory})),
            mop(Cast w1,call("PSR.A",HOLogic.boolT,var("x",@{typ PSR}),@{theory})),
            mop(Cast w1,call("PSR.I",HOLogic.boolT,var("x",@{typ PSR}),@{theory})),
            mop(Cast w1,call("PSR.F",HOLogic.boolT,var("x",@{typ PSR}),@{theory})),
            mop(Cast w1,call("PSR.T",HOLogic.boolT,var("x",@{typ PSR}),@{theory})),
            call("PSR.M",(Word_Lib.mk_wordT 5),var("x",@{typ PSR}),@{theory})])))
end
\<close>

definition
  write'rec'PSR :: "32 word \<times> PSR \<Rightarrow> 32 word"
where
  "write'rec'PSR \<equiv> \<lambda>(a, x). reg'PSR x"



ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'PSR",
   close(tp[var_a @{typ PSR},var_w("x",32)],call("rec'PSR",@{typ PSR},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'SCTLR",
   close
     (var_w("x",32),
      record
        ("SCTLR",
         [bop(Bit,var_w("x",32),ln 1),bop(Bit,var_w("x",32),ln 7),bop(Bit,var_w("x",32),ln 17),
          bop(Bit,var_w("x",32),ln 2),bop(Bit,var_w("x",32),ln 19),bop(Bit,var_w("x",32),ln 25),
          bop(Bit,var_w("x",32),ln 21),bop(Bit,var_w("x",32),ln 12),bop(Bit,var_w("x",32),ln 31),
          bop(Bit,var_w("x",32),ln 0),bop(Bit,var_w("x",32),ln 27),bop(Bit,var_w("x",32),ln 14),
          bop(Bit,var_w("x",32),ln 10),bop(Bit,var_w("x",32),ln 30),bop(Bit,var_w("x",32),ln 22),
          bop(Bit,var_w("x",32),ln 13),bop(Bit,var_w("x",32),ln 24),bop(Bit,var_w("x",32),ln 11),
          cc[ex(var_w("x",32),ln 6,ln 3,w4),ex(var_w("x",32),ln 9,ln 8,(Word_Lib.mk_wordT 2)),
             ex(var_w("x",32),ln 16,ln 15,(Word_Lib.mk_wordT 2)),ex(var_w("x",32),ln 18,ln 18,w1),
             ex(var_w("x",32),ln 20,ln 20,w1),ex(var_w("x",32),ln 23,ln 23,w1),
             ex(var_w("x",32),ln 26,ln 26,w1),ex(var_w("x",32),ln 29,ln 28,(Word_Lib.mk_wordT 2))]],
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'SCTLR",
   close
     (var("x",@{typ SCTLR}),
      let'
        (var_w("sctlr'rst",14),
         call("SCTLR.sctlr'rst",(Word_Lib.mk_wordT 14),var("x",@{typ SCTLR}),@{theory}),
         cc[mop(Cast w1,call("SCTLR.IE",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            mop(Cast w1,call("SCTLR.TE",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            ex(var_w("sctlr'rst",14),ln 1,ln 0,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("SCTLR.NMFI",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            ex(var_w("sctlr'rst",14),ln 2,ln 2,w1),
            mop(Cast w1,call("SCTLR.EE",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            mop(Cast w1,call("SCTLR.VE",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            ex(var_w("sctlr'rst",14),ln 3,ln 3,w1),
            mop(Cast w1,call("SCTLR.U",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            mop(Cast w1,call("SCTLR.FI",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            ex(var_w("sctlr'rst",14),ln 4,ln 4,w1),
            mop(Cast w1,call("SCTLR.DZ",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            ex(var_w("sctlr'rst",14),ln 5,ln 5,w1),
            mop(Cast w1,call("SCTLR.BR",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            ex(var_w("sctlr'rst",14),ln 7,ln 6,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("SCTLR.RR",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            mop(Cast w1,call("SCTLR.V",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            mop(Cast w1,call("SCTLR.I",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            mop(Cast w1,call("SCTLR.Z",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            mop(Cast w1,call("SCTLR.SW",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            ex(var_w("sctlr'rst",14),ln 9,ln 8,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("SCTLR.B",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            ex(var_w("sctlr'rst",14),ln 13,ln 10,w4),
            mop(Cast w1,call("SCTLR.C",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            mop(Cast w1,call("SCTLR.A",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory})),
            mop(Cast w1,call("SCTLR.M",HOLogic.boolT,var("x",@{typ SCTLR}),@{theory}))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'SCTLR",
   close(tp[var_a w32,var("x",@{typ SCTLR})],call("reg'SCTLR",w32,var("x",@{typ SCTLR}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'SCTLR",
   close
     (tp[var_a @{typ SCTLR},var_w("x",32)],call("rec'SCTLR",@{typ SCTLR},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'HSCTLR",
   close
     (var_w("x",32),
      record
        ("HSCTLR",
         [bop(Bit,var_w("x",32),ln 1),bop(Bit,var_w("x",32),ln 2),bop(Bit,var_w("x",32),ln 5),
          bop(Bit,var_w("x",32),ln 25),bop(Bit,var_w("x",32),ln 21),bop(Bit,var_w("x",32),ln 12),
          bop(Bit,var_w("x",32),ln 0),bop(Bit,var_w("x",32),ln 30),bop(Bit,var_w("x",32),ln 19),
          cc[ex(var_w("x",32),ln 4,ln 3,(Word_Lib.mk_wordT 2)),
             ex(var_w("x",32),ln 11,ln 6,(Word_Lib.mk_wordT 6)),
             ex(var_w("x",32),ln 18,ln 13,(Word_Lib.mk_wordT 6)),ex(var_w("x",32),ln 20,ln 20,w1),
             ex(var_w("x",32),ln 24,ln 22,(Word_Lib.mk_wordT 3)),ex(var_w("x",32),ln 29,ln 26,w4),
             ex(var_w("x",32),ln 31,ln 31,w1)]],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'HSCTLR",
   close
     (var("x",@{typ HSCTLR}),
      let'
        (var_w("hsctlr'rst",23),
         call("HSCTLR.hsctlr'rst",(Word_Lib.mk_wordT 23),var("x",@{typ HSCTLR}),@{theory}),
         cc[ex(var_w("hsctlr'rst",23),ln 0,ln 0,w1),
            mop(Cast w1,call("HSCTLR.TE",HOLogic.boolT,var("x",@{typ HSCTLR}),@{theory})),
            ex(var_w("hsctlr'rst",23),ln 4,ln 1,w4),
            mop(Cast w1,call("HSCTLR.EE",HOLogic.boolT,var("x",@{typ HSCTLR}),@{theory})),
            ex(var_w("hsctlr'rst",23),ln 7,ln 5,(Word_Lib.mk_wordT 3)),
            mop(Cast w1,call("HSCTLR.FI",HOLogic.boolT,var("x",@{typ HSCTLR}),@{theory})),
            ex(var_w("hsctlr'rst",23),ln 8,ln 8,w1),
            mop(Cast w1,call("HSCTLR.WXN",HOLogic.boolT,var("x",@{typ HSCTLR}),@{theory})),
            ex(var_w("hsctlr'rst",23),ln 14,ln 9,(Word_Lib.mk_wordT 6)),
            mop(Cast w1,call("HSCTLR.I",HOLogic.boolT,var("x",@{typ HSCTLR}),@{theory})),
            ex(var_w("hsctlr'rst",23),ln 20,ln 15,(Word_Lib.mk_wordT 6)),
            mop(Cast w1,call("HSCTLR.CP15BEN",HOLogic.boolT,var("x",@{typ HSCTLR}),@{theory})),
            ex(var_w("hsctlr'rst",23),ln 22,ln 21,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("HSCTLR.C",HOLogic.boolT,var("x",@{typ HSCTLR}),@{theory})),
            mop(Cast w1,call("HSCTLR.A",HOLogic.boolT,var("x",@{typ HSCTLR}),@{theory})),
            mop(Cast w1,call("HSCTLR.M",HOLogic.boolT,var("x",@{typ HSCTLR}),@{theory}))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'HSCTLR",
   close
     (tp[var_a w32,var("x",@{typ HSCTLR})],call("reg'HSCTLR",w32,var("x",@{typ HSCTLR}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'HSCTLR",
   close
     (tp[var_a @{typ HSCTLR},var_w("x",32)],call("rec'HSCTLR",@{typ HSCTLR},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'HSR",
   close
     (var_w("x",32),
      record
        ("HSR",
         [ex(var_w("x",32),ln 31,ln 26,(Word_Lib.mk_wordT 6)),bop(Bit,var_w("x",32),ln 25),
          ex(var_w("x",32),ln 24,ln 0,(Word_Lib.mk_wordT 25))],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'HSR",
   close
     (var("x",@{typ HSR}),
      cc[call("HSR.EC",(Word_Lib.mk_wordT 6),var("x",@{typ HSR}),@{theory}),
         mop(Cast w1,call("HSR.IL",HOLogic.boolT,var("x",@{typ HSR}),@{theory})),
         call("HSR.ISS",(Word_Lib.mk_wordT 25),var("x",@{typ HSR}),@{theory})]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'HSR",
   close(tp[var_a w32,var("x",@{typ HSR})],call("reg'HSR",w32,var("x",@{typ HSR}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'HSR",
   close(tp[var_a @{typ HSR},var_w("x",32)],call("rec'HSR",@{typ HSR},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'SCR",
   close
     (var_w("x",32),
      record
        ("SCR",
         [bop(Bit,var_w("x",32),ln 5),bop(Bit,var_w("x",32),ln 3),bop(Bit,var_w("x",32),ln 2),
          bop(Bit,var_w("x",32),ln 4),bop(Bit,var_w("x",32),ln 8),bop(Bit,var_w("x",32),ln 1),
          bop(Bit,var_w("x",32),ln 0),bop(Bit,var_w("x",32),ln 7),bop(Bit,var_w("x",32),ln 9),
          bop(Bit,var_w("x",32),ln 6),ex(var_w("x",32),ln 31,ln 10,(Word_Lib.mk_wordT 22))],
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'SCR",
   close
     (var("x",@{typ SCR}),
      cc[call("SCR.scr'rst",(Word_Lib.mk_wordT 22),var("x",@{typ SCR}),@{theory}),
         mop(Cast w1,call("SCR.SIF",HOLogic.boolT,var("x",@{typ SCR}),@{theory})),
         mop(Cast w1,call("SCR.HCE",HOLogic.boolT,var("x",@{typ SCR}),@{theory})),
         mop(Cast w1,call("SCR.SCD",HOLogic.boolT,var("x",@{typ SCR}),@{theory})),
         mop(Cast w1,call("SCR.nET",HOLogic.boolT,var("x",@{typ SCR}),@{theory})),
         mop(Cast w1,call("SCR.AW",HOLogic.boolT,var("x",@{typ SCR}),@{theory})),
         mop(Cast w1,call("SCR.FW",HOLogic.boolT,var("x",@{typ SCR}),@{theory})),
         mop(Cast w1,call("SCR.EA",HOLogic.boolT,var("x",@{typ SCR}),@{theory})),
         mop(Cast w1,call("SCR.FIQ",HOLogic.boolT,var("x",@{typ SCR}),@{theory})),
         mop(Cast w1,call("SCR.IRQ",HOLogic.boolT,var("x",@{typ SCR}),@{theory})),
         mop(Cast w1,call("SCR.NS",HOLogic.boolT,var("x",@{typ SCR}),@{theory}))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'SCR",
   close(tp[var_a w32,var("x",@{typ SCR})],call("reg'SCR",w32,var("x",@{typ SCR}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'SCR",
   close(tp[var_a @{typ SCR},var_w("x",32)],call("rec'SCR",@{typ SCR},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'NSACR",
   close
     (var_w("x",32),
      record
        ("NSACR",
         [bop(Bit,var_w("x",32),ln 15),bop(Bit,var_w("x",32),ln 14),bop(Bit,var_w("x",32),ln 20),
          bop(Bit,var_w("x",32),ln 19),ex(var_w("x",32),ln 13,ln 0,(Word_Lib.mk_wordT 14)),
          cc[ex(var_w("x",32),ln 18,ln 16,(Word_Lib.mk_wordT 3)),
             ex(var_w("x",32),ln 31,ln 21,(Word_Lib.mk_wordT 11))]],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'NSACR",
   close
     (var("x",@{typ NSACR}),
      let'
        (var_w("nsacr'rst",14),
         call("NSACR.nsacr'rst",(Word_Lib.mk_wordT 14),var("x",@{typ NSACR}),@{theory}),
         cc[ex(var_w("nsacr'rst",14),ln 10,ln 0,(Word_Lib.mk_wordT 11)),
            mop(Cast w1,call("NSACR.NSTRCDIS",HOLogic.boolT,var("x",@{typ NSACR}),@{theory})),
            mop(Cast w1,call("NSACR.RFR",HOLogic.boolT,var("x",@{typ NSACR}),@{theory})),
            ex(var_w("nsacr'rst",14),ln 13,ln 11,(Word_Lib.mk_wordT 3)),
            mop(Cast w1,call("NSACR.NSASEDIS",HOLogic.boolT,var("x",@{typ NSACR}),@{theory})),
            mop(Cast w1,call("NSACR.NSD32DIS",HOLogic.boolT,var("x",@{typ NSACR}),@{theory})),
            call("NSACR.cp",(Word_Lib.mk_wordT 14),var("x",@{typ NSACR}),@{theory})])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'NSACR",
   close(tp[var_a w32,var("x",@{typ NSACR})],call("reg'NSACR",w32,var("x",@{typ NSACR}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'NSACR",
   close
     (tp[var_a @{typ NSACR},var_w("x",32)],call("rec'NSACR",@{typ NSACR},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'HCR",
   close
     (var_w("x",32),
      record
        ("HCR",
         [bop(Bit,var_w("x",32),ln 5),ex(var_w("x",32),ln 11,ln 10,(Word_Lib.mk_wordT 2)),
          bop(Bit,var_w("x",32),ln 12),bop(Bit,var_w("x",32),ln 9),bop(Bit,var_w("x",32),ln 3),
          bop(Bit,var_w("x",32),ln 4),bop(Bit,var_w("x",32),ln 2),bop(Bit,var_w("x",32),ln 1),
          bop(Bit,var_w("x",32),ln 21),bop(Bit,var_w("x",32),ln 27),
          ex(var_w("x",32),ln 18,ln 15,w4),bop(Bit,var_w("x",32),ln 20),
          bop(Bit,var_w("x",32),ln 23),bop(Bit,var_w("x",32),ln 24),bop(Bit,var_w("x",32),ln 19),
          bop(Bit,var_w("x",32),ln 22),bop(Bit,var_w("x",32),ln 25),bop(Bit,var_w("x",32),ln 26),
          bop(Bit,var_w("x",32),ln 14),bop(Bit,var_w("x",32),ln 13),bop(Bit,var_w("x",32),ln 8),
          bop(Bit,var_w("x",32),ln 6),bop(Bit,var_w("x",32),ln 7),bop(Bit,var_w("x",32),ln 0),
          ex(var_w("x",32),ln 31,ln 28,w4)],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'HCR",
   close
     (var("x",@{typ HCR}),
      cc[call("HCR.hcr'rst",w4,var("x",@{typ HCR}),@{theory}),
         mop(Cast w1,call("HCR.TGE",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.TVM",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.TTLB",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.TPU",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.TPC",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.TSW",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.TAC",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.TIDCP",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.TSC",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         call("HCR.TID",w4,var("x",@{typ HCR}),@{theory}),
         mop(Cast w1,call("HCR.TWE",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.TWI",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.DC",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         call("HCR.BSU",(Word_Lib.mk_wordT 2),var("x",@{typ HCR}),@{theory}),
         mop(Cast w1,call("HCR.FB",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.VA",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.VI",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.VF",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.AMO",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.IMO",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.FMO",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.PTW",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.SWIO",HOLogic.boolT,var("x",@{typ HCR}),@{theory})),
         mop(Cast w1,call("HCR.VM",HOLogic.boolT,var("x",@{typ HCR}),@{theory}))]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'HCR",
   close(tp[var_a w32,var("x",@{typ HCR})],call("reg'HCR",w32,var("x",@{typ HCR}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'HCR",
   close(tp[var_a @{typ HCR},var_w("x",32)],call("rec'HCR",@{typ HCR},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("ProcessorID",close(var_a HOLogic.unitT,li 0))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("IsExternalAbort",close(var_a HOLogic.unitT,lx HOLogic.boolT))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("IsSecure",
   close
     (var_a HOLogic.unitT,
      mb(call("HaveSecurityExt",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,@{theory}),
         close
           (var_b"v",
            mb(mu(mop(Not,var_b"v"),qTy),
               close
                 (var_b"b",
                  ite(var_b"b",mu(lt,qTy),
                      mb(mr(close
                              (var("s",qTy),call("state.CP15",@{typ CP15},var("s",qTy),@{theory}))),
                         close
                           (var("v",@{typ CP15}),
                            mb(mb(mb(mu(call("CP15.SCR",@{typ SCR},var("v",@{typ CP15}),@{theory}),
                                        qTy),
                                     close
                                       (var("v",@{typ SCR}),
                                        mu(call
                                             ("SCR.NS",HOLogic.boolT,var("v",@{typ SCR}),@{theory}),
                                           qTy))),close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                               close
                                 (var_b"b",
                                  ite(var_b"b",mu(lt,qTy),
                                      mb(mr(close
                                              (var("s",qTy),
                                               call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                                         close
                                           (var("v",@{typ PSR}),
                                            mb(mu(call
                                                    ("PSR.M",(Word_Lib.mk_wordT 5),
                                                     var("v",@{typ PSR}),@{theory}),qTy),
                                               close(var_w("v",5),mu(eq(var_w("v",5),lw(22,5)),qTy)))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("UnalignedSupport",
   close
     (var_a HOLogic.unitT,
      mb(call("ArchVersion",@{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,@{theory}),
         close
           (var_n"v",
            mb(mr(close(var("s",qTy),call("state.CP15",@{typ CP15},var("s",qTy),@{theory}))),
               close
                 (var("v0",@{typ CP15}),
                  mb(mb(mb(mu(call("CP15.SCTLR",@{typ SCTLR},var("v0",@{typ CP15}),@{theory}),qTy),
                           close
                             (var("v",@{typ SCTLR}),
                              mu(call("SCTLR.U",HOLogic.boolT,var("v",@{typ SCTLR}),@{theory}),qTy))),
                        close(var_b"v0",mu(bop(And,eq(var_n"v",ln 6),var_b"v0"),qTy))),
                     close(var_b"v0",mu(bop(Or,bop(Ge,var_n"v",ln 7),var_b"v0"),qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("BadMode",
   close
     (var_w("mode",5),
      itb([(eq(var_w("mode",5),lw(16,5)),mu(lf,qTy)),(eq(var_w("mode",5),lw(17,5)),mu(lf,qTy)),
           (eq(var_w("mode",5),lw(18,5)),mu(lf,qTy)),(eq(var_w("mode",5),lw(19,5)),mu(lf,qTy)),
           (eq(var_w("mode",5),lw(22,5)),
            mb(call
                 ("HaveSecurityExt",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,@{theory}),
               close(var_b"v",mu(mop(Not,var_b"v"),qTy)))),
           (eq(var_w("mode",5),lw(23,5)),mu(lf,qTy)),
           (eq(var_w("mode",5),lw(26,5)),
            mb(call("HaveVirtExt",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,@{theory}),
               close(var_b"v",mu(mop(Not,var_b"v"),qTy)))),
           (eq(var_w("mode",5),lw(27,5)),mu(lf,qTy)),(eq(var_w("mode",5),lw(31,5)),mu(lf,qTy))],
          mu(lt,qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("CurrentModeIsNotUser",
   close
     (var_a HOLogic.unitT,
      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
         close
           (var("v",@{typ PSR}),
            mb(mb(mb(mu(call("PSR.M",(Word_Lib.mk_wordT 5),var("v",@{typ PSR}),@{theory}),qTy),
                     close
                       (var_w("v",5),
                        call
                          ("BadMode",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                           var_w("v",5),@{theory}))),
                  close
                    (var_b"b",
                     ite(var_b"b",
                         mb(mr(close
                                 (var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                            close
                              (var("v",@{typ PSR}),
                               mb(mb(mb(mb(mu(call
                                                ("PSR.M",(Word_Lib.mk_wordT 5),var("v",@{typ PSR}),
                                                 @{theory}),qTy),
                                           close
                                             (var_w("v",5),
                                              mu(mop(Cast(@{typ string}),var_w("v",5)),qTy))),
                                        close(var_s"v",mu(cc[ls"BadMode: ",var_s"v"],qTy))),
                                     close
                                       (var_s"v",
                                        mu(call
                                             ("exception.UNPREDICTABLE",@{typ exception},var_s"v",
                                              @{theory}),qTy))),
                                  close
                                    (var("v",@{typ exception}),
                                     call
                                       ("raise'exception",
                                        @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                        var("v",@{typ exception}),@{theory}))))),mu(lu,qTy)))),
               close
                 (var_a HOLogic.unitT,
                  mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                     close
                       (var("v",@{typ PSR}),
                        mb(mb(mu(call("PSR.M",(Word_Lib.mk_wordT 5),var("v",@{typ PSR}),@{theory}),
                                 qTy),close(var_w("v",5),mu(eq(var_w("v",5),lw(16,5)),qTy))),
                           close(var_b"v",mu(mop(Not,var_b"v"),qTy)))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("CurrentModeIsUserOrSystem",
   close
     (var_a HOLogic.unitT,
      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
         close
           (var("v",@{typ PSR}),
            mb(mb(mb(mu(call("PSR.M",(Word_Lib.mk_wordT 5),var("v",@{typ PSR}),@{theory}),qTy),
                     close
                       (var_w("v",5),
                        call
                          ("BadMode",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                           var_w("v",5),@{theory}))),
                  close
                    (var_b"b",
                     ite(var_b"b",
                         mb(mr(close
                                 (var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                            close
                              (var("v",@{typ PSR}),
                               mb(mb(mb(mb(mu(call
                                                ("PSR.M",(Word_Lib.mk_wordT 5),var("v",@{typ PSR}),
                                                 @{theory}),qTy),
                                           close
                                             (var_w("v",5),
                                              mu(mop(Cast(@{typ string}),var_w("v",5)),qTy))),
                                        close(var_s"v",mu(cc[ls"BadMode: ",var_s"v"],qTy))),
                                     close
                                       (var_s"v",
                                        mu(call
                                             ("exception.UNPREDICTABLE",@{typ exception},var_s"v",
                                              @{theory}),qTy))),
                                  close
                                    (var("v",@{typ exception}),
                                     call
                                       ("raise'exception",
                                        @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                        var("v",@{typ exception}),@{theory}))))),mu(lu,qTy)))),
               close
                 (var_a HOLogic.unitT,
                  mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                     close
                       (var("v",@{typ PSR}),
                        mb(mu(call("PSR.M",(Word_Lib.mk_wordT 5),var("v",@{typ PSR}),@{theory}),qTy),
                           close(var_w("v",5),mu(bop(In,var_w("v",5),sl[lw(16,5),lw(31,5)]),qTy)))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("CurrentModeIsHyp",
   close
     (var_a HOLogic.unitT,
      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
         close
           (var("v",@{typ PSR}),
            mb(mb(mb(mu(call("PSR.M",(Word_Lib.mk_wordT 5),var("v",@{typ PSR}),@{theory}),qTy),
                     close
                       (var_w("v",5),
                        call
                          ("BadMode",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                           var_w("v",5),@{theory}))),
                  close
                    (var_b"b",
                     ite(var_b"b",
                         mb(mr(close
                                 (var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                            close
                              (var("v",@{typ PSR}),
                               mb(mb(mb(mb(mu(call
                                                ("PSR.M",(Word_Lib.mk_wordT 5),var("v",@{typ PSR}),
                                                 @{theory}),qTy),
                                           close
                                             (var_w("v",5),
                                              mu(mop(Cast(@{typ string}),var_w("v",5)),qTy))),
                                        close(var_s"v",mu(cc[ls"BadMode: ",var_s"v"],qTy))),
                                     close
                                       (var_s"v",
                                        mu(call
                                             ("exception.UNPREDICTABLE",@{typ exception},var_s"v",
                                              @{theory}),qTy))),
                                  close
                                    (var("v",@{typ exception}),
                                     call
                                       ("raise'exception",
                                        @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                        var("v",@{typ exception}),@{theory}))))),mu(lu,qTy)))),
               close
                 (var_a HOLogic.unitT,
                  mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                     close
                       (var("v",@{typ PSR}),
                        mb(mu(call("PSR.M",(Word_Lib.mk_wordT 5),var("v",@{typ PSR}),@{theory}),qTy),
                           close(var_w("v",5),mu(eq(var_w("v",5),lw(26,5)),qTy)))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("IntegerZeroDivideTrappingEnabled",
   close
     (var_a HOLogic.unitT,
      mb(mr(close(var("s",qTy),call("state.CP15",@{typ CP15},var("s",qTy),@{theory}))),
         close
           (var("v",@{typ CP15}),
            mb(mu(call("CP15.SCTLR",@{typ SCTLR},var("v",@{typ CP15}),@{theory}),qTy),
               close
                 (var("v",@{typ SCTLR}),
                  mu(call("SCTLR.DZ",HOLogic.boolT,var("v",@{typ SCTLR}),@{theory}),qTy)))))))
end
\<close>

definition
  ISETSTATE :: "'b state_scheme \<Rightarrow> 2 word \<times> 'b state_scheme"
where
  "ISETSTATE \<equiv> do {
  v \<leftarrow> read_state CPSR;
  v \<leftarrow> do {
      v \<leftarrow> return (J v);
      return (if v then 1 else 0)
    };
  v0 \<leftarrow> read_state CPSR;
  v0 \<leftarrow> do {
      v \<leftarrow> return (T v0);
      return (if v then 1 else 0)
    };
  return (word_cat (v::1 word) (v0::1 word))
}"


ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("write'ISETSTATE",
   close
     (var_w("value",2),
      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
         close
           (var("v",@{typ PSR}),
            mb(mb(mb(mu(tp[var("v",@{typ PSR}),bop(Bit,var_w("value",2),ln 1)],qTy),
                     close
                       (var("v",@{typ "PSR \<times> bool"}),
                        mu(rupd("PSR.J",var("v",@{typ "PSR \<times> bool"}),@{theory}),qTy))),
                  close
                    (var("v",@{typ PSR}),
                     mw(close
                          (var("s",qTy),
                           rupd("state.CPSR",tp[var("s",qTy),var("v",@{typ PSR})],@{theory}))))),
               close
                 (var_a HOLogic.unitT,
                  mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                     close
                       (var("v",@{typ PSR}),
                        mb(mb(mu(tp[var("v",@{typ PSR}),bop(Bit,var_w("value",2),ln 0)],qTy),
                              close
                                (var("v",@{typ "PSR \<times> bool"}),
                                 mu(rupd("PSR.T",var("v",@{typ "PSR \<times> bool"}),@{theory}),qTy))),
                           close
                             (var("v",@{typ PSR}),
                              mw(close
                                   (var("s",qTy),
                                    rupd
                                      ("state.CPSR",tp[var("s",qTy),var("v",@{typ PSR})],@{theory})))))))))))))
end
\<close>

definition
   CurrentInstrSet ::"unit \<Rightarrow> 'b state_scheme \<Rightarrow> InstrSet \<times> 'b state_scheme"
where
  " CurrentInstrSet  \<equiv>
       \<lambda>_. do {
        x \<leftarrow> ISETSTATE;
     return
      (if x = 0 then InstrSet_ARM
       else if x = 1 then InstrSet_Thumb
            else if x = 2 then InstrSet_Jazelle else if x = 3 then InstrSet_ThumbEE else HOL.undefined)
   }"


thm CurrentInstrSet_def

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("SelectInstrSet",
   close
     (var("iset",@{typ InstrSet}),
      cs(var("iset",@{typ InstrSet}),
         [(lc("InstrSet_ARM","InstrSet",@{theory}),
           mb(call
                ("CurrentInstrSet",@{typ "'b state_scheme \<Rightarrow> (InstrSet \<times> 'b state_scheme)"},lu,
                 @{theory}),
              close
                (var("v",@{typ InstrSet}),
                 mb(mu(eq(var("v",@{typ InstrSet}),lc("InstrSet_ThumbEE","InstrSet",@{theory})),qTy),
                    close
                      (var_b"b",
                       ite(var_b"b",
                           call
                             ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                              call
                                ("exception.UNPREDICTABLE",@{typ exception},ls"SelectInstrSet",
                                 @{theory}),@{theory}),
                           call
                             ("write'ISETSTATE",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                              lw(0,2),@{theory}))))))),
          (lc("InstrSet_Thumb","InstrSet",@{theory}),
           call
             ("write'ISETSTATE",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lw(1,2),@{theory})),
          (lc("InstrSet_Jazelle","InstrSet",@{theory}),
           call
             ("write'ISETSTATE",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lw(2,2),@{theory})),
          (lc("InstrSet_ThumbEE","InstrSet",@{theory}),
           call
             ("write'ISETSTATE",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lw(3,2),@{theory}))],
         @{context})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("ITSTATE",
   mb(call("HaveThumb2",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,@{theory}),
      close
        (var_b"b",
         ite(var_b"b",
             mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                close(var("v",@{typ PSR}),mu(call("PSR.IT",w8,var("v",@{typ PSR}),@{theory}),qTy))),
             mu(lw(0,8),qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("write'ITSTATE",
   close
     (var_w("value",8),
      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
         close
           (var("v",@{typ PSR}),
            mb(mb(mu(tp[var("v",@{typ PSR}),var_w("value",8)],qTy),
                  close
                    (var("v",@{typ "PSR \<times> 8 word"}),
                     mu(rupd("PSR.IT",var("v",@{typ "PSR \<times> 8 word"}),@{theory}),qTy))),
               close
                 (var("v",@{typ PSR}),
                  mw(close
                       (var("s",qTy),
                        rupd("state.CPSR",tp[var("s",qTy),var("v",@{typ PSR})],@{theory})))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("ITAdvance",
   close
     (var_a HOLogic.unitT,
      mb(call("HaveThumb2",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,@{theory}),
         close
           (var_b"v",
            mb(ite(var_b"v",
                   mb(mr(close
                           (var("s",qTy),
                            call("state.Encoding",@{typ Encoding},var("s",qTy),@{theory}))),
                      close
                        (var("v",@{typ Encoding}),
                         mb(mu(eq(var("v",@{typ Encoding}),lc("Encoding_ARM","Encoding",@{theory})),
                               qTy),close(var_b"v",mu(mop(Not,var_b"v"),qTy))))),mu(lf,qTy)),
               close
                 (var_b"b",
                  ite(var_b"b",
                      mb(const
                           ("ITSTATE",@{typ "'b state_scheme \<Rightarrow> (8 word \<times> 'b state_scheme)"},@{theory}),
                         close
                           (var_w("v",8),
                            mb(mb(mu(ex(var_w("v",8),ln 2,ln 0,(Word_Lib.mk_wordT 3)),qTy),
                                  close(var_w("v",3),mu(eq(var_w("v",3),lw(0,3)),qTy))),
                               close
                                 (var_b"b",
                                  ite(var_b"b",
                                      call
                                        ("write'ITSTATE",
                                         @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lw(0,8),
                                         @{theory}),
                                      mb(const
                                           ("ITSTATE",
                                            @{typ "'b state_scheme \<Rightarrow> (8 word \<times> 'b state_scheme)"},
                                            @{theory}),
                                         close
                                           (var_w("w",8),
                                            mb(const
                                                 ("ITSTATE",
                                                  @{typ
                                                  "'b state_scheme \<Rightarrow> (8 word \<times> 'b state_scheme)"},
                                                  @{theory}),
                                               close
                                                 (var_w("v",8),
                                                  mb(mb(mb(mu(ex(var_w("v",8),ln 4,ln 0,
                                                                 (Word_Lib.mk_wordT 5)),qTy),
                                                           close
                                                             (var_w("v",5),
                                                              mu(bop(Lsl,var_w("v",5),ln 1),qTy))),
                                                        close
                                                          (var_w("v",5),
                                                           mu(bfi(ln 4,ln 0,var_w("v",5),
                                                                  var_w("w",8)),qTy))),
                                                     close
                                                       (var_w("v",8),
                                                        call
                                                          ("write'ITSTATE",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (unit \<times> 'b state_scheme)"},var_w("v",8),
                                                           @{theory})))))))))))),mu(lu,qTy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("InITBlock",
   close
     (var_a HOLogic.unitT,
      mb(const("ITSTATE",@{typ "'b state_scheme \<Rightarrow> (8 word \<times> 'b state_scheme)"},@{theory}),
         close
           (var_w("v",8),
            mb(mb(mu(ex(var_w("v",8),ln 3,ln 0,w4),qTy),
                  close(var_w("v",4),mu(eq(var_w("v",4),lw(0,4)),qTy))),
               close(var_b"v",mu(mop(Not,var_b"v"),qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("LastInITBlock",
   close
     (var_a HOLogic.unitT,
      mb(const("ITSTATE",@{typ "'b state_scheme \<Rightarrow> (8 word \<times> 'b state_scheme)"},@{theory}),
         close
           (var_w("v",8),
            mb(mu(ex(var_w("v",8),ln 3,ln 0,w4),qTy),
               close(var_w("v",4),mu(eq(var_w("v",4),lw(8,4)),qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("ThumbCondition",
   close
     (var_a HOLogic.unitT,
      mb(const("ITSTATE",@{typ "'b state_scheme \<Rightarrow> (8 word \<times> 'b state_scheme)"},@{theory}),
         close
           (var_w("v",8),
            mb(mu(eq(var_w("v",8),lw(0,8)),qTy),
               close
                 (var_b"b",
                  ite(var_b"b",mu(lw(14,4),qTy),
                      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                         close
                           (var("v",@{typ PSR}),
                            mb(mb(mb(mb(mu(call("PSR.IT",w8,var("v",@{typ PSR}),@{theory}),qTy),
                                        close(var_w("v",8),mu(ex(var_w("v",8),ln 3,ln 0,w4),qTy))),
                                     close(var_w("v",4),mu(eq(var_w("v",4),lw(0,4)),qTy))),
                                  close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                               close
                                 (var_b"b",
                                  ite(var_b"b",
                                      mb(mr(close
                                              (var("s",qTy),
                                               call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                                         close
                                           (var("v",@{typ PSR}),
                                            mb(mu(call("PSR.IT",w8,var("v",@{typ PSR}),@{theory}),
                                                  qTy),
                                               close
                                                 (var_w("v",8),mu(ex(var_w("v",8),ln 7,ln 4,w4),qTy))))),
                                      call
                                        ("raise'exception",
                                         @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                         call
                                           ("exception.UNPREDICTABLE",@{typ exception},
                                            ls"ThumbCondition",@{theory}),@{theory})))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("BigEndian",
   close
     (var_a HOLogic.unitT,
      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
         close
           (var("v",@{typ PSR}),mu(call("PSR.E",HOLogic.boolT,var("v",@{typ PSR}),@{theory}),qTy)))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("SetExclusiveMonitors",close(tp[var_w("address",32),var_n"n"],lu))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("ExclusiveMonitorsPass",close(tp[var_w("address",32),var_n"n"],lx HOLogic.boolT))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("ClearExclusiveLocal",close(var_i"id",lu))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("CurrentCond",
   close
     (var_a HOLogic.unitT,
      mr(close(var("s",qTy),call("state.CurrentCondition",w4,var("s",qTy),@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("ConditionPassed",
   close
     (var_a HOLogic.unitT,
      mb(call("CurrentCond",@{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,@{theory}),
         close
           (var_w("cond",4),
            mb(cs(ex(var_w("cond",4),ln 3,ln 1,(Word_Lib.mk_wordT 3)),
                  [(var_w("v",3),
                    itb([(eq(var_w("v",3),lw(0,3)),
                          mb(mr(close
                                  (var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                             close
                               (var("v",@{typ PSR}),
                                mu(call("PSR.Z",HOLogic.boolT,var("v",@{typ PSR}),@{theory}),qTy)))),
                         (eq(var_w("v",3),lw(1,3)),
                          mb(mr(close
                                  (var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                             close
                               (var("v",@{typ PSR}),
                                mu(call("PSR.C",HOLogic.boolT,var("v",@{typ PSR}),@{theory}),qTy)))),
                         (eq(var_w("v",3),lw(2,3)),
                          mb(mr(close
                                  (var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                             close
                               (var("v",@{typ PSR}),
                                mu(call("PSR.N",HOLogic.boolT,var("v",@{typ PSR}),@{theory}),qTy)))),
                         (eq(var_w("v",3),lw(3,3)),
                          mb(mr(close
                                  (var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                             close
                               (var("v",@{typ PSR}),
                                mu(call("PSR.V",HOLogic.boolT,var("v",@{typ PSR}),@{theory}),qTy)))),
                         (eq(var_w("v",3),lw(4,3)),
                          mb(mr(close
                                  (var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                             close
                               (var("v",@{typ PSR}),
                                mb(mu(call("PSR.C",HOLogic.boolT,var("v",@{typ PSR}),@{theory}),qTy),
                                   close
                                     (var_b"b",
                                      ite(var_b"b",
                                          mb(mr(close
                                                  (var("s",qTy),
                                                   call
                                                     ("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                                             close
                                               (var("v",@{typ PSR}),
                                                mb(mu(call
                                                        ("PSR.Z",HOLogic.boolT,var("v",@{typ PSR}),
                                                         @{theory}),qTy),
                                                   close(var_b"v",mu(mop(Not,var_b"v"),qTy))))),
                                          mu(lf,qTy))))))),
                         (eq(var_w("v",3),lw(5,3)),
                          mb(mr(close
                                  (var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                             close
                               (var("v",@{typ PSR}),
                                mb(mu(call("PSR.N",HOLogic.boolT,var("v",@{typ PSR}),@{theory}),qTy),
                                   close
                                     (var_b"v",
                                      mb(mr(close
                                              (var("s",qTy),
                                               call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                                         close
                                           (var("v0",@{typ PSR}),
                                            mb(mu(call
                                                    ("PSR.V",HOLogic.boolT,var("v0",@{typ PSR}),
                                                     @{theory}),qTy),
                                               close(var_b"v0",mu(eq(var_b"v",var_b"v0"),qTy)))))))))),
                         (eq(var_w("v",3),lw(6,3)),
                          mb(mr(close
                                  (var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                             close
                               (var("v",@{typ PSR}),
                                mb(mb(mu(call("PSR.N",HOLogic.boolT,var("v",@{typ PSR}),@{theory}),
                                         qTy),
                                      close
                                        (var_b"v",
                                         mb(mr(close
                                                 (var("s",qTy),
                                                  call
                                                    ("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                                            close
                                              (var("v0",@{typ PSR}),
                                               mb(mu(call
                                                       ("PSR.V",HOLogic.boolT,var("v0",@{typ PSR}),
                                                        @{theory}),qTy),
                                                  close(var_b"v0",mu(eq(var_b"v",var_b"v0"),qTy))))))),
                                   close
                                     (var_b"b",
                                      ite(var_b"b",
                                          mb(mr(close
                                                  (var("s",qTy),
                                                   call
                                                     ("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                                             close
                                               (var("v",@{typ PSR}),
                                                mb(mu(call
                                                        ("PSR.Z",HOLogic.boolT,var("v",@{typ PSR}),
                                                         @{theory}),qTy),
                                                   close(var_b"v",mu(mop(Not,var_b"v"),qTy))))),
                                          mu(lf,qTy))))))),(eq(var_w("v",3),lw(7,3)),mu(lt,qTy))],
                        lx(@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"})))],@{context}),
               close
                 (var_b"result",
                  mu(ite(bop(And,bop(Bit,var_w("cond",4),ln 0),mop(Not,eq(var_w("cond",4),lw(15,4)))),
                         mop(Not,var_b"result"),var_b"result"),qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("SPSR",
   mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
      close
        (var("v",@{typ PSR}),
         mb(mb(mu(call("PSR.M",(Word_Lib.mk_wordT 5),var("v",@{typ PSR}),@{theory}),qTy),
               close
                 (var_w("v",5),
                  call
                    ("BadMode",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},var_w("v",5),
                     @{theory}))),
            close
              (var_b"b",
               ite(var_b"b",
                   mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                      close
                        (var("v",@{typ PSR}),
                         mb(mb(mb(mb(mu(call
                                          ("PSR.M",(Word_Lib.mk_wordT 5),var("v",@{typ PSR}),
                                           @{theory}),qTy),
                                     close
                                       (var_w("v",5),mu(mop(Cast(@{typ string}),var_w("v",5)),qTy))),
                                  close(var_s"v",mu(cc[ls"SPSR: BadMode: ",var_s"v"],qTy))),
                               close
                                 (var_s"v",
                                  mu(call
                                       ("exception.UNPREDICTABLE",@{typ exception},var_s"v",
                                        @{theory}),qTy))),
                            close
                              (var("v",@{typ exception}),
                               call
                                 ("raise'exception",
                                  @{typ "'b state_scheme \<Rightarrow> (PSR \<times> 'b state_scheme)"},
                                  var("v",@{typ exception}),@{theory}))))),
                   mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                      close
                        (var("v",@{typ PSR}),
                         mb(mu(call("PSR.M",(Word_Lib.mk_wordT 5),var("v",@{typ PSR}),@{theory}),qTy),
                            close
                              (var_w("x",5),
                               itb([(eq(var_w("x",5),lw(17,5)),
                                     mr(close
                                          (var("s",qTy),
                                           call("state.SPSR_fiq",@{typ PSR},var("s",qTy),@{theory})))),
                                    (eq(var_w("x",5),lw(18,5)),
                                     mr(close
                                          (var("s",qTy),
                                           call("state.SPSR_irq",@{typ PSR},var("s",qTy),@{theory})))),
                                    (eq(var_w("x",5),lw(19,5)),
                                     mr(close
                                          (var("s",qTy),
                                           call("state.SPSR_svc",@{typ PSR},var("s",qTy),@{theory})))),
                                    (eq(var_w("x",5),lw(22,5)),
                                     mr(close
                                          (var("s",qTy),
                                           call("state.SPSR_mon",@{typ PSR},var("s",qTy),@{theory})))),
                                    (eq(var_w("x",5),lw(23,5)),
                                     mr(close
                                          (var("s",qTy),
                                           call("state.SPSR_abt",@{typ PSR},var("s",qTy),@{theory})))),
                                    (eq(var_w("x",5),lw(26,5)),
                                     mr(close
                                          (var("s",qTy),
                                           call("state.SPSR_hyp",@{typ PSR},var("s",qTy),@{theory})))),
                                    (eq(var_w("x",5),lw(27,5)),
                                     mr(close
                                          (var("s",qTy),
                                           call("state.SPSR_und",@{typ PSR},var("s",qTy),@{theory}))))],
                                   call
                                     ("raise'exception",
                                      @{typ "'b state_scheme \<Rightarrow> (PSR \<times> 'b state_scheme)"},
                                      call
                                        ("exception.UNPREDICTABLE",@{typ exception},ls"SPSR",
                                         @{theory}),@{theory}))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("write'SPSR",
   close
     (var("value",@{typ PSR}),
      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
         close
           (var("v",@{typ PSR}),
            mb(mb(mu(call("PSR.M",(Word_Lib.mk_wordT 5),var("v",@{typ PSR}),@{theory}),qTy),
                  close
                    (var_w("v",5),
                     call
                       ("BadMode",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},var_w("v",5),
                        @{theory}))),
               close
                 (var_b"b",
                  ite(var_b"b",
                      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                         close
                           (var("v",@{typ PSR}),
                            mb(mb(mb(mb(mu(call
                                             ("PSR.M",(Word_Lib.mk_wordT 5),var("v",@{typ PSR}),
                                              @{theory}),qTy),
                                        close
                                          (var_w("v",5),
                                           mu(mop(Cast(@{typ string}),var_w("v",5)),qTy))),
                                     close(var_s"v",mu(cc[ls"SPSR: BadMode: ",var_s"v"],qTy))),
                                  close
                                    (var_s"v",
                                     mu(call
                                          ("exception.UNPREDICTABLE",@{typ exception},var_s"v",
                                           @{theory}),qTy))),
                               close
                                 (var("v",@{typ exception}),
                                  call
                                    ("raise'exception",
                                     @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                     var("v",@{typ exception}),@{theory}))))),
                      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                         close
                           (var("v",@{typ PSR}),
                            mb(mu(call("PSR.M",(Word_Lib.mk_wordT 5),var("v",@{typ PSR}),@{theory}),
                                  qTy),
                               close
                                 (var_w("x",5),
                                  itb([(eq(var_w("x",5),lw(17,5)),
                                        mw(close
                                             (var("s",qTy),
                                              rupd
                                                ("state.SPSR_fiq",
                                                 tp[var("s",qTy),var("value",@{typ PSR})],@{theory})))),
                                       (eq(var_w("x",5),lw(18,5)),
                                        mw(close
                                             (var("s",qTy),
                                              rupd
                                                ("state.SPSR_irq",
                                                 tp[var("s",qTy),var("value",@{typ PSR})],@{theory})))),
                                       (eq(var_w("x",5),lw(19,5)),
                                        mw(close
                                             (var("s",qTy),
                                              rupd
                                                ("state.SPSR_svc",
                                                 tp[var("s",qTy),var("value",@{typ PSR})],@{theory})))),
                                       (eq(var_w("x",5),lw(22,5)),
                                        mw(close
                                             (var("s",qTy),
                                              rupd
                                                ("state.SPSR_mon",
                                                 tp[var("s",qTy),var("value",@{typ PSR})],@{theory})))),
                                       (eq(var_w("x",5),lw(23,5)),
                                        mw(close
                                             (var("s",qTy),
                                              rupd
                                                ("state.SPSR_abt",
                                                 tp[var("s",qTy),var("value",@{typ PSR})],@{theory})))),
                                       (eq(var_w("x",5),lw(26,5)),
                                        mw(close
                                             (var("s",qTy),
                                              rupd
                                                ("state.SPSR_hyp",
                                                 tp[var("s",qTy),var("value",@{typ PSR})],@{theory})))),
                                       (eq(var_w("x",5),lw(27,5)),
                                        mw(close
                                             (var("s",qTy),
                                              rupd
                                                ("state.SPSR_und",
                                                 tp[var("s",qTy),var("value",@{typ PSR})],@{theory}))))],
                                      call
                                        ("raise'exception",
                                         @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                         call
                                           ("exception.UNPREDICTABLE",@{typ exception},ls"SPSR",
                                            @{theory}),@{theory})))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("CPSRWriteByInstr",
   close
     (tp[var_w("value",32),var_w("bytemask",4),var_b"is_excpt_return"],
      mb(call
           ("CurrentModeIsNotUser",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,@{theory}),
         close
           (var_b"privileged",
            mb(mr(close(var("s",qTy),call("state.CP15",@{typ CP15},var("s",qTy),@{theory}))),
               close
                 (var("v",@{typ CP15}),
                  mb(mb(mu(call("CP15.SCTLR",@{typ SCTLR},var("v",@{typ CP15}),@{theory}),qTy),
                        close
                          (var("v",@{typ SCTLR}),
                           mu(call("SCTLR.NMFI",HOLogic.boolT,var("v",@{typ SCTLR}),@{theory}),qTy))),
                     close
                       (var_b"nmfi",
                        mb(ite(bop(Bit,var_w("bytemask",4),ln 3),
                               mb(mr(close
                                       (var("s",qTy),
                                        call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                                  close
                                    (var("v",@{typ PSR}),
                                     mb(mb(mu(call("reg'PSR",w32,var("v",@{typ PSR}),@{theory}),qTy),
                                           close
                                             (var_w("w",32),
                                              mb(mr(close
                                                      (var("s",qTy),
                                                       call
                                                         ("state.CPSR",@{typ PSR},var("s",qTy),
                                                          @{theory}))),
                                                 close
                                                   (var("v",@{typ PSR}),
                                                    mb(mb(mu(tp[var("v",@{typ PSR}),
                                                                bfi(ln 31,ln 27,
                                                                    ex(var_w("value",32),ln 31,
                                                                       ln 27,(Word_Lib.mk_wordT 5)),
                                                                    var_w("w",32))],qTy),
                                                          close
                                                            (var("v",@{typ "PSR \<times> 32 word"}),
                                                             mu(call
                                                                  ("write'reg'PSR",@{typ PSR},
                                                                   var("v",
                                                                       @{typ "PSR \<times> 32 word"}),
                                                                   @{theory}),qTy))),
                                                       close
                                                         (var("v",@{typ PSR}),
                                                          mw(close
                                                               (var("s",qTy),
                                                                rupd
                                                                  ("state.CPSR",
                                                                   tp[var("s",qTy),
                                                                      var("v",@{typ PSR})],@{theory}))))))))),
                                        close
                                          (var_a HOLogic.unitT,
                                           ite(var_b"is_excpt_return",
                                               mb(mr(close
                                                       (var("s",qTy),
                                                        call
                                                          ("state.CPSR",@{typ PSR},var("s",qTy),
                                                           @{theory}))),
                                                  close
                                                    (var("v",@{typ PSR}),
                                                     mb(mu(call
                                                             ("reg'PSR",w32,var("v",@{typ PSR}),
                                                              @{theory}),qTy),
                                                        close
                                                          (var_w("w",32),
                                                           mb(mr(close
                                                                   (var("s",qTy),
                                                                    call
                                                                      ("state.CPSR",@{typ PSR},
                                                                       var("s",qTy),@{theory}))),
                                                              close
                                                                (var("v",@{typ PSR}),
                                                                 mb(mb(mu(tp[var("v",@{typ PSR}),
                                                                             bfi(ln 26,ln 24,
                                                                                 ex(var_w("value",32),
                                                                                    ln 26,ln 24,
                                                                                    (Word_Lib.mk_wordT 3)),
                                                                                 var_w("w",32))],qTy),
                                                                       close
                                                                         (var("v",
                                                                              @{typ
                                                                              "PSR \<times> 32 word"}),
                                                                          mu(call
                                                                               ("write'reg'PSR",
                                                                                @{typ PSR},
                                                                                var("v",
                                                                                    @{typ
                                                                                    "PSR \<times>
                                                                                     32 word"}),
                                                                                @{theory}),qTy))),
                                                                    close
                                                                      (var("v",@{typ PSR}),
                                                                       mw(close
                                                                            (var("s",qTy),
                                                                             rupd
                                                                               ("state.CPSR",
                                                                                tp[var("s",qTy),
                                                                                   var("v",
                                                                                       @{typ PSR})],
                                                                                @{theory}))))))))))),
                                               mu(lu,qTy)))))),mu(lu,qTy)),
                           close
                             (var_a HOLogic.unitT,
                              mb(ite(bop(Bit,var_w("bytemask",4),ln 2),
                                     mb(mr(close
                                             (var("s",qTy),
                                              call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
                                        close
                                          (var("v",@{typ PSR}),
                                           mb(mu(call("reg'PSR",w32,var("v",@{typ PSR}),@{theory}),
                                                 qTy),
                                              close
                                                (var_w("w",32),
                                                 mb(mr(close
                                                         (var("s",qTy),
                                                          call
                                                            ("state.CPSR",@{typ PSR},var("s",qTy),
                                                             @{theory}))),
                                                    close
                                                      (var("v",@{typ PSR}),
                                                       mb(mb(mu(tp[var("v",@{typ PSR}),
                                                                   bfi(ln 19,ln 16,
                                                                       ex(var_w("value",32),ln 19,
                                                                          ln 16,w4),var_w("w",32))],
                                                                qTy),
                                                             close
                                                               (var("v",
                                                                    @{typ "PSR \<times> 32 word"}),
                                                                mu(call
                                                                     ("write'reg'PSR",@{typ PSR},
                                                                      var("v",
                                                                          @{typ
                                                                          "PSR \<times> 32 word"}),
                                                                      @{theory}),qTy))),
                                                          close
                                                            (var("v",@{typ PSR}),
                                                             mw(close
                                                                  (var("s",qTy),
                                                                   rupd
                                                                     ("state.CPSR",
                                                                      tp[var("s",qTy),
                                                                         var("v",@{typ PSR})],
                                                                      @{theory}))))))))))),
                                     mu(lu,qTy)),
                                 close
                                   (var_a HOLogic.unitT,
                                    mb(ite(bop(Bit,var_w("bytemask",4),ln 1),
                                           mb(ite(var_b"is_excpt_return",
                                                  mb(mr(close
                                                          (var("s",qTy),
                                                           call
                                                             ("state.CPSR",@{typ PSR},var("s",qTy),
                                                              @{theory}))),
                                                     close
                                                       (var("v",@{typ PSR}),
                                                        mb(mu(call
                                                                ("reg'PSR",w32,var("v",@{typ PSR}),
                                                                 @{theory}),qTy),
                                                           close
                                                             (var_w("w",32),
                                                              mb(mr(close
                                                                      (var("s",qTy),
                                                                       call
                                                                         ("state.CPSR",@{typ PSR},
                                                                          var("s",qTy),@{theory}))),
                                                                 close
                                                                   (var("v",@{typ PSR}),
                                                                    mb(mb(mu(tp[var("v",@{typ PSR}),
                                                                                bfi(ln 15,ln 10,
                                                                                    ex(var_w("value",32),
                                                                                       ln 15,ln 10,
                                                                                       (Word_Lib.mk_wordT 6)),
                                                                                    var_w("w",32))],
                                                                             qTy),
                                                                          close
                                                                            (var("v",
                                                                                 @{typ
                                                                                 "PSR \<times>
                                                                                  32 word"}),
                                                                             mu(call
                                                                                  ("write'reg'PSR",
                                                                                   @{typ PSR},
                                                                                   var("v",
                                                                                       @{typ
                                                                                       "PSR \<times>
                                                                                        32 word"}),
                                                                                   @{theory}),qTy))),
                                                                       close
                                                                         (var("v",@{typ PSR}),
                                                                          mw(close
                                                                               (var("s",qTy),
                                                                                rupd
                                                                                  ("state.CPSR",
                                                                                   tp[var("s",qTy),
                                                                                      var("v",
                                                                                          @{typ PSR})],
                                                                                   @{theory}))))))))))),
                                                  mu(lu,qTy)),
                                              close
                                                (var_a HOLogic.unitT,
                                                 mb(mr(close
                                                         (var("s",qTy),
                                                          call
                                                            ("state.CPSR",@{typ PSR},var("s",qTy),
                                                             @{theory}))),
                                                    close
                                                      (var("v",@{typ PSR}),
                                                       mb(mb(mu(call
                                                                  ("reg'PSR",w32,
                                                                   var("v",@{typ PSR}),@{theory}),
                                                                qTy),
                                                             close
                                                               (var_w("w",32),
                                                                mb(mr(close
                                                                        (var("s",qTy),
                                                                         call
                                                                           ("state.CPSR",@{typ PSR},
                                                                            var("s",qTy),@{theory}))),
                                                                   close
                                                                     (var("v",@{typ PSR}),
                                                                      mb(mb(mu(tp[var("v",@{typ PSR}),
                                                                                  bfi(ln 9,ln 9,
                                                                                      mop(Cast w1,
                                                                                          bop(Bit,
                                                                                              var_w("value",32),
                                                                                              ln 9)),
                                                                                      var_w("w",32))],
                                                                               qTy),
                                                                            close
                                                                              (var("v",
                                                                                   @{typ
                                                                                   "PSR \<times>
                                                                                    32 word"}),
                                                                               mu(call
                                                                                    ("write'reg'PSR",
                                                                                     @{typ PSR},
                                                                                     var("v",
                                                                                         @{typ
                                                                                         "PSR \<times>
                                                                                          32 word"}),
                                                                                     @{theory}),qTy))),
                                                                         close
                                                                           (var("v",@{typ PSR}),
                                                                            mw(close
                                                                                 (var("s",qTy),
                                                                                  rupd
                                                                                    ("state.CPSR",
                                                                                     tp[var("s",qTy),
                                                                                        var("v",
                                                                                            @{typ PSR})],
                                                                                     @{theory}))))))))),
                                                          close
                                                            (var_a HOLogic.unitT,
                                                             mb(call
                                                                  ("IsSecure",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (bool \<times> 'b state_scheme)"},lu,
                                                                   @{theory}),
                                                                close
                                                                  (var_b"v",
                                                                   mb(mb(ite(var_b"v",mu(lt,qTy),
                                                                             mb(mr(close
                                                                                     (var("s",qTy),
                                                                                      call
                                                                                        ("state.CP15",
                                                                                         @{typ CP15},
                                                                                         var("s",qTy),
                                                                                         @{theory}))),
                                                                                close
                                                                                  (var("v",
                                                                                       @{typ CP15}),
                                                                                   mb(mu(call
                                                                                           ("CP15.SCR",
                                                                                            @{typ SCR},
                                                                                            var("v",
                                                                                                @{typ CP15}),
                                                                                            @{theory}),
                                                                                         qTy),
                                                                                      close
                                                                                        (var("v",
                                                                                             @{typ SCR}),
                                                                                         mu(call
                                                                                              ("SCR.AW",
                                                                                               HOLogic.boolT,
                                                                                               var("v",
                                                                                                   @{typ SCR}),
                                                                                               @{theory}),
                                                                                            qTy)))))),
                                                                         close
                                                                           (var_b"v",
                                                                            mu(bop(And,
                                                                                   var_b"privileged",
                                                                                   var_b"v"),qTy))),
                                                                      close
                                                                        (var_b"b",
                                                                         ite(var_b"b",
                                                                             mb(mr(close
                                                                                     (var("s",qTy),
                                                                                      call
                                                                                        ("state.CPSR",
                                                                                         @{typ PSR},
                                                                                         var("s",qTy),
                                                                                         @{theory}))),
                                                                                close
                                                                                  (var("v",
                                                                                       @{typ PSR}),
                                                                                   mb(mu(call
                                                                                           ("reg'PSR",
                                                                                            w32,
                                                                                            var("v",
                                                                                                @{typ PSR}),
                                                                                            @{theory}),
                                                                                         qTy),
                                                                                      close
                                                                                        (var_w("w",32),
                                                                                         mb(mr(close
                                                                                                 (var("s",
                                                                                                      qTy),
                                                                                                  call
                                                                                                    ("state.CPSR",
                                                                                                     @{typ PSR},
                                                                                                     var("s",
                                                                                                         qTy),
                                                                                                     @{theory}))),
                                                                                            close
                                                                                              (var("v",
                                                                                                   @{typ PSR}),
                                                                                               mb(mb(mu(tp[var("v",
                                                                                                               @{typ PSR}),
                                                                                                           bfi(ln
                                                                                                                8,
                                                                                                               ln
                                                                                                                8,
                                                                                                               mop(Cast
                                                                                                                     w1,
                                                                                                                   bop(Bit,
                                                                                                                       var_w("value",32),
                                                                                                                       ln
                                                                                                                        8)),
                                                                                                               var_w("w",32))],
                                                                                                        qTy),
                                                                                                     close
                                                                                                       (var("v",
                                                                                                            @{typ
                                                                                                            "PSR \<times>
                                                                                                             32 word"}),
                                                                                                        mu(call
                                                                                                             ("write'reg'PSR",
                                                                                                              @{typ PSR},
                                                                                                              var("v",
                                                                                                                  @{typ
                                                                                                                  "PSR \<times>
                                                                                                                   32 word"}),
                                                                                                              @{theory}),
                                                                                                           qTy))),
                                                                                                  close
                                                                                                    (var("v",
                                                                                                         @{typ PSR}),
                                                                                                     mw(close
                                                                                                          (var("s",
                                                                                                               qTy),
                                                                                                           rupd
                                                                                                             ("state.CPSR",
                                                                                                              tp[var("s",
                                                                                                                     qTy),
                                                                                                                 var("v",
                                                                                                                     @{typ PSR})],
                                                                                                              @{theory}))))))))))),
                                                                             mu(lu,qTy)))))))))))),
                                           mu(lu,qTy)),
                                       close
                                         (var_a HOLogic.unitT,
                                          ite(bop(Bit,var_w("bytemask",4),ln 0),
                                              mb(ite(var_b"privileged",
                                                     mb(mr(close
                                                             (var("s",qTy),
                                                              call
                                                                ("state.CPSR",@{typ PSR},
                                                                 var("s",qTy),@{theory}))),
                                                        close
                                                          (var("v",@{typ PSR}),
                                                           mb(mu(call
                                                                   ("reg'PSR",w32,
                                                                    var("v",@{typ PSR}),@{theory}),
                                                                 qTy),
                                                              close
                                                                (var_w("w",32),
                                                                 mb(mr(close
                                                                         (var("s",qTy),
                                                                          call
                                                                            ("state.CPSR",
                                                                             @{typ PSR},
                                                                             var("s",qTy),@{theory}))),
                                                                    close
                                                                      (var("v",@{typ PSR}),
                                                                       mb(mb(mu(tp[var("v",
                                                                                       @{typ PSR}),
                                                                                   bfi(ln 7,ln 7,
                                                                                       mop(Cast w1,
                                                                                           bop(Bit,
                                                                                               var_w("value",32),
                                                                                               ln 7)),
                                                                                       var_w("w",32))],
                                                                                qTy),
                                                                             close
                                                                               (var("v",
                                                                                    @{typ
                                                                                    "PSR \<times>
                                                                                     32 word"}),
                                                                                mu(call
                                                                                     ("write'reg'PSR",
                                                                                      @{typ PSR},
                                                                                      var("v",
                                                                                          @{typ
                                                                                          "PSR \<times>
                                                                                           32 word"}),
                                                                                      @{theory}),qTy))),
                                                                          close
                                                                            (var("v",@{typ PSR}),
                                                                             mw(close
                                                                                  (var("s",qTy),
                                                                                   rupd
                                                                                     ("state.CPSR",
                                                                                      tp[var("s",qTy),
                                                                                         var("v",
                                                                                             @{typ PSR})],
                                                                                      @{theory}))))))))))),
                                                     mu(lu,qTy)),
                                                 close
                                                   (var_a HOLogic.unitT,
                                                    mb(call
                                                         ("IsSecure",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          lu,@{theory}),
                                                       close
                                                         (var_b"v",
                                                          mb(mb(mb(mb(ite(var_b"v",mu(lt,qTy),
                                                                          mb(mr(close
                                                                                  (var("s",qTy),
                                                                                   call
                                                                                     ("state.CP15",
                                                                                      @{typ CP15},
                                                                                      var("s",qTy),
                                                                                      @{theory}))),
                                                                             close
                                                                               (var("v",@{typ CP15}),
                                                                                mb(mb(mu(call
                                                                                           ("CP15.SCR",
                                                                                            @{typ SCR},
                                                                                            var("v",
                                                                                                @{typ CP15}),
                                                                                            @{theory}),
                                                                                         qTy),
                                                                                      close
                                                                                        (var("v",
                                                                                             @{typ SCR}),
                                                                                         mu(call
                                                                                              ("SCR.FW",
                                                                                               HOLogic.boolT,
                                                                                               var("v",
                                                                                                   @{typ SCR}),
                                                                                               @{theory}),
                                                                                            qTy))),
                                                                                   close
                                                                                     (var_b"b",
                                                                                      ite(var_b"b",
                                                                                          mu(lt,qTy),
                                                                                          call
                                                                                            ("HaveVirtExt",
                                                                                             @{typ
                                                                                             "'b state_scheme \<Rightarrow>
                                                                                              (bool \<times>
                                                                                               'b state_scheme)"},
                                                                                             lu,
                                                                                             @{theory}))))))),
                                                                      close
                                                                        (var_b"v",
                                                                         mu(bop(And,
                                                                                bop(Or,
                                                                                    mop(Not,
                                                                                        var_b"nmfi"),
                                                                                    mop(Not,
                                                                                        bop(Bit,
                                                                                            var_w("value",32),
                                                                                            ln 6))),
                                                                                var_b"v"),qTy))),
                                                                   close
                                                                     (var_b"v",
                                                                      mu(bop(And,var_b"privileged",
                                                                             var_b"v"),qTy))),
                                                                close
                                                                  (var_b"b",
                                                                   ite(var_b"b",
                                                                       mb(mr(close
                                                                               (var("s",qTy),
                                                                                call
                                                                                  ("state.CPSR",
                                                                                   @{typ PSR},
                                                                                   var("s",qTy),
                                                                                   @{theory}))),
                                                                          close
                                                                            (var("v",@{typ PSR}),
                                                                             mb(mu(call
                                                                                     ("reg'PSR",w32,
                                                                                      var("v",
                                                                                          @{typ PSR}),
                                                                                      @{theory}),qTy),
                                                                                close
                                                                                  (var_w("w",32),
                                                                                   mb(mr(close
                                                                                           (var("s",
                                                                                                qTy),
                                                                                            call
                                                                                              ("state.CPSR",
                                                                                               @{typ PSR},
                                                                                               var("s",
                                                                                                   qTy),
                                                                                               @{theory}))),
                                                                                      close
                                                                                        (var("v",
                                                                                             @{typ PSR}),
                                                                                         mb(mb(mu(tp[var("v",
                                                                                                         @{typ PSR}),
                                                                                                     bfi(ln
                                                                                                          6,
                                                                                                         ln
                                                                                                          6,
                                                                                                         mop(Cast
                                                                                                               w1,
                                                                                                             bop(Bit,
                                                                                                                 var_w("value",32),
                                                                                                                 ln
                                                                                                                  6)),
                                                                                                         var_w("w",32))],
                                                                                                  qTy),
                                                                                               close
                                                                                                 (var("v",
                                                                                                      @{typ
                                                                                                      "PSR \<times>
                                                                                                       32 word"}),
                                                                                                  mu(call
                                                                                                       ("write'reg'PSR",
                                                                                                        @{typ PSR},
                                                                                                        var("v",
                                                                                                            @{typ
                                                                                                            "PSR \<times>
                                                                                                             32 word"}),
                                                                                                        @{theory}),
                                                                                                     qTy))),
                                                                                            close
                                                                                              (var("v",
                                                                                                   @{typ PSR}),
                                                                                               mw(close
                                                                                                    (var("s",
                                                                                                         qTy),
                                                                                                     rupd
                                                                                                       ("state.CPSR",
                                                                                                        tp[var("s",
                                                                                                               qTy),
                                                                                                           var("v",
                                                                                                               @{typ PSR})],
                                                                                                        @{theory}))))))))))),
                                                                       mu(lu,qTy)))),
                                                             close
                                                               (var_a HOLogic.unitT,
                                                                mb(ite(var_b"is_excpt_return",
                                                                       mb(mr(close
                                                                               (var("s",qTy),
                                                                                call
                                                                                  ("state.CPSR",
                                                                                   @{typ PSR},
                                                                                   var("s",qTy),
                                                                                   @{theory}))),
                                                                          close
                                                                            (var("v",@{typ PSR}),
                                                                             mb(mu(call
                                                                                     ("reg'PSR",w32,
                                                                                      var("v",
                                                                                          @{typ PSR}),
                                                                                      @{theory}),qTy),
                                                                                close
                                                                                  (var_w("w",32),
                                                                                   mb(mr(close
                                                                                           (var("s",
                                                                                                qTy),
                                                                                            call
                                                                                              ("state.CPSR",
                                                                                               @{typ PSR},
                                                                                               var("s",
                                                                                                   qTy),
                                                                                               @{theory}))),
                                                                                      close
                                                                                        (var("v",
                                                                                             @{typ PSR}),
                                                                                         mb(mb(mu(tp[var("v",
                                                                                                         @{typ PSR}),
                                                                                                     bfi(ln
                                                                                                          5,
                                                                                                         ln
                                                                                                          5,
                                                                                                         mop(Cast
                                                                                                               w1,
                                                                                                             bop(Bit,
                                                                                                                 var_w("value",32),
                                                                                                                 ln
                                                                                                                  5)),
                                                                                                         var_w("w",32))],
                                                                                                  qTy),
                                                                                               close
                                                                                                 (var("v",
                                                                                                      @{typ
                                                                                                      "PSR \<times>
                                                                                                       32 word"}),
                                                                                                  mu(call
                                                                                                       ("write'reg'PSR",
                                                                                                        @{typ PSR},
                                                                                                        var("v",
                                                                                                            @{typ
                                                                                                            "PSR \<times>
                                                                                                             32 word"}),
                                                                                                        @{theory}),
                                                                                                     qTy))),
                                                                                            close
                                                                                              (var("v",
                                                                                                   @{typ PSR}),
                                                                                               mw(close
                                                                                                    (var("s",
                                                                                                         qTy),
                                                                                                     rupd
                                                                                                       ("state.CPSR",
                                                                                                        tp[var("s",
                                                                                                               qTy),
                                                                                                           var("v",
                                                                                                               @{typ PSR})],
                                                                                                        @{theory}))))))))))),
                                                                       mu(lu,qTy)),
                                                                   close
                                                                     (var_a HOLogic.unitT,
                                                                      ite(var_b"privileged",
                                                                          mb(call
                                                                               ("BadMode",
                                                                                @{typ
                                                                                "'b state_scheme \<Rightarrow>
                                                                                 (bool \<times>
                                                                                  'b state_scheme)"},
                                                                                ex(var_w("value",32),
                                                                                   ln 4,ln 0,
                                                                                   (Word_Lib.mk_wordT 5)),
                                                                                @{theory}),
                                                                             close
                                                                               (var_b"b",
                                                                                ite(var_b"b",
                                                                                    call
                                                                                      ("raise'exception",
                                                                                       @{typ
                                                                                       "'b state_scheme \<Rightarrow>
                                                                                        (unit \<times>
                                                                                         'b state_scheme)"},
                                                                                       call
                                                                                         ("exception.UNPREDICTABLE",
                                                                                          @{typ exception},
                                                                                          cc[ls
                                                                                              "CPSRWriteByInstr: BadMode: ",
                                                                                             mop(Cast
                                                                                                   (@{typ
                                                                                                    string}),
                                                                                                 ex(var_w("value",32),
                                                                                                    ln
                                                                                                     4,
                                                                                                    ln
                                                                                                     0,
                                                                                                    (Word_Lib.mk_wordT 5)))],
                                                                                          @{theory}),
                                                                                       @{theory}),
                                                                                    mb(call
                                                                                         ("IsSecure",
                                                                                          @{typ
                                                                                          "'b state_scheme \<Rightarrow>
                                                                                           (bool \<times>
                                                                                            'b state_scheme)"},
                                                                                          lu,
                                                                                          @{theory}),
                                                                                       close
                                                                                         (var_b"v",
                                                                                          mb(mb(mb(mu(mop(Not,
                                                                                                          var_b"v"),
                                                                                                      qTy),
                                                                                                   close
                                                                                                     (var_b"b",
                                                                                                      mu(bop(And,
                                                                                                             var_b"b",
                                                                                                             eq(ex(var_w("value",32),
                                                                                                                   ln
                                                                                                                    4,
                                                                                                                   ln
                                                                                                                    0,
                                                                                                                   (Word_Lib.mk_wordT 5)),
                                                                                                                lw(22,
                                                                                                                   5))),
                                                                                                         qTy))),
                                                                                                close
                                                                                                  (var_b"b",
                                                                                                   ite(var_b"b",
                                                                                                       call
                                                                                                         ("raise'exception",
                                                                                                          @{typ
                                                                                                          "'b state_scheme \<Rightarrow>
                                                                                                           (unit \<times>
                                                                                                            'b state_scheme)"},
                                                                                                          call
                                                                                                            ("exception.UNPREDICTABLE",
                                                                                                             @{typ exception},
                                                                                                             ls
                                                                                                              "CPSRWriteByInstr",
                                                                                                             @{theory}),
                                                                                                          @{theory}),
                                                                                                       mu(lu,
                                                                                                          qTy)))),
                                                                                             close
                                                                                               (var_a
                                                                                                  HOLogic.unitT,
                                                                                                mb(call
                                                                                                     ("IsSecure",
                                                                                                      @{typ
                                                                                                      "'b state_scheme \<Rightarrow>
                                                                                                       (bool \<times>
                                                                                                        'b state_scheme)"},
                                                                                                      lu,
                                                                                                      @{theory}),
                                                                                                   close
                                                                                                     (var_b"v",
                                                                                                      mb(mb(mb(mu(mop(Not,
                                                                                                                      var_b"v"),
                                                                                                                  qTy),
                                                                                                               close
                                                                                                                 (var_b"b",
                                                                                                                  ite(var_b"b",
                                                                                                                      mb(mr(close
                                                                                                                              (var("s",
                                                                                                                                   qTy),
                                                                                                                               call
                                                                                                                                 ("state.CP15",
                                                                                                                                  @{typ CP15},
                                                                                                                                  var("s",
                                                                                                                                      qTy),
                                                                                                                                  @{theory}))),
                                                                                                                         close
                                                                                                                           (var("v",
                                                                                                                                @{typ CP15}),
                                                                                                                            mb(mb(mu(call
                                                                                                                                       ("CP15.NSACR",
                                                                                                                                        @{typ NSACR},
                                                                                                                                        var("v",
                                                                                                                                            @{typ CP15}),
                                                                                                                                        @{theory}),
                                                                                                                                     qTy),
                                                                                                                                  close
                                                                                                                                    (var("v",
                                                                                                                                         @{typ NSACR}),
                                                                                                                                     mu(call
                                                                                                                                          ("NSACR.RFR",
                                                                                                                                           HOLogic.boolT,
                                                                                                                                           var("v",
                                                                                                                                               @{typ NSACR}),
                                                                                                                                           @{theory}),
                                                                                                                                        qTy))),
                                                                                                                               close
                                                                                                                                 (var_b"v",
                                                                                                                                  mu(bop(And,
                                                                                                                                         eq(ex(var_w("value",32),
                                                                                                                                               ln
                                                                                                                                                4,
                                                                                                                                               ln
                                                                                                                                                0,
                                                                                                                                               (Word_Lib.mk_wordT 5)),
                                                                                                                                            lw(17,
                                                                                                                                               5)),
                                                                                                                                         var_b"v"),
                                                                                                                                     qTy))))),
                                                                                                                      mu(lf,
                                                                                                                         qTy)))),
                                                                                                            close
                                                                                                              (var_b"b",
                                                                                                               ite(var_b"b",
                                                                                                                   call
                                                                                                                     ("raise'exception",
                                                                                                                      @{typ
                                                                                                                      "'b state_scheme \<Rightarrow>
                                                                                                                       (unit \<times>
                                                                                                                        'b state_scheme)"},
                                                                                                                      call
                                                                                                                        ("exception.UNPREDICTABLE",
                                                                                                                         @{typ exception},
                                                                                                                         ls
                                                                                                                          "CPSRWriteByInstr",
                                                                                                                         @{theory}),
                                                                                                                      @{theory}),
                                                                                                                   mu(lu,
                                                                                                                      qTy)))),
                                                                                                         close
                                                                                                           (var_a
                                                                                                              HOLogic.unitT,
                                                                                                            mb(mr(close
                                                                                                                    (var("s",
                                                                                                                         qTy),
                                                                                                                     call
                                                                                                                       ("state.CP15",
                                                                                                                        @{typ CP15},
                                                                                                                        var("s",
                                                                                                                            qTy),
                                                                                                                        @{theory}))),
                                                                                                               close
                                                                                                                 (var("v",
                                                                                                                      @{typ CP15}),
                                                                                                                  mb(mb(mb(mb(mb(mu(call
                                                                                                                                      ("CP15.SCR",
                                                                                                                                       @{typ SCR},
                                                                                                                                       var("v",
                                                                                                                                           @{typ CP15}),
                                                                                                                                       @{theory}),
                                                                                                                                    qTy),
                                                                                                                                 close
                                                                                                                                   (var("v",
                                                                                                                                        @{typ SCR}),
                                                                                                                                    mu(call
                                                                                                                                         ("SCR.NS",
                                                                                                                                          HOLogic.boolT,
                                                                                                                                          var("v",
                                                                                                                                              @{typ SCR}),
                                                                                                                                          @{theory}),
                                                                                                                                       qTy))),
                                                                                                                              close
                                                                                                                                (var_b"v",
                                                                                                                                 mu(mop(Not,
                                                                                                                                        var_b"v"),
                                                                                                                                    qTy))),
                                                                                                                           close
                                                                                                                             (var_b"b",
                                                                                                                              mu(bop(And,
                                                                                                                                     var_b"b",
                                                                                                                                     eq(ex(var_w("value",32),
                                                                                                                                           ln
                                                                                                                                            4,
                                                                                                                                           ln
                                                                                                                                            0,
                                                                                                                                           (Word_Lib.mk_wordT 5)),
                                                                                                                                        lw(26,
                                                                                                                                           5))),
                                                                                                                                 qTy))),
                                                                                                                        close
                                                                                                                          (var_b"b",
                                                                                                                           ite(var_b"b",
                                                                                                                               call
                                                                                                                                 ("raise'exception",
                                                                                                                                  @{typ
                                                                                                                                  "'b state_scheme \<Rightarrow>
                                                                                                                                   (unit \<times>
                                                                                                                                    'b state_scheme)"},
                                                                                                                                  call
                                                                                                                                    ("exception.UNPREDICTABLE",
                                                                                                                                     @{typ exception},
                                                                                                                                     ls
                                                                                                                                      "CPSRWriteByInstr",
                                                                                                                                     @{theory}),
                                                                                                                                  @{theory}),
                                                                                                                               mu(lu,
                                                                                                                                  qTy)))),
                                                                                                                     close
                                                                                                                       (var_a
                                                                                                                          HOLogic.unitT,
                                                                                                                        mb(call
                                                                                                                             ("IsSecure",
                                                                                                                              @{typ
                                                                                                                              "'b state_scheme \<Rightarrow>
                                                                                                                               (bool \<times>
                                                                                                                                'b state_scheme)"},
                                                                                                                              lu,
                                                                                                                              @{theory}),
                                                                                                                           close
                                                                                                                             (var_b"v",
                                                                                                                              mb(mb(mb(mu(mop(Not,
                                                                                                                                              var_b"v"),
                                                                                                                                          qTy),
                                                                                                                                       close
                                                                                                                                         (var_b"b",
                                                                                                                                          ite(var_b"b",
                                                                                                                                              mb(mr(close
                                                                                                                                                      (var("s",
                                                                                                                                                           qTy),
                                                                                                                                                       call
                                                                                                                                                         ("state.CPSR",
                                                                                                                                                          @{typ PSR},
                                                                                                                                                          var("s",
                                                                                                                                                              qTy),
                                                                                                                                                          @{theory}))),
                                                                                                                                                 close
                                                                                                                                                   (var("v",
                                                                                                                                                        @{typ PSR}),
                                                                                                                                                    mb(mb(mb(mu(call
                                                                                                                                                                  ("PSR.M",
                                                                                                                                                                   (Word_Lib.mk_wordT 5),
                                                                                                                                                                   var("v",
                                                                                                                                                                       @{typ PSR}),
                                                                                                                                                                   @{theory}),
                                                                                                                                                                qTy),
                                                                                                                                                             close
                                                                                                                                                               (var_w("v",5),
                                                                                                                                                                mu(eq(var_w("v",5),
                                                                                                                                                                      lw(26,
                                                                                                                                                                         5)),
                                                                                                                                                                   qTy))),
                                                                                                                                                          close
                                                                                                                                                            (var_b"v",
                                                                                                                                                             mu(mop(Not,
                                                                                                                                                                    var_b"v"),
                                                                                                                                                                qTy))),
                                                                                                                                                       close
                                                                                                                                                         (var_b"b",
                                                                                                                                                          mu(bop(And,
                                                                                                                                                                 var_b"b",
                                                                                                                                                                 eq(ex(var_w("value",32),
                                                                                                                                                                       ln
                                                                                                                                                                        4,
                                                                                                                                                                       ln
                                                                                                                                                                        0,
                                                                                                                                                                       (Word_Lib.mk_wordT 5)),
                                                                                                                                                                    lw(26,
                                                                                                                                                                       5))),
                                                                                                                                                             qTy))))),
                                                                                                                                              mu(lf,
                                                                                                                                                 qTy)))),
                                                                                                                                    close
                                                                                                                                      (var_b"b",
                                                                                                                                       ite(var_b"b",
                                                                                                                                           call
                                                                                                                                             ("raise'exception",
                                                                                                                                              @{typ
                                                                                                                                              "'b state_scheme \<Rightarrow>
                                                                                                                                               (unit \<times>
                                                                                                                                                'b state_scheme)"},
                                                                                                                                              call
                                                                                                                                                ("exception.UNPREDICTABLE",
                                                                                                                                                 @{typ exception},
                                                                                                                                                 ls
                                                                                                                                                  "CPSRWriteByInstr",
                                                                                                                                                 @{theory}),
                                                                                                                                              @{theory}),
                                                                                                                                           mu(lu,
                                                                                                                                              qTy)))),
                                                                                                                                 close
                                                                                                                                   (var_a
                                                                                                                                      HOLogic.unitT,
                                                                                                                                    mb(mr(close
                                                                                                                                            (var("s",
                                                                                                                                                 qTy),
                                                                                                                                             call
                                                                                                                                               ("state.CPSR",
                                                                                                                                                @{typ PSR},
                                                                                                                                                var("s",
                                                                                                                                                    qTy),
                                                                                                                                                @{theory}))),
                                                                                                                                       close
                                                                                                                                         (var("v",
                                                                                                                                              @{typ PSR}),
                                                                                                                                          mb(mb(mb(mb(mu(call
                                                                                                                                                           ("PSR.M",
                                                                                                                                                            (Word_Lib.mk_wordT 5),
                                                                                                                                                            var("v",
                                                                                                                                                                @{typ PSR}),
                                                                                                                                                            @{theory}),
                                                                                                                                                         qTy),
                                                                                                                                                      close
                                                                                                                                                        (var_w("v",5),
                                                                                                                                                         mu(eq(var_w("v",5),
                                                                                                                                                               lw(26,
                                                                                                                                                                  5)),
                                                                                                                                                            qTy))),
                                                                                                                                                   close
                                                                                                                                                     (var_b"b",
                                                                                                                                                      mu(bop(And,
                                                                                                                                                             var_b"b",
                                                                                                                                                             bop(And,
                                                                                                                                                                 mop(Not,
                                                                                                                                                                     eq(ex(var_w("value",32),
                                                                                                                                                                           ln
                                                                                                                                                                            4,
                                                                                                                                                                           ln
                                                                                                                                                                            0,
                                                                                                                                                                           (Word_Lib.mk_wordT 5)),
                                                                                                                                                                        lw(26,
                                                                                                                                                                           5))),
                                                                                                                                                                 mop(Not,
                                                                                                                                                                     var_b"is_excpt_return"))),
                                                                                                                                                         qTy))),
                                                                                                                                                close
                                                                                                                                                  (var_b"b",
                                                                                                                                                   ite(var_b"b",
                                                                                                                                                       call
                                                                                                                                                         ("raise'exception",
                                                                                                                                                          @{typ
                                                                                                                                                          "'b state_scheme \<Rightarrow>
                                                                                                                                                           (unit \<times>
                                                                                                                                                            'b state_scheme)"},
                                                                                                                                                          call
                                                                                                                                                            ("exception.UNPREDICTABLE",
                                                                                                                                                             @{typ exception},
                                                                                                                                                             ls
                                                                                                                                                              "CPSRWriteByInstr",
                                                                                                                                                             @{theory}),
                                                                                                                                                          @{theory}),
                                                                                                                                                       mu(lu,
                                                                                                                                                          qTy)))),
                                                                                                                                             close
                                                                                                                                               (var_a
                                                                                                                                                  HOLogic.unitT,
                                                                                                                                                mb(mr(close
                                                                                                                                                        (var("s",
                                                                                                                                                             qTy),
                                                                                                                                                         call
                                                                                                                                                           ("state.CPSR",
                                                                                                                                                            @{typ PSR},
                                                                                                                                                            var("s",
                                                                                                                                                                qTy),
                                                                                                                                                            @{theory}))),
                                                                                                                                                   close
                                                                                                                                                     (var("v",
                                                                                                                                                          @{typ PSR}),
                                                                                                                                                      mb(mu(call
                                                                                                                                                              ("reg'PSR",
                                                                                                                                                               w32,
                                                                                                                                                               var("v",
                                                                                                                                                                   @{typ PSR}),
                                                                                                                                                               @{theory}),
                                                                                                                                                            qTy),
                                                                                                                                                         close
                                                                                                                                                           (var_w("w",32),
                                                                                                                                                            mb(mr(close
                                                                                                                                                                    (var("s",
                                                                                                                                                                         qTy),
                                                                                                                                                                     call
                                                                                                                                                                       ("state.CPSR",
                                                                                                                                                                        @{typ PSR},
                                                                                                                                                                        var("s",
                                                                                                                                                                            qTy),
                                                                                                                                                                        @{theory}))),
                                                                                                                                                               close
                                                                                                                                                                 (var("v",
                                                                                                                                                                      @{typ PSR}),
                                                                                                                                                                  mb(mb(mu(tp[var("v",
                                                                                                                                                                                  @{typ PSR}),
                                                                                                                                                                              bfi(ln
                                                                                                                                                                                   4,
                                                                                                                                                                                  ln
                                                                                                                                                                                   0,
                                                                                                                                                                                  ex(var_w("value",32),
                                                                                                                                                                                     ln
                                                                                                                                                                                      4,
                                                                                                                                                                                     ln
                                                                                                                                                                                      0,
                                                                                                                                                                                     (Word_Lib.mk_wordT 5)),
                                                                                                                                                                                  var_w("w",32))],
                                                                                                                                                                           qTy),
                                                                                                                                                                        close
                                                                                                                                                                          (var("v",
                                                                                                                                                                               @{typ
                                                                                                                                                                               "PSR \<times>
                                                                                                                                                                                32 word"}),
                                                                                                                                                                           mu(call
                                                                                                                                                                                ("write'reg'PSR",
                                                                                                                                                                                 @{typ PSR},
                                                                                                                                                                                 var("v",
                                                                                                                                                                                     @{typ
                                                                                                                                                                                     "PSR \<times>
                                                                                                                                                                                      32 word"}),
                                                                                                                                                                                 @{theory}),
                                                                                                                                                                              qTy))),
                                                                                                                                                                     close
                                                                                                                                                                       (var("v",
                                                                                                                                                                            @{typ PSR}),
                                                                                                                                                                        mw(close
                                                                                                                                                                             (var("s",
                                                                                                                                                                                  qTy),
                                                                                                                                                                              rupd
                                                                                                                                                                                ("state.CPSR",
                                                                                                                                                                                 tp[var("s",
                                                                                                                                                                                        qTy),
                                                                                                                                                                                    var("v",
                                                                                                                                                                                        @{typ PSR})],
                                                                                                                                                                                 @{theory})))))))))))))))))))))))))))))))))),
                                                                          mu(lu,qTy)))))))))),
                                              mu(lu,qTy))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("SPSRWriteByInstr",
   close
     (tp[var_w("value",32),var_w("bytemask",4)],
      mb(call
           ("CurrentModeIsUserOrSystem",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
            @{theory}),
         close
           (var_b"v",
            mb(ite(var_b"v",
                   call
                     ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                      call
                        ("exception.UNPREDICTABLE",@{typ exception},ls"SPSRWriteByInstr",@{theory}),
                      @{theory}),mu(lu,qTy)),
               close
                 (var_a HOLogic.unitT,
                  mb(ite(bop(Bit,var_w("bytemask",4),ln 3),
                         mb(const
                              ("SPSR",@{typ "'b state_scheme \<Rightarrow> (PSR \<times> 'b state_scheme)"},@{theory}),
                            close
                              (var("x",@{typ PSR}),
                               call
                                 ("write'SPSR",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                  call
                                    ("write'reg'PSR",@{typ PSR},
                                     tp[var("x",@{typ PSR}),
                                        bfi(ln 31,ln 24,ex(var_w("value",32),ln 31,ln 24,w8),
                                            call("reg'PSR",w32,var("x",@{typ PSR}),@{theory}))],
                                     @{theory}),@{theory}))),mu(lu,qTy)),
                     close
                       (var_a HOLogic.unitT,
                        mb(ite(bop(Bit,var_w("bytemask",4),ln 2),
                               mb(const
                                    ("SPSR",@{typ "'b state_scheme \<Rightarrow> (PSR \<times> 'b state_scheme)"},
                                     @{theory}),
                                  close
                                    (var("x",@{typ PSR}),
                                     call
                                       ("write'SPSR",
                                        @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                        call
                                          ("write'reg'PSR",@{typ PSR},
                                           tp[var("x",@{typ PSR}),
                                              bfi(ln 19,ln 16,ex(var_w("value",32),ln 19,ln 16,w4),
                                                  call("reg'PSR",w32,var("x",@{typ PSR}),@{theory}))],
                                           @{theory}),@{theory}))),mu(lu,qTy)),
                           close
                             (var_a HOLogic.unitT,
                              mb(ite(bop(Bit,var_w("bytemask",4),ln 1),
                                     mb(const
                                          ("SPSR",@{typ "'b state_scheme \<Rightarrow> (PSR \<times> 'b state_scheme)"},
                                           @{theory}),
                                        close
                                          (var("x",@{typ PSR}),
                                           call
                                             ("write'SPSR",
                                              @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                              call
                                                ("write'reg'PSR",@{typ PSR},
                                                 tp[var("x",@{typ PSR}),
                                                    bfi(ln 15,ln 8,
                                                        ex(var_w("value",32),ln 15,ln 8,w8),
                                                        call
                                                          ("reg'PSR",w32,var("x",@{typ PSR}),
                                                           @{theory}))],@{theory}),@{theory}))),
                                     mu(lu,qTy)),
                                 close
                                   (var_a HOLogic.unitT,
                                    ite(bop(Bit,var_w("bytemask",4),ln 0),
                                        mb(const
                                             ("SPSR",
                                              @{typ "'b state_scheme \<Rightarrow> (PSR \<times> 'b state_scheme)"},
                                              @{theory}),
                                           close
                                             (var("v",@{typ PSR}),
                                              mb(call
                                                   ("write'SPSR",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                    call
                                                      ("write'reg'PSR",@{typ PSR},
                                                       tp[var("v",@{typ PSR}),
                                                          bfi(ln 7,ln 5,
                                                              ex(var_w("value",32),ln 7,ln 5,
                                                                 (Word_Lib.mk_wordT 3)),
                                                              call
                                                                ("reg'PSR",w32,var("v",@{typ PSR}),
                                                                 @{theory}))],@{theory}),@{theory}),
                                                 close
                                                   (var_a HOLogic.unitT,
                                                    mb(call
                                                         ("BadMode",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          ex(var_w("value",32),ln 4,ln 0,
                                                             (Word_Lib.mk_wordT 5)),@{theory}),
                                                       close
                                                         (var_b"b",
                                                          ite(var_b"b",
                                                              call
                                                                ("raise'exception",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (unit \<times> 'b state_scheme)"},
                                                                 call
                                                                   ("exception.UNPREDICTABLE",
                                                                    @{typ exception},
                                                                    cc[ls
                                                                        "SPSRWriteByInstr: BadMode: ",
                                                                       mop(Cast(@{typ string}),
                                                                           ex(var_w("value",32),
                                                                              ln 4,ln 0,
                                                                              (Word_Lib.mk_wordT 5)))],
                                                                    @{theory}),@{theory}),
                                                              mb(const
                                                                   ("SPSR",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (PSR \<times> 'b state_scheme)"},
                                                                    @{theory}),
                                                                 close
                                                                   (var("x",@{typ PSR}),
                                                                    call
                                                                      ("write'SPSR",
                                                                       @{typ
                                                                       "'b state_scheme \<Rightarrow>
                                                                        (unit \<times> 'b state_scheme)"},
                                                                       call
                                                                         ("write'reg'PSR",
                                                                          @{typ PSR},
                                                                          tp[var("x",@{typ PSR}),
                                                                             bfi(ln 4,ln 0,
                                                                                 ex(var_w("value",32),
                                                                                    ln 4,ln 0,
                                                                                    (Word_Lib.mk_wordT 5)),
                                                                                 call
                                                                                   ("reg'PSR",w32,
                                                                                    var("x",
                                                                                        @{typ PSR}),
                                                                                    @{theory}))],
                                                                          @{theory}),@{theory})))))))))),
                                        mu(lu,qTy))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("RBankSelect",
   close
     (tp[var_w("mode",5),var("usr",@{typ RName}),var("fiq",@{typ RName}),var("irq",@{typ RName}),
         var("svc",@{typ RName}),var("abt",@{typ RName}),var("und",@{typ RName}),
         var("mon",@{typ RName}),var("hyp",@{typ RName})],
      mb(call
           ("BadMode",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},var_w("mode",5),@{theory}),
         close
           (var_b"b",
            ite(var_b"b",
                call
                  ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (RName \<times> 'b state_scheme)"},
                   call
                     ("exception.UNPREDICTABLE",@{typ exception},
                      cc[ls"RBankSelect: BadMode",mop(Cast(@{typ string}),var_w("mode",5))],
                      @{theory}),@{theory}),
                mu(itb([(eq(var_w("mode",5),lw(16,5)),var("usr",@{typ RName})),
                        (eq(var_w("mode",5),lw(17,5)),var("fiq",@{typ RName})),
                        (eq(var_w("mode",5),lw(18,5)),var("irq",@{typ RName})),
                        (eq(var_w("mode",5),lw(19,5)),var("svc",@{typ RName})),
                        (eq(var_w("mode",5),lw(22,5)),var("mon",@{typ RName})),
                        (eq(var_w("mode",5),lw(23,5)),var("abt",@{typ RName})),
                        (eq(var_w("mode",5),lw(26,5)),var("hyp",@{typ RName})),
                        (eq(var_w("mode",5),lw(27,5)),var("und",@{typ RName})),
                        (eq(var_w("mode",5),lw(31,5)),var("usr",@{typ RName}))],lx @{typ RName}),qTy))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("RfiqBankSelect",
   close
     (tp[var_w("mode",5),var("usr",@{typ RName}),var("fiq",@{typ RName})],
      call
        ("RBankSelect",@{typ "'b state_scheme \<Rightarrow> (RName \<times> 'b state_scheme)"},
         tp[var_w("mode",5),var("usr",@{typ RName}),var("fiq",@{typ RName}),var("usr",@{typ RName}),
            var("usr",@{typ RName}),var("usr",@{typ RName}),var("usr",@{typ RName}),
            var("usr",@{typ RName}),var("usr",@{typ RName})],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("LookUpRName",
   close
     (tp[var_w("n",4),var_w("mode",5)],
      itb([(eq(var_w("n",4),lw(0,4)),mu(lc("RName_0usr","RName",@{theory}),qTy)),
           (eq(var_w("n",4),lw(1,4)),mu(lc("RName_1usr","RName",@{theory}),qTy)),
           (eq(var_w("n",4),lw(2,4)),mu(lc("RName_2usr","RName",@{theory}),qTy)),
           (eq(var_w("n",4),lw(3,4)),mu(lc("RName_3usr","RName",@{theory}),qTy)),
           (eq(var_w("n",4),lw(4,4)),mu(lc("RName_4usr","RName",@{theory}),qTy)),
           (eq(var_w("n",4),lw(5,4)),mu(lc("RName_5usr","RName",@{theory}),qTy)),
           (eq(var_w("n",4),lw(6,4)),mu(lc("RName_6usr","RName",@{theory}),qTy)),
           (eq(var_w("n",4),lw(7,4)),mu(lc("RName_7usr","RName",@{theory}),qTy)),
           (eq(var_w("n",4),lw(8,4)),
            call
              ("RfiqBankSelect",@{typ "'b state_scheme \<Rightarrow> (RName \<times> 'b state_scheme)"},
               tp[var_w("mode",5),lc("RName_8usr","RName",@{theory}),
                  lc("RName_8fiq","RName",@{theory})],@{theory})),
           (eq(var_w("n",4),lw(9,4)),
            call
              ("RfiqBankSelect",@{typ "'b state_scheme \<Rightarrow> (RName \<times> 'b state_scheme)"},
               tp[var_w("mode",5),lc("RName_9usr","RName",@{theory}),
                  lc("RName_9fiq","RName",@{theory})],@{theory})),
           (eq(var_w("n",4),lw(10,4)),
            call
              ("RfiqBankSelect",@{typ "'b state_scheme \<Rightarrow> (RName \<times> 'b state_scheme)"},
               tp[var_w("mode",5),lc("RName_10usr","RName",@{theory}),
                  lc("RName_10fiq","RName",@{theory})],@{theory})),
           (eq(var_w("n",4),lw(11,4)),
            call
              ("RfiqBankSelect",@{typ "'b state_scheme \<Rightarrow> (RName \<times> 'b state_scheme)"},
               tp[var_w("mode",5),lc("RName_11usr","RName",@{theory}),
                  lc("RName_11fiq","RName",@{theory})],@{theory})),
           (eq(var_w("n",4),lw(12,4)),
            call
              ("RfiqBankSelect",@{typ "'b state_scheme \<Rightarrow> (RName \<times> 'b state_scheme)"},
               tp[var_w("mode",5),lc("RName_12usr","RName",@{theory}),
                  lc("RName_12fiq","RName",@{theory})],@{theory})),
           (eq(var_w("n",4),lw(13,4)),
            call
              ("RBankSelect",@{typ "'b state_scheme \<Rightarrow> (RName \<times> 'b state_scheme)"},
               tp[var_w("mode",5),lc("RName_SPusr","RName",@{theory}),
                  lc("RName_SPfiq","RName",@{theory}),lc("RName_SPirq","RName",@{theory}),
                  lc("RName_SPsvc","RName",@{theory}),lc("RName_SPabt","RName",@{theory}),
                  lc("RName_SPund","RName",@{theory}),lc("RName_SPmon","RName",@{theory}),
                  lc("RName_SPhyp","RName",@{theory})],@{theory})),
           (eq(var_w("n",4),lw(14,4)),
            call
              ("RBankSelect",@{typ "'b state_scheme \<Rightarrow> (RName \<times> 'b state_scheme)"},
               tp[var_w("mode",5),lc("RName_LRusr","RName",@{theory}),
                  lc("RName_LRfiq","RName",@{theory}),lc("RName_LRirq","RName",@{theory}),
                  lc("RName_LRsvc","RName",@{theory}),lc("RName_LRabt","RName",@{theory}),
                  lc("RName_LRund","RName",@{theory}),lc("RName_LRmon","RName",@{theory}),
                  lc("RName_LRusr","RName",@{theory})],@{theory})),
           (eq(var_w("n",4),lw(15,4)),
            call
              ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (RName \<times> 'b state_scheme)"},
               call
                 ("exception.ASSERT",@{typ exception},ls"LookUpRName: n >= 0 and n <= 14",@{theory}),
               @{theory}))],lx(@{typ "'b state_scheme \<Rightarrow> (RName \<times> 'b state_scheme)"}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("Rmode",
   close
     (tp[var_w("n",4),var_w("mode",5)],
      mb(call("IsSecure",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,@{theory}),
         close
           (var_b"v",
            mb(mu(mop(Not,var_b"v"),qTy),
               close
                 (var_b"notSecure",
                  mb(ite(bop(And,var_b"notSecure",eq(var_w("mode",5),lw(22,5))),
                         call
                           ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            call("exception.UNPREDICTABLE",@{typ exception},ls"Rmode",@{theory}),
                            @{theory}),mu(lu,qTy)),
                     close
                       (var_a HOLogic.unitT,
                        mb(mr(close
                                (var("s",qTy),call("state.CP15",@{typ CP15},var("s",qTy),@{theory}))),
                           close
                             (var("v",@{typ CP15}),
                              mb(mb(mb(mb(mb(mu(call
                                                  ("CP15.NSACR",@{typ NSACR},var("v",@{typ CP15}),
                                                   @{theory}),qTy),
                                             close
                                               (var("v",@{typ NSACR}),
                                                mu(call
                                                     ("NSACR.RFR",HOLogic.boolT,
                                                      var("v",@{typ NSACR}),@{theory}),qTy))),
                                          close
                                            (var_b"v",
                                             mu(bop(And,eq(var_w("mode",5),lw(17,5)),var_b"v"),qTy))),
                                       close(var_b"v",mu(bop(And,var_b"notSecure",var_b"v"),qTy))),
                                    close
                                      (var_b"b",
                                       ite(var_b"b",
                                           call
                                             ("raise'exception",
                                              @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                              call
                                                ("exception.UNPREDICTABLE",@{typ exception},
                                                 ls"Rmode",@{theory}),@{theory}),mu(lu,qTy)))),
                                 close
                                   (var_a HOLogic.unitT,
                                    mb(mr(close
                                            (var("s",qTy),
                                             call
                                               ("state.REG",@{typ "RName \<Rightarrow> 32 word"},
                                                var("s",qTy),@{theory}))),
                                       close
                                         (var("v",@{typ "RName \<Rightarrow> 32 word"}),
                                          mb(call
                                               ("LookUpRName",
                                                @{typ "'b state_scheme \<Rightarrow> (RName \<times> 'b state_scheme)"},
                                                tp[var_w("n",4),var_w("mode",5)],@{theory}),
                                             close
                                               (var("v0",@{typ RName}),
                                                mu(apply
                                                     (var("v",@{typ "RName \<Rightarrow> 32 word"}),
                                                      var("v0",@{typ RName})),qTy)))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("write'Rmode",
   close
     (tp[var_w("value",32),var_w("n",4),var_w("mode",5)],
      mb(call("IsSecure",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,@{theory}),
         close
           (var_b"v",
            mb(mu(mop(Not,var_b"v"),qTy),
               close
                 (var_b"notSecure",
                  mb(ite(bop(And,var_b"notSecure",eq(var_w("mode",5),lw(22,5))),
                         call
                           ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            call("exception.UNPREDICTABLE",@{typ exception},ls"Rmode",@{theory}),
                            @{theory}),mu(lu,qTy)),
                     close
                       (var_a HOLogic.unitT,
                        mb(mr(close
                                (var("s",qTy),call("state.CP15",@{typ CP15},var("s",qTy),@{theory}))),
                           close
                             (var("v",@{typ CP15}),
                              mb(mb(mb(mb(mb(mu(call
                                                  ("CP15.NSACR",@{typ NSACR},var("v",@{typ CP15}),
                                                   @{theory}),qTy),
                                             close
                                               (var("v",@{typ NSACR}),
                                                mu(call
                                                     ("NSACR.RFR",HOLogic.boolT,
                                                      var("v",@{typ NSACR}),@{theory}),qTy))),
                                          close
                                            (var_b"v",
                                             mu(bop(And,eq(var_w("mode",5),lw(17,5)),var_b"v"),qTy))),
                                       close(var_b"v",mu(bop(And,var_b"notSecure",var_b"v"),qTy))),
                                    close
                                      (var_b"b",
                                       ite(var_b"b",
                                           call
                                             ("raise'exception",
                                              @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                              call
                                                ("exception.UNPREDICTABLE",@{typ exception},
                                                 ls"Rmode",@{theory}),@{theory}),mu(lu,qTy)))),
                                 close
                                   (var_a HOLogic.unitT,
                                    mb(call
                                         ("CurrentInstrSet",
                                          @{typ "'b state_scheme \<Rightarrow> (InstrSet \<times> 'b state_scheme)"},lu,
                                          @{theory}),
                                       close
                                         (var("v",@{typ InstrSet}),
                                          mb(mb(mb(mb(mb(mu(eq(var("v",@{typ InstrSet}),
                                                               lc("InstrSet_ARM","InstrSet",
                                                                  @{theory})),qTy),
                                                         close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                                      close
                                                        (var_b"v",
                                                         mu(bop(And,
                                                                mop(Not,
                                                                    eq(ex(var_w("value",32),ln 1,
                                                                          ln 0,(Word_Lib.mk_wordT 2)),
                                                                       lw(0,2))),var_b"v"),qTy))),
                                                   close
                                                     (var_b"v",
                                                      mu(bop(And,eq(var_w("n",4),lw(13,4)),var_b"v"),
                                                         qTy))),
                                                close
                                                  (var_b"b",
                                                   ite(var_b"b",
                                                       call
                                                         ("raise'exception",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                          call
                                                            ("exception.UNPREDICTABLE",
                                                             @{typ exception},ls"Rmode",@{theory}),
                                                          @{theory}),mu(lu,qTy)))),
                                             close
                                               (var_a HOLogic.unitT,
                                                mb(call
                                                     ("LookUpRName",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (RName \<times> 'b state_scheme)"},
                                                      tp[var_w("n",4),var_w("mode",5)],@{theory}),
                                                   close
                                                     (var("x",@{typ RName}),
                                                      mb(mr(close
                                                              (var("s",qTy),
                                                               call
                                                                 ("state.REG",
                                                                  @{typ
                                                                  "RName \<Rightarrow> 32 word"},
                                                                  var("s",qTy),@{theory}))),
                                                         close
                                                           (var("v",
                                                                @{typ "RName \<Rightarrow> 32 word"}),
                                                            mb(mu(fupd
                                                                    (var("v",
                                                                         @{typ
                                                                         "RName \<Rightarrow>
                                                                          32 word"}),
                                                                     var("x",@{typ RName}),
                                                                     var_w("value",32)),qTy),
                                                               close
                                                                 (var("v",
                                                                      @{typ
                                                                      "RName \<Rightarrow> 32 word"}),
                                                                  mw(close
                                                                       (var("s",qTy),
                                                                        rupd
                                                                          ("state.REG",
                                                                           tp[var("s",qTy),
                                                                              var("v",
                                                                                  @{typ
                                                                                  "RName \<Rightarrow>
                                                                                   32 word"})],
                                                                           @{theory})))))))))))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("R",
   close
     (var_w("n",4),
      ite(eq(var_w("n",4),lw(15,4)),
          mb(call
               ("CurrentInstrSet",@{typ "'b state_scheme \<Rightarrow> (InstrSet \<times> 'b state_scheme)"},lu,
                @{theory}),
             close
               (var("v",@{typ InstrSet}),
                mb(mb(mu(eq(var("v",@{typ InstrSet}),lc("InstrSet_ARM","InstrSet",@{theory})),qTy),
                      close(var_b"b",mu(ite(var_b"b",lw(8,32),lw(4,32)),qTy))),
                   close
                     (var_w("offset",32),
                      mb(mr(close
                              (var("s",qTy),
                               call
                                 ("state.REG",@{typ "RName \<Rightarrow> 32 word"},var("s",qTy),
                                  @{theory}))),
                         close
                           (var("v",@{typ "RName \<Rightarrow> 32 word"}),
                            mb(mu(apply
                                    (var("v",@{typ "RName \<Rightarrow> 32 word"}),
                                     lc("RName_PC","RName",@{theory})),qTy),
                               close
                                 (var_w("v",32),mu(bop(Add,var_w("v",32),var_w("offset",32)),qTy))))))))),
          mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
             close
               (var("v",@{typ PSR}),
                mb(mb(mu(call("PSR.M",(Word_Lib.mk_wordT 5),var("v",@{typ PSR}),@{theory}),qTy),
                      close(var_w("v",5),mu(tp[var_w("n",4),var_w("v",5)],qTy))),
                   close
                     (var("v",@{typ "4 word \<times> 5 word"}),
                      call
                        ("Rmode",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                         var("v",@{typ "4 word \<times> 5 word"}),@{theory}))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("write'R",
   close
     (tp[var_w("value",32),var_w("n",4)],
      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory}))),
         close
           (var("v",@{typ PSR}),
            mb(mb(mu(call("PSR.M",(Word_Lib.mk_wordT 5),var("v",@{typ PSR}),@{theory}),qTy),
                  close(var_w("v",5),mu(tp[var_w("n",4),var_w("v",5)],qTy))),
               close
                 (var("x",@{typ "4 word \<times> 5 word"}),
                  call
                    ("write'Rmode",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                     tp[var_w("value",32),var("x",@{typ "4 word \<times> 5 word"})],@{theory})))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("SP",call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},lw(13,4),@{theory}))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'SP",
   close
     (var_w("value",32),
      call
        ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
         tp[var_w("value",32),lw(13,4)],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("LR",call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},lw(14,4),@{theory}))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'LR",
   close
     (var_w("value",32),
      call
        ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
         tp[var_w("value",32),lw(14,4)],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("PC",call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},lw(15,4),@{theory}))
end
\<close>


ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("BranchTo",
   close
     (var_w("address",32),
      mb(mr(close
              (var("s",qTy),
               call("state.REG",@{typ "RName \<Rightarrow> 32 word"},var("s",qTy),@{theory}))),
         close
           (var("v",@{typ "RName \<Rightarrow> 32 word"}),
            mb(mu(fupd
                    (var("v",@{typ "RName \<Rightarrow> 32 word"}),lc("RName_PC","RName",@{theory}),
                     var_w("address",32)),qTy),
               close
                 (var("v",@{typ "RName \<Rightarrow> 32 word"}),
                  mw(close
                       (var("s",qTy),
                        rupd
                          ("state.REG",
                           tp[var("s",qTy),var("v",@{typ "RName \<Rightarrow> 32 word"})],@{theory})))))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("PCStoreValue",
   close
     (var_a HOLogic.unitT,
      const("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("BranchWritePC",
   close
     (var_w("address",32),
      mb(call("CurrentInstrSet",@{typ "'b state_scheme \<Rightarrow> (InstrSet \<times> 'b state_scheme)"},lu,@{theory}),
         close
           (var("v",@{typ InstrSet}),
            mb(mu(eq(var("v",@{typ InstrSet}),lc("InstrSet_ARM","InstrSet",@{theory})),qTy),
               close
                 (var_b"b",
                  ite(var_b"b",
                      mb(call
                           ("ArchVersion",@{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                            @{theory}),
                         close
                           (var_n"v",
                            mb(mb(mb(mu(bop(Lt,var_n"v",ln 6),qTy),
                                     close
                                       (var_b"b",
                                        mu(bop(And,var_b"b",
                                               mop(Not,
                                                   eq(ex(var_w("address",32),ln 1,ln 0,
                                                         (Word_Lib.mk_wordT 2)),lw(0,2)))),qTy))),
                                  close
                                    (var_b"b",
                                     ite(var_b"b",
                                         call
                                           ("raise'exception",
                                            @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                            call
                                              ("exception.UNPREDICTABLE",@{typ exception},
                                               ls"BranchWritePC",@{theory}),@{theory}),mu(lu,qTy)))),
                               close
                                 (var_a HOLogic.unitT,
                                  call
                                    ("BranchTo",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                     cc[ex(var_w("address",32),ln 31,ln 2,(Word_Lib.mk_wordT 30)),
                                        lw(0,2)],@{theory}))))),
                      call
                        ("BranchTo",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                         cc[ex(var_w("address",32),ln 31,ln 1,(Word_Lib.mk_wordT 31)),lw(0,1)],
                         @{theory}))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("BXWritePC",
   close
     (var_w("address",32),
      mb(call("CurrentInstrSet",@{typ "'b state_scheme \<Rightarrow> (InstrSet \<times> 'b state_scheme)"},lu,@{theory}),
         close
           (var("v",@{typ InstrSet}),
            mb(mu(eq(var("v",@{typ InstrSet}),lc("InstrSet_ThumbEE","InstrSet",@{theory})),qTy),
               close
                 (var_b"b",
                  itb([(var_b"b",
                        ite(bop(Bit,var_w("address",32),ln 0),
                            call
                              ("BranchTo",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                               cc[ex(var_w("address",32),ln 31,ln 1,(Word_Lib.mk_wordT 31)),lw(0,1)],
                               @{theory}),
                            call
                              ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                               call
                                 ("exception.UNPREDICTABLE",@{typ exception},ls"BXWritePC",@{theory}),
                               @{theory}))),
                       (bop(Bit,var_w("address",32),ln 0),
                        mb(call
                             ("SelectInstrSet",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                              lc("InstrSet_Thumb","InstrSet",@{theory}),@{theory}),
                           close
                             (var_a HOLogic.unitT,
                              call
                                ("BranchTo",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                 cc[ex(var_w("address",32),ln 31,ln 1,(Word_Lib.mk_wordT 31)),
                                    lw(0,1)],@{theory})))),
                       (mop(Not,bop(Bit,var_w("address",32),ln 1)),
                        mb(call
                             ("SelectInstrSet",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                              lc("InstrSet_ARM","InstrSet",@{theory}),@{theory}),
                           close
                             (var_a HOLogic.unitT,
                              call
                                ("BranchTo",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                 var_w("address",32),@{theory}))))],
                      call
                        ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                         call("exception.UNPREDICTABLE",@{typ exception},ls"BXWritePC",@{theory}),
                         @{theory}))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("LoadWritePC",
   close
     (var_w("address",32),
      mb(call("ArchVersion",@{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,@{theory}),
         close
           (var_n"v",
            mb(mu(bop(Ge,var_n"v",ln 5),qTy),
               close
                 (var_b"b",
                  ite(var_b"b",
                      call
                        ("BXWritePC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                         var_w("address",32),@{theory}),
                      call
                        ("BranchWritePC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                         var_w("address",32),@{theory}))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("ALUWritePC",
   close
     (var_w("address",32),
      mb(call("ArchVersion",@{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,@{theory}),
         close
           (var_n"v",
            mb(mb(mu(bop(Ge,var_n"v",ln 7),qTy),
                  close
                    (var_b"b",
                     ite(var_b"b",
                         mb(call
                              ("CurrentInstrSet",
                               @{typ "'b state_scheme \<Rightarrow> (InstrSet \<times> 'b state_scheme)"},lu,@{theory}),
                            close
                              (var("v",@{typ InstrSet}),
                               mu(eq(var("v",@{typ InstrSet}),
                                     lc("InstrSet_ARM","InstrSet",@{theory})),qTy))),mu(lf,qTy)))),
               close
                 (var_b"b",
                  ite(var_b"b",
                      call
                        ("BXWritePC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                         var_w("address",32),@{theory}),
                      call
                        ("BranchWritePC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                         var_w("address",32),@{theory}))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("ThisInstrLength",
   close
     (var_a HOLogic.unitT,
      mb(mr(close(var("s",qTy),call("state.Encoding",@{typ Encoding},var("s",qTy),@{theory}))),
         close
           (var("v",@{typ Encoding}),
            mb(mu(eq(var("v",@{typ Encoding}),lc("Encoding_Thumb","Encoding",@{theory})),qTy),
               close(var_b"b",mu(ite(var_b"b",ln 16,ln 32),qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("IncPC",
   close
     (var_a HOLogic.unitT,
      mb(mr(close
              (var("s",qTy),
               call("state.REG",@{typ "RName \<Rightarrow> 32 word"},var("s",qTy),@{theory}))),
         close
           (var("v",@{typ "RName \<Rightarrow> 32 word"}),
            mb(mb(mu(apply
                       (var("v",@{typ "RName \<Rightarrow> 32 word"}),
                        lc("RName_PC","RName",@{theory})),qTy),
                  close
                    (var_w("v",32),
                     mb(call
                          ("ThisInstrLength",@{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                           @{theory}),
                        close
                          (var_n"v0",
                           mb(mb(mu(eq(var_n"v0",ln 16),qTy),
                                 close(var_b"b",mu(ite(var_b"b",lw(2,32),lw(4,32)),qTy))),
                              close(var_w("v0",32),mu(bop(Add,var_w("v",32),var_w("v0",32)),qTy))))))),
               close
                 (var_w("v",32),
                  call
                    ("BranchTo",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},var_w("v",32),
                     @{theory})))))))
end
\<close>


thm IncPC_def
(*lemma
  "mem1 1 (s \<lparr>MEM := empty , exception := NoException\<rparr>) = 
     (HOL.undefined, s \<lparr>MEM := empty , exception := UNPREDICTABLE ''undefined memory'' \<rparr>)"
  by (clarsimp simp: mem1_def raise'exception_def)

*)





(* read one memory location and return bool list, exception for undefined memory*) 

definition
  "mem1" :: "paddr \<Rightarrow> 'b state_scheme \<Rightarrow> bool list \<times> 'b state_scheme"
where
  "mem1 \<equiv> \<lambda>pa. do{
                     v \<leftarrow> read_state MEM;
                     v \<leftarrow> return (v pa);
                     case v of 
                          None   \<Rightarrow> raise'exception (UNPREDICTABLE ''undefined memory'')
                        | Some v \<Rightarrow> return (bitstring_field 7 0 (nat_to_bitstring (nat (uint v))))
  }"



definition
  mem_read1 :: "paddr \<times> nat \<Rightarrow> 'b state_scheme \<Rightarrow> bool list \<times> 'b state_scheme"
where
  "mem_read1 \<equiv>
   \<lambda>(address, size).
   if size = 1 then do {
                      v \<leftarrow> mem1 (address r+ 0);
                      return (bitstring_field 7 0 v)
                    }
   else if size = 2 then do {
                           v \<leftarrow> mem1 (address r+ 1);
                           v \<leftarrow> do {
                               v0 \<leftarrow> mem1 (address r+ 0);
                               return (v @ v0)
                             };
                           return (bitstring_field 15 0 v)
                         }
        else if size = 4 then do {
                                v \<leftarrow> mem1 (address r+ 3);
                                v \<leftarrow> do {
                                    v0 \<leftarrow> mem1 (address r+ 2);
                                    v0 \<leftarrow> do {
                                        v1 \<leftarrow> mem1 (address r+ 1);
                                        v1 \<leftarrow> do {
                                            v2 \<leftarrow> mem1 (address r+ 0);
                                            return (v1 @ v2)
                                          };
                                        return (v0 @ v1)
                                      };
                                    return (v @ v0)
                                  };
                                return (bitstring_field 31 0 v)
                              }
             else if size = 8 then do {
                                     v \<leftarrow> mem1 (address r+ 7);
                                     v \<leftarrow> do {
                                         v0 \<leftarrow> mem1 (address r+ 6);
                                         v0 \<leftarrow> do {
                                             v1 \<leftarrow> mem1 (address r+ 5);
                                             v1 \<leftarrow> do {
                                                 v2 \<leftarrow> mem1 (address r+ 4);
                                                 v2 \<leftarrow> do {
                                                     v3 \<leftarrow> mem1 (address r+ 3);
                                                     v3 \<leftarrow> do {
                                                         v4 \<leftarrow> mem1 (address r+ 2);
                                                         v4 \<leftarrow> do {
                                                             v5 \<leftarrow> mem1 (address r+ 1);
                                                             v5 \<leftarrow> do {
                                                                 v6 \<leftarrow> mem1 (address r+ 0);
                                                                 return (v5 @ v6)
                                                               };
                                                             return (v4 @ v5)
                                                           };
                                                         return (v3 @ v4)
                                                       };
                                                     return (v2 @ v3)
                                                   };
                                                 return (v1 @ v2)
                                               };
                                             return (v0 @ v1)
                                           };
                                         return (v @ v0)
                                       };
                                     return (bitstring_field 63 0 v)
                                   }
                  else raise'exception (ASSERT ''mem: size in {1, 2, 4, 8}'')"


(*definition
  mem_read1 :: "paddr \<times> nat \<Rightarrow> 'b state_scheme \<Rightarrow> bool list \<times> 'b state_scheme"
where
  "mem_read1 \<equiv>
\<lambda>(address, size).
   if size = 1 then do {
                      v \<leftarrow> mem1 (address r+ 0);
                      return (bitstring_field 7 0 v)
                    }
   else if size = 2 then do {
                           v \<leftarrow> mem1 (address r+ 1);
                           v \<leftarrow> return (bitstring_field 7 0 v);
                           v \<leftarrow> do {
                               v0 \<leftarrow> mem1 (address r+ 0);
                               v0 \<leftarrow> return (bitstring_field 7 0 v0);
                               return (v @ v0)
                             };
                           return (bitstring_field 15 0 v)
                         }
        else if size = 4 then do {
                                v \<leftarrow> mem1 (address r+ 3);
                                v \<leftarrow> return (bitstring_field 7 0 v);
                                v \<leftarrow> do {
                                    v0 \<leftarrow> mem1 (address r+ 2);
                                    v0 \<leftarrow> return (bitstring_field 7 0 v0);
                                    v0 \<leftarrow> do {
                                        v1 \<leftarrow> mem1 (address r+ 1);
                                        v1 \<leftarrow> return (bitstring_field 7 0 v1);
                                        v1 \<leftarrow> do {
                                            v2 \<leftarrow> mem1 (address r+ 0);
                                            v2 \<leftarrow> return (bitstring_field 7 0 v2);
                                            return (v1 @ v2)
                                          };
                                        return (v0 @ v1)
                                      };
                                    return (v @ v0)
                                  };
                                return (bitstring_field 31 0 v)
                              }
             else if size = 8 then do {
                                     v \<leftarrow> mem1 (address r+ 7);
                                     v \<leftarrow> return (bitstring_field 7 0 v);
                                     v \<leftarrow> do {
                                         v0 \<leftarrow> mem1 (address r+ 6);
                                         v0 \<leftarrow> return (bitstring_field 7 0 v0);
                                         v0 \<leftarrow> do {
                                             v1 \<leftarrow> mem1 (address r+ 5);
                                             v1 \<leftarrow> return (bitstring_field 7 0 v1);
                                             v1 \<leftarrow> do {
                                                 v2 \<leftarrow> mem1 (address r+ 4);
                                                 v2 \<leftarrow> return (bitstring_field 7 0 v2);
                                                 v2 \<leftarrow> do {
                                                     v3 \<leftarrow> mem1 (address r+ 3);
                                                     v3 \<leftarrow> return (bitstring_field 7 0 v3);
                                                     v3 \<leftarrow> do {
                                                         v4 \<leftarrow> mem1 (address r+ 2);
                                                         v4 \<leftarrow> return (bitstring_field 7 0 v4);
                                                         v4 \<leftarrow> do {
                                                             v5 \<leftarrow> mem1 (address r+ 1);
                                                             v5 \<leftarrow> return (bitstring_field 7 0 v5);
                                                             v5 \<leftarrow> do {
                                                                 v6 \<leftarrow> mem1 (address r+ 0);
                                                                 v6 \<leftarrow> return (bitstring_field 7 0 v6);
                                                                 return (v5 @ v6)
                                                               };
                                                             return (v4 @ v5)
                                                           };
                                                         return (v3 @ v4)
                                                       };
                                                     return (v2 @ v3)
                                                   };
                                                 return (v1 @ v2)
                                               };
                                             return (v0 @ v1)
                                           };
                                         return (v @ v0)
                                       };
                                     return (bitstring_field 63 0 v)
                                   }
                  else raise'exception (ASSERT ''mem: size in {1, 2, 4, 8}'')"
*)
(*value mem
thm mem_def *)

(*definition
  mem :: "32 word \<times> nat \<Rightarrow> 'b state_scheme \<Rightarrow> bool list \<times> 'b state_scheme"
where
  "mem \<equiv> \<lambda>(address, size).
          if size = 1 then if mem1 (address + 0) = HOL.undefined then raise'exception (UNPREDICTABLE ''undefined memory'') else do {
                                            v \<leftarrow> mem1 (address + 0);
                                            return (bitstring_field 7 0 v)
                                          }
          else if size = 2
               then if mem1 (address + 0) = HOL.undefined \<or> mem1 (address + 1) = HOL.undefined then raise'exception (UNPREDICTABLE ''undefined memory'')
                    else do {
                           v \<leftarrow> mem1 (address + 1);
                           v \<leftarrow> do {
                               v0 \<leftarrow> mem1 (address + 0);
                               return (v @ v0)
                             };
                           return (bitstring_field 15 0 v)
                         }
               else if size = 4
                    then if mem1 (address + 0) = HOL.undefined \<or>
                            mem1 (address + 1) = HOL.undefined \<or> mem1 (address + 2) = HOL.undefined \<or> mem1 (address + 3) = HOL.undefined
                         then raise'exception (UNPREDICTABLE ''undefined memory'') else do {
    v \<leftarrow> mem1 (address + 3);
    v \<leftarrow> do {
        v0 \<leftarrow> mem1 (address + 2);
        v0 \<leftarrow> do {
            v1 \<leftarrow> mem1 (address + 1);
            v1 \<leftarrow> do {
                v2 \<leftarrow> mem1 (address + 0);
                return (v1 @ v2)
              };
            return (v0 @ v1)
          };
        return (v @ v0)
      };
    return (bitstring_field 31 0 v)
  }
                    else if size = 8
                         then if mem1 (address + 0) = HOL.undefined \<or>
                                 mem1 (address + 1) = HOL.undefined \<or>
                                 mem1 (address + 2) = HOL.undefined \<or>
                                 mem1 (address + 3) = HOL.undefined \<or>
                                 mem1 (address + 4) = HOL.undefined \<or>
                                 mem1 (address + 5) = HOL.undefined \<or> mem1 (address + 6) = HOL.undefined \<or> mem1 (address + 7) = HOL.undefined
                              then raise'exception (UNPREDICTABLE ''undefined memory'') else do {
         v \<leftarrow> mem1 (address + 7);
         v \<leftarrow> do {
             v0 \<leftarrow> mem1 (address + 6);
             v0 \<leftarrow> do {
                 v1 \<leftarrow> mem1 (address + 5);
                 v1 \<leftarrow> do {
                     v2 \<leftarrow> mem1 (address + 4);
                     v2 \<leftarrow> do {
                         v3 \<leftarrow> mem1 (address + 3);
                         v3 \<leftarrow> do {
                             v4 \<leftarrow> mem1 (address + 2);
                             v4 \<leftarrow> do {
                                 v5 \<leftarrow> mem1 (address + 1);
                                 v5 \<leftarrow> do {
                                     v6 \<leftarrow> mem1 (address + 0);
                                     return (v5 @ v6)
                                   };
                                 return (v4 @ v5)
                               };
                             return (v3 @ v4)
                           };
                         return (v2 @ v3)
                       };
                     return (v1 @ v2)
                   };
                 return (v0 @ v1)
               };
             return (v @ v0)
           };
         return (bitstring_field 63 0 v)
       }
                         else raise'exception (ASSERT ''mem: size in {1, 2, 4, 8}'')"
thm mem_def
value mem *)


(*

 if size = 1 then do {
                      v \<leftarrow> read_state MEM;
                      v \<leftarrow> return (v(address + 0 := Some (of_bl (bitstring_field 7 0 value))));
                      update_state (MEM_update (\<lambda>_. v))
                    }
*)

(*
ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("write'mem1",
   close
     (tp[var_v"value",var_w("address",32),var_n"size"],
      itb([(eq(var_n"size",ln 1),
            mb(mr(close
                    (var("s",qTy),
                     call("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},var("s",qTy),@{theory}))),
               close
                 (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                  mb(mu(fupd
                          (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                           bop(Add,var_w("address",32),lw(0,32)),
                           mop(Cast w8,ex(var_v"value",ln 7,ln 0,@{typ "bool list"}))),qTy),
                     close
                       (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                        mw(close
                             (var("s",qTy),
                              rupd
                                ("state.MEM",
                                 tp[var("s",qTy),var("v",@{typ "32 word \<Rightarrow> 8 word"})],
                                 @{theory})))))))),
           (eq(var_n"size",ln 2),
            mb(mb(mr(close
                       (var("s",qTy),
                        call
                          ("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},var("s",qTy),@{theory}))),
                  close
                    (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                     mb(mu(fupd
                             (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                              bop(Add,var_w("address",32),lw(0,32)),
                              mop(Cast w8,ex(var_v"value",ln 7,ln 0,@{typ "bool list"}))),qTy),
                        close
                          (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                           mw(close
                                (var("s",qTy),
                                 rupd
                                   ("state.MEM",
                                    tp[var("s",qTy),var("v",@{typ "32 word \<Rightarrow> 8 word"})],
                                    @{theory}))))))),
               close
                 (var_a HOLogic.unitT,
                  mb(mr(close
                          (var("s",qTy),
                           call
                             ("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},var("s",qTy),
                              @{theory}))),
                     close
                       (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                        mb(mu(fupd
                                (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                                 bop(Add,var_w("address",32),lw(1,32)),
                                 mop(Cast w8,ex(var_v"value",ln 15,ln 8,@{typ "bool list"}))),qTy),
                           close
                             (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                              mw(close
                                   (var("s",qTy),
                                    rupd
                                      ("state.MEM",
                                       tp[var("s",qTy),
                                          var("v",@{typ "32 word \<Rightarrow> 8 word"})],@{theory})))))))))),
           (eq(var_n"size",ln 4),
            mb(mb(mr(close
                       (var("s",qTy),
                        call
                          ("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},var("s",qTy),@{theory}))),
                  close
                    (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                     mb(mu(fupd
                             (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                              bop(Add,var_w("address",32),lw(0,32)),
                              mop(Cast w8,ex(var_v"value",ln 7,ln 0,@{typ "bool list"}))),qTy),
                        close
                          (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                           mw(close
                                (var("s",qTy),
                                 rupd
                                   ("state.MEM",
                                    tp[var("s",qTy),var("v",@{typ "32 word \<Rightarrow> 8 word"})],
                                    @{theory}))))))),
               close
                 (var_a HOLogic.unitT,
                  mb(mb(mr(close
                             (var("s",qTy),
                              call
                                ("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},var("s",qTy),
                                 @{theory}))),
                        close
                          (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                           mb(mu(fupd
                                   (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                                    bop(Add,var_w("address",32),lw(1,32)),
                                    mop(Cast w8,ex(var_v"value",ln 15,ln 8,@{typ "bool list"}))),qTy),
                              close
                                (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                                 mw(close
                                      (var("s",qTy),
                                       rupd
                                         ("state.MEM",
                                          tp[var("s",qTy),
                                             var("v",@{typ "32 word \<Rightarrow> 8 word"})],
                                          @{theory}))))))),
                     close
                       (var_a HOLogic.unitT,
                        mb(mb(mr(close
                                   (var("s",qTy),
                                    call
                                      ("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},
                                       var("s",qTy),@{theory}))),
                              close
                                (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                                 mb(mu(fupd
                                         (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                                          bop(Add,var_w("address",32),lw(2,32)),
                                          mop(Cast w8,
                                              ex(var_v"value",ln 23,ln 16,@{typ "bool list"}))),qTy),
                                    close
                                      (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                                       mw(close
                                            (var("s",qTy),
                                             rupd
                                               ("state.MEM",
                                                tp[var("s",qTy),
                                                   var("v",@{typ "32 word \<Rightarrow> 8 word"})],
                                                @{theory}))))))),
                           close
                             (var_a HOLogic.unitT,
                              mb(mr(close
                                      (var("s",qTy),
                                       call
                                         ("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},
                                          var("s",qTy),@{theory}))),
                                 close
                                   (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                                    mb(mu(fupd
                                            (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                                             bop(Add,var_w("address",32),lw(3,32)),
                                             mop(Cast w8,
                                                 ex(var_v"value",ln 31,ln 24,@{typ "bool list"}))),
                                          qTy),
                                       close
                                         (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                                          mw(close
                                               (var("s",qTy),
                                                rupd
                                                  ("state.MEM",
                                                   tp[var("s",qTy),
                                                      var("v",@{typ "32 word \<Rightarrow> 8 word"})],
                                                   @{theory})))))))))))))),
           (eq(var_n"size",ln 8),
            mb(mb(mr(close
                       (var("s",qTy),
                        call
                          ("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},var("s",qTy),@{theory}))),
                  close
                    (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                     mb(mu(fupd
                             (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                              bop(Add,var_w("address",32),lw(0,32)),
                              mop(Cast w8,ex(var_v"value",ln 7,ln 0,@{typ "bool list"}))),qTy),
                        close
                          (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                           mw(close
                                (var("s",qTy),
                                 rupd
                                   ("state.MEM",
                                    tp[var("s",qTy),var("v",@{typ "32 word \<Rightarrow> 8 word"})],
                                    @{theory}))))))),
               close
                 (var_a HOLogic.unitT,
                  mb(mb(mr(close
                             (var("s",qTy),
                              call
                                ("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},var("s",qTy),
                                 @{theory}))),
                        close
                          (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                           mb(mu(fupd
                                   (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                                    bop(Add,var_w("address",32),lw(1,32)),
                                    mop(Cast w8,ex(var_v"value",ln 15,ln 8,@{typ "bool list"}))),qTy),
                              close
                                (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                                 mw(close
                                      (var("s",qTy),
                                       rupd
                                         ("state.MEM",
                                          tp[var("s",qTy),
                                             var("v",@{typ "32 word \<Rightarrow> 8 word"})],
                                          @{theory}))))))),
                     close
                       (var_a HOLogic.unitT,
                        mb(mb(mr(close
                                   (var("s",qTy),
                                    call
                                      ("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},
                                       var("s",qTy),@{theory}))),
                              close
                                (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                                 mb(mu(fupd
                                         (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                                          bop(Add,var_w("address",32),lw(2,32)),
                                          mop(Cast w8,
                                              ex(var_v"value",ln 23,ln 16,@{typ "bool list"}))),qTy),
                                    close
                                      (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                                       mw(close
                                            (var("s",qTy),
                                             rupd
                                               ("state.MEM",
                                                tp[var("s",qTy),
                                                   var("v",@{typ "32 word \<Rightarrow> 8 word"})],
                                                @{theory}))))))),
                           close
                             (var_a HOLogic.unitT,
                              mb(mb(mr(close
                                         (var("s",qTy),
                                          call
                                            ("state.MEM",@{typ "32 word \<Rightarrow> 8 word"},
                                             var("s",qTy),@{theory}))),
                                    close
                                      (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                                       mb(mu(fupd
                                               (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                                                bop(Add,var_w("address",32),lw(3,32)),
                                                mop(Cast w8,
                                                    ex(var_v"value",ln 31,ln 24,@{typ "bool list"}))),
                                             qTy),
                                          close
                                            (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                                             mw(close
                                                  (var("s",qTy),
                                                   rupd
                                                     ("state.MEM",
                                                      tp[var("s",qTy),
                                                         var("v",
                                                             @{typ "32 word \<Rightarrow> 8 word"})],
                                                      @{theory}))))))),
                                 close
                                   (var_a HOLogic.unitT,
                                    mb(mb(mr(close
                                               (var("s",qTy),
                                                call
                                                  ("state.MEM",
                                                   @{typ "32 word \<Rightarrow> 8 word"},
                                                   var("s",qTy),@{theory}))),
                                          close
                                            (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                                             mb(mu(fupd
                                                     (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                                                      bop(Add,var_w("address",32),lw(4,32)),
                                                      mop(Cast w8,
                                                          ex(var_v"value",ln 39,ln 32,
                                                             @{typ "bool list"}))),qTy),
                                                close
                                                  (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                                                   mw(close
                                                        (var("s",qTy),
                                                         rupd
                                                           ("state.MEM",
                                                            tp[var("s",qTy),
                                                               var("v",
                                                                   @{typ
                                                                   "32 word \<Rightarrow> 8 word"})],
                                                            @{theory}))))))),
                                       close
                                         (var_a HOLogic.unitT,
                                          mb(mb(mr(close
                                                     (var("s",qTy),
                                                      call
                                                        ("state.MEM",
                                                         @{typ "32 word \<Rightarrow> 8 word"},
                                                         var("s",qTy),@{theory}))),
                                                close
                                                  (var("v",@{typ "32 word \<Rightarrow> 8 word"}),
                                                   mb(mu(fupd
                                                           (var("v",
                                                                @{typ
                                                                "32 word \<Rightarrow> 8 word"}),
                                                            bop(Add,var_w("address",32),lw(5,32)),
                                                            mop(Cast w8,
                                                                ex(var_v"value",ln 47,ln 40,
                                                                   @{typ "bool list"}))),qTy),
                                                      close
                                                        (var("v",
                                                             @{typ "32 word \<Rightarrow> 8 word"}),
                                                         mw(close
                                                              (var("s",qTy),
                                                               rupd
                                                                 ("state.MEM",
                                                                  tp[var("s",qTy),
                                                                     var("v",
                                                                         @{typ
                                                                         "32 word \<Rightarrow>
                                                                          8 word"})],@{theory}))))))),
                                             close
                                               (var_a HOLogic.unitT,
                                                mb(mb(mr(close
                                                           (var("s",qTy),
                                                            call
                                                              ("state.MEM",
                                                               @{typ "32 word \<Rightarrow> 8 word"},
                                                               var("s",qTy),@{theory}))),
                                                      close
                                                        (var("v",
                                                             @{typ "32 word \<Rightarrow> 8 word"}),
                                                         mb(mu(fupd
                                                                 (var("v",
                                                                      @{typ
                                                                      "32 word \<Rightarrow> 8 word"}),
                                                                  bop(Add,var_w("address",32),
                                                                      lw(6,32)),
                                                                  mop(Cast w8,
                                                                      ex(var_v"value",ln 55,ln 48,
                                                                         @{typ "bool list"}))),qTy),
                                                            close
                                                              (var("v",
                                                                   @{typ
                                                                   "32 word \<Rightarrow> 8 word"}),
                                                               mw(close
                                                                    (var("s",qTy),
                                                                     rupd
                                                                       ("state.MEM",
                                                                        tp[var("s",qTy),
                                                                           var("v",
                                                                               @{typ
                                                                               "32 word \<Rightarrow>
                                                                                8 word"})],@{theory}))))))),
                                                   close
                                                     (var_a HOLogic.unitT,
                                                      mb(mr(close
                                                              (var("s",qTy),
                                                               call
                                                                 ("state.MEM",
                                                                  @{typ
                                                                  "32 word \<Rightarrow> 8 word"},
                                                                  var("s",qTy),@{theory}))),
                                                         close
                                                           (var("v",
                                                                @{typ
                                                                "32 word \<Rightarrow> 8 word"}),
                                                            mb(mu(fupd
                                                                    (var("v",
                                                                         @{typ
                                                                         "32 word \<Rightarrow>
                                                                          8 word"}),
                                                                     bop(Add,var_w("address",32),
                                                                         lw(7,32)),
                                                                     mop(Cast w8,
                                                                         ex(var_v"value",ln 63,
                                                                            ln 56,@{typ "bool list"}))),
                                                                  qTy),
                                                               close
                                                                 (var("v",
                                                                      @{typ
                                                                      "32 word \<Rightarrow> 8 word"}),
                                                                  mw(close
                                                                       (var("s",qTy),
                                                                        rupd
                                                                          ("state.MEM",
                                                                           tp[var("s",qTy),
                                                                              var("v",
                                                                                  @{typ
                                                                                  "32 word \<Rightarrow>
                                                                                   8 word"})],
                                                                           @{theory}))))))))))))))))))))))],
          call
            ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
             call("exception.ASSERT",@{typ exception},ls"mem: size in {1, 2, 4, 8}",@{theory}),
             @{theory}))))
end
\<close>
*)

definition
  "write'mem1" :: "bool list \<times> paddr \<times> nat \<Rightarrow> 'b state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
  "write'mem1 \<equiv> \<lambda>(value, address, size).
   if size = 1 then do {
                      v \<leftarrow> read_state MEM;
                      v \<leftarrow> return (v(address r+ 0 := Some (of_bl (bitstring_field 7 0 value))));
                      update_state (MEM_update (\<lambda>_. v))
                    }
   else if size = 2 then do {
                           do {
                               v \<leftarrow> read_state MEM;
                               v \<leftarrow> return (v(address r+ 0 := Some (of_bl (bitstring_field 7 0 value))));
                               update_state (MEM_update (\<lambda>_. v))
                             };
                           v \<leftarrow> read_state MEM;
                           v \<leftarrow> return (v(address r+ 1 := Some (of_bl (bitstring_field 15 8 value))));
                           update_state (MEM_update (\<lambda>_. v))
                         }
        else if size = 4 then do {
                                do {
                                    v \<leftarrow> read_state MEM;
                                    v \<leftarrow> return (v(address r+ 0 := Some (of_bl (bitstring_field 7 0 value))));
                                    update_state (MEM_update (\<lambda>_. v))
                                  };
                                 do {
                                    v \<leftarrow> read_state MEM;
                                    v \<leftarrow> return (v(address r+ 1 := Some (of_bl (bitstring_field 15 8 value))));
                                    update_state (MEM_update (\<lambda>_. v))
                                  };
                                 do {
                                    v \<leftarrow> read_state MEM;
                                    v \<leftarrow> return (v(address r+ 2 := Some (of_bl (bitstring_field 23 16 value))));
                                    update_state (MEM_update (\<lambda>_. v))
                                  };
                                v \<leftarrow> read_state MEM;
                                v \<leftarrow> return (v(address r+ 3 := Some (of_bl (bitstring_field 31 24 value))));
                                update_state (MEM_update (\<lambda>_. v))
                              }
             else if size = 8 then do {
                                      do {
                                         v \<leftarrow> read_state MEM;
                                         v \<leftarrow> return (v(address r+ 0 := Some (of_bl (bitstring_field 7 0 value))));
                                         update_state (MEM_update (\<lambda>_. v))
                                       };
                                       do {
                                         v \<leftarrow> read_state MEM;
                                         v \<leftarrow> return (v(address r+ 1 := Some (of_bl (bitstring_field 15 8 value))));
                                         update_state (MEM_update (\<lambda>_. v))
                                       };
                                       do {
                                         v \<leftarrow> read_state MEM;
                                         v \<leftarrow> return (v(address r+ 2 := Some (of_bl (bitstring_field 23 16 value))));
                                         update_state (MEM_update (\<lambda>_. v))
                                       };
                                      do {
                                         v \<leftarrow> read_state MEM;
                                         v \<leftarrow> return (v(address r+ 3 := Some (of_bl (bitstring_field 31 24 value))));
                                         update_state (MEM_update (\<lambda>_. v))
                                       };
                                      do {
                                         v \<leftarrow> read_state MEM;
                                         v \<leftarrow> return (v(address r+ 4 := Some (of_bl (bitstring_field 39 32 value))));
                                         update_state (MEM_update (\<lambda>_. v))
                                       };
                                      do {
                                         v \<leftarrow> read_state MEM;
                                         v \<leftarrow> return (v(address r+ 5 := Some (of_bl (bitstring_field 47 40 value))));
                                         update_state (MEM_update (\<lambda>_. v))
                                       };
                                      do {
                                         v \<leftarrow> read_state MEM;
                                         v \<leftarrow> return (v(address r+ 6 := Some (of_bl (bitstring_field 55 48 value))));
                                         update_state (MEM_update (\<lambda>_. v))
                                       };
                                     v \<leftarrow> read_state MEM;
                                     v \<leftarrow> return (v(address r+ 7 := Some (of_bl (bitstring_field 63 56 value))));
                                     update_state (MEM_update (\<lambda>_. v))
                                   }
                  else raise'exception (ASSERT ''mem: size in {1, 2, 4, 8}'') "


end

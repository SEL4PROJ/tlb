theory ARM_Monadic_Ops

imports MMU_Ops

begin


ML \<open>
val prev_thy = @{theory ARM_Monadic}  
  
\<close>


ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("BigEndianReverse",
   close
     (tp[var_v"value",var_n"n"],
      itb([(eq(var_n"n",ln 1),mu(ex(var_v"value",ln 7,ln 0,@{typ "bool list"}),qTy)),
           (eq(var_n"n",ln 2),
            mu(cc[ex(var_v"value",ln 7,ln 0,@{typ "bool list"}),
                  ex(var_v"value",ln 15,ln 8,@{typ "bool list"})],qTy)),
           (eq(var_n"n",ln 4),
            mu(cc[ex(var_v"value",ln 7,ln 0,@{typ "bool list"}),
                  ex(var_v"value",ln 15,ln 8,@{typ "bool list"}),
                  ex(var_v"value",ln 23,ln 16,@{typ "bool list"}),
                  ex(var_v"value",ln 31,ln 24,@{typ "bool list"})],qTy)),
           (eq(var_n"n",ln 8),
            mu(cc[ex(var_v"value",ln 7,ln 0,@{typ "bool list"}),
                  ex(var_v"value",ln 15,ln 8,@{typ "bool list"}),
                  ex(var_v"value",ln 23,ln 16,@{typ "bool list"}),
                  ex(var_v"value",ln 31,ln 24,@{typ "bool list"}),
                  ex(var_v"value",ln 39,ln 32,@{typ "bool list"}),
                  ex(var_v"value",ln 47,ln 40,@{typ "bool list"}),
                  ex(var_v"value",ln 55,ln 48,@{typ "bool list"}),
                  ex(var_v"value",ln 63,ln 56,@{typ "bool list"})],qTy))],
          call
            ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (bool list \<times> 'b state_scheme)"},
             call
               ("exception.ASSERT",@{typ exception},ls"BigEndianReverse: n in {1, 2, 4, 8}",
                @{theory ARM_Monadic}),@{theory ARM_Monadic}))))
end
\<close>


(*  call  @{theory}  *)




definition
  Align :: "'a::len word \<times> nat \<Rightarrow> 'a word"
where
  "Align \<equiv> \<lambda>(w, n). word_of_int (int (n * (nat (uint w) div n)))"

definition
  Align1 :: "vaddr \<times> nat \<Rightarrow> vaddr"
where
  "Align1 \<equiv> \<lambda>(w, n). Addr (word_of_int (int (n * (nat (uint (addr_val w)) div n))))"

definition
  Aligned :: "'a::len word \<times> nat \<Rightarrow> bool"
where
  "Aligned \<equiv> \<lambda>(w, n). w = Align (w, n)"

definition
  Aligned1 :: "vaddr \<times> nat \<Rightarrow> bool"
where
  "Aligned1 \<equiv> \<lambda>(w, n). w = Align1 (w, n)"








definition
  MemA_with_priv :: "vaddr \<times> nat \<times> bool \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> 'a::len word \<times> 'b::mem_op state_scheme"
where
  "MemA_with_priv \<equiv>
\<lambda>(address, size, privileged).
   extend_state HOL.undefined
    (do {
       do {if Aligned1 (address, size) then update_state (\<lambda>s. (address, snd s))
            else do {
                   v \<leftarrow> read_state (\<lambda>s. CP15 (snd s));
                   b \<leftarrow> do {
                       b \<leftarrow> do {
                           v \<leftarrow> return (SCTLR v);
                           return (SCTLR.A v)
                         };
                       if b then return True else do {
                                                    v \<leftarrow> read_state (\<lambda>s. CP15 (snd s));
                                                    v \<leftarrow> return (SCTLR v);
                                                    return (U v)
                                                  }
                     };
                   if b then trim_state (raise'exception (AlignmentFault (addr_val address))) else update_state (\<lambda>s. (Align1 (address, size), snd s))
                 } };
       v \<leftarrow> read_state fst;
       v \<leftarrow> do {
           v \<leftarrow> return (v, size);
           trim_state (mmu_read_size v)
         };
       extend_state v (do {
                         v \<leftarrow> read_state (\<lambda>s. CPSR (snd (snd s)));
                         do {
                             b \<leftarrow> return (E v);
                             if b then do {
                                         v \<leftarrow> read_state fst;
                                         v \<leftarrow> do {
                                             v \<leftarrow> return (v, size);
                                             trim_state (trim_state (BigEndianReverse v))
                                           };
                                         update_state (\<lambda>s. (v, snd s))
                                       }
                             else return ()
                           };
                         v \<leftarrow> read_state fst;
                         return (of_bl v)
                       })
     })"


(*

ML \<open>
local 
open L3 
in
val () = def
  ("MemA_with_priv",
   close
     (tp[var_w("address",32),var_n"size",var_b"privileged"],
      mn(lx w32,
         mb(ite(call("Aligned",HOLogic.boolT,tp[var_w("address",32),var_n"size"],@{theory}),
                mw(close
                     (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                      tp[var_w("address",32),mop(Snd,var("s",@{typ "32 word \<times> 'b state_scheme"}))])),
                mb(mr(close
                        (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                         call
                           ("state.CP15",@{typ CP15},
                            mop(Snd,var("s",@{typ "32 word \<times> 'b state_scheme"})),@{theory}))),
                   close
                     (var("v",@{typ CP15}),
                      mb(mb(mb(mu(call("CP15.SCTLR",@{typ SCTLR},var("v",@{typ CP15}),@{theory}),
                                  @{typ "32 word \<times> 'b state_scheme"}),
                               close
                                 (var("v",@{typ SCTLR}),
                                  mu(call("SCTLR.A",HOLogic.boolT,var("v",@{typ SCTLR}),@{theory}),
                                     @{typ "32 word \<times> 'b state_scheme"}))),
                            close
                              (var_b"b",
                               ite(var_b"b",mu(lt,@{typ "32 word \<times> 'b state_scheme"}),
                                   mb(mr(close
                                           (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                                            call
                                              ("state.CP15",@{typ CP15},
                                               mop(Snd,var("s",@{typ "32 word \<times> 'b state_scheme"})),
                                               @{theory}))),
                                      close
                                        (var("v",@{typ CP15}),
                                         mb(mu(call
                                                 ("CP15.SCTLR",@{typ SCTLR},var("v",@{typ CP15}),
                                                  @{theory}),@{typ "32 word \<times> 'b state_scheme"}),
                                            close
                                              (var("v",@{typ SCTLR}),
                                               mu(call
                                                    ("SCTLR.U",HOLogic.boolT,var("v",@{typ SCTLR}),
                                                     @{theory}),@{typ "32 word \<times> 'b state_scheme"})))))))),
                         close
                           (var_b"b",
                            ite(var_b"b",
                                md(call
                                     ("raise'exception",
                                      @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                      call
                                        ("exception.AlignmentFault",@{typ exception},
                                         var_w("address",32),@{theory}),@{theory}),w32),
                                mw(close
                                     (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                                      tp[call
                                           ("Align",w32,tp[var_w("address",32),var_n"size"],
                                            @{theory}),
                                         mop(Snd,var("s",@{typ "32 word \<times> 'b state_scheme"}))])))))))),
            close
              (var_a HOLogic.unitT,
               mb(mr(close
                       (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                        mop(Fst,var("s",@{typ "32 word \<times> 'b state_scheme"})))),
                  close
                    (var_w("v",32),
                     mb(mb(mu(tp[var_w("v",32),var_n"size"],@{typ "32 word \<times> 'b state_scheme"}),
                           close
                             (var("v",@{typ "32 word \<times> nat"}),
                              md(call
                                   ("mem",@{typ "'b state_scheme \<Rightarrow> (bool list \<times> 'b state_scheme)"},
                                    var("v",@{typ "32 word \<times> nat"}),@{theory}),w32))),
                        close
                          (var_v"v",
                           mn(var_v"v",
                              mb(mr(close
                                      (var("s",@{typ "bool list \<times> 32 word \<times> 'b state_scheme"}),
                                       call
                                         ("state.CPSR",@{typ PSR},
                                          mop(Snd,
                                              mop(Snd,
                                                  var("s",
                                                      @{typ
                                                      "bool list \<times> 32 word \<times> 'b state_scheme"}))),
                                          @{theory}))),
                                 close
                                   (var("v",@{typ PSR}),
                                    mb(mb(mu(call
                                               ("PSR.E",HOLogic.boolT,var("v",@{typ PSR}),@{theory}),
                                             @{typ "bool list \<times> 32 word \<times> 'b state_scheme"}),
                                          close
                                            (var_b"b",
                                             ite(var_b"b",
                                                 mb(mr(close
                                                         (var("s",
                                                              @{typ
                                                              "bool list \<times>
                                                               32 word \<times> 'b state_scheme"}),
                                                          mop(Fst,
                                                              var("s",
                                                                  @{typ
                                                                  "bool list \<times>
                                                                   32 word \<times> 'b state_scheme"})))),
                                                    close
                                                      (var_v"v",
                                                       mb(mb(mu(tp[var_v"v",var_n"size"],
                                                                @{typ
                                                                "bool list \<times>
                                                                 32 word \<times> 'b state_scheme"}),
                                                             close
                                                               (var("v",
                                                                    @{typ "bool list \<times> nat"}),
                                                                md(md(call
                                                                        ("BigEndianReverse",
                                                                         @{typ
                                                                         "'b state_scheme \<Rightarrow>
                                                                          (bool list \<times> 'b state_scheme)"},
                                                                         var("v",
                                                                             @{typ
                                                                             "bool list \<times> nat"}),
                                                                         @{theory}),w32),
                                                                   @{typ "bool list"}))),
                                                          close
                                                            (var_v"v",
                                                             mw(close
                                                                  (var("s",
                                                                       @{typ
                                                                       "bool list \<times>
                                                                        32 word \<times> 'b state_scheme"}),
                                                                   tp[var_v"v",
                                                                      mop(Snd,
                                                                          var("s",
                                                                              @{typ
                                                                              "bool list \<times>
                                                                               32 word \<times>
                                                                               'b state_scheme"}))])))))),
                                                 mu(lu,
                                                    @{typ
                                                    "bool list \<times> 32 word \<times> 'b state_scheme"})))),
                                       close
                                         (var_a HOLogic.unitT,
                                          mb(mr(close
                                                  (var("s",
                                                       @{typ
                                                       "bool list \<times> 32 word \<times> 'b state_scheme"}),
                                                   mop(Fst,
                                                       var("s",
                                                           @{typ
                                                           "bool list \<times>
                                                            32 word \<times> 'b state_scheme"})))),
                                             close
                                               (var_v"v",
                                                mu(mop(Cast(@{typ "'N::len word"}),var_v"v"),
                                                   @{typ
                                                   "bool list \<times> 32 word \<times> 'b state_scheme"})))))))))))))))))
end
\<close>
*)




definition
  write'MemA_with_priv:: "'a::len word \<times> vaddr \<times> nat \<times> bool \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
  "write'MemA_with_priv \<equiv>
   \<lambda>(value, address, size, privileged).
      extend_state HOL.undefined
       (do {
          _ \<leftarrow> if Aligned1 (address, size) then update_state (\<lambda>s. (address, snd s))
               else do {
                      v \<leftarrow> read_state (\<lambda>s. CP15 (snd s));
                      b \<leftarrow> do {
                          b \<leftarrow> do {
                              v \<leftarrow> return (SCTLR v);
                              return (SCTLR.A v)
                            };
                          if b then return True else do {
                                                       v \<leftarrow> read_state (\<lambda>s. CP15 (snd s));
                                                       v \<leftarrow> return (SCTLR v);
                                                       return (U v)
                                                     }
                        };
                      if b then trim_state (raise'exception (AlignmentFault (addr_val address))) else update_state (\<lambda>s. (Align1 (address, size), snd s))
                    };
          v \<leftarrow> read_state (\<lambda>s. CPSR (snd s));
          end_value \<leftarrow> do {
              b \<leftarrow> return (E v);
              if b then trim_state (BigEndianReverse (nat_to_bitstring (nat (uint value)), size)) else return (nat_to_bitstring (nat (uint value)))
            };
          v \<leftarrow> read_state fst;
          x \<leftarrow> return (v, size);
          trim_state (mmu_write_size (end_value, x))
        })"



(*
ML \<open>
local 
open L3 
in
val () = def
  ("write'MemA_with_priv",
   close
     (tp[var("value",@{typ "'N::len word"}),var_w("address",32),var_n"size",var_b"privileged"],
      mn(lx w32,
         mb(ite(call("Aligned",HOLogic.boolT,tp[var_w("address",32),var_n"size"],@{theory}),
                mw(close
                     (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                      tp[var_w("address",32),mop(Snd,var("s",@{typ "32 word \<times> 'b state_scheme"}))])),
                mb(mr(close
                        (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                         call
                           ("state.CP15",@{typ CP15},
                            mop(Snd,var("s",@{typ "32 word \<times> 'b state_scheme"})),@{theory}))),
                   close
                     (var("v",@{typ CP15}),
                      mb(mb(mb(mu(call("CP15.SCTLR",@{typ SCTLR},var("v",@{typ CP15}),@{theory}),
                                  @{typ "32 word \<times> 'b state_scheme"}),
                               close
                                 (var("v",@{typ SCTLR}),
                                  mu(call("SCTLR.A",HOLogic.boolT,var("v",@{typ SCTLR}),@{theory}),
                                     @{typ "32 word \<times> 'b state_scheme"}))),
                            close
                              (var_b"b",
                               ite(var_b"b",mu(lt,@{typ "32 word \<times> 'b state_scheme"}),
                                   mb(mr(close
                                           (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                                            call
                                              ("state.CP15",@{typ CP15},
                                               mop(Snd,var("s",@{typ "32 word \<times> 'b state_scheme"})),
                                               @{theory}))),
                                      close
                                        (var("v",@{typ CP15}),
                                         mb(mu(call
                                                 ("CP15.SCTLR",@{typ SCTLR},var("v",@{typ CP15}),
                                                  @{theory}),@{typ "32 word \<times> 'b state_scheme"}),
                                            close
                                              (var("v",@{typ SCTLR}),
                                               mu(call
                                                    ("SCTLR.U",HOLogic.boolT,var("v",@{typ SCTLR}),
                                                     @{theory}),@{typ "32 word \<times> 'b state_scheme"})))))))),
                         close
                           (var_b"b",
                            ite(var_b"b",
                                md(call
                                     ("raise'exception",
                                      @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                      call
                                        ("exception.AlignmentFault",@{typ exception},
                                         var_w("address",32),@{theory}),@{theory}),w32),
                                mw(close
                                     (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                                      tp[call
                                           ("Align",w32,tp[var_w("address",32),var_n"size"],
                                            @{theory}),
                                         mop(Snd,var("s",@{typ "32 word \<times> 'b state_scheme"}))])))))))),
            close
              (var_a HOLogic.unitT,
               mb(mr(close
                       (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                        call
                          ("state.CPSR",@{typ PSR},
                           mop(Snd,var("s",@{typ "32 word \<times> 'b state_scheme"})),@{theory}))),
                  close
                    (var("v",@{typ PSR}),
                     mb(mb(mu(call("PSR.E",HOLogic.boolT,var("v",@{typ PSR}),@{theory}),
                              @{typ "32 word \<times> 'b state_scheme"}),
                           close
                             (var_b"b",
                              ite(var_b"b",
                                  md(call
                                       ("BigEndianReverse",
                                        @{typ "'b state_scheme \<Rightarrow> (bool list \<times> 'b state_scheme)"},
                                        tp[mop(Cast(@{typ "bool list"}),
                                               var("value",@{typ "'N::len word"})),var_n"size"],
                                        @{theory}),w32),
                                  mu(mop(Cast(@{typ "bool list"}),var("value",@{typ "'N::len word"})),
                                     @{typ "32 word \<times> 'b state_scheme"})))),
                        close
                          (var_v"end_value",
                           mb(mr(close
                                   (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                                    mop(Fst,var("s",@{typ "32 word \<times> 'b state_scheme"})))),
                              close
                                (var_w("v",32),
                                 mb(mu(tp[var_w("v",32),var_n"size"],@{typ "32 word \<times> 'b state_scheme"}),
                                    close
                                      (var("x",@{typ "32 word \<times> nat"}),
                                       md(call
                                            ("write'mem",
                                             @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                             tp[var_v"end_value",
                                                var("x",@{typ "32 word \<times> nat"})],@{theory}),
                                          w32))))))))))))))
end
\<close>
*)


definition
  MemA_unpriv :: "vaddr \<times> nat \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> 'a::len word \<times> 'b state_scheme"
where
  "MemA_unpriv \<equiv> \<lambda>(address, size). MemA_with_priv (address, size, False)"



(*
ML \<open>
local 
open L3 
in
val () = def
  ("MemA_unpriv",
   close
     (tp[var_w("address",32),var_n"size"],
      call
        ("MemA_with_priv",@{typ "'b state_scheme \<Rightarrow> ('N::len word \<times> 'b state_scheme)"},
         tp[var_w("address",32),var_n"size",lf],@{theory})))
end
\<close>

*)



definition
  write'MemA_unpriv :: "'a::len word \<times> vaddr \<times> nat \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
  "write'MemA_unpriv \<equiv> \<lambda>(value, address, size). write'MemA_with_priv (value, address, size, False)"

(*

ML \<open>
local 
open L3 
in
val () = def
  ("write'MemA_unpriv",
   close
     (tp[var("value",@{typ "'N::len word"}),var_w("address",32),var_n"size"],
      call
        ("write'MemA_with_priv",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
         tp[var("value",@{typ "'N::len word"}),var_w("address",32),var_n"size",lf],@{theory})))
end
\<close>

*)




definition
  "MemA":: "vaddr \<times> nat \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> 'a::len word \<times> 'b state_scheme"
where
  "MemA \<equiv> \<lambda>(address, size). do {
             v \<leftarrow> CurrentModeIsNotUser ();
             do {
               v \<leftarrow> return (size, v);
               return (address, v)
             } \<bind> MemA_with_priv
           }"

(*

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("MemA",
   close
     (tp[var_w("address",32),var_n"size"],
      mb(call
           ("CurrentModeIsNotUser",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,@{theory}),
         close
           (var_b"v",
            mb(mb(mu(tp[var_n"size",var_b"v"],qTy),
                  close
                    (var("v",@{typ "nat \<times> bool"}),
                     mu(tp[var_w("address",32),var("v",@{typ "nat \<times> bool"})],qTy))),
               close
                 (var("v",@{typ "32 word \<times> nat \<times> bool"}),
                  call
                    ("MemA_with_priv",@{typ "'b state_scheme \<Rightarrow> ('N::len word \<times> 'b state_scheme)"},
                     var("v",@{typ "32 word \<times> nat \<times> bool"}),@{theory})))))))
end
\<close>
*)



definition
  "write'MemA" :: "'a::len word \<times> vaddr \<times> nat \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"write'MemA \<equiv> \<lambda>(value, address, size). do {
                   v \<leftarrow> CurrentModeIsNotUser ();
                   x \<leftarrow> do {
                       v \<leftarrow> return (size, v);
                       return (address, v)
                     };
                   write'MemA_with_priv (value, x)
                 }"



(*

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("write'MemA",
   close
     (tp[var("value",@{typ "'N::len word"}),var_w("address",32),var_n"size"],
      mb(call
           ("CurrentModeIsNotUser",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,@{theory}),
         close
           (var_b"v",
            mb(mb(mu(tp[var_n"size",var_b"v"],qTy),
                  close
                    (var("v",@{typ "nat \<times> bool"}),
                     mu(tp[var_w("address",32),var("v",@{typ "nat \<times> bool"})],qTy))),
               close
                 (var("x",@{typ "32 word \<times> nat \<times> bool"}),
                  call
                    ("write'MemA_with_priv",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                     tp[var("value",@{typ "'N::len word"}),
                        var("x",@{typ "32 word \<times> nat \<times> bool"})],@{theory})))))))
end
\<close>
*)





definition
  MemU_with_priv :: "vaddr \<times> nat \<times> bool \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> 'a::len word \<times> 'b state_scheme"
where
"MemU_with_priv \<equiv>
\<lambda>(address, size, privileged).
   extend_state (concat (replicate 64 [False]))
    (do {
       v \<leftarrow> read_state (\<lambda>s. CP15 (snd s));
       VA \<leftarrow> do {
           b \<leftarrow> do {
               b \<leftarrow> do {
                   v \<leftarrow> do {
                       v \<leftarrow> return (SCTLR v);
                       return (SCTLR.A v)
                     };
                   return (\<not> v)
                 };
               if b then do {
                           v \<leftarrow> read_state (\<lambda>s. CP15 (snd s));
                           v \<leftarrow> do {
                               v \<leftarrow> return (SCTLR v);
                               return (U v)
                             };
                           return (\<not> v)
                         }
               else return False
             };
           return (if b then Align1 (address, size) else address)
         };
       _ \<leftarrow> if Aligned1 (VA, size) then do {
                                         v::'a::len word \<leftarrow> trim_state (MemA_with_priv (VA, size, privileged));
                                         v \<leftarrow> return (nat_to_bitstring (nat (uint v)));
                                         update_state (\<lambda>s. (v, snd s))
                                       }
            else do {
                   v \<leftarrow> read_state (\<lambda>s. CP15 (snd s));
                   b \<leftarrow> do {
                       v \<leftarrow> return (SCTLR v);
                       return (SCTLR.A v)
                     };
                   if b then trim_state (raise'exception (AlignmentFault (addr_val address)))
                   else do {
                          _ \<leftarrow> for_loop (0, size - 1, \<lambda>i. do {
                                                           v \<leftarrow> read_state fst;
                                                           v \<leftarrow> do {
                                                               v0::'a::len word \<leftarrow> trim_state (MemA_with_priv (VA r+ word_of_int (int i), 1, privileged));
                                                               v0 \<leftarrow> return (nat_to_bitstring (nat (uint v0)));
                                                               return (bitstring_field_insert (8 * i + 7) (8 * i) v0 v)
                                                             };
                                                           update_state (\<lambda>s. (v, snd s))
                                                         });
                          v \<leftarrow> read_state (\<lambda>s. CPSR (snd s));
                          b \<leftarrow> return (E v);
                          if b then do {
                                      v \<leftarrow> read_state fst;
                                      v \<leftarrow> do {
                                          v \<leftarrow> return (v, size);
                                          trim_state (BigEndianReverse v)
                                        };
                                      update_state (\<lambda>s. (v, snd s))
                                    }
                          else return ()
                        }
                 };
       v \<leftarrow> read_state fst;
       return (of_bl v)
     })"




(*

ML \<open>
local 
open L3 
in
val () = def
  ("MemU_with_priv",
   close
     (tp[var_w("address",32),var_n"size",var_b"privileged"],
      mn(bop(Rep,ln 64,lv"0"),
         mb(mr(close
                 (var("s",@{typ "bool list \<times> 'b state_scheme"}),
                  call
                    ("state.CP15",@{typ CP15},mop(Snd,var("s",@{typ "bool list \<times> 'b state_scheme"})),
                     @{theory}))),
            close
              (var("v",@{typ CP15}),
               mb(mb(mb(mb(mb(mu(call("CP15.SCTLR",@{typ SCTLR},var("v",@{typ CP15}),@{theory}),
                                 @{typ "bool list \<times> 'b state_scheme"}),
                              close
                                (var("v",@{typ SCTLR}),
                                 mu(call("SCTLR.A",HOLogic.boolT,var("v",@{typ SCTLR}),@{theory}),
                                    @{typ "bool list \<times> 'b state_scheme"}))),
                           close(var_b"v",mu(mop(Not,var_b"v"),@{typ "bool list \<times> 'b state_scheme"}))),
                        close
                          (var_b"b",
                           ite(var_b"b",
                               mb(mr(close
                                       (var("s",@{typ "bool list \<times> 'b state_scheme"}),
                                        call
                                          ("state.CP15",@{typ CP15},
                                           mop(Snd,var("s",@{typ "bool list \<times> 'b state_scheme"})),
                                           @{theory}))),
                                  close
                                    (var("v",@{typ CP15}),
                                     mb(mb(mu(call
                                                ("CP15.SCTLR",@{typ SCTLR},var("v",@{typ CP15}),
                                                 @{theory}),@{typ "bool list \<times> 'b state_scheme"}),
                                           close
                                             (var("v",@{typ SCTLR}),
                                              mu(call
                                                   ("SCTLR.U",HOLogic.boolT,var("v",@{typ SCTLR}),
                                                    @{theory}),@{typ "bool list \<times> 'b state_scheme"}))),
                                        close
                                          (var_b"v",
                                           mu(mop(Not,var_b"v"),@{typ "bool list \<times> 'b state_scheme"}))))),
                               mu(lf,@{typ "bool list \<times> 'b state_scheme"})))),
                     close
                       (var_b"b",
                        mu(ite(var_b"b",
                               call("Align",w32,tp[var_w("address",32),var_n"size"],@{theory}),
                               var_w("address",32)),@{typ "bool list \<times> 'b state_scheme"}))),
                  close
                    (var_w("VA",32),
                     mb(ite(call("Aligned",HOLogic.boolT,tp[var_w("VA",32),var_n"size"],@{theory}),
                            mb(md(call
                                    ("MemA_with_priv",
                                     @{typ "'b state_scheme \<Rightarrow> ('N::len word \<times> 'b state_scheme)"},
                                     tp[var_w("VA",32),var_n"size",var_b"privileged"],@{theory}),
                                  @{typ "bool list"}),
                               close
                                 (var("v",@{typ "'N::len word"}),
                                  mb(mu(mop(Cast(@{typ "bool list"}),var("v",@{typ "'N::len word"})),
                                        @{typ "bool list \<times> 'b state_scheme"}),
                                     close
                                       (var_v"v",
                                        mw(close
                                             (var("s",@{typ "bool list \<times> 'b state_scheme"}),
                                              tp[var_v"v",
                                                 mop(Snd,var("s",@{typ "bool list \<times> 'b state_scheme"}))])))))),
                            mb(mr(close
                                    (var("s",@{typ "bool list \<times> 'b state_scheme"}),
                                     call
                                       ("state.CP15",@{typ CP15},
                                        mop(Snd,var("s",@{typ "bool list \<times> 'b state_scheme"})),
                                        @{theory}))),
                               close
                                 (var("v",@{typ CP15}),
                                  mb(mb(mu(call
                                             ("CP15.SCTLR",@{typ SCTLR},var("v",@{typ CP15}),
                                              @{theory}),@{typ "bool list \<times> 'b state_scheme"}),
                                        close
                                          (var("v",@{typ SCTLR}),
                                           mu(call
                                                ("SCTLR.A",HOLogic.boolT,var("v",@{typ SCTLR}),
                                                 @{theory}),@{typ "bool list \<times> 'b state_scheme"}))),
                                     close
                                       (var_b"b",
                                        ite(var_b"b",
                                            md(call
                                                 ("raise'exception",
                                                  @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                  call
                                                    ("exception.AlignmentFault",@{typ exception},
                                                     var_w("address",32),@{theory}),@{theory}),
                                               @{typ "bool list"}),
                                            mb(forloop
                                                 (tp[ln 0,bop(Sub,var_n"size",ln 1),
                                                     close
                                                       (var_n"i",
                                                        mb(mr(close
                                                                (var("s",
                                                                     @{typ
                                                                     "bool list \<times> 'b state_scheme"}),
                                                                 mop(Fst,
                                                                     var("s",
                                                                         @{typ
                                                                         "bool list \<times> 'b state_scheme"})))),
                                                           close
                                                             (var_v"v",
                                                              mb(mb(md(call
                                                                         ("MemA_with_priv",
                                                                          @{typ
                                                                          "'b state_scheme \<Rightarrow>
                                                                           (8 word \<times> 'b state_scheme)"},
                                                                          tp[bop(Add,var_w("VA",32),
                                                                                 mop(Cast w32,
                                                                                     var_n"i")),
                                                                             ln 1,var_b"privileged"],
                                                                          @{theory}),
                                                                       @{typ "bool list"}),
                                                                    close
                                                                      (var_w("v0",8),
                                                                       mb(mu(mop(Cast
                                                                                   (@{typ
                                                                                    "bool list"}),
                                                                                 var_w("v0",8)),
                                                                             @{typ
                                                                             "bool list \<times>
                                                                              'b state_scheme"}),
                                                                          close
                                                                            (var_v"v0",
                                                                             mu(bfi(bop(Add,
                                                                                        bop(Mul,
                                                                                            ln 8,
                                                                                            var_n"i"),
                                                                                        ln 7),
                                                                                    bop(Mul,ln 8,
                                                                                        var_n"i"),
                                                                                    var_v"v0",
                                                                                    var_v"v"),
                                                                                @{typ
                                                                                "bool list \<times>
                                                                                 'b state_scheme"}))))),
                                                                 close
                                                                   (var_v"v",
                                                                    mw(close
                                                                         (var("s",
                                                                              @{typ
                                                                              "bool list \<times>
                                                                               'b state_scheme"}),
                                                                          tp[var_v"v",
                                                                             mop(Snd,
                                                                                 var("s",
                                                                                     @{typ
                                                                                     "bool list \<times>
                                                                                      'b state_scheme"}))])))))))]),
                                               close
                                                 (var_a HOLogic.unitT,
                                                  mb(mr(close
                                                          (var("s",@{typ "bool list \<times> 'b state_scheme"}),
                                                           call
                                                             ("state.CPSR",@{typ PSR},
                                                              mop(Snd,
                                                                  var("s",
                                                                      @{typ
                                                                      "bool list \<times> 'b state_scheme"})),
                                                              @{theory}))),
                                                     close
                                                       (var("v",@{typ PSR}),
                                                        mb(mu(call
                                                                ("PSR.E",HOLogic.boolT,
                                                                 var("v",@{typ PSR}),@{theory}),
                                                              @{typ "bool list \<times> 'b state_scheme"}),
                                                           close
                                                             (var_b"b",
                                                              ite(var_b"b",
                                                                  mb(mr(close
                                                                          (var("s",
                                                                               @{typ
                                                                               "bool list \<times>
                                                                                'b state_scheme"}),
                                                                           mop(Fst,
                                                                               var("s",
                                                                                   @{typ
                                                                                   "bool list \<times>
                                                                                    'b state_scheme"})))),
                                                                     close
                                                                       (var_v"v",
                                                                        mb(mb(mu(tp[var_v"v",
                                                                                    var_n"size"],
                                                                                 @{typ
                                                                                 "bool list \<times>
                                                                                  'b state_scheme"}),
                                                                              close
                                                                                (var("v",
                                                                                     @{typ
                                                                                     "bool list \<times>
                                                                                      nat"}),
                                                                                 md(call
                                                                                      ("BigEndianReverse",
                                                                                       @{typ
                                                                                       "'b state_scheme \<Rightarrow>
                                                                                        (bool list \<times>
                                                                                         'b state_scheme)"},
                                                                                       var("v",
                                                                                           @{typ
                                                                                           "bool list \<times>
                                                                                            nat"}),
                                                                                       @{theory}),
                                                                                    @{typ
                                                                                    "bool list"}))),
                                                                           close
                                                                             (var_v"v",
                                                                              mw(close
                                                                                   (var("s",
                                                                                        @{typ
                                                                                        "bool list \<times>
                                                                                         'b state_scheme"}),
                                                                                    tp[var_v"v",
                                                                                       mop(Snd,
                                                                                           var("s",
                                                                                               @{typ
                                                                                               "bool list \<times>
                                                                                                'b state_scheme"}))])))))),
                                                                  mu(lu,
                                                                     @{typ
                                                                     "bool list \<times> 'b state_scheme"})))))))))))))),
                        close
                          (var_a HOLogic.unitT,
                           mb(mr(close
                                   (var("s",@{typ "bool list \<times> 'b state_scheme"}),
                                    mop(Fst,var("s",@{typ "bool list \<times> 'b state_scheme"})))),
                              close
                                (var_v"v",
                                 mu(mop(Cast(@{typ "'N::len word"}),var_v"v"),
                                    @{typ "bool list \<times> 'b state_scheme"}))))))))))))
end
\<close>

*)




definition
  write'MemU_with_priv  :: "'a::len word \<times> vaddr \<times> nat \<times> bool \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"write'MemU_with_priv \<equiv>
\<lambda>(value, address, size, privileged). do {
     v \<leftarrow> read_state CP15;
     VA \<leftarrow> do {
         b \<leftarrow> do {
             b \<leftarrow> do {
                 v \<leftarrow> do {
                     v \<leftarrow> return (SCTLR v);
                     return (SCTLR.A v)
                   };
                 return (\<not> v)
               };
             if b then do {
                         v \<leftarrow> read_state CP15;
                         v \<leftarrow> do {
                             v \<leftarrow> return (SCTLR v);
                             return (U v)
                           };
                         return (\<not> v)
                       }
             else return False
           };
         return (if b then Align1 (address, size) else address)
       };
     if Aligned1 (VA, size) then write'MemA_with_priv (value, VA, size, privileged)
     else do {
            v \<leftarrow> read_state CP15;
            b \<leftarrow> do {
                v \<leftarrow> return (SCTLR v);
                return (SCTLR.A v)
              };
            if b then raise'exception (AlignmentFault (addr_val address))
            else do {
                   v \<leftarrow> read_state CPSR;
                   v \<leftarrow> do {
                       b \<leftarrow> return (E v);
                       if b then BigEndianReverse (nat_to_bitstring (nat (uint value)), size) else return (nat_to_bitstring (nat (uint value)))
                     };
                   for_loop (0, size - 1, \<lambda>i. write'MemA_with_priv (of_bl (bitstring_field (8 * i + 7) (8 * i) v)::'a::len word, VA r+ word_of_int (int i), 1, privileged))
                 }
          }
   }"


(*

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("write'MemU_with_priv",
   close
     (tp[var("value",@{typ "'N::len word"}),var_w("address",32),var_n"size",var_b"privileged"],
      mb(mr(close(var("s",qTy),call("state.CP15",@{typ CP15},var("s",qTy),@{theory}))),
         close
           (var("v",@{typ CP15}),
            mb(mb(mb(mb(mb(mu(call("CP15.SCTLR",@{typ SCTLR},var("v",@{typ CP15}),@{theory}),qTy),
                           close
                             (var("v",@{typ SCTLR}),
                              mu(call("SCTLR.A",HOLogic.boolT,var("v",@{typ SCTLR}),@{theory}),qTy))),
                        close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                     close
                       (var_b"b",
                        ite(var_b"b",
                            mb(mr(close
                                    (var("s",qTy),
                                     call("state.CP15",@{typ CP15},var("s",qTy),@{theory}))),
                               close
                                 (var("v",@{typ CP15}),
                                  mb(mb(mu(call
                                             ("CP15.SCTLR",@{typ SCTLR},var("v",@{typ CP15}),
                                              @{theory}),qTy),
                                        close
                                          (var("v",@{typ SCTLR}),
                                           mu(call
                                                ("SCTLR.U",HOLogic.boolT,var("v",@{typ SCTLR}),
                                                 @{theory}),qTy))),
                                     close(var_b"v",mu(mop(Not,var_b"v"),qTy))))),mu(lf,qTy)))),
                  close
                    (var_b"b",
                     mu(ite(var_b"b",
                            call("Align",w32,tp[var_w("address",32),var_n"size"],@{theory}),
                            var_w("address",32)),qTy))),
               close
                 (var_w("VA",32),
                  ite(call("Aligned",HOLogic.boolT,tp[var_w("VA",32),var_n"size"],@{theory}),
                      call
                        ("write'MemA_with_priv",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                         tp[var("value",@{typ "'N::len word"}),var_w("VA",32),var_n"size",
                            var_b"privileged"],@{theory}),
                      mb(mr(close
                              (var("s",qTy),call("state.CP15",@{typ CP15},var("s",qTy),@{theory}))),
                         close
                           (var("v",@{typ CP15}),
                            mb(mb(mu(call("CP15.SCTLR",@{typ SCTLR},var("v",@{typ CP15}),@{theory}),
                                     qTy),
                                  close
                                    (var("v",@{typ SCTLR}),
                                     mu(call
                                          ("SCTLR.A",HOLogic.boolT,var("v",@{typ SCTLR}),@{theory}),
                                        qTy))),
                               close
                                 (var_b"b",
                                  ite(var_b"b",
                                      call
                                        ("raise'exception",
                                         @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                         call
                                           ("exception.AlignmentFault",@{typ exception},
                                            var_w("address",32),@{theory}),@{theory}),
                                      mb(mr(close
                                              (var("s",qTy),
                                               call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                                         close
                                           (var("v",@{typ PSR}),
                                            mb(mb(mu(call
                                                       ("PSR.E",HOLogic.boolT,var("v",@{typ PSR}),
                                                        @{theory}),qTy),
                                                  close
                                                    (var_b"b",
                                                     ite(var_b"b",
                                                         call
                                                           ("BigEndianReverse",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (bool list \<times> 'b state_scheme)"},
                                                            tp[mop(Cast(@{typ "bool list"}),
                                                                   var("value",@{typ "'N::len word"})),
                                                               var_n"size"],@{theory}),
                                                         mu(mop(Cast(@{typ "bool list"}),
                                                                var("value",@{typ "'N::len word"})),
                                                            qTy)))),
                                               close
                                                 (var_v"v",
                                                  forloop
                                                    (tp[ln 0,bop(Sub,var_n"size",ln 1),
                                                        close
                                                          (var_n"i",
                                                           call
                                                             ("write'MemA_with_priv",
                                                              @{typ
                                                              "'b state_scheme \<Rightarrow>
                                                               (unit \<times> 'b state_scheme)"},
                                                              tp[mop(Cast w8,
                                                                     ex(var_v"v",
                                                                        bop(Add,
                                                                            bop(Mul,ln 8,var_n"i"),
                                                                            ln 7),
                                                                        bop(Mul,ln 8,var_n"i"),
                                                                        @{typ "bool list"})),
                                                                 bop(Add,var_w("VA",32),
                                                                     mop(Cast w32,var_n"i")),ln 1,
                                                                 var_b"privileged"],@{theory}))])))))))))))))))))
end
\<close>

*)




definition
  MemU_unpriv :: "vaddr \<times> nat \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> 'a::len word \<times> 'b state_scheme"
where
  "MemU_unpriv \<equiv> \<lambda>(address, size). MemU_with_priv (address, size, False)"


(*

ML \<open>
local 
open L3 
in
val () = def
  ("MemU_unpriv",
   close
     (tp[var_w("address",32),var_n"size"],
      call
        ("MemU_with_priv",@{typ "'b state_scheme \<Rightarrow> ('N::len word \<times> 'b state_scheme)"},
         tp[var_w("address",32),var_n"size",lf],@{theory})))
end
\<close>

*)




definition
  write'MemU_unpriv :: "'a::len word \<times> vaddr \<times> nat \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
  "write'MemU_unpriv \<equiv> \<lambda>(value, address, size). write'MemU_with_priv (value, address, size, False)"


(*

ML \<open>
local 
open L3 
in
val () = def
  ("write'MemU_unpriv",
   close
     (tp[var("value",@{typ "'N::len word"}),var_w("address",32),var_n"size"],
      call
        ("write'MemU_with_priv",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
         tp[var("value",@{typ "'N::len word"}),var_w("address",32),var_n"size",lf],@{theory})))
end
\<close>

*)



definition
 MemU :: "vaddr \<times> nat \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> 'a::len word \<times> 'b state_scheme"
where
"MemU \<equiv> \<lambda>(address, size). do {
             v \<leftarrow> CurrentModeIsNotUser ();
             do {
               v \<leftarrow> return (size, v);
               return (address, v)
             } \<bind> MemU_with_priv
           }"



(*
ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("MemU",
   close
     (tp[var_w("address",32),var_n"size"],
      mb(call
           ("CurrentModeIsNotUser",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,@{theory}),
         close
           (var_b"v",
            mb(mb(mu(tp[var_n"size",var_b"v"],qTy),
                  close
                    (var("v",@{typ "nat \<times> bool"}),
                     mu(tp[var_w("address",32),var("v",@{typ "nat \<times> bool"})],qTy))),
               close
                 (var("v",@{typ "32 word \<times> nat \<times> bool"}),
                  call
                    ("MemU_with_priv",@{typ "'b state_scheme \<Rightarrow> ('N::len word \<times> 'b state_scheme)"},
                     var("v",@{typ "32 word \<times> nat \<times> bool"}),@{theory})))))))
end
\<close>

*)




definition
  write'MemU :: "'a::len word \<times> vaddr \<times> nat \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
  "write'MemU \<equiv> \<lambda>(value, address, size). do {
                   v \<leftarrow> CurrentModeIsNotUser ();
                   x \<leftarrow> do {
                       v \<leftarrow> return (size, v);
                       return (address, v)
                     };
                   write'MemU_with_priv (value, x)
                 }"


(*

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("write'MemU",
   close
     (tp[var("value",@{typ "'N::len word"}),var_w("address",32),var_n"size"],
      mb(call
           ("CurrentModeIsNotUser",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,@{theory}),
         close
           (var_b"v",
            mb(mb(mu(tp[var_n"size",var_b"v"],qTy),
                  close
                    (var("v",@{typ "nat \<times> bool"}),
                     mu(tp[var_w("address",32),var("v",@{typ "nat \<times> bool"})],qTy))),
               close
                 (var("x",@{typ "32 word \<times> nat \<times> bool"}),
                  call
                    ("write'MemU_with_priv",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                     tp[var("value",@{typ "'N::len word"}),
                        var("x",@{typ "32 word \<times> nat \<times> bool"})],@{theory})))))))
end
\<close>

*)



ML \<open>
local 
open L3 
in
val () = def
  ("NullCheckIfThumbEE",
   close
     (var_w("n",4),
      mn(lf,
         mb(md(call
                 ("CurrentInstrSet",@{typ "'b state_scheme \<Rightarrow> (InstrSet \<times> 'b state_scheme)"},lu,
                  @{theory ARM_Monadic}),HOLogic.boolT),
            close
              (var("v",@{typ InstrSet}),
               mb(mb(mu(eq(var("v",@{typ InstrSet}),lc("InstrSet_ThumbEE","InstrSet",@{theory  ARM_Monadic})),
                        @{typ "bool \<times> 'b state_scheme"}),
                     close
                       (var_b"b",
                        ite(var_b"b",
                            itb([(eq(var_w("n",4),lw(15,4)),
                                  mb(md(const
                                          ("PC",
                                           @{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                           @{theory ARM_Monadic}),HOLogic.boolT),
                                     close
                                       (var_w("v",32),
                                        mb(mb(mb(mu(tp[var_w("v",32),ln 4],
                                                    @{typ "bool \<times> 'b state_scheme"}),
                                                 close
                                                   (var("v",@{typ "32 word \<times> nat"}),
                                                    mu(call
                                                         ("Align",w32,
                                                          var("v",@{typ "32 word \<times> nat"}),
                                                          @{theory}),@{typ "bool \<times> 'b state_scheme"}))),
                                              close
                                                (var_w("v",32),
                                                 mu(eq(var_w("v",32),lw(0,32)),
                                                    @{typ "bool \<times> 'b state_scheme"}))),
                                           close
                                             (var_b"b",
                                              ite(var_b"b",
                                                  md(call
                                                       ("raise'exception",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                        call
                                                          ("exception.UNPREDICTABLE",
                                                           @{typ exception},ls"NullCheckIfThumbEE",
                                                           @{theory ARM_Monadic}),@{theory ARM_Monadic}),HOLogic.boolT),
                                                  mu(lu,@{typ "bool \<times> 'b state_scheme"}))))))),
                                 (eq(var_w("n",4),lw(13,4)),
                                  mb(md(const
                                          ("SP",
                                           @{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                           @{theory ARM_Monadic}),HOLogic.boolT),
                                     close
                                       (var_w("v",32),
                                        mb(mu(eq(var_w("v",32),lw(0,32)),
                                              @{typ "bool \<times> 'b state_scheme"}),
                                           close
                                             (var_b"b",
                                              ite(var_b"b",
                                                  md(call
                                                       ("raise'exception",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                        call
                                                          ("exception.UNPREDICTABLE",
                                                           @{typ exception},ls"NullCheckIfThumbEE",
                                                           @{theory ARM_Monadic}),@{theory  ARM_Monadic}),HOLogic.boolT),
                                                  mu(lu,@{typ "bool \<times> 'b state_scheme"})))))))],
                                mb(md(call
                                        ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                         var_w("n",4),@{theory ARM_Monadic}),HOLogic.boolT),
                                   close
                                     (var_w("v",32),
                                      mb(mu(eq(var_w("v",32),lw(0,32)),@{typ "bool \<times> 'b state_scheme"}),
                                         close
                                           (var_b"b",
                                            ite(var_b"b",
                                                mb(md(const
                                                        ("PC",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow>
                                                          (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
                                                      HOLogic.boolT),
                                                   close
                                                     (var_w("v",32),
                                                      mb(mb(mb(mu(ex(var_w("v",32),ln 31,ln 1,
                                                                     (Word_Lib.mk_wordT 31)),
                                                                  @{typ "bool \<times> 'b state_scheme"}),
                                                               close
                                                                 (var_w("v",31),
                                                                  mu(cc[var_w("v",31),lw(1,1)],
                                                                     @{typ "bool \<times> 'b state_scheme"}))),
                                                            close
                                                              (var_w("v",32),
                                                               md(call
                                                                    ("write'LR",
                                                                     @{typ
                                                                     "'b state_scheme \<Rightarrow>
                                                                      (unit \<times> 'b state_scheme)"},
                                                                     var_w("v",32),@{theory ARM_Monadic}),
                                                                  HOLogic.boolT))),
                                                         close
                                                           (var_a HOLogic.unitT,
                                                            mb(md(call
                                                                    ("write'ITSTATE",
                                                                     @{typ
                                                                     "'b state_scheme \<Rightarrow>
                                                                      (unit \<times> 'b state_scheme)"},
                                                                     lw(0,8),@{theory ARM_Monadic}),
                                                                  HOLogic.boolT),
                                                               close
                                                                 (var_a HOLogic.unitT,
                                                                  mb(mr(close
                                                                          (var("s",
                                                                               @{typ
                                                                               "bool \<times> 'b state_scheme"}),
                                                                           call
                                                                             ("state.CP14",
                                                                              @{typ CP14},
                                                                              mop(Snd,
                                                                                  var("s",
                                                                                      @{typ
                                                                                      "bool \<times>
                                                                                       'b state_scheme"})),
                                                                              @{theory  ARM_Monadic}))),
                                                                     close
                                                                       (var("v",@{typ CP14}),
                                                                        mb(mb(mb(mu(call
                                                                                      ("CP14.TEEHBR",
                                                                                       w32,
                                                                                       var("v",
                                                                                           @{typ CP14}),
                                                                                       @{theory  ARM_Monadic}),
                                                                                    @{typ
                                                                                    "bool \<times>
                                                                                     'b state_scheme"}),
                                                                                 close
                                                                                   (var_w("v",32),
                                                                                    mu(bop(Sub,
                                                                                           var_w("v",32),
                                                                                           lw(4,32)),
                                                                                       @{typ
                                                                                       "bool \<times>
                                                                                        'b state_scheme"}))),
                                                                              close
                                                                                (var_w("v",32),
                                                                                 md(call
                                                                                      ("BranchWritePC",
                                                                                       @{typ
                                                                                       "'b state_scheme \<Rightarrow>
                                                                                        (unit \<times>
                                                                                         'b state_scheme)"},
                                                                                       var_w("v",32),
                                                                                       @{theory  ARM_Monadic}),
                                                                                    HOLogic.boolT))),
                                                                           close
                                                                             (var_a HOLogic.unitT,
                                                                              mw(close
                                                                                   (var("s",
                                                                                        @{typ
                                                                                        "bool \<times>
                                                                                         'b state_scheme"}),
                                                                                    tp[lt,
                                                                                       mop(Snd,
                                                                                           var("s",
                                                                                               @{typ
                                                                                               "bool \<times>
                                                                                                'b state_scheme"}))])))))))))))),
                                                mu(lu,@{typ "bool \<times> 'b state_scheme"}))))))),
                            mu(lu,@{typ "bool \<times> 'b state_scheme"})))),
                  close
                    (var_a HOLogic.unitT,
                     mb(mr(close
                             (var("s",@{typ "bool \<times> 'b state_scheme"}),
                              mop(Fst,var("s",@{typ "bool \<times> 'b state_scheme"})))),
                        close(var_b"v",mu(mop(Not,var_b"v"),@{typ "bool \<times> 'b state_scheme"}))))))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("HighestSetBit",
   close
     (var("w",@{typ "'N::len word"}),
      ite(eq(var("w",@{typ "'N::len word"}),ly(0,"N")),mop(Neg,li 1),
          mop(Cast HOLogic.intT,mop(Log,var("w",@{typ "'N::len word"}))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("CountLeadingZeroBits",
   close
     (var("w",@{typ "'N::len word"}),
      mop(Cast HOLogic.natT,
          bop(Sub,bop(Sub,mop(Cast HOLogic.intT,mop(Size,ly(0,"N"))),li 1),
              call("HighestSetBit",HOLogic.intT,var("w",@{typ "'N::len word"}),@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("LowestSetBit",
   close
     (var("w",@{typ "'N::len word"}),
      call("CountLeadingZeroBits",HOLogic.natT,mop(Rev,var("w",@{typ "'N::len word"})),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("BitCount",
   close
     (var("w",@{typ "'N::len word"}),
      mop(Fst,
          mop(Snd,
              apply
                (forloop
                   (tp[ln 0,bop(Sub,mop(Size,ly(0,"N")),ln 1),
                       close
                         (var_n"i",
                          close
                            (var("'b state_scheme",@{typ "nat \<times> unit"}),
                             tp[lu,
                                ite(bop(Bit,var("w",@{typ "'N::len word"}),var_n"i"),
                                    tp[bop(Add,mop(Fst,var("'b state_scheme",@{typ "nat \<times> unit"})),ln 1),
                                       lu],var("'b state_scheme",@{typ "nat \<times> unit"}))]))]),tp[ln 0,lu])))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("SignExtendFrom",
   close
     (tp[var("w",@{typ "'N::len word"}),var_n"p"],
      let'
        (var_n"s",bop(Sub,bop(Sub,mop(Size,ly(0,"N")),ln 1),var_n"p"),
         bop(Asr,bop(Lsl,var("w",@{typ "'N::len word"}),var_n"s"),var_n"s"))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("Extend",
   close
     (tp[var_b"unsigned",var("w",@{typ "'M::len word"})],
      ite(var_b"unsigned",mop(Cast(@{typ "'N::len word"}),var("w",@{typ "'M::len word"})),
          mop(SE(@{typ "'N::len word"}),var("w",@{typ "'M::len word"})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("UInt",
   close
     (var("w",@{typ "'N::len word"}),
      mop(Cast HOLogic.intT,mop(Cast HOLogic.natT,var("w",@{typ "'N::len word"})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("SignedSatQ",
   close
     (tp[var_i"i",var_n"N"],
      mb(ite(bop(Lt,mop(Size,ly(0,"M")),var_n"N"),
             call
               ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                call("exception.ASSERT",@{typ exception},ls"SignedSatQ: M < N",@{theory ARM_Monadic}),@{theory ARM_Monadic}),
             mu(lu,qTy)),
         close
           (var_a HOLogic.unitT,
            mu(let'
                 (var_i"max",mop(Cast HOLogic.intT,bop(Exp,ln 2,bop(Sub,var_n"N",ln 1))),
                  itb([(bop(Gt,var_i"i",bop(Sub,var_i"max",li 1)),
                        tp[mop(Cast(@{typ "'M::len word"}),bop(Sub,var_i"max",li 1)),lt]),
                       (bop(Lt,var_i"i",mop(Neg,var_i"max")),
                        tp[mop(Cast(@{typ "'M::len word"}),mop(Neg,var_i"max")),lt])],
                      tp[mop(Cast(@{typ "'M::len word"}),var_i"i"),lf])),qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("UnsignedSatQ",
   close
     (tp[var_i"i",var_n"N"],
      mb(ite(bop(Lt,mop(Size,ly(0,"M")),var_n"N"),
             call
               ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                call("exception.ASSERT",@{typ exception},ls"UnsignedSatQ: M < N",@{theory ARM_Monadic}),
                @{theory ARM_Monadic}),mu(lu,qTy)),
         close
           (var_a HOLogic.unitT,
            mu(let'
                 (var_i"max",mop(Cast HOLogic.intT,bop(Sub,bop(Exp,ln 2,var_n"N"),ln 1)),
                  itb([(bop(Gt,var_i"i",var_i"max"),
                        tp[mop(Cast(@{typ "'M::len word"}),var_i"max"),lt]),
                       (bop(Lt,var_i"i",li 0),tp[ly(0,"M"),lt])],
                      tp[mop(Cast(@{typ "'M::len word"}),var_i"i"),lf])),qTy)))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("SatQ",
   close
     (tp[var_i"i",var_n"N",var_b"unsigned"],
      ite(var_b"unsigned",
          call
            ("UnsignedSatQ",
             @{typ "'b state_scheme \<Rightarrow> (('M::len word \<times> bool) \<times> 'b state_scheme)"},
             tp[var_i"i",var_n"N"],@{theory}),
          call
            ("SignedSatQ",
             @{typ "'b state_scheme \<Rightarrow> (('M::len word \<times> bool) \<times> 'b state_scheme)"},
             tp[var_i"i",var_n"N"],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("SignedSat",
   close
     (tp[var_i"i",var_n"N"],
      mb(call
           ("SignedSatQ",@{typ "'b state_scheme \<Rightarrow> (('M::len word \<times> bool) \<times> 'b state_scheme)"},
            tp[var_i"i",var_n"N"],@{theory}),
         close
           (var("v",@{typ "'M::len word \<times> bool"}),
            mu(mop(Fst,var("v",@{typ "'M::len word \<times> bool"})),qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("UnsignedSat",
   close
     (tp[var_i"i",var_n"N"],
      mb(call
           ("UnsignedSatQ",
            @{typ "'b state_scheme \<Rightarrow> (('M::len word \<times> bool) \<times> 'b state_scheme)"},
            tp[var_i"i",var_n"N"],@{theory}),
         close
           (var("v",@{typ "'M::len word \<times> bool"}),
            mu(mop(Fst,var("v",@{typ "'M::len word \<times> bool"})),qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("LSL_C",
   close
     (tp[var("x",@{typ "'N::len word"}),var_n"shift"],
      mb(ite(eq(var_n"shift",ln 0),
             call
               ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                call("exception.ASSERT",@{typ exception},ls"LSL_C",@{theory ARM_Monadic}),@{theory ARM_Monadic}),mu(lu,qTy)),
         close
           (var_a HOLogic.unitT,
            mu(tp[bop(Lsl,var("x",@{typ "'N::len word"}),var_n"shift"),
                  bop(Bit,
                      cc[mop(Cast(@{typ "bool list"}),var("x",@{typ "'N::len word"})),
                         bop(Rep,var_n"shift",lv"0")],mop(Size,ly(0,"N")))],qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("LSL",
   close
     (tp[var("x",@{typ "'N::len word"}),var_n"shift"],
      ite(eq(var_n"shift",ln 0),mu(var("x",@{typ "'N::len word"}),qTy),
          mb(call
               ("LSL_C",@{typ "'b state_scheme \<Rightarrow> (('N::len word \<times> bool) \<times> 'b state_scheme)"},
                tp[var("x",@{typ "'N::len word"}),var_n"shift"],@{theory}),
             close
               (var("v",@{typ "'N::len word \<times> bool"}),
                mu(mop(Fst,var("v",@{typ "'N::len word \<times> bool"})),qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("LSR_C",
   close
     (tp[var("x",@{typ "'N::len word"}),var_n"shift"],
      mb(ite(eq(var_n"shift",ln 0),
             call
               ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                call("exception.ASSERT",@{typ exception},ls"LSR_C",@{theory ARM_Monadic}),@{theory ARM_Monadic}),mu(lu,qTy)),
         close
           (var_a HOLogic.unitT,
            mu(tp[bop(Lsr,var("x",@{typ "'N::len word"}),var_n"shift"),
                  bop(And,bop(Le,var_n"shift",mop(Size,ly(0,"N"))),
                      bop(Bit,var("x",@{typ "'N::len word"}),bop(Sub,var_n"shift",ln 1)))],qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("LSR",
   close
     (tp[var("x",@{typ "'N::len word"}),var_n"shift"],
      ite(eq(var_n"shift",ln 0),mu(var("x",@{typ "'N::len word"}),qTy),
          mb(call
               ("LSR_C",@{typ "'b state_scheme \<Rightarrow> (('N::len word \<times> bool) \<times> 'b state_scheme)"},
                tp[var("x",@{typ "'N::len word"}),var_n"shift"],@{theory}),
             close
               (var("v",@{typ "'N::len word \<times> bool"}),
                mu(mop(Fst,var("v",@{typ "'N::len word \<times> bool"})),qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("ASR_C",
   close
     (tp[var("x",@{typ "'N::len word"}),var_n"shift"],
      mb(ite(eq(var_n"shift",ln 0),
             call
               ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                call("exception.ASSERT",@{typ exception},ls"ASR_C",@{theory ARM_Monadic}),@{theory ARM_Monadic}),mu(lu,qTy)),
         close
           (var_a HOLogic.unitT,
            mu(tp[bop(Asr,var("x",@{typ "'N::len word"}),var_n"shift"),
                  bop(Bit,var("x",@{typ "'N::len word"}),
                      bop(Sub,mop(Min,tp[mop(Size,ly(0,"N")),var_n"shift"]),ln 1))],qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("ASR",
   close
     (tp[var("x",@{typ "'N::len word"}),var_n"shift"],
      ite(eq(var_n"shift",ln 0),mu(var("x",@{typ "'N::len word"}),qTy),
          mb(call
               ("ASR_C",@{typ "'b state_scheme \<Rightarrow> (('N::len word \<times> bool) \<times> 'b state_scheme)"},
                tp[var("x",@{typ "'N::len word"}),var_n"shift"],@{theory}),
             close
               (var("v",@{typ "'N::len word \<times> bool"}),
                mu(mop(Fst,var("v",@{typ "'N::len word \<times> bool"})),qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("ROR_C",
   close
     (tp[var("x",@{typ "'N::len word"}),var_n"shift"],
      mb(ite(eq(var_n"shift",ln 0),
             call
               ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                call("exception.ASSERT",@{typ exception},ls"ROR_C",@{theory ARM_Monadic}),@{theory ARM_Monadic}),mu(lu,qTy)),
         close
           (var_a HOLogic.unitT,
            mu(let'
                 (var("result",@{typ "'N::len word"}),
                  bop(Ror,var("x",@{typ "'N::len word"}),var_n"shift"),
                  tp[var("result",@{typ "'N::len word"}),
                     mop(Msb,var("result",@{typ "'N::len word"}))]),qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("ROR",
   close
     (tp[var("x",@{typ "'N::len word"}),var_n"shift"],
      ite(eq(var_n"shift",ln 0),mu(var("x",@{typ "'N::len word"}),qTy),
          mb(call
               ("ROR_C",@{typ "'b state_scheme \<Rightarrow> (('N::len word \<times> bool) \<times> 'b state_scheme)"},
                tp[var("x",@{typ "'N::len word"}),var_n"shift"],@{theory}),
             close
               (var("v",@{typ "'N::len word \<times> bool"}),
                mu(mop(Fst,var("v",@{typ "'N::len word \<times> bool"})),qTy))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("RRX_C",
   close
     (tp[var("x",@{typ "'N::len word"}),var_b"carry_in"],
      tp[mop(Cast(@{typ "'N::len word"}),
             cc[mop(Cast(@{typ "bool list"}),var_b"carry_in"),
                ex(mop(Cast(@{typ "bool list"}),var("x",@{typ "'N::len word"})),
                   bop(Sub,mop(Size,ly(0,"N")),ln 1),ln 1,@{typ "bool list"})]),
         bop(Bit,var("x",@{typ "'N::len word"}),ln 0)]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("RRX",
   close
     (tp[var("x",@{typ "'N::len word"}),var_b"carry_in"],
      mop(Fst,
          call
            ("RRX_C",@{typ "'N::len word \<times> bool"},
             tp[var("x",@{typ "'N::len word"}),var_b"carry_in"],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("DecodeImmShift",
   close
     (tp[var_w("typ",2),var_w("imm5",5)],
      itb([(eq(var_w("typ",2),lw(0,2)),
            tp[lc("SRType_LSL","SRType",@{theory ARM_Monadic}),mop(Cast HOLogic.natT,var_w("imm5",5))]),
           (eq(var_w("typ",2),lw(1,2)),
            tp[lc("SRType_LSR","SRType",@{theory ARM_Monadic}),
               ite(eq(var_w("imm5",5),lw(0,5)),ln 32,mop(Cast HOLogic.natT,var_w("imm5",5)))]),
           (eq(var_w("typ",2),lw(2,2)),
            tp[lc("SRType_ASR","SRType",@{theory ARM_Monadic}),
               ite(eq(var_w("imm5",5),lw(0,5)),ln 32,mop(Cast HOLogic.natT,var_w("imm5",5)))]),
           (eq(var_w("typ",2),lw(3,2)),
            ite(eq(var_w("imm5",5),lw(0,5)),tp[lc("SRType_RRX","SRType",@{theory ARM_Monadic}),ln 1],
                tp[lc("SRType_ROR","SRType",@{theory ARM_Monadic}),mop(Cast HOLogic.natT,var_w("imm5",5))]))],
          lx(@{typ "SRType \<times> nat"}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("DecodeRegShift",
   close
     (var_w("typ",2),
      itb([(eq(var_w("typ",2),lw(0,2)),lc("SRType_LSL","SRType",@{theory ARM_Monadic})),
           (eq(var_w("typ",2),lw(1,2)),lc("SRType_LSR","SRType",@{theory ARM_Monadic})),
           (eq(var_w("typ",2),lw(2,2)),lc("SRType_ASR","SRType",@{theory ARM_Monadic})),
           (eq(var_w("typ",2),lw(3,2)),lc("SRType_ROR","SRType",@{theory ARM_Monadic}))],lx @{typ SRType})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("Shift_C",
   close
     (tp[var("value",@{typ "'N::len word"}),var("typ",@{typ SRType}),var_n"amount",var_b"carry_in"],
      ite(eq(var_n"amount",ln 0),mu(tp[var("value",@{typ "'N::len word"}),var_b"carry_in"],qTy),
          cs(var("typ",@{typ SRType}),
             [(lc("SRType_LSL","SRType",@{theory ARM_Monadic}),
               call
                 ("LSL_C",
                  @{typ "'b state_scheme \<Rightarrow> (('N::len word \<times> bool) \<times> 'b state_scheme)"},
                  tp[var("value",@{typ "'N::len word"}),var_n"amount"],@{theory})),
              (lc("SRType_LSR","SRType",@{theory ARM_Monadic}),
               call
                 ("LSR_C",
                  @{typ "'b state_scheme \<Rightarrow> (('N::len word \<times> bool) \<times> 'b state_scheme)"},
                  tp[var("value",@{typ "'N::len word"}),var_n"amount"],@{theory})),
              (lc("SRType_ASR","SRType",@{theory ARM_Monadic}),
               call
                 ("ASR_C",
                  @{typ "'b state_scheme \<Rightarrow> (('N::len word \<times> bool) \<times> 'b state_scheme)"},
                  tp[var("value",@{typ "'N::len word"}),var_n"amount"],@{theory})),
              (lc("SRType_ROR","SRType",@{theory ARM_Monadic}),
               call
                 ("ROR_C",
                  @{typ "'b state_scheme \<Rightarrow> (('N::len word \<times> bool) \<times> 'b state_scheme)"},
                  tp[var("value",@{typ "'N::len word"}),var_n"amount"],@{theory})),
              (lc("SRType_RRX","SRType",@{theory ARM_Monadic}),
               mu(call
                    ("RRX_C",@{typ "'N::len word \<times> bool"},
                     tp[var("value",@{typ "'N::len word"}),var_b"carry_in"],@{theory}),qTy))],
             @{context}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("Shift",
   close
     (tp[var("value",@{typ "'N::len word"}),var("typ",@{typ SRType}),var_n"amount",var_b"carry_in"],
      mb(call
           ("Shift_C",@{typ "'b state_scheme \<Rightarrow> (('N::len word \<times> bool) \<times> 'b state_scheme)"},
            tp[var("value",@{typ "'N::len word"}),var("typ",@{typ SRType}),var_n"amount",
               var_b"carry_in"],@{theory}),
         close
           (var("v",@{typ "'N::len word \<times> bool"}),
            mu(mop(Fst,var("v",@{typ "'N::len word \<times> bool"})),qTy)))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("ARMExpandImm_C",
   close
     (tp[var_w("imm12",12),var_b"carry_in"],
      call
        ("Shift_C",@{typ "'b state_scheme \<Rightarrow> ((32 word \<times> bool) \<times> 'b state_scheme)"},
         tp[mop(Cast w32,ex(var_w("imm12",12),ln 7,ln 0,w8)),lc("SRType_ROR","SRType",@{theory ARM_Monadic}),
            bop(Mul,ln 2,mop(Cast HOLogic.natT,ex(var_w("imm12",12),ln 11,ln 8,w4))),var_b"carry_in"],
         @{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("ARMExpandImm",
   close
     (var_w("imm12",12),
      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
         close
           (var("v",@{typ PSR}),
            mb(mb(mb(mu(call("PSR.C",HOLogic.boolT,var("v",@{typ PSR}),@{theory ARM_Monadic}),qTy),
                     close(var_b"v",mu(tp[var_w("imm12",12),var_b"v"],qTy))),
                  close
                    (var("v",@{typ "12 word \<times> bool"}),
                     call
                       ("ARMExpandImm_C",
                        @{typ "'b state_scheme \<Rightarrow> ((32 word \<times> bool) \<times> 'b state_scheme)"},
                        var("v",@{typ "12 word \<times> bool"}),@{theory}))),
               close
                 (var("v",@{typ "32 word \<times> bool"}),
                  mu(mop(Fst,var("v",@{typ "32 word \<times> bool"})),qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("ThumbExpandImm_C",
   close
     (tp[var_w("imm12",12),var_b"carry_in"],
      ite(eq(ex(var_w("imm12",12),ln 11,ln 10,(Word_Lib.mk_wordT 2)),lw(0,2)),
          mb(cs(ex(var_w("imm12",12),ln 9,ln 8,(Word_Lib.mk_wordT 2)),
                [(var_w("v",2),
                  itb([(eq(var_w("v",2),lw(0,2)),
                        mu(mop(Cast w32,ex(var_w("imm12",12),ln 7,ln 0,w8)),qTy)),
                       (eq(var_w("v",2),lw(1,2)),
                        ite(eq(ex(var_w("imm12",12),ln 7,ln 0,w8),lw(0,8)),
                            call
                              ("raise'exception",
                               @{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                               call
                                 ("exception.UNPREDICTABLE",@{typ exception},ls"ThumbExpandImm_C",
                                  @{theory ARM_Monadic}),@{theory ARM_Monadic}),
                            mu(cc[lw(0,8),ex(var_w("imm12",12),ln 7,ln 0,w8),lw(0,8),
                                  ex(var_w("imm12",12),ln 7,ln 0,w8)],qTy))),
                       (eq(var_w("v",2),lw(2,2)),
                        ite(eq(ex(var_w("imm12",12),ln 7,ln 0,w8),lw(0,8)),
                            call
                              ("raise'exception",
                               @{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                               call
                                 ("exception.UNPREDICTABLE",@{typ exception},ls"ThumbExpandImm_C",
                                  @{theory ARM_Monadic}),@{theory ARM_Monadic}),
                            mu(cc[ex(var_w("imm12",12),ln 7,ln 0,w8),lw(0,8),
                                  ex(var_w("imm12",12),ln 7,ln 0,w8),lw(0,8)],qTy))),
                       (eq(var_w("v",2),lw(3,2)),
                        ite(eq(ex(var_w("imm12",12),ln 7,ln 0,w8),lw(0,8)),
                            call
                              ("raise'exception",
                               @{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                               call
                                 ("exception.UNPREDICTABLE",@{typ exception},ls"ThumbExpandImm_C",
                                  @{theory ARM_Monadic}),@{theory ARM_Monadic}),
                            mu(cc[ex(var_w("imm12",12),ln 7,ln 0,w8),
                                  ex(var_w("imm12",12),ln 7,ln 0,w8),
                                  ex(var_w("imm12",12),ln 7,ln 0,w8),
                                  ex(var_w("imm12",12),ln 7,ln 0,w8)],qTy)))],
                      lx(@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"})))],@{context}),
             close(var_w("imm32",32),mu(tp[var_w("imm32",32),var_b"carry_in"],qTy))),
          call
            ("ROR_C",@{typ "'b state_scheme \<Rightarrow> ((32 word \<times> bool) \<times> 'b state_scheme)"},
             tp[mop(Cast w32,cc[lw(1,1),ex(var_w("imm12",12),ln 6,ln 0,(Word_Lib.mk_wordT 7))]),
                mop(Cast HOLogic.natT,ex(var_w("imm12",12),ln 11,ln 7,(Word_Lib.mk_wordT 5)))],
             @{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("ExpandImm_C",
   close
     (tp[var_w("imm12",12),var_b"carry_in"],
      mb(mr(close(var("s",qTy),call("state.Encoding",@{typ Encoding},var("s",qTy),@{theory ARM_Monadic}))),
         close
           (var("v",@{typ Encoding}),
            mb(mu(eq(var("v",@{typ Encoding}),lc("Encoding_Thumb2","Encoding",@{theory ARM_Monadic})),qTy),
               close
                 (var_b"b",
                  ite(var_b"b",
                      call
                        ("ThumbExpandImm_C",
                         @{typ "'b state_scheme \<Rightarrow> ((32 word \<times> bool) \<times> 'b state_scheme)"},
                         tp[var_w("imm12",12),var_b"carry_in"],@{theory}),
                      call
                        ("ARMExpandImm_C",
                         @{typ "'b state_scheme \<Rightarrow> ((32 word \<times> bool) \<times> 'b state_scheme)"},
                         tp[var_w("imm12",12),var_b"carry_in"],@{theory}))))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("AddWithCarry",
   close
     (tp[var("x",@{typ "'N::len word"}),var("y",@{typ "'N::len word"}),var_b"carry_in"],
      let'
        (var_n"unsigned_sum",
         bop(Add,
             bop(Add,mop(Cast HOLogic.natT,var("x",@{typ "'N::len word"})),
                 mop(Cast HOLogic.natT,var("y",@{typ "'N::len word"}))),
             mop(Cast HOLogic.natT,var_b"carry_in")),
         let'
           (var("result",@{typ "'N::len word"}),
            mop(Cast(@{typ "'N::len word"}),var_n"unsigned_sum"),
            tp[var("result",@{typ "'N::len word"}),
               mop(Not,
                   eq(mop(Cast HOLogic.natT,var("result",@{typ "'N::len word"})),var_n"unsigned_sum")),
               mop(Not,
                   eq(mop(Cast HOLogic.intT,var("result",@{typ "'N::len word"})),
                      bop(Add,
                          bop(Add,mop(Cast HOLogic.intT,var("x",@{typ "'N::len word"})),
                              mop(Cast HOLogic.intT,var("y",@{typ "'N::len word"}))),
                          mop(Cast HOLogic.intT,var_b"carry_in"))))]))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("DataProcessingALU",
   close
     (tp[var_w("opc",4),var_w("a",32),var_w("b",32),var_b"c"],
      itb([(eq(var_w("opc",4),lw(0,4)),
            tp[bop(BAnd,var_w("a",32),var_w("b",32)),var_b"c",lx HOLogic.boolT]),
           (eq(var_w("opc",4),lw(8,4)),
            tp[bop(BAnd,var_w("a",32),var_w("b",32)),var_b"c",lx HOLogic.boolT]),
           (eq(var_w("opc",4),lw(1,4)),
            tp[bop(BXor,var_w("a",32),var_w("b",32)),var_b"c",lx HOLogic.boolT]),
           (eq(var_w("opc",4),lw(9,4)),
            tp[bop(BXor,var_w("a",32),var_w("b",32)),var_b"c",lx HOLogic.boolT]),
           (eq(var_w("opc",4),lw(2,4)),
            call
              ("AddWithCarry",@{typ "32 word \<times> bool \<times> bool"},
               tp[var_w("a",32),mop(BNot,var_w("b",32)),lt],@{theory})),
           (eq(var_w("opc",4),lw(10,4)),
            call
              ("AddWithCarry",@{typ "32 word \<times> bool \<times> bool"},
               tp[var_w("a",32),mop(BNot,var_w("b",32)),lt],@{theory})),
           (eq(var_w("opc",4),lw(3,4)),
            call
              ("AddWithCarry",@{typ "32 word \<times> bool \<times> bool"},
               tp[mop(BNot,var_w("a",32)),var_w("b",32),lt],@{theory})),
           (eq(var_w("opc",4),lw(4,4)),
            call
              ("AddWithCarry",@{typ "32 word \<times> bool \<times> bool"},
               tp[var_w("a",32),var_w("b",32),lf],@{theory})),
           (eq(var_w("opc",4),lw(11,4)),
            call
              ("AddWithCarry",@{typ "32 word \<times> bool \<times> bool"},
               tp[var_w("a",32),var_w("b",32),lf],@{theory})),
           (eq(var_w("opc",4),lw(5,4)),
            call
              ("AddWithCarry",@{typ "32 word \<times> bool \<times> bool"},
               tp[var_w("a",32),var_w("b",32),var_b"c"],@{theory})),
           (eq(var_w("opc",4),lw(6,4)),
            call
              ("AddWithCarry",@{typ "32 word \<times> bool \<times> bool"},
               tp[var_w("a",32),mop(BNot,var_w("b",32)),var_b"c"],@{theory})),
           (eq(var_w("opc",4),lw(7,4)),
            call
              ("AddWithCarry",@{typ "32 word \<times> bool \<times> bool"},
               tp[mop(BNot,var_w("a",32)),var_w("b",32),var_b"c"],@{theory})),
           (eq(var_w("opc",4),lw(12,4)),
            tp[bop(BOr,var_w("a",32),var_w("b",32)),var_b"c",lx HOLogic.boolT]),
           (eq(var_w("opc",4),lw(13,4)),tp[var_w("b",32),var_b"c",lx HOLogic.boolT]),
           (eq(var_w("opc",4),lw(14,4)),
            tp[bop(BAnd,var_w("a",32),mop(BNot,var_w("b",32))),var_b"c",lx HOLogic.boolT]),
           (eq(var_w("opc",4),lw(15,4)),
            tp[bop(BOr,var_w("a",32),mop(BNot,var_w("b",32))),var_b"c",lx HOLogic.boolT])],
          lx(@{typ "32 word \<times> bool \<times> bool"}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("ArithmeticOpcode",
   close
     (var_w("opc",4),
      bop(And,bop(Or,bop(Bit,var_w("opc",4),ln 2),bop(Bit,var_w("opc",4),ln 1)),
          mop(Not,bop(And,bop(Bit,var_w("opc",4),ln 3),bop(Bit,var_w("opc",4),ln 2))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("ExcVectorBase",
   close
     (var_a HOLogic.unitT,
      mb(mr(close(var("s",qTy),call("state.CP15",@{typ CP15},var("s",qTy),@{theory ARM_Monadic}))),
         close
           (var("v",@{typ CP15}),
            mb(mb(mu(call("CP15.SCTLR",@{typ SCTLR},var("v",@{typ CP15}),@{theory ARM_Monadic}),qTy),
                  close
                    (var("v",@{typ SCTLR}),
                     mu(call("SCTLR.V",HOLogic.boolT,var("v",@{typ SCTLR}),@{theory ARM_Monadic}),qTy))),
               close
                 (var_b"b",
                  ite(var_b"b",mu(lw(268431360,32),qTy),
                      mb(call
                           ("HaveSecurityExt",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                            @{theory ARM_Monadic}),
                         close
                           (var_b"b",
                            ite(var_b"b",
                                mb(mr(close
                                        (var("s",qTy),
                                         call("state.CP15",@{typ CP15},var("s",qTy),@{theory ARM_Monadic}))),
                                   close
                                     (var("v",@{typ CP15}),
                                      mu(call("CP15.VBAR",w32,var("v",@{typ CP15}),@{theory ARM_Monadic}),qTy))),
                                mu(lw(0,32),qTy)))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("EnterMonitorMode",
   close
     (tp[var("new_spsr_value",@{typ PSR}),var_w("new_lr_value",32),var_w("vect_offset",32)],
      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
         close
           (var("v",@{typ PSR}),
            mb(mb(mb(mu(tp[var("v",@{typ PSR}),lw(22,5)],qTy),
                     close
                       (var("v",@{typ "PSR \<times> 5 word"}),
                        mu(rupd("PSR.M",var("v",@{typ "PSR \<times> 5 word"}),@{theory ARM_Monadic}),qTy))),
                  close
                    (var("v",@{typ PSR}),
                     mw(close
                          (var("s",qTy),
                           rupd("state.CPSR",tp[var("s",qTy),var("v",@{typ PSR})],@{theory ARM_Monadic}))))),
               close
                 (var_a HOLogic.unitT,
                  mb(call
                       ("write'SPSR",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                        var("new_spsr_value",@{typ PSR}),@{theory ARM_Monadic}),
                     close
                       (var_a HOLogic.unitT,
                        mb(call
                             ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                              tp[var_w("new_lr_value",32),lw(14,4)],@{theory ARM_Monadic}),
                           close
                             (var_a HOLogic.unitT,
                              mb(mr(close
                                      (var("s",qTy),
                                       call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                                 close
                                   (var("v",@{typ PSR}),
                                    mb(mb(mb(mu(tp[var("v",@{typ PSR}),lf],qTy),
                                             close
                                               (var("v",@{typ "PSR \<times> bool"}),
                                                mu(rupd
                                                     ("PSR.J",var("v",@{typ "PSR \<times> bool"}),
                                                      @{theory ARM_Monadic}),qTy))),
                                          close
                                            (var("v",@{typ PSR}),
                                             mw(close
                                                  (var("s",qTy),
                                                   rupd
                                                     ("state.CPSR",
                                                      tp[var("s",qTy),var("v",@{typ PSR})],@{theory ARM_Monadic}))))),
                                       close
                                         (var_a HOLogic.unitT,
                                          mb(mr(close
                                                  (var("s",qTy),
                                                   call
                                                     ("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                                             close
                                               (var("v",@{typ PSR}),
                                                mb(mb(mb(mb(mr(close
                                                                 (var("s",qTy),
                                                                  call
                                                                    ("state.CP15",@{typ CP15},
                                                                     var("s",qTy),@{theory  ARM_Monadic}))),
                                                            close
                                                              (var("v0",@{typ CP15}),
                                                               mb(mb(mu(call
                                                                          ("CP15.SCTLR",
                                                                           @{typ SCTLR},
                                                                           var("v0",@{typ CP15}),
                                                                           @{theory ARM_Monadic}),qTy),
                                                                     close
                                                                       (var("v",@{typ SCTLR}),
                                                                        mu(call
                                                                             ("SCTLR.TE",
                                                                              HOLogic.boolT,
                                                                              var("v",@{typ SCTLR}),
                                                                              @{theory ARM_Monadic}),qTy))),
                                                                  close
                                                                    (var_b"v0",
                                                                     mu(tp[var("v",@{typ PSR}),
                                                                           var_b"v0"],qTy))))),
                                                         close
                                                           (var("v",@{typ "PSR \<times> bool"}),
                                                            mu(rupd
                                                                 ("PSR.T",
                                                                  var("v",@{typ "PSR \<times> bool"}),
                                                                  @{theory ARM_Monadic}),qTy))),
                                                      close
                                                        (var("v",@{typ PSR}),
                                                         mw(close
                                                              (var("s",qTy),
                                                               rupd
                                                                 ("state.CPSR",
                                                                  tp[var("s",qTy),
                                                                     var("v",@{typ PSR})],@{theory ARM_Monadic}))))),
                                                   close
                                                     (var_a HOLogic.unitT,
                                                      mb(mr(close
                                                              (var("s",qTy),
                                                               call
                                                                 ("state.CPSR",@{typ PSR},
                                                                  var("s",qTy),@{theory ARM_Monadic}))),
                                                         close
                                                           (var("v",@{typ PSR}),
                                                            mb(mb(mb(mb(mr(close
                                                                             (var("s",qTy),
                                                                              call
                                                                                ("state.CP15",
                                                                                 @{typ CP15},
                                                                                 var("s",qTy),
                                                                                 @{theory ARM_Monadic}))),
                                                                        close
                                                                          (var("v0",@{typ CP15}),
                                                                           mb(mb(mu(call
                                                                                      ("CP15.SCTLR",
                                                                                       @{typ SCTLR},
                                                                                       var("v0",
                                                                                           @{typ CP15}),
                                                                                       @{theory ARM_Monadic}),
                                                                                    qTy),
                                                                                 close
                                                                                   (var("v",
                                                                                        @{typ SCTLR}),
                                                                                    mu(call
                                                                                         ("SCTLR.EE",
                                                                                          HOLogic.boolT,
                                                                                          var("v",
                                                                                              @{typ SCTLR}),
                                                                                          @{theory ARM_Monadic}),
                                                                                       qTy))),
                                                                              close
                                                                                (var_b"v0",
                                                                                 mu(tp[var("v",
                                                                                           @{typ PSR}),
                                                                                       var_b"v0"],
                                                                                    qTy))))),
                                                                     close
                                                                       (var("v",
                                                                            @{typ
                                                                            "PSR \<times> bool"}),
                                                                        mu(rupd
                                                                             ("PSR.E",
                                                                              var("v",
                                                                                  @{typ
                                                                                  "PSR \<times> bool"}),
                                                                              @{theory ARM_Monadic}),qTy))),
                                                                  close
                                                                    (var("v",@{typ PSR}),
                                                                     mw(close
                                                                          (var("s",qTy),
                                                                           rupd
                                                                             ("state.CPSR",
                                                                              tp[var("s",qTy),
                                                                                 var("v",@{typ PSR})],
                                                                              @{theory ARM_Monadic}))))),
                                                               close
                                                                 (var_a HOLogic.unitT,
                                                                  mb(mr(close
                                                                          (var("s",qTy),
                                                                           call
                                                                             ("state.CPSR",
                                                                              @{typ PSR},
                                                                              var("s",qTy),@{theory ARM_Monadic}))),
                                                                     close
                                                                       (var("v",@{typ PSR}),
                                                                        mb(mb(mb(mu(tp[var("v",
                                                                                           @{typ PSR}),
                                                                                       lt],qTy),
                                                                                 close
                                                                                   (var("v",
                                                                                        @{typ
                                                                                        "PSR \<times>
                                                                                         bool"}),
                                                                                    mu(rupd
                                                                                         ("PSR.A",
                                                                                          var("v",
                                                                                              @{typ
                                                                                              "PSR \<times>
                                                                                               bool"}),
                                                                                          @{theory ARM_Monadic}),
                                                                                       qTy))),
                                                                              close
                                                                                (var("v",@{typ PSR}),
                                                                                 mw(close
                                                                                      (var("s",qTy),
                                                                                       rupd
                                                                                         ("state.CPSR",
                                                                                          tp[var("s",
                                                                                                 qTy),
                                                                                             var("v",
                                                                                                 @{typ PSR})],
                                                                                          @{theory ARM_Monadic}))))),
                                                                           close
                                                                             (var_a HOLogic.unitT,
                                                                              mb(mr(close
                                                                                      (var("s",qTy),
                                                                                       call
                                                                                         ("state.CPSR",
                                                                                          @{typ PSR},
                                                                                          var("s",
                                                                                              qTy),
                                                                                          @{theory ARM_Monadic}))),
                                                                                 close
                                                                                   (var("v",
                                                                                        @{typ PSR}),
                                                                                    mb(mb(mb(mu(tp[var("v",
                                                                                                       @{typ PSR}),
                                                                                                   lt],
                                                                                                qTy),
                                                                                             close
                                                                                               (var("v",
                                                                                                    @{typ
                                                                                                    "PSR \<times>
                                                                                                     bool"}),
                                                                                                mu(rupd
                                                                                                     ("PSR.F",
                                                                                                      var("v",
                                                                                                          @{typ
                                                                                                          "PSR \<times>
                                                                                                           bool"}),
                                                                                                      @{theory ARM_Monadic}),
                                                                                                   qTy))),
                                                                                          close
                                                                                            (var("v",
                                                                                                 @{typ PSR}),
                                                                                             mw(close
                                                                                                  (var("s",
                                                                                                       qTy),
                                                                                                   rupd
                                                                                                     ("state.CPSR",
                                                                                                      tp[var("s",
                                                                                                             qTy),
                                                                                                         var("v",
                                                                                                             @{typ PSR})],
                                                                                                      @{theory ARM_Monadic}))))),
                                                                                       close
                                                                                         (var_a
                                                                                            HOLogic.unitT,
                                                                                          mb(mr(close
                                                                                                  (var("s",
                                                                                                       qTy),
                                                                                                   call
                                                                                                     ("state.CPSR",
                                                                                                      @{typ PSR},
                                                                                                      var("s",
                                                                                                          qTy),
                                                                                                      @{theory ARM_Monadic}))),
                                                                                             close
                                                                                               (var("v",
                                                                                                    @{typ PSR}),
                                                                                                mb(mb(mb(mu(tp[var("v",
                                                                                                                   @{typ PSR}),
                                                                                                               lt],
                                                                                                            qTy),
                                                                                                         close
                                                                                                           (var("v",
                                                                                                                @{typ
                                                                                                                "PSR \<times>
                                                                                                                 bool"}),
                                                                                                            mu(rupd
                                                                                                                 ("PSR.I",
                                                                                                                  var("v",
                                                                                                                      @{typ
                                                                                                                      "PSR \<times>
                                                                                                                       bool"}),
                                                                                                                  @{theory ARM_Monadic}),
                                                                                                               qTy))),
                                                                                                      close
                                                                                                        (var("v",
                                                                                                             @{typ PSR}),
                                                                                                         mw(close
                                                                                                              (var("s",
                                                                                                                   qTy),
                                                                                                               rupd
                                                                                                                 ("state.CPSR",
                                                                                                                  tp[var("s",
                                                                                                                         qTy),
                                                                                                                     var("v",
                                                                                                                         @{typ PSR})],
                                                                                                                  @{theory ARM_Monadic}))))),
                                                                                                   close
                                                                                                     (var_a
                                                                                                        HOLogic.unitT,
                                                                                                      mb(mr(close
                                                                                                              (var("s",
                                                                                                                   qTy),
                                                                                                               call
                                                                                                                 ("state.CPSR",
                                                                                                                  @{typ PSR},
                                                                                                                  var("s",
                                                                                                                      qTy),
                                                                                                                  @{theory ARM_Monadic}))),
                                                                                                         close
                                                                                                           (var("v",
                                                                                                                @{typ PSR}),
                                                                                                            mb(mb(mb(mu(tp[var("v",
                                                                                                                               @{typ PSR}),
                                                                                                                           lw(0,
                                                                                                                              8)],
                                                                                                                        qTy),
                                                                                                                     close
                                                                                                                       (var("v",
                                                                                                                            @{typ
                                                                                                                            "PSR \<times>
                                                                                                                             8 word"}),
                                                                                                                        mu(rupd
                                                                                                                             ("PSR.IT",
                                                                                                                              var("v",
                                                                                                                                  @{typ
                                                                                                                                  "PSR \<times>
                                                                                                                                   8 word"}),
                                                                                                                              @{theory ARM_Monadic}),
                                                                                                                           qTy))),
                                                                                                                  close
                                                                                                                    (var("v",
                                                                                                                         @{typ PSR}),
                                                                                                                     mw(close
                                                                                                                          (var("s",
                                                                                                                               qTy),
                                                                                                                           rupd
                                                                                                                             ("state.CPSR",
                                                                                                                              tp[var("s",
                                                                                                                                     qTy),
                                                                                                                                 var("v",
                                                                                                                                     @{typ PSR})],
                                                                                                                              @{theory ARM_Monadic}))))),
                                                                                                               close
                                                                                                                 (var_a
                                                                                                                    HOLogic.unitT,
                                                                                                                  mb(mr(close
                                                                                                                          (var("s",
                                                                                                                               qTy),
                                                                                                                           call
                                                                                                                             ("state.CP15",
                                                                                                                              @{typ CP15},
                                                                                                                              var("s",
                                                                                                                                  qTy),
                                                                                                                              @{theory ARM_Monadic}))),
                                                                                                                     close
                                                                                                                       (var("v",
                                                                                                                            @{typ CP15}),
                                                                                                                        mb(mb(mu(call
                                                                                                                                   ("CP15.MVBAR",
                                                                                                                                    w32,
                                                                                                                                    var("v",
                                                                                                                                        @{typ CP15}),
                                                                                                                                    @{theory ARM_Monadic}),
                                                                                                                                 qTy),
                                                                                                                              close
                                                                                                                                (var_w("v",32),
                                                                                                                                 mu(bop(Add,
                                                                                                                                        var_w("v",32),
                                                                                                                                        var_w("vect_offset",32)),
                                                                                                                                    qTy))),
                                                                                                                           close
                                                                                                                             (var_w("v",32),
                                                                                                                              call
                                                                                                                                ("BranchTo",
                                                                                                                                 @{typ
                                                                                                                                 "'b state_scheme \<Rightarrow>
                                                                                                                                  (unit \<times>
                                                                                                                                   'b state_scheme)"},
                                                                                                                                 var_w("v",32),
                                                                                                                                 @{theory ARM_Monadic})))))))))))))))))))))))))))))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("EnterHypMode",
   close
     (tp[var("new_spsr_value",@{typ PSR}),var_w("new_lr_value",32),var_w("vect_offset",32)],
      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
         close
           (var("v",@{typ PSR}),
            mb(mb(mb(mu(tp[var("v",@{typ PSR}),lw(26,5)],qTy),
                     close
                       (var("v",@{typ "PSR \<times> 5 word"}),
                        mu(rupd("PSR.M",var("v",@{typ "PSR \<times> 5 word"}),@{theory ARM_Monadic}),qTy))),
                  close
                    (var("v",@{typ PSR}),
                     mw(close
                          (var("s",qTy),
                           rupd("state.CPSR",tp[var("s",qTy),var("v",@{typ PSR})],@{theory ARM_Monadic}))))),
               close
                 (var_a HOLogic.unitT,
                  mb(call
                       ("write'SPSR",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                        var("new_spsr_value",@{typ PSR}),@{theory ARM_Monadic}),
                     close
                       (var_a HOLogic.unitT,
                        mb(call
                             ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                              tp[var_w("new_lr_value",32),lw(14,4)],@{theory ARM_Monadic}),
                           close
                             (var_a HOLogic.unitT,
                              mb(mr(close
                                      (var("s",qTy),
                                       call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                                 close
                                   (var("v",@{typ PSR}),
                                    mb(mb(mb(mu(tp[var("v",@{typ PSR}),lf],qTy),
                                             close
                                               (var("v",@{typ "PSR \<times> bool"}),
                                                mu(rupd
                                                     ("PSR.J",var("v",@{typ "PSR \<times> bool"}),
                                                      @{theory ARM_Monadic}),qTy))),
                                          close
                                            (var("v",@{typ PSR}),
                                             mw(close
                                                  (var("s",qTy),
                                                   rupd
                                                     ("state.CPSR",
                                                      tp[var("s",qTy),var("v",@{typ PSR})],@{theory ARM_Monadic}))))),
                                       close
                                         (var_a HOLogic.unitT,
                                          mb(mr(close
                                                  (var("s",qTy),
                                                   call
                                                     ("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                                             close
                                               (var("v",@{typ PSR}),
                                                mb(mb(mb(mb(mr(close
                                                                 (var("s",qTy),
                                                                  call
                                                                    ("state.CP15",@{typ CP15},
                                                                     var("s",qTy),@{theory ARM_Monadic}))),
                                                            close
                                                              (var("v0",@{typ CP15}),
                                                               mb(mb(mu(call
                                                                          ("CP15.SCTLR",
                                                                           @{typ SCTLR},
                                                                           var("v0",@{typ CP15}),
                                                                           @{theory ARM_Monadic}),qTy),
                                                                     close
                                                                       (var("v",@{typ SCTLR}),
                                                                        mu(call
                                                                             ("SCTLR.TE",
                                                                              HOLogic.boolT,
                                                                              var("v",@{typ SCTLR}),
                                                                              @{theory  ARM_Monadic}),qTy))),
                                                                  close
                                                                    (var_b"v0",
                                                                     mu(tp[var("v",@{typ PSR}),
                                                                           var_b"v0"],qTy))))),
                                                         close
                                                           (var("v",@{typ "PSR \<times> bool"}),
                                                            mu(rupd
                                                                 ("PSR.T",
                                                                  var("v",@{typ "PSR \<times> bool"}),
                                                                  @{theory ARM_Monadic}),qTy))),
                                                      close
                                                        (var("v",@{typ PSR}),
                                                         mw(close
                                                              (var("s",qTy),
                                                               rupd
                                                                 ("state.CPSR",
                                                                  tp[var("s",qTy),
                                                                     var("v",@{typ PSR})],@{theory ARM_Monadic}))))),
                                                   close
                                                     (var_a HOLogic.unitT,
                                                      mb(mr(close
                                                              (var("s",qTy),
                                                               call
                                                                 ("state.CPSR",@{typ PSR},
                                                                  var("s",qTy),@{theory ARM_Monadic}))),
                                                         close
                                                           (var("v",@{typ PSR}),
                                                            mb(mb(mb(mb(mr(close
                                                                             (var("s",qTy),
                                                                              call
                                                                                ("state.CP15",
                                                                                 @{typ CP15},
                                                                                 var("s",qTy),
                                                                                 @{theory ARM_Monadic}))),
                                                                        close
                                                                          (var("v0",@{typ CP15}),
                                                                           mb(mb(mu(call
                                                                                      ("CP15.SCTLR",
                                                                                       @{typ SCTLR},
                                                                                       var("v0",
                                                                                           @{typ CP15}),
                                                                                       @{theory ARM_Monadic}),
                                                                                    qTy),
                                                                                 close
                                                                                   (var("v",
                                                                                        @{typ SCTLR}),
                                                                                    mu(call
                                                                                         ("SCTLR.EE",
                                                                                          HOLogic.boolT,
                                                                                          var("v",
                                                                                              @{typ SCTLR}),
                                                                                          @{theory ARM_Monadic}),
                                                                                       qTy))),
                                                                              close
                                                                                (var_b"v0",
                                                                                 mu(tp[var("v",
                                                                                           @{typ PSR}),
                                                                                       var_b"v0"],
                                                                                    qTy))))),
                                                                     close
                                                                       (var("v",
                                                                            @{typ
                                                                            "PSR \<times> bool"}),
                                                                        mu(rupd
                                                                             ("PSR.E",
                                                                              var("v",
                                                                                  @{typ
                                                                                  "PSR \<times> bool"}),
                                                                              @{theory ARM_Monadic}),qTy))),
                                                                  close
                                                                    (var("v",@{typ PSR}),
                                                                     mw(close
                                                                          (var("s",qTy),
                                                                           rupd
                                                                             ("state.CPSR",
                                                                              tp[var("s",qTy),
                                                                                 var("v",@{typ PSR})],
                                                                              @{theory ARM_Monadic}))))),
                                                               close
                                                                 (var_a HOLogic.unitT,
                                                                  mb(mr(close
                                                                          (var("s",qTy),
                                                                           call
                                                                             ("state.CPSR",
                                                                              @{typ PSR},
                                                                              var("s",qTy),@{theory ARM_Monadic}))),
                                                                     close
                                                                       (var("v",@{typ PSR}),
                                                                        mb(mb(mb(mu(tp[var("v",
                                                                                           @{typ PSR}),
                                                                                       lt],qTy),
                                                                                 close
                                                                                   (var("v",
                                                                                        @{typ
                                                                                        "PSR \<times>
                                                                                         bool"}),
                                                                                    mu(rupd
                                                                                         ("PSR.A",
                                                                                          var("v",
                                                                                              @{typ
                                                                                              "PSR \<times>
                                                                                               bool"}),
                                                                                          @{theory ARM_Monadic}),
                                                                                       qTy))),
                                                                              close
                                                                                (var("v",@{typ PSR}),
                                                                                 mw(close
                                                                                      (var("s",qTy),
                                                                                       rupd
                                                                                         ("state.CPSR",
                                                                                          tp[var("s",
                                                                                                 qTy),
                                                                                             var("v",
                                                                                                 @{typ PSR})],
                                                                                          @{theory ARM_Monadic}))))),
                                                                           close
                                                                             (var_a HOLogic.unitT,
                                                                              mb(mr(close
                                                                                      (var("s",qTy),
                                                                                       call
                                                                                         ("state.CPSR",
                                                                                          @{typ PSR},
                                                                                          var("s",
                                                                                              qTy),
                                                                                          @{theory ARM_Monadic}))),
                                                                                 close
                                                                                   (var("v",
                                                                                        @{typ PSR}),
                                                                                    mb(mb(mb(mu(tp[var("v",
                                                                                                       @{typ PSR}),
                                                                                                   lt],
                                                                                                qTy),
                                                                                             close
                                                                                               (var("v",
                                                                                                    @{typ
                                                                                                    "PSR \<times>
                                                                                                     bool"}),
                                                                                                mu(rupd
                                                                                                     ("PSR.F",
                                                                                                      var("v",
                                                                                                          @{typ
                                                                                                          "PSR \<times>
                                                                                                           bool"}),
                                                                                                      @{theory ARM_Monadic}),
                                                                                                   qTy))),
                                                                                          close
                                                                                            (var("v",
                                                                                                 @{typ PSR}),
                                                                                             mw(close
                                                                                                  (var("s",
                                                                                                       qTy),
                                                                                                   rupd
                                                                                                     ("state.CPSR",
                                                                                                      tp[var("s",
                                                                                                             qTy),
                                                                                                         var("v",
                                                                                                             @{typ PSR})],
                                                                                                      @{theory ARM_Monadic}))))),
                                                                                       close
                                                                                         (var_a
                                                                                            HOLogic.unitT,
                                                                                          mb(mr(close
                                                                                                  (var("s",
                                                                                                       qTy),
                                                                                                   call
                                                                                                     ("state.CPSR",
                                                                                                      @{typ PSR},
                                                                                                      var("s",
                                                                                                          qTy),
                                                                                                      @{theory ARM_Monadic}))),
                                                                                             close
                                                                                               (var("v",
                                                                                                    @{typ PSR}),
                                                                                                mb(mb(mb(mu(tp[var("v",
                                                                                                                   @{typ PSR}),
                                                                                                               lt],
                                                                                                            qTy),
                                                                                                         close
                                                                                                           (var("v",
                                                                                                                @{typ
                                                                                                                "PSR \<times>
                                                                                                                 bool"}),
                                                                                                            mu(rupd
                                                                                                                 ("PSR.I",
                                                                                                                  var("v",
                                                                                                                      @{typ
                                                                                                                      "PSR \<times>
                                                                                                                       bool"}),
                                                                                                                  @{theory ARM_Monadic}),
                                                                                                               qTy))),
                                                                                                      close
                                                                                                        (var("v",
                                                                                                             @{typ PSR}),
                                                                                                         mw(close
                                                                                                              (var("s",
                                                                                                                   qTy),
                                                                                                               rupd
                                                                                                                 ("state.CPSR",
                                                                                                                  tp[var("s",
                                                                                                                         qTy),
                                                                                                                     var("v",
                                                                                                                         @{typ PSR})],
                                                                                                                  @{theory ARM_Monadic}))))),
                                                                                                   close
                                                                                                     (var_a
                                                                                                        HOLogic.unitT,
                                                                                                      mb(mr(close
                                                                                                              (var("s",
                                                                                                                   qTy),
                                                                                                               call
                                                                                                                 ("state.CPSR",
                                                                                                                  @{typ PSR},
                                                                                                                  var("s",
                                                                                                                      qTy),
                                                                                                                  @{theory ARM_Monadic}))),
                                                                                                         close
                                                                                                           (var("v",
                                                                                                                @{typ PSR}),
                                                                                                            mb(mb(mb(mu(tp[var("v",
                                                                                                                               @{typ PSR}),
                                                                                                                           lw(0,
                                                                                                                              8)],
                                                                                                                        qTy),
                                                                                                                     close
                                                                                                                       (var("v",
                                                                                                                            @{typ
                                                                                                                            "PSR \<times>
                                                                                                                             8 word"}),
                                                                                                                        mu(rupd
                                                                                                                             ("PSR.IT",
                                                                                                                              var("v",
                                                                                                                                  @{typ
                                                                                                                                  "PSR \<times>
                                                                                                                                   8 word"}),
                                                                                                                              @{theory ARM_Monadic}),
                                                                                                                           qTy))),
                                                                                                                  close
                                                                                                                    (var("v",
                                                                                                                         @{typ PSR}),
                                                                                                                     mw(close
                                                                                                                          (var("s",
                                                                                                                               qTy),
                                                                                                                           rupd
                                                                                                                             ("state.CPSR",
                                                                                                                              tp[var("s",
                                                                                                                                     qTy),
                                                                                                                                 var("v",
                                                                                                                                     @{typ PSR})],
                                                                                                                              @{theory ARM_Monadic}))))),
                                                                                                               close
                                                                                                                 (var_a
                                                                                                                    HOLogic.unitT,
                                                                                                                  mb(mr(close
                                                                                                                          (var("s",
                                                                                                                               qTy),
                                                                                                                           call
                                                                                                                             ("state.CP15",
                                                                                                                              @{typ CP15},
                                                                                                                              var("s",
                                                                                                                                  qTy),
                                                                                                                              @{theory ARM_Monadic}))),
                                                                                                                     close
                                                                                                                       (var("v",
                                                                                                                            @{typ CP15}),
                                                                                                                        mb(mb(mu(call
                                                                                                                                   ("CP15.MVBAR",
                                                                                                                                    w32,
                                                                                                                                    var("v",
                                                                                                                                        @{typ CP15}),
                                                                                                                                    @{theory ARM_Monadic}),
                                                                                                                                 qTy),
                                                                                                                              close
                                                                                                                                (var_w("v",32),
                                                                                                                                 mu(bop(Add,
                                                                                                                                        var_w("v",32),
                                                                                                                                        var_w("vect_offset",32)),
                                                                                                                                    qTy))),
                                                                                                                           close
                                                                                                                             (var_w("v",32),
                                                                                                                              call
                                                                                                                                ("BranchTo",
                                                                                                                                 @{typ
                                                                                                                                 "'b state_scheme \<Rightarrow>
                                                                                                                                  (unit \<times>
                                                                                                                                   'b state_scheme)"},
                                                                                                                                 var_w("v",32),
                                                                                                                                 @{theory ARM_Monadic})))))))))))))))))))))))))))))))))))))))))))
end                                                                                                                                      
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("TakeReset",
   close
     (var_a HOLogic.unitT,
      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
         close
           (var("v",@{typ PSR}),
            mb(mb(mb(mu(tp[var("v",@{typ PSR}),lw(19,5)],qTy),
                     close
                       (var("v",@{typ "PSR \<times> 5 word"}),
                        mu(rupd("PSR.M",var("v",@{typ "PSR \<times> 5 word"}),@{theory ARM_Monadic}),qTy))),
                  close
                    (var("v",@{typ PSR}),
                     mw(close
                          (var("s",qTy),
                           rupd("state.CPSR",tp[var("s",qTy),var("v",@{typ PSR})],@{theory ARM_Monadic}))))),
               close
                 (var_a HOLogic.unitT,
                  mb(call
                       ("HaveSecurityExt",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                        @{theory ARM_Monadic}),
                     close
                       (var_b"v",
                        mb(ite(var_b"v",
                               mb(mr(close
                                       (var("s",qTy),
                                        call("state.CP15",@{typ CP15},var("s",qTy),@{theory ARM_Monadic}))),
                                  close
                                    (var("v",@{typ CP15}),
                                     mb(mu(call
                                             ("CP15.SCR",@{typ SCR},var("v",@{typ CP15}),@{theory ARM_Monadic}),
                                           qTy),
                                        close
                                          (var("x0",@{typ SCR}),
                                           mb(mr(close
                                                   (var("s",qTy),
                                                    call
                                                      ("state.CP15",@{typ CP15},var("s",qTy),
                                                       @{theory ARM_Monadic}))),
                                              close
                                                (var("v",@{typ CP15}),
                                                 mb(mb(mu(tp[var("v",@{typ CP15}),
                                                             rupd
                                                               ("SCR.NS",
                                                                tp[var("x0",@{typ SCR}),lf],
                                                                @{theory ARM_Monadic})],qTy),
                                                       close
                                                         (var("v",@{typ "CP15 \<times> SCR"}),
                                                          mu(rupd
                                                               ("CP15.SCR",
                                                                var("v",@{typ "CP15 \<times> SCR"}),
                                                                @{theory ARM_Monadic}),qTy))),
                                                    close
                                                      (var("v",@{typ CP15}),
                                                       mw(close
                                                            (var("s",qTy),
                                                             rupd
                                                               ("state.CP15",
                                                                tp[var("s",qTy),var("v",@{typ CP15})],
                                                                @{theory ARM_Monadic}))))))))))),mu(lu,qTy)),
                           close
                             (var_a HOLogic.unitT,
                              mb(mr(close
                                      (var("s",qTy),
                                       call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                                 close
                                   (var("v",@{typ PSR}),
                                    mb(mb(mb(mu(tp[var("v",@{typ PSR}),lt],qTy),
                                             close
                                               (var("v",@{typ "PSR \<times> bool"}),
                                                mu(rupd
                                                     ("PSR.I",var("v",@{typ "PSR \<times> bool"}),
                                                      @{theory ARM_Monadic}),qTy))),
                                          close
                                            (var("v",@{typ PSR}),
                                             mw(close
                                                  (var("s",qTy),
                                                   rupd
                                                     ("state.CPSR",
                                                      tp[var("s",qTy),var("v",@{typ PSR})],@{theory ARM_Monadic}))))),
                                       close
                                         (var_a HOLogic.unitT,
                                          mb(mr(close
                                                  (var("s",qTy),
                                                   call
                                                     ("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                                             close
                                               (var("v",@{typ PSR}),
                                                mb(mb(mb(mu(tp[var("v",@{typ PSR}),lt],qTy),
                                                         close
                                                           (var("v",@{typ "PSR \<times> bool"}),
                                                            mu(rupd
                                                                 ("PSR.F",
                                                                  var("v",@{typ "PSR \<times> bool"}),
                                                                  @{theory ARM_Monadic}),qTy))),
                                                      close
                                                        (var("v",@{typ PSR}),
                                                         mw(close
                                                              (var("s",qTy),
                                                               rupd
                                                                 ("state.CPSR",
                                                                  tp[var("s",qTy),
                                                                     var("v",@{typ PSR})],@{theory ARM_Monadic}))))),
                                                   close
                                                     (var_a HOLogic.unitT,
                                                      mb(mr(close
                                                              (var("s",qTy),
                                                               call
                                                                 ("state.CPSR",@{typ PSR},
                                                                  var("s",qTy),@{theory ARM_Monadic}))),
                                                         close
                                                           (var("v",@{typ PSR}),
                                                            mb(mb(mb(mu(tp[var("v",@{typ PSR}),lt],
                                                                        qTy),
                                                                     close
                                                                       (var("v",
                                                                            @{typ
                                                                            "PSR \<times> bool"}),
                                                                        mu(rupd
                                                                             ("PSR.A",
                                                                              var("v",
                                                                                  @{typ
                                                                                  "PSR \<times> bool"}),
                                                                              @{theory ARM_Monadic}),qTy))),
                                                                  close
                                                                    (var("v",@{typ PSR}),
                                                                     mw(close
                                                                          (var("s",qTy),
                                                                           rupd
                                                                             ("state.CPSR",
                                                                              tp[var("s",qTy),
                                                                                 var("v",@{typ PSR})],
                                                                              @{theory ARM_Monadic}))))),
                                                               close
                                                                 (var_a HOLogic.unitT,
                                                                  mb(mr(close
                                                                          (var("s",qTy),
                                                                           call
                                                                             ("state.CPSR",
                                                                              @{typ PSR},
                                                                              var("s",qTy),@{theory ARM_Monadic}))),
                                                                     close
                                                                       (var("v",@{typ PSR}),
                                                                        mb(mb(mb(mu(tp[var("v",
                                                                                           @{typ PSR}),
                                                                                       lw(0,8)],qTy),
                                                                                 close
                                                                                   (var("v",
                                                                                        @{typ
                                                                                        "PSR \<times>
                                                                                         8 word"}),
                                                                                    mu(rupd
                                                                                         ("PSR.IT",
                                                                                          var("v",
                                                                                              @{typ
                                                                                              "PSR \<times>
                                                                                               8 word"}),
                                                                                          @{theory ARM_Monadic}),
                                                                                       qTy))),
                                                                              close
                                                                                (var("v",@{typ PSR}),
                                                                                 mw(close
                                                                                      (var("s",qTy),
                                                                                       rupd
                                                                                         ("state.CPSR",
                                                                                          tp[var("s",
                                                                                                 qTy),
                                                                                             var("v",
                                                                                                 @{typ PSR})],
                                                                                          @{theory ARM_Monadic}))))),
                                                                           close
                                                                             (var_a HOLogic.unitT,
                                                                              mb(mr(close
                                                                                      (var("s",qTy),
                                                                                       call
                                                                                         ("state.CPSR",
                                                                                          @{typ PSR},
                                                                                          var("s",
                                                                                              qTy),
                                                                                          @{theory ARM_Monadic}))),
                                                                                 close
                                                                                   (var("v",
                                                                                        @{typ PSR}),
                                                                                    mb(mb(mb(mu(tp[var("v",
                                                                                                       @{typ PSR}),
                                                                                                   lf],
                                                                                                qTy),
                                                                                             close
                                                                                               (var("v",
                                                                                                    @{typ
                                                                                                    "PSR \<times>
                                                                                                     bool"}),
                                                                                                mu(rupd
                                                                                                     ("PSR.J",
                                                                                                      var("v",
                                                                                                          @{typ
                                                                                                          "PSR \<times>
                                                                                                           bool"}),
                                                                                                      @{theory ARM_Monadic}),
                                                                                                   qTy))),
                                                                                          close
                                                                                            (var("v",
                                                                                                 @{typ PSR}),
                                                                                             mw(close
                                                                                                  (var("s",
                                                                                                       qTy),
                                                                                                   rupd
                                                                                                     ("state.CPSR",
                                                                                                      tp[var("s",
                                                                                                             qTy),
                                                                                                         var("v",
                                                                                                             @{typ PSR})],
                                                                                                      @{theory ARM_Monadic}))))),
                                                                                       close
                                                                                         (var_a
                                                                                            HOLogic.unitT,
                                                                                          mb(mr(close
                                                                                                  (var("s",
                                                                                                       qTy),
                                                                                                   call
                                                                                                     ("state.CPSR",
                                                                                                      @{typ PSR},
                                                                                                      var("s",
                                                                                                          qTy),
                                                                                                      @{theory ARM_Monadic}))),
                                                                                             close
                                                                                               (var("v",
                                                                                                    @{typ PSR}),
                                                                                                mb(mb(mb(mb(mr(close
                                                                                                                 (var("s",
                                                                                                                      qTy),
                                                                                                                  call
                                                                                                                    ("state.CP15",
                                                                                                                     @{typ CP15},
                                                                                                                     var("s",
                                                                                                                         qTy),
                                                                                                                     @{theory ARM_Monadic}))),
                                                                                                            close
                                                                                                              (var("v0",
                                                                                                                   @{typ CP15}),
                                                                                                               mb(mb(mu(call
                                                                                                                          ("CP15.SCTLR",
                                                                                                                           @{typ SCTLR},
                                                                                                                           var("v0",
                                                                                                                               @{typ CP15}),
                                                                                                                           @{theory ARM_Monadic}),
                                                                                                                        qTy),
                                                                                                                     close
                                                                                                                       (var("v",
                                                                                                                            @{typ SCTLR}),
                                                                                                                        mu(call
                                                                                                                             ("SCTLR.TE",
                                                                                                                              HOLogic.boolT,
                                                                                                                              var("v",
                                                                                                                                  @{typ SCTLR}),
                                                                                                                              @{theory  ARM_Monadic}),
                                                                                                                           qTy))),
                                                                                                                  close
                                                                                                                    (var_b"v0",
                                                                                                                     mu(tp[var("v",
                                                                                                                               @{typ PSR}),
                                                                                                                           var_b"v0"],
                                                                                                                        qTy))))),
                                                                                                         close
                                                                                                           (var("v",
                                                                                                                @{typ
                                                                                                                "PSR \<times>
                                                                                                                 bool"}),
                                                                                                            mu(rupd
                                                                                                                 ("PSR.T",
                                                                                                                  var("v",
                                                                                                                      @{typ
                                                                                                                      "PSR \<times>
                                                                                                                       bool"}),
                                                                                                                  @{theory ARM_Monadic}),
                                                                                                               qTy))),
                                                                                                      close
                                                                                                        (var("v",
                                                                                                             @{typ PSR}),
                                                                                                         mw(close
                                                                                                              (var("s",
                                                                                                                   qTy),
                                                                                                               rupd
                                                                                                                 ("state.CPSR",
                                                                                                                  tp[var("s",
                                                                                                                         qTy),
                                                                                                                     var("v",
                                                                                                                         @{typ PSR})],
                                                                                                                  @{theory ARM_Monadic}))))),
                                                                                                   close
                                                                                                     (var_a
                                                                                                        HOLogic.unitT,
                                                                                                      mb(mr(close
                                                                                                              (var("s",
                                                                                                                   qTy),
                                                                                                               call
                                                                                                                 ("state.CPSR",
                                                                                                                  @{typ PSR},
                                                                                                                  var("s",
                                                                                                                      qTy),
                                                                                                                  @{theory ARM_Monadic}))),
                                                                                                         close
                                                                                                           (var("v",
                                                                                                                @{typ PSR}),
                                                                                                            mb(mb(mb(mb(mr(close
                                                                                                                             (var("s",
                                                                                                                                  qTy),
                                                                                                                              call
                                                                                                                                ("state.CP15",
                                                                                                                                 @{typ CP15},
                                                                                                                                 var("s",
                                                                                                                                     qTy),
                                                                                                                                 @{theory ARM_Monadic}))),
                                                                                                                        close
                                                                                                                          (var("v0",
                                                                                                                               @{typ CP15}),
                                                                                                                           mb(mb(mu(call
                                                                                                                                      ("CP15.SCTLR",
                                                                                                                                       @{typ SCTLR},
                                                                                                                                       var("v0",
                                                                                                                                           @{typ CP15}),
                                                                                                                                       @{theory ARM_Monadic}),
                                                                                                                                    qTy),
                                                                                                                                 close
                                                                                                                                   (var("v",
                                                                                                                                        @{typ SCTLR}),
                                                                                                                                    mu(call
                                                                                                                                         ("SCTLR.EE",
                                                                                                                                          HOLogic.boolT,
                                                                                                                                          var("v",
                                                                                                                                              @{typ SCTLR}),
                                                                                                                                          @{theory ARM_Monadic}),
                                                                                                                                       qTy))),
                                                                                                                              close
                                                                                                                                (var_b"v0",
                                                                                                                                 mu(tp[var("v",
                                                                                                                                           @{typ PSR}),
                                                                                                                                       var_b"v0"],
                                                                                                                                    qTy))))),
                                                                                                                     close
                                                                                                                       (var("v",
                                                                                                                            @{typ
                                                                                                                            "PSR \<times>
                                                                                                                             bool"}),
                                                                                                                        mu(rupd
                                                                                                                             ("PSR.E",
                                                                                                                              var("v",
                                                                                                                                  @{typ
                                                                                                                                  "PSR \<times>
                                                                                                                                   bool"}),
                                                                                                                              @{theory ARM_Monadic}),
                                                                                                                           qTy))),
                                                                                                                  close
                                                                                                                    (var("v",
                                                                                                                         @{typ PSR}),
                                                                                                                     mw(close
                                                                                                                          (var("s",
                                                                                                                               qTy),
                                                                                                                           rupd
                                                                                                                             ("state.CPSR",
                                                                                                                              tp[var("s",
                                                                                                                                     qTy),
                                                                                                                                 var("v",
                                                                                                                                     @{typ PSR})],
                                                                                                                              @{theory ARM_Monadic}))))),
                                                                                                               close
                                                                                                                 (var_a
                                                                                                                    HOLogic.unitT,
                                                                                                                  mb(call
                                                                                                                       ("ExcVectorBase",
                                                                                                                        @{typ
                                                                                                                        "'b state_scheme \<Rightarrow>
                                                                                                                         (32 word \<times>
                                                                                                                          'b state_scheme)"},
                                                                                                                        lu,
                                                                                                                        @{theory}),
                                                                                                                     close
                                                                                                                       (var_w("v",32),
                                                                                                                        mb(mu(bop(Add,
                                                                                                                                  var_w("v",32),
                                                                                                                                  lw(0,
                                                                                                                                     32)),
                                                                                                                              qTy),
                                                                                                                           close
                                                                                                                             (var_w("v",32),
                                                                                                                              call
                                                                                                                                ("BranchTo",
                                                                                                                                 @{typ
                                                                                                                                 "'b state_scheme \<Rightarrow>
                                                                                                                                  (unit \<times>
                                                                                                                                   'b state_scheme)"},
                                                                                                                                 var_w("v",32),
                                                                                                                                 @{theory ARM_Monadic})))))))))))))))))))))))))))))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("TakeUndefInstrException",
   close
     (var_a HOLogic.unitT,
      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
         close
           (var("v",@{typ PSR}),
            mb(mb(mu(call("PSR.T",HOLogic.boolT,var("v",@{typ PSR}),@{theory ARM_Monadic}),qTy),
                  close
                    (var_b"b",
                     ite(var_b"b",
                         mb(const
                              ("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
                            close(var_w("v",32),mu(bop(Sub,var_w("v",32),lw(2,32)),qTy))),
                         mb(const
                              ("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
                            close(var_w("v",32),mu(bop(Sub,var_w("v",32),lw(4,32)),qTy)))))),
               close
                 (var_w("new_lr_value",32),
                  mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                     close
                       (var("new_spsr_value",@{typ PSR}),
                        let'
                          (var_w("vect_offset",32),lw(4,32),
                           mb(call
                                ("HaveVirtExt",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                 lu,@{theory ARM_Monadic}),
                              close
                                (var_b"v",
                                 mb(ite(var_b"v",
                                        mb(call
                                             ("HaveSecurityExt",
                                              @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                              @{theory ARM_Monadic}),
                                           close
                                             (var_b"b",
                                              ite(var_b"b",
                                                  mb(mr(close
                                                          (var("s",qTy),
                                                           call
                                                             ("state.CP15",@{typ CP15},var("s",qTy),
                                                              @{theory ARM_Monadic}))),
                                                     close
                                                       (var("v",@{typ CP15}),
                                                        mb(mb(mu(call
                                                                   ("CP15.SCR",@{typ SCR},
                                                                    var("v",@{typ CP15}),@{theory ARM_Monadic}),
                                                                 qTy),
                                                              close
                                                                (var("v",@{typ SCR}),
                                                                 mu(call
                                                                      ("SCR.NS",HOLogic.boolT,
                                                                       var("v",@{typ SCR}),@{theory ARM_Monadic}),
                                                                    qTy))),
                                                           close
                                                             (var_b"b",
                                                              ite(var_b"b",
                                                                  mb(mr(close
                                                                          (var("s",qTy),
                                                                           call
                                                                             ("state.CPSR",
                                                                              @{typ PSR},
                                                                              var("s",qTy),@{theory ARM_Monadic}))),
                                                                     close
                                                                       (var("v",@{typ PSR}),
                                                                        mb(mu(call
                                                                                ("PSR.M",
                                                                                 (Word_Lib.mk_wordT 5),
                                                                                 var("v",@{typ PSR}),
                                                                                 @{theory ARM_Monadic}),qTy),
                                                                           close
                                                                             (var_w("v",5),
                                                                              mu(eq(var_w("v",5),
                                                                                    lw(26,5)),qTy))))),
                                                                  mu(lf,qTy)))))),mu(lf,qTy)))),
                                        mu(lf,qTy)),
                                    close
                                      (var_b"take_to_hyp",
                                       mb(call
                                            ("HaveVirtExt",
                                             @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                             @{theory ARM_Monadic}),
                                          close
                                            (var_b"v",
                                             mb(ite(var_b"v",
                                                    mb(call
                                                         ("HaveSecurityExt",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          lu,@{theory ARM_Monadic}),
                                                       close
                                                         (var_b"b",
                                                          ite(var_b"b",
                                                              mb(call
                                                                   ("IsSecure",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (bool \<times> 'b state_scheme)"},lu,
                                                                    @{theory ARM_Monadic}),
                                                                 close
                                                                   (var_b"v",
                                                                    mb(mu(mop(Not,var_b"v"),qTy),
                                                                       close
                                                                         (var_b"b",
                                                                          ite(var_b"b",
                                                                              mb(mr(close
                                                                                      (var("s",qTy),
                                                                                       call
                                                                                         ("state.CP15",
                                                                                          @{typ CP15},
                                                                                          var("s",
                                                                                              qTy),
                                                                                          @{theory ARM_Monadic}))),
                                                                                 close
                                                                                   (var("v",
                                                                                        @{typ CP15}),
                                                                                    mb(mb(mu(call
                                                                                               ("CP15.HCR",
                                                                                                @{typ HCR},
                                                                                                var("v",
                                                                                                    @{typ CP15}),
                                                                                                @{theory ARM_Monadic}),
                                                                                             qTy),
                                                                                          close
                                                                                            (var("v",
                                                                                                 @{typ HCR}),
                                                                                             mu(call
                                                                                                  ("HCR.TGE",
                                                                                                   HOLogic.boolT,
                                                                                                   var("v",
                                                                                                       @{typ HCR}),
                                                                                                   @{theory ARM_Monadic}),
                                                                                                qTy))),
                                                                                       close
                                                                                         (var_b"b",
                                                                                          ite(var_b"b",
                                                                                              mb(mr(close
                                                                                                      (var("s",
                                                                                                           qTy),
                                                                                                       call
                                                                                                         ("state.CPSR",
                                                                                                          @{typ PSR},
                                                                                                          var("s",
                                                                                                              qTy),
                                                                                                          @{theory ARM_Monadic}))),
                                                                                                 close
                                                                                                   (var("v",
                                                                                                        @{typ PSR}),
                                                                                                    mb(mu(call
                                                                                                            ("PSR.M",
                                                                                                             (Word_Lib.mk_wordT 5),
                                                                                                             var("v",
                                                                                                                 @{typ PSR}),
                                                                                                             @{theory ARM_Monadic}),
                                                                                                          qTy),
                                                                                                       close
                                                                                                         (var_w("v",5),
                                                                                                          mu(eq(var_w("v",5),
                                                                                                                lw(16,
                                                                                                                   5)),
                                                                                                             qTy))))),
                                                                                              mu(lf,
                                                                                                 qTy)))))),
                                                                              mu(lf,qTy)))))),
                                                              mu(lf,qTy)))),mu(lf,qTy)),
                                                close
                                                  (var_b"route_to_hyp",
                                                   mb(mr(close
                                                           (var("s",qTy),
                                                            call
                                                              ("state.CPSR",@{typ PSR},var("s",qTy),
                                                               @{theory ARM_Monadic}))),
                                                      close
                                                        (var("v",@{typ PSR}),
                                                         mb(mb(mu(call
                                                                    ("PSR.T",HOLogic.boolT,
                                                                     var("v",@{typ PSR}),@{theory ARM_Monadic}),
                                                                  qTy),
                                                               close
                                                                 (var_b"b",
                                                                  mu(ite(var_b"b",lw(2,32),lw(4,32)),
                                                                     qTy))),
                                                            close
                                                              (var_w("return_offset",32),
                                                               let'
                                                                 (var_w("preferred_exceptn_return",32),
                                                                  bop(Sub,var_w("new_lr_value",32),
                                                                      var_w("return_offset",32)),
                                                                  itb([(var_b"take_to_hyp",
                                                                        call
                                                                          ("EnterHypMode",
                                                                           @{typ
                                                                           "'b state_scheme \<Rightarrow>
                                                                            (unit \<times> 'b state_scheme)"},
                                                                           tp[var("new_spsr_value",
                                                                                  @{typ PSR}),
                                                                              var_w("preferred_exceptn_return",32),
                                                                              var_w("vect_offset",32)],
                                                                           @{theory})),
                                                                       (var_b"route_to_hyp",
                                                                        call
                                                                          ("EnterHypMode",
                                                                           @{typ
                                                                           "'b state_scheme \<Rightarrow>
                                                                            (unit \<times> 'b state_scheme)"},
                                                                           tp[var("new_spsr_value",
                                                                                  @{typ PSR}),
                                                                              var_w("preferred_exceptn_return",32),
                                                                              lw(20,32)],@{theory}))],
                                                                      mb(mr(close
                                                                              (var("s",qTy),
                                                                               call
                                                                                 ("state.CPSR",
                                                                                  @{typ PSR},
                                                                                  var("s",qTy),
                                                                                  @{theory ARM_Monadic}))),
                                                                         close
                                                                           (var("v",@{typ PSR}),
                                                                            mb(mb(mb(mu(call
                                                                                          ("PSR.M",
                                                                                           (Word_Lib.mk_wordT 5),
                                                                                           var("v",
                                                                                               @{typ PSR}),
                                                                                           @{theory ARM_Monadic}),
                                                                                        qTy),
                                                                                     close
                                                                                       (var_w("v",5),
                                                                                        mu(eq(var_w("v",5),
                                                                                              lw(22,
                                                                                                 5)),
                                                                                           qTy))),
                                                                                  close
                                                                                    (var_b"b",
                                                                                     ite(var_b"b",
                                                                                         mb(mr(close
                                                                                                 (var("s",
                                                                                                      qTy),
                                                                                                  call
                                                                                                    ("state.CP15",
                                                                                                     @{typ CP15},
                                                                                                     var("s",
                                                                                                         qTy),
                                                                                                     @{theory ARM_Monadic}))),
                                                                                            close
                                                                                              (var("v",
                                                                                                   @{typ CP15}),
                                                                                               mb(mu(call
                                                                                                       ("CP15.SCR",
                                                                                                        @{typ SCR},
                                                                                                        var("v",
                                                                                                            @{typ CP15}),
                                                                                                        @{theory ARM_Monadic}),
                                                                                                     qTy),
                                                                                                  close
                                                                                                    (var("x0",
                                                                                                         @{typ SCR}),
                                                                                                     mb(mr(close
                                                                                                             (var("s",
                                                                                                                  qTy),
                                                                                                              call
                                                                                                                ("state.CP15",
                                                                                                                 @{typ CP15},
                                                                                                                 var("s",
                                                                                                                     qTy),
                                                                                                                 @{theory ARM_Monadic}))),
                                                                                                        close
                                                                                                          (var("v",
                                                                                                               @{typ CP15}),
                                                                                                           mb(mb(mu(tp[var("v",
                                                                                                                           @{typ CP15}),
                                                                                                                       rupd
                                                                                                                         ("SCR.NS",
                                                                                                                          tp[var("x0",
                                                                                                                                 @{typ SCR}),
                                                                                                                             lf],
                                                                                                                          @{theory ARM_Monadic})],
                                                                                                                    qTy),
                                                                                                                 close
                                                                                                                   (var("v",
                                                                                                                        @{typ
                                                                                                                        "CP15 \<times>
                                                                                                                         SCR"}),
                                                                                                                    mu(rupd
                                                                                                                         ("CP15.SCR",
                                                                                                                          var("v",
                                                                                                                              @{typ
                                                                                                                              "CP15 \<times>
                                                                                                                               SCR"}),
                                                                                                                          @{theory ARM_Monadic}),
                                                                                                                       qTy))),
                                                                                                              close
                                                                                                                (var("v",
                                                                                                                     @{typ CP15}),
                                                                                                                 mw(close
                                                                                                                      (var("s",
                                                                                                                           qTy),
                                                                                                                       rupd
                                                                                                                         ("state.CP15",
                                                                                                                          tp[var("s",
                                                                                                                                 qTy),
                                                                                                                             var("v",
                                                                                                                                 @{typ CP15})],
                                                                                                                          @{theory ARM_Monadic}))))))))))),
                                                                                         mu(lu,qTy)))),
                                                                               close
                                                                                 (var_a
                                                                                    HOLogic.unitT,
                                                                                  mb(mr(close
                                                                                          (var("s",
                                                                                               qTy),
                                                                                           call
                                                                                             ("state.CPSR",
                                                                                              @{typ PSR},
                                                                                              var("s",
                                                                                                  qTy),
                                                                                              @{theory ARM_Monadic}))),
                                                                                     close
                                                                                       (var("v",
                                                                                            @{typ PSR}),
                                                                                        mb(mb(mb(mu(tp[var("v",
                                                                                                           @{typ PSR}),
                                                                                                       lw(27,
                                                                                                          5)],
                                                                                                    qTy),
                                                                                                 close
                                                                                                   (var("v",
                                                                                                        @{typ
                                                                                                        "PSR \<times>
                                                                                                         5 word"}),
                                                                                                    mu(rupd
                                                                                                         ("PSR.M",
                                                                                                          var("v",
                                                                                                              @{typ
                                                                                                              "PSR \<times>
                                                                                                               5 word"}),
                                                                                                          @{theory ARM_Monadic}),
                                                                                                       qTy))),
                                                                                              close
                                                                                                (var("v",
                                                                                                     @{typ PSR}),
                                                                                                 mw(close
                                                                                                      (var("s",
                                                                                                           qTy),
                                                                                                       rupd
                                                                                                         ("state.CPSR",
                                                                                                          tp[var("s",
                                                                                                                 qTy),
                                                                                                             var("v",
                                                                                                                 @{typ PSR})],
                                                                                                          @{theory ARM_Monadic}))))),
                                                                                           close
                                                                                             (var_a
                                                                                                HOLogic.unitT,
                                                                                              mb(call
                                                                                                   ("write'SPSR",
                                                                                                    @{typ
                                                                                                    "'b state_scheme \<Rightarrow>
                                                                                                     (unit \<times>
                                                                                                      'b state_scheme)"},
                                                                                                    var("new_spsr_value",
                                                                                                        @{typ PSR}),
                                                                                                    @{theory ARM_Monadic}),
                                                                                                 close
                                                                                                   (var_a
                                                                                                      HOLogic.unitT,
                                                                                                    mb(call
                                                                                                         ("write'R",
                                                                                                          @{typ
                                                                                                          "'b state_scheme \<Rightarrow>
                                                                                                           (unit \<times>
                                                                                                            'b state_scheme)"},
                                                                                                          tp[var_w("new_lr_value",32),
                                                                                                             lw(14,
                                                                                                                4)],
                                                                                                          @{theory ARM_Monadic}),
                                                                                                       close
                                                                                                         (var_a
                                                                                                            HOLogic.unitT,
                                                                                                          mb(mr(close
                                                                                                                  (var("s",
                                                                                                                       qTy),
                                                                                                                   call
                                                                                                                     ("state.CPSR",
                                                                                                                      @{typ PSR},
                                                                                                                      var("s",
                                                                                                                          qTy),
                                                                                                                      @{theory ARM_Monadic}))),
                                                                                                             close
                                                                                                               (var("v",
                                                                                                                    @{typ PSR}),
                                                                                                                mb(mb(mb(mu(tp[var("v",
                                                                                                                                   @{typ PSR}),
                                                                                                                               lt],
                                                                                                                            qTy),
                                                                                                                         close
                                                                                                                           (var("v",
                                                                                                                                @{typ
                                                                                                                                "PSR \<times>
                                                                                                                                 bool"}),
                                                                                                                            mu(rupd
                                                                                                                                 ("PSR.I",
                                                                                                                                  var("v",
                                                                                                                                      @{typ
                                                                                                                                      "PSR \<times>
                                                                                                                                       bool"}),
                                                                                                                                  @{theory ARM_Monadic}),
                                                                                                                               qTy))),
                                                                                                                      close
                                                                                                                        (var("v",
                                                                                                                             @{typ PSR}),
                                                                                                                         mw(close
                                                                                                                              (var("s",
                                                                                                                                   qTy),
                                                                                                                               rupd
                                                                                                                                 ("state.CPSR",
                                                                                                                                  tp[var("s",
                                                                                                                                         qTy),
                                                                                                                                     var("v",
                                                                                                                                         @{typ PSR})],
                                                                                                                                  @{theory ARM_Monadic}))))),
                                                                                                                   close
                                                                                                                     (var_a
                                                                                                                        HOLogic.unitT,
                                                                                                                      mb(mr(close
                                                                                                                              (var("s",
                                                                                                                                   qTy),
                                                                                                                               call
                                                                                                                                 ("state.CPSR",
                                                                                                                                  @{typ PSR},
                                                                                                                                  var("s",
                                                                                                                                      qTy),
                                                                                                                                  @{theory ARM_Monadic}))),
                                                                                                                         close
                                                                                                                           (var("v",
                                                                                                                                @{typ PSR}),
                                                                                                                            mb(mb(mb(mu(tp[var("v",
                                                                                                                                               @{typ PSR}),
                                                                                                                                           lw(0,
                                                                                                                                              8)],
                                                                                                                                        qTy),
                                                                                                                                     close
                                                                                                                                       (var("v",
                                                                                                                                            @{typ
                                                                                                                                            "PSR \<times>
                                                                                                                                             8 word"}),
                                                                                                                                        mu(rupd
                                                                                                                                             ("PSR.IT",
                                                                                                                                              var("v",
                                                                                                                                                  @{typ
                                                                                                                                                  "PSR \<times>
                                                                                                                                                   8 word"}),
                                                                                                                                              @{theory ARM_Monadic}),
                                                                                                                                           qTy))),
                                                                                                                                  close
                                                                                                                                    (var("v",
                                                                                                                                         @{typ PSR}),
                                                                                                                                     mw(close
                                                                                                                                          (var("s",
                                                                                                                                               qTy),
                                                                                                                                           rupd
                                                                                                                                             ("state.CPSR",
                                                                                                                                              tp[var("s",
                                                                                                                                                     qTy),
                                                                                                                                                 var("v",
                                                                                                                                                     @{typ PSR})],
                                                                                                                                              @{theory ARM_Monadic}))))),
                                                                                                                               close
                                                                                                                                 (var_a
                                                                                                                                    HOLogic.unitT,
                                                                                                                                  mb(mr(close
                                                                                                                                          (var("s",
                                                                                                                                               qTy),
                                                                                                                                           call
                                                                                                                                             ("state.CPSR",
                                                                                                                                              @{typ PSR},
                                                                                                                                              var("s",
                                                                                                                                                  qTy),
                                                                                                                                              @{theory ARM_Monadic}))),
                                                                                                                                     close
                                                                                                                                       (var("v",
                                                                                                                                            @{typ PSR}),
                                                                                                                                        mb(mb(mb(mu(tp[var("v",
                                                                                                                                                           @{typ PSR}),
                                                                                                                                                       lf],
                                                                                                                                                    qTy),
                                                                                                                                                 close
                                                                                                                                                   (var("v",
                                                                                                                                                        @{typ
                                                                                                                                                        "PSR \<times>
                                                                                                                                                         bool"}),
                                                                                                                                                    mu(rupd
                                                                                                                                                         ("PSR.J",
                                                                                                                                                          var("v",
                                                                                                                                                              @{typ
                                                                                                                                                              "PSR \<times>
                                                                                                                                                               bool"}),
                                                                                                                                                          @{theory ARM_Monadic}),
                                                                                                                                                       qTy))),
                                                                                                                                              close
                                                                                                                                                (var("v",
                                                                                                                                                     @{typ PSR}),
                                                                                                                                                 mw(close
                                                                                                                                                      (var("s",
                                                                                                                                                           qTy),
                                                                                                                                                       rupd
                                                                                                                                                         ("state.CPSR",
                                                                                                                                                          tp[var("s",
                                                                                                                                                                 qTy),
                                                                                                                                                             var("v",
                                                                                                                                                                 @{typ PSR})],
                                                                                                                                                          @{theory ARM_Monadic}))))),
                                                                                                                                           close
                                                                                                                                             (var_a
                                                                                                                                                HOLogic.unitT,
                                                                                                                                              mb(mr(close
                                                                                                                                                      (var("s",
                                                                                                                                                           qTy),
                                                                                                                                                       call
                                                                                                                                                         ("state.CPSR",
                                                                                                                                                          @{typ PSR},
                                                                                                                                                          var("s",
                                                                                                                                                              qTy),
                                                                                                                                                          @{theory ARM_Monadic}))),
                                                                                                                                                 close
                                                                                                                                                   (var("v",
                                                                                                                                                        @{typ PSR}),
                                                                                                                                                    mb(mb(mb(mb(mr(close
                                                                                                                                                                     (var("s",
                                                                                                                                                                          qTy),
                                                                                                                                                                      call
                                                                                                                                                                        ("state.CP15",
                                                                                                                                                                         @{typ CP15},
                                                                                                                                                                         var("s",
                                                                                                                                                                             qTy),
                                                                                                                                                                         @{theory ARM_Monadic}))),
                                                                                                                                                                close
                                                                                                                                                                  (var("v0",
                                                                                                                                                                       @{typ CP15}),
                                                                                                                                                                   mb(mb(mu(call
                                                                                                                                                                              ("CP15.SCTLR",
                                                                                                                                                                               @{typ SCTLR},
                                                                                                                                                                               var("v0",
                                                                                                                                                                                   @{typ CP15}),
                                                                                                                                                                               @{theory ARM_Monadic}),
                                                                                                                                                                            qTy),
                                                                                                                                                                         close
                                                                                                                                                                           (var("v",
                                                                                                                                                                                @{typ SCTLR}),
                                                                                                                                                                            mu(call
                                                                                                                                                                                 ("SCTLR.TE",
                                                                                                                                                                                  HOLogic.boolT,
                                                                                                                                                                                  var("v",
                                                                                                                                                                                      @{typ SCTLR}),
                                                                                                                                                                                  @{theory  ARM_Monadic}),
                                                                                                                                                                               qTy))),
                                                                                                                                                                      close
                                                                                                                                                                        (var_b"v0",
                                                                                                                                                                         mu(tp[var("v",
                                                                                                                                                                                   @{typ PSR}),
                                                                                                                                                                               var_b"v0"],
                                                                                                                                                                            qTy))))),
                                                                                                                                                             close
                                                                                                                                                               (var("v",
                                                                                                                                                                    @{typ
                                                                                                                                                                    "PSR \<times>
                                                                                                                                                                     bool"}),
                                                                                                                                                                mu(rupd
                                                                                                                                                                     ("PSR.T",
                                                                                                                                                                      var("v",
                                                                                                                                                                          @{typ
                                                                                                                                                                          "PSR \<times>
                                                                                                                                                                           bool"}),
                                                                                                                                                                      @{theory ARM_Monadic}),
                                                                                                                                                                   qTy))),
                                                                                                                                                          close
                                                                                                                                                            (var("v",
                                                                                                                                                                 @{typ PSR}),
                                                                                                                                                             mw(close
                                                                                                                                                                  (var("s",
                                                                                                                                                                       qTy),
                                                                                                                                                                   rupd
                                                                                                                                                                     ("state.CPSR",
                                                                                                                                                                      tp[var("s",
                                                                                                                                                                             qTy),
                                                                                                                                                                         var("v",
                                                                                                                                                                             @{typ PSR})],
                                                                                                                                                                      @{theory ARM_Monadic}))))),
                                                                                                                                                       close
                                                                                                                                                         (var_a
                                                                                                                                                            HOLogic.unitT,
                                                                                                                                                          mb(mr(close
                                                                                                                                                                  (var("s",
                                                                                                                                                                       qTy),
                                                                                                                                                                   call
                                                                                                                                                                     ("state.CPSR",
                                                                                                                                                                      @{typ PSR},
                                                                                                                                                                      var("s",
                                                                                                                                                                          qTy),
                                                                                                                                                                      @{theory ARM_Monadic}))),
                                                                                                                                                             close
                                                                                                                                                               (var("v",
                                                                                                                                                                    @{typ PSR}),
                                                                                                                                                                mb(mb(mb(mb(mr(close
                                                                                                                                                                                 (var("s",
                                                                                                                                                                                      qTy),
                                                                                                                                                                                  call
                                                                                                                                                                                    ("state.CP15",
                                                                                                                                                                                     @{typ CP15},
                                                                                                                                                                                     var("s",
                                                                                                                                                                                         qTy),
                                                                                                                                                                                     @{theory ARM_Monadic}))),
                                                                                                                                                                            close
                                                                                                                                                                              (var("v0",
                                                                                                                                                                                   @{typ CP15}),
                                                                                                                                                                               mb(mb(mu(call
                                                                                                                                                                                          ("CP15.SCTLR",
                                                                                                                                                                                           @{typ SCTLR},
                                                                                                                                                                                           var("v0",
                                                                                                                                                                                               @{typ CP15}),
                                                                                                                                                                                           @{theory ARM_Monadic}),
                                                                                                                                                                                        qTy),
                                                                                                                                                                                     close
                                                                                                                                                                                       (var("v",
                                                                                                                                                                                            @{typ SCTLR}),
                                                                                                                                                                                        mu(call
                                                                                                                                                                                             ("SCTLR.EE",
                                                                                                                                                                                              HOLogic.boolT,
                                                                                                                                                                                              var("v",
                                                                                                                                                                                                  @{typ SCTLR}),
                                                                                                                                                                                              @{theory ARM_Monadic}),
                                                                                                                                                                                           qTy))),
                                                                                                                                                                                  close
                                                                                                                                                                                    (var_b"v0",
                                                                                                                                                                                     mu(tp[var("v",
                                                                                                                                                                                               @{typ PSR}),
                                                                                                                                                                                           var_b"v0"],
                                                                                                                                                                                        qTy))))),
                                                                                                                                                                         close
                                                                                                                                                                           (var("v",
                                                                                                                                                                                @{typ
                                                                                                                                                                                "PSR \<times>
                                                                                                                                                                                 bool"}),
                                                                                                                                                                            mu(rupd
                                                                                                                                                                                 ("PSR.E",
                                                                                                                                                                                  var("v",
                                                                                                                                                                                      @{typ
                                                                                                                                                                                      "PSR \<times>
                                                                                                                                                                                       bool"}),
                                                                                                                                                                                  @{theory ARM_Monadic}),
                                                                                                                                                                               qTy))),
                                                                                                                                                                      close
                                                                                                                                                                        (var("v",
                                                                                                                                                                             @{typ PSR}),
                                                                                                                                                                         mw(close
                                                                                                                                                                              (var("s",
                                                                                                                                                                                   qTy),
                                                                                                                                                                               rupd
                                                                                                                                                                                 ("state.CPSR",
                                                                                                                                                                                  tp[var("s",
                                                                                                                                                                                         qTy),
                                                                                                                                                                                     var("v",
                                                                                                                                                                                         @{typ PSR})],
                                                                                                                                                                                  @{theory ARM_Monadic}))))),
                                                                                                                                                                   close
                                                                                                                                                                     (var_a
                                                                                                                                                                        HOLogic.unitT,
                                                                                                                                                                      mb(call
                                                                                                                                                                           ("ExcVectorBase",
                                                                                                                                                                            @{typ
                                                                                                                                                                            "'b state_scheme \<Rightarrow>
                                                                                                                                                                             (32 word \<times>
                                                                                                                                                                              'b state_scheme)"},
                                                                                                                                                                            lu,
                                                                                                                                                                            @{theory}),
                                                                                                                                                                         close
                                                                                                                                                                           (var_w("v",32),
                                                                                                                                                                            mb(mu(bop(Add,
                                                                                                                                                                                      var_w("v",32),
                                                                                                                                                                                      var_w("vect_offset",32)),
                                                                                                                                                                                  qTy),
                                                                                                                                                                               close
                                                                                                                                                                                 (var_w("v",32),
                                                                                                                                                                                  call
                                                                                                                                                                                    ("BranchTo",
                                                                                                                                                                                     @{typ
                                                                                                                                                                                     "'b state_scheme \<Rightarrow>
                                                                                                                                                                                      (unit \<times>
                                                                                                                                                                                       'b state_scheme)"},
                                                                                                                                                                                     var_w("v",32),
                                                                                                                                                                                     @{theory ARM_Monadic}))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("TakeSVCException",
   close
     (var_a HOLogic.unitT,
      mb(call("ITAdvance",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic}),
         close
           (var_a HOLogic.unitT,
            mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
               close
                 (var("v",@{typ PSR}),
                  mb(mb(mu(call("PSR.T",HOLogic.boolT,var("v",@{typ PSR}),@{theory ARM_Monadic}),qTy),
                        close
                          (var_b"b",
                           ite(var_b"b",
                               mb(const
                                    ("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                     @{theory ARM_Monadic}),
                                  close(var_w("v",32),mu(bop(Sub,var_w("v",32),lw(2,32)),qTy))),
                               mb(const
                                    ("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                     @{theory ARM_Monadic}),
                                  close(var_w("v",32),mu(bop(Sub,var_w("v",32),lw(4,32)),qTy)))))),
                     close
                       (var_w("new_lr_value",32),
                        mb(mr(close
                                (var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                           close
                             (var("new_spsr_value",@{typ PSR}),
                              let'
                                (var_w("vect_offset",32),lw(8,32),
                                 mb(call
                                      ("HaveVirtExt",
                                       @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                       @{theory ARM_Monadic}),
                                    close
                                      (var_b"v",
                                       mb(ite(var_b"v",
                                              mb(call
                                                   ("HaveSecurityExt",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                                    @{theory ARM_Monadic}),
                                                 close
                                                   (var_b"b",
                                                    ite(var_b"b",
                                                        mb(mr(close
                                                                (var("s",qTy),
                                                                 call
                                                                   ("state.CP15",@{typ CP15},
                                                                    var("s",qTy),@{theory ARM_Monadic}))),
                                                           close
                                                             (var("v",@{typ CP15}),
                                                              mb(mb(mu(call
                                                                         ("CP15.SCR",@{typ SCR},
                                                                          var("v",@{typ CP15}),
                                                                          @{theory ARM_Monadic}),qTy),
                                                                    close
                                                                      (var("v",@{typ SCR}),
                                                                       mu(call
                                                                            ("SCR.NS",HOLogic.boolT,
                                                                             var("v",@{typ SCR}),
                                                                             @{theory ARM_Monadic}),qTy))),
                                                                 close
                                                                   (var_b"b",
                                                                    ite(var_b"b",
                                                                        mb(mr(close
                                                                                (var("s",qTy),
                                                                                 call
                                                                                   ("state.CPSR",
                                                                                    @{typ PSR},
                                                                                    var("s",qTy),
                                                                                    @{theory ARM_Monadic}))),
                                                                           close
                                                                             (var("v",@{typ PSR}),
                                                                              mb(mu(call
                                                                                      ("PSR.M",
                                                                                       (Word_Lib.mk_wordT 5),
                                                                                       var("v",
                                                                                           @{typ PSR}),
                                                                                       prev_thy ),
                                                                                    qTy),
                                                                                 close
                                                                                   (var_w("v",5),
                                                                                    mu(eq(var_w("v",5),
                                                                                          lw(26,5)),
                                                                                       qTy))))),
                                                                        mu(lf,qTy)))))),mu(lf,qTy)))),
                                              mu(lf,qTy)),
                                          close
                                            (var_b"take_to_hyp",
                                             mb(call
                                                  ("HaveVirtExt",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                                   @{theory ARM_Monadic}),
                                                close
                                                  (var_b"v",
                                                   mb(ite(var_b"v",
                                                          mb(call
                                                               ("HaveSecurityExt",
                                                                @{typ
                                                                "'b state_scheme \<Rightarrow>
                                                                 (bool \<times> 'b state_scheme)"},lu,
                                                                @{theory ARM_Monadic}),
                                                             close
                                                               (var_b"b",
                                                                ite(var_b"b",
                                                                    mb(call
                                                                         ("IsSecure",
                                                                          @{typ
                                                                          "'b state_scheme \<Rightarrow>
                                                                           (bool \<times> 'b state_scheme)"},
                                                                          lu,@{theory ARM_Monadic}),
                                                                       close
                                                                         (var_b"v",
                                                                          mb(mu(mop(Not,var_b"v"),
                                                                                qTy),
                                                                             close
                                                                               (var_b"b",
                                                                                ite(var_b"b",
                                                                                    mb(mr(close
                                                                                            (var("s",
                                                                                                 qTy),
                                                                                             call
                                                                                               ("state.CP15",
                                                                                                @{typ CP15},
                                                                                                var("s",
                                                                                                    qTy),
                                                                                                @{theory ARM_Monadic}))),
                                                                                       close
                                                                                         (var("v",
                                                                                              @{typ CP15}),
                                                                                          mb(mb(mu(call
                                                                                                     ("CP15.HCR",
                                                                                                      @{typ HCR},
                                                                                                      var("v",
                                                                                                          @{typ CP15}),
                                                                                                      @{theory ARM_Monadic}),
                                                                                                   qTy),
                                                                                                close
                                                                                                  (var("v",
                                                                                                       @{typ HCR}),
                                                                                                   mu(call
                                                                                                        ("HCR.TGE",
                                                                                                         HOLogic.boolT,
                                                                                                         var("v",
                                                                                                             @{typ HCR}),
                                                                                                         @{theory ARM_Monadic}),
                                                                                                      qTy))),
                                                                                             close
                                                                                               (var_b"b",
                                                                                                ite(var_b"b",
                                                                                                    mb(mr(close
                                                                                                            (var("s",
                                                                                                                 qTy),
                                                                                                             call
                                                                                                               ("state.CPSR",
                                                                                                                @{typ PSR},
                                                                                                                var("s",
                                                                                                                    qTy),
                                                                                                                @{theory ARM_Monadic}))),
                                                                                                       close
                                                                                                         (var("v",
                                                                                                              @{typ PSR}),
                                                                                                          mb(mu(call
                                                                                                                  ("PSR.M",
                                                                                                                   (Word_Lib.mk_wordT 5),
                                                                                                                   var("v",
                                                                                                                       @{typ PSR}),
                                                                                                                   @{theory ARM_Monadic}),
                                                                                                                qTy),
                                                                                                             close
                                                                                                               (var_w("v",5),
                                                                                                                mu(eq(var_w("v",5),
                                                                                                                      lw(16,
                                                                                                                         5)),
                                                                                                                   qTy))))),
                                                                                                    mu(lf,
                                                                                                       qTy)))))),
                                                                                    mu(lf,qTy)))))),
                                                                    mu(lf,qTy)))),mu(lf,qTy)),
                                                      close
                                                        (var_b"route_to_hyp",
                                                         itb([(var_b"take_to_hyp",
                                                               call
                                                                 ("EnterHypMode",
                                                                  @{typ
                                                                  "'b state_scheme \<Rightarrow>
                                                                   (unit \<times> 'b state_scheme)"},
                                                                  tp[var("new_spsr_value",@{typ PSR}),
                                                                     var_w("new_lr_value",32),
                                                                     var_w("vect_offset",32)],
                                                                  @{theory })),
                                                              (var_b"route_to_hyp",
                                                               call
                                                                 ("EnterHypMode",
                                                                  @{typ
                                                                  "'b state_scheme \<Rightarrow>
                                                                   (unit \<times> 'b state_scheme)"},
                                                                  tp[var("new_spsr_value",@{typ PSR}),
                                                                     var_w("new_lr_value",32),
                                                                     lw(20,32)],@{theory }))],
                                                             mb(mr(close
                                                                     (var("s",qTy),
                                                                      call
                                                                        ("state.CPSR",@{typ PSR},
                                                                         var("s",qTy),@{theory ARM_Monadic}))),
                                                                close
                                                                  (var("v",@{typ PSR}),
                                                                   mb(mb(mb(mu(call
                                                                                 ("PSR.M",
                                                                                  (Word_Lib.mk_wordT 5),
                                                                                  var("v",@{typ PSR}),
                                                                                  prev_thy ),qTy),
                                                                            close
                                                                              (var_w("v",5),
                                                                               mu(eq(var_w("v",5),
                                                                                     lw(22,5)),qTy))),
                                                                         close
                                                                           (var_b"b",
                                                                            ite(var_b"b",
                                                                                mb(mr(close
                                                                                        (var("s",qTy),
                                                                                         call
                                                                                           ("state.CP15",
                                                                                            @{typ CP15},
                                                                                            var("s",
                                                                                                qTy),
                                                                                            @{theory ARM_Monadic}))),
                                                                                   close
                                                                                     (var("v",
                                                                                          @{typ CP15}),
                                                                                      mb(mu(call
                                                                                              ("CP15.SCR",
                                                                                               @{typ SCR},
                                                                                               var("v",
                                                                                                   @{typ CP15}),
                                                                                               @{theory ARM_Monadic}),
                                                                                            qTy),
                                                                                         close
                                                                                           (var("x0",
                                                                                                @{typ SCR}),
                                                                                            mb(mr(close
                                                                                                    (var("s",
                                                                                                         qTy),
                                                                                                     call
                                                                                                       ("state.CP15",
                                                                                                        @{typ CP15},
                                                                                                        var("s",
                                                                                                            qTy),
                                                                                                        @{theory ARM_Monadic}))),
                                                                                               close
                                                                                                 (var("v",
                                                                                                      @{typ CP15}),
                                                                                                  mb(mb(mu(tp[var("v",
                                                                                                                  @{typ CP15}),
                                                                                                              rupd
                                                                                                                ("SCR.NS",
                                                                                                                 tp[var("x0",
                                                                                                                        @{typ SCR}),
                                                                                                                    lf],
                                                                                                                 @{theory ARM_Monadic})],
                                                                                                           qTy),
                                                                                                        close
                                                                                                          (var("v",
                                                                                                               @{typ
                                                                                                               "CP15 \<times>
                                                                                                                SCR"}),
                                                                                                           mu(rupd
                                                                                                                ("CP15.SCR",
                                                                                                                 var("v",
                                                                                                                     @{typ
                                                                                                                     "CP15 \<times>
                                                                                                                      SCR"}),
                                                                                                                 @{theory ARM_Monadic}),
                                                                                                              qTy))),
                                                                                                     close
                                                                                                       (var("v",
                                                                                                            @{typ CP15}),
                                                                                                        mw(close
                                                                                                             (var("s",
                                                                                                                  qTy),
                                                                                                              rupd
                                                                                                                ("state.CP15",
                                                                                                                 tp[var("s",
                                                                                                                        qTy),
                                                                                                                    var("v",
                                                                                                                        @{typ CP15})],
                                                                                                                 @{theory ARM_Monadic}))))))))))),
                                                                                mu(lu,qTy)))),
                                                                      close
                                                                        (var_a HOLogic.unitT,
                                                                         mb(mr(close
                                                                                 (var("s",qTy),
                                                                                  call
                                                                                    ("state.CPSR",
                                                                                     @{typ PSR},
                                                                                     var("s",qTy),
                                                                                     @{theory ARM_Monadic}))),
                                                                            close
                                                                              (var("v",@{typ PSR}),
                                                                               mb(mb(mb(mu(tp[var("v",
                                                                                                  @{typ PSR}),
                                                                                              lw(19,
                                                                                                 5)],
                                                                                           qTy),
                                                                                        close
                                                                                          (var("v",
                                                                                               @{typ
                                                                                               "PSR \<times>
                                                                                                5 word"}),
                                                                                           mu(rupd
                                                                                                ("PSR.M",
                                                                                                 var("v",
                                                                                                     @{typ
                                                                                                     "PSR \<times>
                                                                                                      5 word"}),
                                                                                                 prev_thy ),
                                                                                              qTy))),
                                                                                     close
                                                                                       (var("v",
                                                                                            @{typ PSR}),
                                                                                        mw(close
                                                                                             (var("s",
                                                                                                  qTy),
                                                                                              rupd
                                                                                                ("state.CPSR",
                                                                                                 tp[var("s",
                                                                                                        qTy),
                                                                                                    var("v",
                                                                                                        @{typ PSR})],
                                                                                                 @{theory ARM_Monadic}))))),
                                                                                  close
                                                                                    (var_a
                                                                                       HOLogic.unitT,
                                                                                     mb(call
                                                                                          ("write'SPSR",
                                                                                           @{typ
                                                                                           "'b state_scheme \<Rightarrow>
                                                                                            (unit \<times>
                                                                                             'b state_scheme)"},
                                                                                           var("new_spsr_value",
                                                                                               @{typ PSR}),
                                                                                           @{theory ARM_Monadic}),
                                                                                        close
                                                                                          (var_a
                                                                                             HOLogic.unitT,
                                                                                           mb(call
                                                                                                ("write'R",
                                                                                                 @{typ
                                                                                                 "'b state_scheme \<Rightarrow>
                                                                                                  (unit \<times>
                                                                                                   'b state_scheme)"},
                                                                                                 tp[var_w("new_lr_value",32),
                                                                                                    lw(14,
                                                                                                       4)],
                                                                                                 @{theory ARM_Monadic}),
                                                                                              close
                                                                                                (var_a
                                                                                                   HOLogic.unitT,
                                                                                                 mb(mr(close
                                                                                                         (var("s",
                                                                                                              qTy),
                                                                                                          call
                                                                                                            ("state.CPSR",
                                                                                                             @{typ PSR},
                                                                                                             var("s",
                                                                                                                 qTy),
                                                                                                             @{theory ARM_Monadic}))),
                                                                                                    close
                                                                                                      (var("v",
                                                                                                           @{typ PSR}),
                                                                                                       mb(mb(mb(mu(tp[var("v",
                                                                                                                          @{typ PSR}),
                                                                                                                      lt],
                                                                                                                   qTy),
                                                                                                                close
                                                                                                                  (var("v",
                                                                                                                       @{typ
                                                                                                                       "PSR \<times>
                                                                                                                        bool"}),
                                                                                                                   mu(rupd
                                                                                                                        ("PSR.I",
                                                                                                                         var("v",
                                                                                                                             @{typ
                                                                                                                             "PSR \<times>
                                                                                                                              bool"}),
                                                                                                                         @{theory ARM_Monadic}),
                                                                                                                      qTy))),
                                                                                                             close
                                                                                                               (var("v",
                                                                                                                    @{typ PSR}),
                                                                                                                mw(close
                                                                                                                     (var("s",
                                                                                                                          qTy),
                                                                                                                      rupd
                                                                                                                        ("state.CPSR",
                                                                                                                         tp[var("s",
                                                                                                                                qTy),
                                                                                                                            var("v",
                                                                                                                                @{typ PSR})],
                                                                                                                         @{theory ARM_Monadic}))))),
                                                                                                          close
                                                                                                            (var_a
                                                                                                               HOLogic.unitT,
                                                                                                             mb(mr(close
                                                                                                                     (var("s",
                                                                                                                          qTy),
                                                                                                                      call
                                                                                                                        ("state.CPSR",
                                                                                                                         @{typ PSR},
                                                                                                                         var("s",
                                                                                                                             qTy),
                                                                                                                         @{theory ARM_Monadic}))),
                                                                                                                close
                                                                                                                  (var("v",
                                                                                                                       @{typ PSR}),
                                                                                                                   mb(mb(mb(mu(tp[var("v",
                                                                                                                                      @{typ PSR}),
                                                                                                                                  lw(0,
                                                                                                                                     8)],
                                                                                                                               qTy),
                                                                                                                            close
                                                                                                                              (var("v",
                                                                                                                                   @{typ
                                                                                                                                   "PSR \<times>
                                                                                                                                    8 word"}),
                                                                                                                               mu(rupd
                                                                                                                                    ("PSR.IT",
                                                                                                                                     var("v",
                                                                                                                                         @{typ
                                                                                                                                         "PSR \<times>
                                                                                                                                          8 word"}),
                                                                                                                                     @{theory ARM_Monadic}),
                                                                                                                                  qTy))),
                                                                                                                         close
                                                                                                                           (var("v",
                                                                                                                                @{typ PSR}),
                                                                                                                            mw(close
                                                                                                                                 (var("s",
                                                                                                                                      qTy),
                                                                                                                                  rupd
                                                                                                                                    ("state.CPSR",
                                                                                                                                     tp[var("s",
                                                                                                                                            qTy),
                                                                                                                                        var("v",
                                                                                                                                            @{typ PSR})],
                                                                                                                                     @{theory ARM_Monadic}))))),
                                                                                                                      close
                                                                                                                        (var_a
                                                                                                                           HOLogic.unitT,
                                                                                                                         mb(mr(close
                                                                                                                                 (var("s",
                                                                                                                                      qTy),
                                                                                                                                  call
                                                                                                                                    ("state.CPSR",
                                                                                                                                     @{typ PSR},
                                                                                                                                     var("s",
                                                                                                                                         qTy),
                                                                                                                                     @{theory ARM_Monadic}))),
                                                                                                                            close
                                                                                                                              (var("v",
                                                                                                                                   @{typ PSR}),
                                                                                                                               mb(mb(mb(mu(tp[var("v",
                                                                                                                                                  @{typ PSR}),
                                                                                                                                              lf],
                                                                                                                                           qTy),
                                                                                                                                        close
                                                                                                                                          (var("v",
                                                                                                                                               @{typ
                                                                                                                                               "PSR \<times>
                                                                                                                                                bool"}),
                                                                                                                                           mu(rupd
                                                                                                                                                ("PSR.J",
                                                                                                                                                 var("v",
                                                                                                                                                     @{typ
                                                                                                                                                     "PSR \<times>
                                                                                                                                                      bool"}),
                                                                                                                                                 @{theory ARM_Monadic}),
                                                                                                                                              qTy))),
                                                                                                                                     close
                                                                                                                                       (var("v",
                                                                                                                                            @{typ PSR}),
                                                                                                                                        mw(close
                                                                                                                                             (var("s",
                                                                                                                                                  qTy),
                                                                                                                                              rupd
                                                                                                                                                ("state.CPSR",
                                                                                                                                                 tp[var("s",
                                                                                                                                                        qTy),
                                                                                                                                                    var("v",
                                                                                                                                                        @{typ PSR})],
                                                                                                                                                 @{theory ARM_Monadic}))))),
                                                                                                                                  close
                                                                                                                                    (var_a
                                                                                                                                       HOLogic.unitT,
                                                                                                                                     mb(mr(close
                                                                                                                                             (var("s",
                                                                                                                                                  qTy),
                                                                                                                                              call
                                                                                                                                                ("state.CPSR",
                                                                                                                                                 @{typ PSR},
                                                                                                                                                 var("s",
                                                                                                                                                     qTy),
                                                                                                                                                 @{theory ARM_Monadic}))),
                                                                                                                                        close
                                                                                                                                          (var("v",
                                                                                                                                               @{typ PSR}),
                                                                                                                                           mb(mb(mb(mb(mr(close
                                                                                                                                                            (var("s",
                                                                                                                                                                 qTy),
                                                                                                                                                             call
                                                                                                                                                               ("state.CP15",
                                                                                                                                                                @{typ CP15},
                                                                                                                                                                var("s",
                                                                                                                                                                    qTy),
                                                                                                                                                                @{theory ARM_Monadic}))),
                                                                                                                                                       close
                                                                                                                                                         (var("v0",
                                                                                                                                                              @{typ CP15}),
                                                                                                                                                          mb(mb(mu(call
                                                                                                                                                                     ("CP15.SCTLR",
                                                                                                                                                                      @{typ SCTLR},
                                                                                                                                                                      var("v0",
                                                                                                                                                                          @{typ CP15}),
                                                                                                                                                                      @{theory ARM_Monadic}),
                                                                                                                                                                   qTy),
                                                                                                                                                                close
                                                                                                                                                                  (var("v",
                                                                                                                                                                       @{typ SCTLR}),
                                                                                                                                                                   mu(call
                                                                                                                                                                        ("SCTLR.TE",
                                                                                                                                                                         HOLogic.boolT,
                                                                                                                                                                         var("v",
                                                                                                                                                                             @{typ SCTLR}),
                                                                                                                                                                         @{theory  ARM_Monadic}),
                                                                                                                                                                      qTy))),
                                                                                                                                                             close
                                                                                                                                                               (var_b"v0",
                                                                                                                                                                mu(tp[var("v",
                                                                                                                                                                          @{typ PSR}),
                                                                                                                                                                      var_b"v0"],
                                                                                                                                                                   qTy))))),
                                                                                                                                                    close
                                                                                                                                                      (var("v",
                                                                                                                                                           @{typ
                                                                                                                                                           "PSR \<times>
                                                                                                                                                            bool"}),
                                                                                                                                                       mu(rupd
                                                                                                                                                            ("PSR.T",
                                                                                                                                                             var("v",
                                                                                                                                                                 @{typ
                                                                                                                                                                 "PSR \<times>
                                                                                                                                                                  bool"}),
                                                                                                                                                             prev_thy),
                                                                                                                                                          qTy))),
                                                                                                                                                 close
                                                                                                                                                   (var("v",
                                                                                                                                                        @{typ PSR}),
                                                                                                                                                    mw(close
                                                                                                                                                         (var("s",
                                                                                                                                                              qTy),
                                                                                                                                                          rupd
                                                                                                                                                            ("state.CPSR",
                                                                                                                                                             tp[var("s",
                                                                                                                                                                    qTy),
                                                                                                                                                                var("v",
                                                                                                                                                                    @{typ PSR})],
                                                                                                                                                             @{theory ARM_Monadic}))))),
                                                                                                                                              close
                                                                                                                                                (var_a
                                                                                                                                                   HOLogic.unitT,
                                                                                                                                                 mb(mr(close
                                                                                                                                                         (var("s",
                                                                                                                                                              qTy),
                                                                                                                                                          call
                                                                                                                                                            ("state.CPSR",
                                                                                                                                                             @{typ PSR},
                                                                                                                                                             var("s",
                                                                                                                                                                 qTy),
                                                                                                                                                             @{theory ARM_Monadic}))),
                                                                                                                                                    close
                                                                                                                                                      (var("v",
                                                                                                                                                           @{typ PSR}),
                                                                                                                                                       mb(mb(mb(mb(mr(close
                                                                                                                                                                        (var("s",
                                                                                                                                                                             qTy),
                                                                                                                                                                         call
                                                                                                                                                                           ("state.CP15",
                                                                                                                                                                            @{typ CP15},
                                                                                                                                                                            var("s",
                                                                                                                                                                                qTy),
                                                                                                                                                                            @{theory ARM_Monadic}))),
                                                                                                                                                                   close
                                                                                                                                                                     (var("v0",
                                                                                                                                                                          @{typ CP15}),
                                                                                                                                                                      mb(mb(mu(call
                                                                                                                                                                                 ("CP15.SCTLR",
                                                                                                                                                                                  @{typ SCTLR},
                                                                                                                                                                                  var("v0",
                                                                                                                                                                                      @{typ CP15}),
                                                                                                                                                                                  @{theory ARM_Monadic}),
                                                                                                                                                                               qTy),
                                                                                                                                                                            close
                                                                                                                                                                              (var("v",
                                                                                                                                                                                   @{typ SCTLR}),
                                                                                                                                                                               mu(call
                                                                                                                                                                                    ("SCTLR.EE",
                                                                                                                                                                                     HOLogic.boolT,
                                                                                                                                                                                     var("v",
                                                                                                                                                                                         @{typ SCTLR}),
                                                                                                                                                                                     @{theory ARM_Monadic}),
                                                                                                                                                                                  qTy))),
                                                                                                                                                                         close
                                                                                                                                                                           (var_b"v0",
                                                                                                                                                                            mu(tp[var("v",
                                                                                                                                                                                      @{typ PSR}),
                                                                                                                                                                                  var_b"v0"],
                                                                                                                                                                               qTy))))),
                                                                                                                                                                close
                                                                                                                                                                  (var("v",
                                                                                                                                                                       @{typ
                                                                                                                                                                       "PSR \<times>
                                                                                                                                                                        bool"}),
                                                                                                                                                                   mu(rupd
                                                                                                                                                                        ("PSR.E",
                                                                                                                                                                         var("v",
                                                                                                                                                                             @{typ
                                                                                                                                                                             "PSR \<times>
                                                                                                                                                                              bool"}),
                                                                                                                                                                         @{theory ARM_Monadic}),
                                                                                                                                                                      qTy))),
                                                                                                                                                             close
                                                                                                                                                               (var("v",
                                                                                                                                                                    @{typ PSR}),
                                                                                                                                                                mw(close
                                                                                                                                                                     (var("s",
                                                                                                                                                                          qTy),
                                                                                                                                                                      rupd
                                                                                                                                                                        ("state.CPSR",
                                                                                                                                                                         tp[var("s",
                                                                                                                                                                                qTy),
                                                                                                                                                                            var("v",
                                                                                                                                                                                @{typ PSR})],
                                                                                                                                                                         @{theory ARM_Monadic}))))),
                                                                                                                                                          close
                                                                                                                                                            (var_a
                                                                                                                                                               HOLogic.unitT,
                                                                                                                                                             mb(call
                                                                                                                                                                  ("ExcVectorBase",
                                                                                                                                                                   @{typ
                                                                                                                                                                   "'b state_scheme \<Rightarrow>
                                                                                                                                                                    (32 word \<times>
                                                                                                                                                                     'b state_scheme)"},
                                                                                                                                                                   lu,
                                                                                                                                                                   @{theory}),
                                                                                                                                                                close
                                                                                                                                                                  (var_w("v",32),
                                                                                                                                                                   mb(mu(bop(Add,
                                                                                                                                                                             var_w("v",32),
                                                                                                                                                                             var_w("vect_offset",32)),
                                                                                                                                                                         qTy),
                                                                                                                                                                      close
                                                                                                                                                                        (var_w("v",32),
                                                                                                                                                                         call
                                                                                                                                                                           ("BranchTo",
                                                                                                                                                                            @{typ
                                                                                                                                                                            "'b state_scheme \<Rightarrow>
                                                                                                                                                                             (unit \<times>
                                                                                                                                                                              'b state_scheme)"},
                                                                                                                                                                            var_w("v",32),
                                                                                                                                                                            @{theory ARM_Monadic})))))))))))))))))))))))))))))))))))))))))))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("TakeSMCException",
   close
     (var_a HOLogic.unitT,
      mb(call("ITAdvance",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic}),
         close
           (var_a HOLogic.unitT,
            mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
               close
                 (var("v",@{typ PSR}),
                  mb(mb(mu(call("PSR.T",HOLogic.boolT,var("v",@{typ PSR}),@{theory ARM_Monadic}),qTy),
                        close
                          (var_b"b",
                           ite(var_b"b",
                               const
                                 ("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                  prev_thy),
                               mb(const
                                    ("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                     @{theory ARM_Monadic}),
                                  close(var_w("v",32),mu(bop(Sub,var_w("v",32),lw(4,32)),qTy)))))),
                     close
                       (var_w("new_lr_value",32),
                        mb(mr(close
                                (var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                           close
                             (var("new_spsr_value",@{typ PSR}),
                              mb(mr(close
                                      (var("s",qTy),
                                       call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                                 close
                                   (var("v",@{typ PSR}),
                                    mb(mb(mb(mu(call
                                                  ("PSR.M",(Word_Lib.mk_wordT 5),
                                                   var("v",@{typ PSR}),prev_thy ),qTy),
                                             close(var_w("v",5),mu(eq(var_w("v",5),lw(22,5)),qTy))),
                                          close
                                            (var_b"b",
                                             ite(var_b"b",
                                                 mb(mr(close
                                                         (var("s",qTy),
                                                          call
                                                            ("state.CP15",@{typ CP15},var("s",qTy),
                                                             @{theory ARM_Monadic}))),
                                                    close
                                                      (var("v",@{typ CP15}),
                                                       mb(mu(call
                                                               ("CP15.SCR",@{typ SCR},
                                                                var("v",@{typ CP15}),@{theory ARM_Monadic}),qTy),
                                                          close
                                                            (var("x0",@{typ SCR}),
                                                             mb(mr(close
                                                                     (var("s",qTy),
                                                                      call
                                                                        ("state.CP15",@{typ CP15},
                                                                         var("s",qTy),@{theory ARM_Monadic}))),
                                                                close
                                                                  (var("v",@{typ CP15}),
                                                                   mb(mb(mu(tp[var("v",@{typ CP15}),
                                                                               rupd
                                                                                 ("SCR.NS",
                                                                                  tp[var("x0",
                                                                                         @{typ SCR}),
                                                                                     lf],@{theory ARM_Monadic})],
                                                                            qTy),
                                                                         close
                                                                           (var("v",
                                                                                @{typ
                                                                                "CP15 \<times> SCR"}),
                                                                            mu(rupd
                                                                                 ("CP15.SCR",
                                                                                  var("v",
                                                                                      @{typ
                                                                                      "CP15 \<times>
                                                                                       SCR"}),
                                                                                  @{theory ARM_Monadic}),qTy))),
                                                                      close
                                                                        (var("v",@{typ CP15}),
                                                                         mw(close
                                                                              (var("s",qTy),
                                                                               rupd
                                                                                 ("state.CP15",
                                                                                  tp[var("s",qTy),
                                                                                     var("v",
                                                                                         @{typ CP15})],
                                                                                  @{theory ARM_Monadic}))))))))))),
                                                 mu(lu,qTy)))),
                                       close
                                         (var_a HOLogic.unitT,
                                          mb(mr(close
                                                  (var("s",qTy),
                                                   call
                                                     ("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                                             close
                                               (var("v",@{typ PSR}),
                                                mb(mb(mb(mu(tp[var("v",@{typ PSR}),lw(22,5)],qTy),
                                                         close
                                                           (var("v",@{typ "PSR \<times> 5 word"}),
                                                            mu(rupd
                                                                 ("PSR.M",
                                                                  var("v",
                                                                      @{typ "PSR \<times> 5 word"}),
                                                                  prev_thy ),qTy))),
                                                      close
                                                        (var("v",@{typ PSR}),
                                                         mw(close
                                                              (var("s",qTy),
                                                               rupd
                                                                 ("state.CPSR",
                                                                  tp[var("s",qTy),
                                                                     var("v",@{typ PSR})],@{theory ARM_Monadic}))))),
                                                   close
                                                     (var_a HOLogic.unitT,
                                                      call
                                                        ("EnterMonitorMode",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                         tp[var("new_spsr_value",@{typ PSR}),
                                                            var_w("new_lr_value",32),lw(8,32)],
                                                         @{theory })))))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("TakeHVCException",
   close
     (var_a HOLogic.unitT,
      mb(call("ITAdvance",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic}),
         close
           (var_a HOLogic.unitT,
            mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
               close
                 (var("v",@{typ PSR}),
                  mb(mb(mu(call("PSR.T",HOLogic.boolT,var("v",@{typ PSR}),@{theory ARM_Monadic}),qTy),
                        close
                          (var_b"b",
                           ite(var_b"b",
                               const
                                 ("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                  @{theory ARM_Monadic}),
                               mb(const
                                    ("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                     @{theory ARM_Monadic}),
                                  close(var_w("v",32),mu(bop(Sub,var_w("v",32),lw(4,32)),qTy)))))),
                     close
                       (var_w("preferred_exceptn_return",32),
                        mb(mr(close
                                (var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                           close
                             (var("new_spsr_value",@{typ PSR}),
                              mb(mr(close
                                      (var("s",qTy),
                                       call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                                 close
                                   (var("v",@{typ PSR}),
                                    mb(mb(mu(call
                                               ("PSR.M",(Word_Lib.mk_wordT 5),var("v",@{typ PSR}),
                                                prev_thy ),qTy),
                                          close(var_w("v",5),mu(eq(var_w("v",5),lw(26,5)),qTy))),
                                       close
                                         (var_b"b",
                                          ite(var_b"b",
                                              call
                                                ("EnterHypMode",
                                                 @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                 tp[var("new_spsr_value",@{typ PSR}),
                                                    var_w("preferred_exceptn_return",32),lw(8,32)],
                                                 @{theory }),
                                              call
                                                ("EnterHypMode",
                                                 @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                 tp[var("new_spsr_value",@{typ PSR}),
                                                    var_w("preferred_exceptn_return",32),lw(20,32)],
                                                 @{theory}))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("TakeDataAbortException",
   close
     (var_a HOLogic.unitT,
      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
         close
           (var("v",@{typ PSR}),
            mb(mb(mu(call("PSR.T",HOLogic.boolT,var("v",@{typ PSR}),@{theory ARM_Monadic}),qTy),
                  close
                    (var_b"b",
                     ite(var_b"b",
                         mb(const
                              ("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
                            close(var_w("v",32),mu(bop(Add,var_w("v",32),lw(4,32)),qTy))),
                         const("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic})))),
               close
                 (var_w("new_lr_value",32),
                  mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                     close
                       (var("new_spsr_value",@{typ PSR}),
                        let'
                          (var_w("vect_offset",32),lw(16,32),
                           mb(call
                                ("HaveSecurityExt",
                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic}),
                              close
                                (var_b"v",
                                 mb(ite(var_b"v",
                                        mb(mr(close
                                                (var("s",qTy),
                                                 call
                                                   ("state.CP15",@{typ CP15},var("s",qTy),@{theory ARM_Monadic}))),
                                           close
                                             (var("v",@{typ CP15}),
                                              mb(mb(mu(call
                                                         ("CP15.SCR",@{typ SCR},
                                                          var("v",@{typ CP15}),@{theory ARM_Monadic}),qTy),
                                                    close
                                                      (var("v",@{typ SCR}),
                                                       mu(call
                                                            ("SCR.EA",HOLogic.boolT,
                                                             var("v",@{typ SCR}),prev_thy),qTy))),
                                                 close
                                                   (var_b"b",
                                                    mu(bop(And,var_b"b",
                                                           call
                                                             ("IsExternalAbort",HOLogic.boolT,lu,
                                                              prev_thy)),qTy))))),mu(lf,qTy)),
                                    close
                                      (var_b"route_to_monitor",
                                       mb(call
                                            ("HaveVirtExt",
                                             @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                             @{theory ARM_Monadic}),
                                          close
                                            (var_b"v",
                                             mb(ite(var_b"v",
                                                    mb(call
                                                         ("HaveSecurityExt",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          lu,@{theory ARM_Monadic}),
                                                       close
                                                         (var_b"b",
                                                          ite(var_b"b",
                                                              mb(mr(close
                                                                      (var("s",qTy),
                                                                       call
                                                                         ("state.CP15",@{typ CP15},
                                                                          var("s",qTy),@{theory ARM_Monadic}))),
                                                                 close
                                                                   (var("v",@{typ CP15}),
                                                                    mb(mb(mu(call
                                                                               ("CP15.SCR",
                                                                                @{typ SCR},
                                                                                var("v",@{typ CP15}),
                                                                                @{theory ARM_Monadic}),qTy),
                                                                          close
                                                                            (var("v",@{typ SCR}),
                                                                             mu(call
                                                                                  ("SCR.NS",
                                                                                   HOLogic.boolT,
                                                                                   var("v",
                                                                                       @{typ SCR}),
                                                                                   @{theory ARM_Monadic}),qTy))),
                                                                       close
                                                                         (var_b"b",
                                                                          ite(var_b"b",
                                                                              mb(mr(close
                                                                                      (var("s",qTy),
                                                                                       call
                                                                                         ("state.CPSR",
                                                                                          @{typ PSR},
                                                                                          var("s",
                                                                                              qTy),
                                                                                          @{theory ARM_Monadic}))),
                                                                                 close
                                                                                   (var("v",
                                                                                        @{typ PSR}),
                                                                                    mb(mu(call
                                                                                            ("PSR.M",
                                                                                             (Word_Lib.mk_wordT 5),
                                                                                             var("v",
                                                                                                 @{typ PSR}),
                                                                                             prev_thy ),
                                                                                          qTy),
                                                                                       close
                                                                                         (var_w("v",5),
                                                                                          mu(eq(var_w("v",5),
                                                                                                lw(26,
                                                                                                   5)),
                                                                                             qTy))))),
                                                                              mu(lf,qTy)))))),
                                                              mu(lf,qTy)))),mu(lf,qTy)),
                                                close
                                                  (var_b"take_to_hyp",
                                                   itb([(var_b"route_to_monitor",
                                                         mb(mr(close
                                                                 (var("s",qTy),
                                                                  call
                                                                    ("state.CPSR",@{typ PSR},
                                                                     var("s",qTy),@{theory ARM_Monadic}))),
                                                            close
                                                              (var("v",@{typ PSR}),
                                                               mb(mb(mb(mu(call
                                                                             ("PSR.M",
                                                                              (Word_Lib.mk_wordT 5),
                                                                              var("v",@{typ PSR}),
                                                                              prev_thy ),qTy),
                                                                        close
                                                                          (var_w("v",5),
                                                                           mu(eq(var_w("v",5),
                                                                                 lw(22,5)),qTy))),
                                                                     close
                                                                       (var_b"b",
                                                                        ite(var_b"b",
                                                                            mb(mr(close
                                                                                    (var("s",qTy),
                                                                                     call
                                                                                       ("state.CP15",
                                                                                        @{typ CP15},
                                                                                        var("s",qTy),
                                                                                        @{theory ARM_Monadic}))),
                                                                               close
                                                                                 (var("v",
                                                                                      @{typ CP15}),
                                                                                  mb(mu(call
                                                                                          ("CP15.SCR",
                                                                                           @{typ SCR},
                                                                                           var("v",
                                                                                               @{typ CP15}),
                                                                                           @{theory ARM_Monadic}),
                                                                                        qTy),
                                                                                     close
                                                                                       (var("x0",
                                                                                            @{typ SCR}),
                                                                                        mb(mr(close
                                                                                                (var("s",
                                                                                                     qTy),
                                                                                                 call
                                                                                                   ("state.CP15",
                                                                                                    @{typ CP15},
                                                                                                    var("s",
                                                                                                        qTy),
                                                                                                    @{theory ARM_Monadic}))),
                                                                                           close
                                                                                             (var("v",
                                                                                                  @{typ CP15}),
                                                                                              mb(mb(mu(tp[var("v",
                                                                                                              @{typ CP15}),
                                                                                                          rupd
                                                                                                            ("SCR.NS",
                                                                                                             tp[var("x0",
                                                                                                                    @{typ SCR}),
                                                                                                                lf],
                                                                                                             @{theory ARM_Monadic})],
                                                                                                       qTy),
                                                                                                    close
                                                                                                      (var("v",
                                                                                                           @{typ
                                                                                                           "CP15 \<times>
                                                                                                            SCR"}),
                                                                                                       mu(rupd
                                                                                                            ("CP15.SCR",
                                                                                                             var("v",
                                                                                                                 @{typ
                                                                                                                 "CP15 \<times>
                                                                                                                  SCR"}),
                                                                                                             @{theory ARM_Monadic}),
                                                                                                          qTy))),
                                                                                                 close
                                                                                                   (var("v",
                                                                                                        @{typ CP15}),
                                                                                                    mw(close
                                                                                                         (var("s",
                                                                                                              qTy),
                                                                                                          rupd
                                                                                                            ("state.CP15",
                                                                                                             tp[var("s",
                                                                                                                    qTy),
                                                                                                                var("v",
                                                                                                                    @{typ CP15})],
                                                                                                             @{theory ARM_Monadic}))))))))))),
                                                                            mu(lu,qTy)))),
                                                                  close
                                                                    (var_a HOLogic.unitT,
                                                                     call
                                                                       ("EnterMonitorMode",
                                                                        @{typ
                                                                        "'b state_scheme \<Rightarrow>
                                                                         (unit \<times> 'b state_scheme)"},
                                                                        tp[var("new_spsr_value",
                                                                               @{typ PSR}),
                                                                           var_w("new_lr_value",32),
                                                                           var_w("vect_offset",32)],
                                                                        @{theory})))))),
                                                        (var_b"take_to_hyp",
                                                         call
                                                           ("EnterHypMode",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (unit \<times> 'b state_scheme)"},
                                                            tp[var("new_spsr_value",@{typ PSR}),
                                                               bop(Sub,var_w("new_lr_value",32),
                                                                   lw(8,32)),var_w("vect_offset",32)],
                                                            @{theory }))],
                                                       mb(call
                                                            ("HaveSecurityExt",
                                                             @{typ
                                                             "'b state_scheme \<Rightarrow>
                                                              (bool \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic}),
                                                          close
                                                            (var_b"v",
                                                             mb(mb(ite(var_b"v",
                                                                       mb(mr(close
                                                                               (var("s",qTy),
                                                                                call
                                                                                  ("state.CPSR",
                                                                                   @{typ PSR},
                                                                                   var("s",qTy),
                                                                                   @{theory ARM_Monadic}))),
                                                                          close
                                                                            (var("v",@{typ PSR}),
                                                                             mb(mu(call
                                                                                     ("PSR.M",
                                                                                      (Word_Lib.mk_wordT 5),
                                                                                      var("v",
                                                                                          @{typ PSR}),
                                                                                      prev_thy ),qTy),
                                                                                close
                                                                                  (var_w("v",5),
                                                                                   mu(eq(var_w("v",5),
                                                                                         lw(22,5)),
                                                                                      qTy))))),
                                                                       mu(lf,qTy)),
                                                                   close
                                                                     (var_b"b",
                                                                      ite(var_b"b",
                                                                          mb(mr(close
                                                                                  (var("s",qTy),
                                                                                   call
                                                                                     ("state.CP15",
                                                                                      @{typ CP15},
                                                                                      var("s",qTy),
                                                                                      @{theory ARM_Monadic}))),
                                                                             close
                                                                               (var("v",@{typ CP15}),
                                                                                mb(mu(call
                                                                                        ("CP15.SCR",
                                                                                         @{typ SCR},
                                                                                         var("v",
                                                                                             @{typ CP15}),
                                                                                         @{theory ARM_Monadic}),
                                                                                      qTy),
                                                                                   close
                                                                                     (var("x0",
                                                                                          @{typ SCR}),
                                                                                      mb(mr(close
                                                                                              (var("s",
                                                                                                   qTy),
                                                                                               call
                                                                                                 ("state.CP15",
                                                                                                  @{typ CP15},
                                                                                                  var("s",
                                                                                                      qTy),
                                                                                                  @{theory ARM_Monadic}))),
                                                                                         close
                                                                                           (var("v",
                                                                                                @{typ CP15}),
                                                                                            mb(mb(mu(tp[var("v",
                                                                                                            @{typ CP15}),
                                                                                                        rupd
                                                                                                          ("SCR.NS",
                                                                                                           tp[var("x0",
                                                                                                                  @{typ SCR}),
                                                                                                              lf],
                                                                                                           @{theory ARM_Monadic})],
                                                                                                     qTy),
                                                                                                  close
                                                                                                    (var("v",
                                                                                                         @{typ
                                                                                                         "CP15 \<times>
                                                                                                          SCR"}),
                                                                                                     mu(rupd
                                                                                                          ("CP15.SCR",
                                                                                                           var("v",
                                                                                                               @{typ
                                                                                                               "CP15 \<times>
                                                                                                                SCR"}),
                                                                                                           @{theory ARM_Monadic}),
                                                                                                        qTy))),
                                                                                               close
                                                                                                 (var("v",
                                                                                                      @{typ CP15}),
                                                                                                  mw(close
                                                                                                       (var("s",
                                                                                                            qTy),
                                                                                                        rupd
                                                                                                          ("state.CP15",
                                                                                                           tp[var("s",
                                                                                                                  qTy),
                                                                                                              var("v",
                                                                                                                  @{typ CP15})],
                                                                                                           @{theory ARM_Monadic}))))))))))),
                                                                          mu(lu,qTy)))),
                                                                close
                                                                  (var_a HOLogic.unitT,
                                                                   mb(mr(close
                                                                           (var("s",qTy),
                                                                            call
                                                                              ("state.CPSR",
                                                                               @{typ PSR},
                                                                               var("s",qTy),
                                                                               @{theory ARM_Monadic}))),
                                                                      close
                                                                        (var("v",@{typ PSR}),
                                                                         mb(mb(mb(mu(tp[var("v",
                                                                                            @{typ PSR}),
                                                                                        lw(23,5)],
                                                                                     qTy),
                                                                                  close
                                                                                    (var("v",
                                                                                         @{typ
                                                                                         "PSR \<times>
                                                                                          5 word"}),
                                                                                     mu(rupd
                                                                                          ("PSR.M",
                                                                                           var("v",
                                                                                               @{typ
                                                                                               "PSR \<times>
                                                                                                5 word"}),
                                                                                           prev_thy ),
                                                                                        qTy))),
                                                                               close
                                                                                 (var("v",@{typ PSR}),
                                                                                  mw(close
                                                                                       (var("s",qTy),
                                                                                        rupd
                                                                                          ("state.CPSR",
                                                                                           tp[var("s",
                                                                                                  qTy),
                                                                                              var("v",
                                                                                                  @{typ PSR})],
                                                                                           @{theory ARM_Monadic}))))),
                                                                            close
                                                                              (var_a HOLogic.unitT,
                                                                               mb(call
                                                                                    ("write'SPSR",
                                                                                     @{typ
                                                                                     "'b state_scheme \<Rightarrow>
                                                                                      (unit \<times>
                                                                                       'b state_scheme)"},
                                                                                     var("new_spsr_value",
                                                                                         @{typ PSR}),
                                                                                     @{theory ARM_Monadic}),
                                                                                  close
                                                                                    (var_a
                                                                                       HOLogic.unitT,
                                                                                     mb(call
                                                                                          ("write'R",
                                                                                           @{typ
                                                                                           "'b state_scheme \<Rightarrow>
                                                                                            (unit \<times>
                                                                                             'b state_scheme)"},
                                                                                           tp[var_w("new_lr_value",32),
                                                                                              lw(14,
                                                                                                 4)],
                                                                                           @{theory ARM_Monadic}),
                                                                                        close
                                                                                          (var_a
                                                                                             HOLogic.unitT,
                                                                                           mb(mr(close
                                                                                                   (var("s",
                                                                                                        qTy),
                                                                                                    call
                                                                                                      ("state.CPSR",
                                                                                                       @{typ PSR},
                                                                                                       var("s",
                                                                                                           qTy),
                                                                                                       @{theory ARM_Monadic}))),
                                                                                              close
                                                                                                (var("v",
                                                                                                     @{typ PSR}),
                                                                                                 mb(mb(mb(mu(tp[var("v",
                                                                                                                    @{typ PSR}),
                                                                                                                lt],
                                                                                                             qTy),
                                                                                                          close
                                                                                                            (var("v",
                                                                                                                 @{typ
                                                                                                                 "PSR \<times>
                                                                                                                  bool"}),
                                                                                                             mu(rupd
                                                                                                                  ("PSR.I",
                                                                                                                   var("v",
                                                                                                                       @{typ
                                                                                                                       "PSR \<times>
                                                                                                                        bool"}),
                                                                                                                   @{theory ARM_Monadic}),
                                                                                                                qTy))),
                                                                                                       close
                                                                                                         (var("v",
                                                                                                              @{typ PSR}),
                                                                                                          mw(close
                                                                                                               (var("s",
                                                                                                                    qTy),
                                                                                                                rupd
                                                                                                                  ("state.CPSR",
                                                                                                                   tp[var("s",
                                                                                                                          qTy),
                                                                                                                      var("v",
                                                                                                                          @{typ PSR})],
                                                                                                                   @{theory ARM_Monadic}))))),
                                                                                                    close
                                                                                                      (var_a
                                                                                                         HOLogic.unitT,
                                                                                                       mb(call
                                                                                                            ("HaveSecurityExt",
                                                                                                             @{typ
                                                                                                             "'b state_scheme \<Rightarrow>
                                                                                                              (bool \<times>
                                                                                                               'b state_scheme)"},
                                                                                                             lu,
                                                                                                             @{theory ARM_Monadic}),
                                                                                                          close
                                                                                                            (var_b"v",
                                                                                                             mb(mb(mb(mu(mop(Not,
                                                                                                                             var_b"v"),
                                                                                                                         qTy),
                                                                                                                      close
                                                                                                                        (var_b"b",
                                                                                                                         ite(var_b"b",
                                                                                                                             mu(lt,
                                                                                                                                qTy),
                                                                                                                             mb(call
                                                                                                                                  ("HaveVirtExt",
                                                                                                                                   @{typ
                                                                                                                                   "'b state_scheme \<Rightarrow>
                                                                                                                                    (bool \<times>
                                                                                                                                     'b state_scheme)"},
                                                                                                                                   lu,
                                                                                                                                   prev_thy),
                                                                                                                                close
                                                                                                                                  (var_b"b",
                                                                                                                                   ite(var_b"b",
                                                                                                                                       mu(lt,
                                                                                                                                          qTy),
                                                                                                                                       mb(mr(close
                                                                                                                                               (var("s",
                                                                                                                                                    qTy),
                                                                                                                                                call
                                                                                                                                                  ("state.CP15",
                                                                                                                                                   @{typ CP15},
                                                                                                                                                   var("s",
                                                                                                                                                       qTy),
                                                                                                                                                   @{theory ARM_Monadic}))),
                                                                                                                                          close
                                                                                                                                            (var("v",
                                                                                                                                                 @{typ CP15}),
                                                                                                                                             mb(mb(mb(mu(call
                                                                                                                                                           ("CP15.SCR",
                                                                                                                                                            @{typ SCR},
                                                                                                                                                            var("v",
                                                                                                                                                                @{typ CP15}),
                                                                                                                                                            @{theory ARM_Monadic}),
                                                                                                                                                         qTy),
                                                                                                                                                      close
                                                                                                                                                        (var("v",
                                                                                                                                                             @{typ SCR}),
                                                                                                                                                         mu(call
                                                                                                                                                              ("SCR.NS",
                                                                                                                                                               HOLogic.boolT,
                                                                                                                                                               var("v",
                                                                                                                                                                   @{typ SCR}),
                                                                                                                                                               @{theory ARM_Monadic}),
                                                                                                                                                            qTy))),    
                                                                                                                                                   close
                                                                                                                                                     (var_b"v",
                                                                                                                                                      mu(mop(Not,
                                                                                                                                                             var_b"v"),
                                                                                                                                                         qTy))),
                                                                                                                                                close
                                                                                                                                                  (var_b"b",
                                                                                                                                                   ite(var_b"b",
                                                                                                                                                       mu(lt,
                                                                                                                                                          qTy),
                                                                                                                                                       mb(mr(close
                                                                                                                                                               (var("s",
                                                                                                                                                                    qTy),
                                                                                                                                                                call
                                                                                                                                                                  ("state.CP15",
                                                                                                                                                                   @{typ CP15},
                                                                                                                                                                   var("s",
                                                                                                                                                                       qTy),
                                                                                                                                                                   @{theory ARM_Monadic}))),
                                                                                                                                                          close
                                                                                                                                                            (var("v",
                                                                                                                                                                 @{typ CP15}),
                                                                                                                                                             mb(mu(call
                                                                                                                                                                     ("CP15.SCR",
                                                                                                                                                                      @{typ SCR},
                                                                                                                                                                      var("v",
                                                                                                                                                                          @{typ CP15}),
                                                                                                                                                                      @{theory ARM_Monadic}),
                                                                                                                                                                   qTy),
                                                                                                                                                                close
                                                                                                                                                                  (var("v",
                                                                                                                                                                       @{typ SCR}),
                                                                                                                                                                   mu(call
                                                                                                                                                                        ("SCR.AW",
                                                                                                                                                                         HOLogic.boolT,
                                                                                                                                                                         var("v",
                                                                                                                                                                             @{typ SCR}),
                                                                                                                                                                         prev_thy),
                                                                                                                                                                      qTy)))))))))))))))),
                                                                                                                   close
                                                                                                                     (var_b"b",
                                                                                                                      ite(var_b"b",
                                                                                                                          mb(mr(close
                                                                                                                                  (var("s",
                                                                                                                                       qTy),
                                                                                                                                   call
                                                                                                                                     ("state.CPSR",
                                                                                                                                      @{typ PSR},
                                                                                                                                      var("s",
                                                                                                                                          qTy),
                                                                                                                                      @{theory ARM_Monadic}))),
                                                                                                                             close
                                                                                                                               (var("v",
                                                                                                                                    @{typ PSR}),
                                                                                                                                mb(mb(mu(tp[var("v",
                                                                                                                                                @{typ PSR}),
                                                                                                                                            lt],
                                                                                                                                         qTy),
                                                                                                                                      close
                                                                                                                                        (var("v",
                                                                                                                                             @{typ
                                                                                                                                             "PSR \<times>
                                                                                                                                              bool"}),
                                                                                                                                         mu(rupd
                                                                                                                                              ("PSR.A",
                                                                                                                                               var("v",
                                                                                                                                                   @{typ
                                                                                                                                                   "PSR \<times>
                                                                                                                                                    bool"}),
                                                                                                                                               @{theory ARM_Monadic}),
                                                                                                                                            qTy))),
                                                                                                                                   close
                                                                                                                                     (var("v",
                                                                                                                                          @{typ PSR}),
                                                                                                                                      mw(close
                                                                                                                                           (var("s",
                                                                                                                                                qTy),
                                                                                                                                            rupd
                                                                                                                                              ("state.CPSR",
                                                                                                                                               tp[var("s",
                                                                                                                                                      qTy),
                                                                                                                                                  var("v",
                                                                                                                                                      @{typ PSR})],
                                                                                                                                               @{theory ARM_Monadic}))))))),
                                                                                                                          mu(lu,
                                                                                                                             qTy)))),
                                                                                                                close
                                                                                                                  (var_a
                                                                                                                     HOLogic.unitT,
                                                                                                                   mb(mr(close
                                                                                                                           (var("s",
                                                                                                                                qTy),
                                                                                                                            call
                                                                                                                              ("state.CPSR",
                                                                                                                               @{typ PSR},
                                                                                                                               var("s",
                                                                                                                                   qTy),
                                                                                                                               @{theory ARM_Monadic}))),
                                                                                                                      close
                                                                                                                        (var("v",
                                                                                                                             @{typ PSR}),
                                                                                                                         mb(mb(mb(mu(tp[var("v",
                                                                                                                                            @{typ PSR}),
                                                                                                                                        lw(0,
                                                                                                                                           8)],
                                                                                                                                     qTy),
                                                                                                                                  close
                                                                                                                                    (var("v",
                                                                                                                                         @{typ
                                                                                                                                         "PSR \<times>
                                                                                                                                          8 word"}),
                                                                                                                                     mu(rupd
                                                                                                                                          ("PSR.IT",
                                                                                                                                           var("v",
                                                                                                                                               @{typ
                                                                                                                                               "PSR \<times>
                                                                                                                                                8 word"}),
                                                                                                                                           @{theory ARM_Monadic}),
                                                                                                                                        qTy))),
                                                                                                                               close
                                                                                                                                 (var("v",
                                                                                                                                      @{typ PSR}),
                                                                                                                                  mw(close
                                                                                                                                       (var("s",
                                                                                                                                            qTy),
                                                                                                                                        rupd
                                                                                                                                          ("state.CPSR",
                                                                                                                                           tp[var("s",
                                                                                                                                                  qTy),
                                                                                                                                              var("v",
                                                                                                                                                  @{typ PSR})],
                                                                                                                                           @{theory ARM_Monadic}))))),
                                                                                                                            close
                                                                                                                              (var_a
                                                                                                                                 HOLogic.unitT,
                                                                                                                               mb(mr(close
                                                                                                                                       (var("s",
                                                                                                                                            qTy),
                                                                                                                                        call
                                                                                                                                          ("state.CPSR",
                                                                                                                                           @{typ PSR},
                                                                                                                                           var("s",
                                                                                                                                               qTy),
                                                                                                                                           @{theory ARM_Monadic}))),
                                                                                                                                  close
                                                                                                                                    (var("v",
                                                                                                                                         @{typ PSR}),
                                                                                                                                     mb(mb(mb(mu(tp[var("v",
                                                                                                                                                        @{typ PSR}),
                                                                                                                                                    lf],
                                                                                                                                                 qTy),
                                                                                                                                              close
                                                                                                                                                (var("v",
                                                                                                                                                     @{typ
                                                                                                                                                     "PSR \<times>
                                                                                                                                                      bool"}),
                                                                                                                                                 mu(rupd
                                                                                                                                                      ("PSR.J",
                                                                                                                                                       var("v",
                                                                                                                                                           @{typ
                                                                                                                                                           "PSR \<times>
                                                                                                                                                            bool"}),
                                                                                                                                                       @{theory ARM_Monadic}),
                                                                                                                                                    qTy))),
                                                                                                                                           close
                                                                                                                                             (var("v",
                                                                                                                                                  @{typ PSR}),
                                                                                                                                              mw(close
                                                                                                                                                   (var("s",
                                                                                                                                                        qTy),
                                                                                                                                                    rupd
                                                                                                                                                      ("state.CPSR",
                                                                                                                                                       tp[var("s",
                                                                                                                                                              qTy),
                                                                                                                                                          var("v",
                                                                                                                                                              @{typ PSR})],
                                                                                                                                                       @{theory ARM_Monadic}))))),
                                                                                                                                        close
                                                                                                                                          (var_a
                                                                                                                                             HOLogic.unitT,
                                                                                                                                           mb(mr(close
                                                                                                                                                   (var("s",
                                                                                                                                                        qTy),
                                                                                                                                                    call
                                                                                                                                                      ("state.CPSR",
                                                                                                                                                       @{typ PSR},
                                                                                                                                                       var("s",
                                                                                                                                                           qTy),
                                                                                                                                                       @{theory ARM_Monadic}))),
                                                                                                                                              close
                                                                                                                                                (var("v",
                                                                                                                                                     @{typ PSR}),
                                                                                                                                                 mb(mb(mb(mb(mr(close
                                                                                                                                                                  (var("s",
                                                                                                                                                                       qTy),
                                                                                                                                                                   call
                                                                                                                                                                     ("state.CP15",
                                                                                                                                                                      @{typ CP15},
                                                                                                                                                                      var("s",
                                                                                                                                                                          qTy),
                                                                                                                                                                      @{theory ARM_Monadic}))),
                                                                                                                                                             close
                                                                                                                                                               (var("v0",
                                                                                                                                                                    @{typ CP15}),
                                                                                                                                                                mb(mb(mu(call
                                                                                                                                                                           ("CP15.SCTLR",
                                                                                                                                                                            @{typ SCTLR},
                                                                                                                                                                            var("v0",
                                                                                                                                                                                @{typ CP15}),
                                                                                                                                                                            @{theory ARM_Monadic}),
                                                                                                                                                                         qTy),
                                                                                                                                                                      close
                                                                                                                                                                        (var("v",
                                                                                                                                                                             @{typ SCTLR}),
                                                                                                                                                                         mu(call
                                                                                                                                                                              ("SCTLR.TE",
                                                                                                                                                                               HOLogic.boolT,
                                                                                                                                                                               var("v",
                                                                                                                                                                                   @{typ SCTLR}),
                                                                                                                                                                               @{theory  ARM_Monadic}),
                                                                                                                                                                            qTy))),
                                                                                                                                                                   close
                                                                                                                                                                     (var_b"v0",
                                                                                                                                                                      mu(tp[var("v",
                                                                                                                                                                                @{typ PSR}),
                                                                                                                                                                            var_b"v0"],
                                                                                                                                                                         qTy))))),
                                                                                                                                                          close
                                                                                                                                                            (var("v",
                                                                                                                                                                 @{typ
                                                                                                                                                                 "PSR \<times>
                                                                                                                                                                  bool"}),
                                                                                                                                                             mu(rupd
                                                                                                                                                                  ("PSR.T",
                                                                                                                                                                   var("v",
                                                                                                                                                                       @{typ
                                                                                                                                                                       "PSR \<times>
                                                                                                                                                                        bool"}),
                                                                                                                                                                   prev_thy),
                                                                                                                                                                qTy))),
                                                                                                                                                       close
                                                                                                                                                         (var("v",
                                                                                                                                                              @{typ PSR}),
                                                                                                                                                          mw(close
                                                                                                                                                               (var("s",
                                                                                                                                                                    qTy),
                                                                                                                                                                rupd
                                                                                                                                                                  ("state.CPSR",
                                                                                                                                                                   tp[var("s",
                                                                                                                                                                          qTy),
                                                                                                                                                                      var("v",
                                                                                                                                                                          @{typ PSR})],
                                                                                                                                                                   @{theory ARM_Monadic}))))),
                                                                                                                                                    close
                                                                                                                                                      (var_a
                                                                                                                                                         HOLogic.unitT,
                                                                                                                                                       mb(mr(close
                                                                                                                                                               (var("s",
                                                                                                                                                                    qTy),
                                                                                                                                                                call
                                                                                                                                                                  ("state.CPSR",
                                                                                                                                                                   @{typ PSR},
                                                                                                                                                                   var("s",
                                                                                                                                                                       qTy),
                                                                                                                                                                   @{theory ARM_Monadic}))),
                                                                                                                                                          close
                                                                                                                                                            (var("v",
                                                                                                                                                                 @{typ PSR}),
                                                                                                                                                             mb(mb(mb(mb(mr(close
                                                                                                                                                                              (var("s",
                                                                                                                                                                                   qTy),
                                                                                                                                                                               call
                                                                                                                                                                                 ("state.CP15",
                                                                                                                                                                                  @{typ CP15},
                                                                                                                                                                                  var("s",
                                                                                                                                                                                      qTy),
                                                                                                                                                                                  @{theory ARM_Monadic}))),
                                                                                                                                                                         close
                                                                                                                                                                           (var("v0",
                                                                                                                                                                                @{typ CP15}),
                                                                                                                                                                            mb(mb(mu(call
                                                                                                                                                                                       ("CP15.SCTLR",
                                                                                                                                                                                        @{typ SCTLR},
                                                                                                                                                                                        var("v0",
                                                                                                                                                                                            @{typ CP15}),
                                                                                                                                                                                        @{theory ARM_Monadic}),
                                                                                                                                                                                     qTy),
                                                                                                                                                                                  close
                                                                                                                                                                                    (var("v",
                                                                                                                                                                                         @{typ SCTLR}),
                                                                                                                                                                                     mu(call
                                                                                                                                                                                          ("SCTLR.EE",
                                                                                                                                                                                           HOLogic.boolT,
                                                                                                                                                                                           var("v",
                                                                                                                                                                                               @{typ SCTLR}),
                                                                                                                                                                                           @{theory ARM_Monadic}),
                                                                                                                                                                                        qTy))),
                                                                                                                                                                               close
                                                                                                                                                                                 (var_b"v0",
                                                                                                                                                                                  mu(tp[var("v",
                                                                                                                                                                                            @{typ PSR}),
                                                                                                                                                                                        var_b"v0"],
                                                                                                                                                                                     qTy))))),
                                                                                                                                                                      close
                                                                                                                                                                        (var("v",
                                                                                                                                                                             @{typ
                                                                                                                                                                             "PSR \<times>
                                                                                                                                                                              bool"}),
                                                                                                                                                                         mu(rupd
                                                                                                                                                                              ("PSR.E",
                                                                                                                                                                               var("v",
                                                                                                                                                                                   @{typ
                                                                                                                                                                                   "PSR \<times>
                                                                                                                                                                                    bool"}),
                                                                                                                                                                               @{theory ARM_Monadic}),
                                                                                                                                                                            qTy))),
                                                                                                                                                                   close
                                                                                                                                                                     (var("v",
                                                                                                                                                                          @{typ PSR}),
                                                                                                                                                                      mw(close
                                                                                                                                                                           (var("s",
                                                                                                                                                                                qTy),
                                                                                                                                                                            rupd
                                                                                                                                                                              ("state.CPSR",
                                                                                                                                                                               tp[var("s",
                                                                                                                                                                                      qTy),
                                                                                                                                                                                  var("v",
                                                                                                                                                                                      @{typ PSR})],
                                                                                                                                                                               @{theory ARM_Monadic}))))),
                                                                                                                                                                close
                                                                                                                                                                  (var_a
                                                                                                                                                                     HOLogic.unitT,
                                                                                                                                                                   mb(call
                                                                                                                                                                        ("ExcVectorBase",
                                                                                                                                                                         @{typ
                                                                                                                                                                         "'b state_scheme \<Rightarrow>
                                                                                                                                                                          (32 word \<times>
                                                                                                                                                                           'b state_scheme)"},
                                                                                                                                                                         lu,
                                                                                                                                                                         @{theory}),
                                                                                                                                                                      close
                                                                                                                                                                        (var_w("v",32),
                                                                                                                                                                         mb(mu(bop(Add,
                                                                                                                                                                                   var_w("v",32),
                                                                                                                                                                                   var_w("vect_offset",32)),
                                                                                                                                                                               qTy),
                                                                                                                                                                            close
                                                                                                                                                                              (var_w("v",32),
                                                                                                                                                                               call
                                                                                                                                                                                 ("BranchTo",
                                                                                                                                                                                  @{typ
                                                                                                                                                                                  "'b state_scheme \<Rightarrow>
                                                                                                                                                                                   (unit \<times>
                                                                                                                                                                                    'b state_scheme)"},
                                                                                                                                                                                  var_w("v",32),
                                                                                                                                                                                  @{theory ARM_Monadic})))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("TakePrefetchAbortException",
   close
     (var_a HOLogic.unitT,
      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
         close
           (var("v",@{typ PSR}),
            mb(mb(mu(call("PSR.T",HOLogic.boolT,var("v",@{typ PSR}),@{theory ARM_Monadic}),qTy),
                  close
                    (var_b"b",
                     ite(var_b"b",
                         const("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
                         mb(const
                              ("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
                            close(var_w("v",32),mu(bop(Sub,var_w("v",32),lw(4,32)),qTy)))))),
               close
                 (var_w("new_lr_value",32),
                  mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                     close
                       (var("new_spsr_value",@{typ PSR}),
                        let'
                          (var_w("vect_offset",32),lw(12,32),
                           mb(call
                                ("HaveSecurityExt",
                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic}),
                              close
                                (var_b"v",
                                 mb(ite(var_b"v",
                                        mb(mr(close
                                                (var("s",qTy),
                                                 call
                                                   ("state.CP15",@{typ CP15},var("s",qTy),@{theory ARM_Monadic}))),
                                           close
                                             (var("v",@{typ CP15}),
                                              mb(mb(mu(call
                                                         ("CP15.SCR",@{typ SCR},
                                                          var("v",@{typ CP15}),@{theory ARM_Monadic}),qTy),
                                                    close
                                                      (var("v",@{typ SCR}),
                                                       mu(call
                                                            ("SCR.EA",HOLogic.boolT,
                                                             var("v",@{typ SCR}),prev_thy),qTy))),
                                                 close
                                                   (var_b"b",
                                                    mu(bop(And,var_b"b",
                                                           call
                                                             ("IsExternalAbort",HOLogic.boolT,lu,
                                                              prev_thy)),qTy))))),mu(lf,qTy)),
                                    close
                                      (var_b"route_to_monitor",
                                       mb(call
                                            ("HaveVirtExt",
                                             @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                             @{theory ARM_Monadic}),
                                          close
                                            (var_b"v",
                                             mb(ite(var_b"v",
                                                    mb(call
                                                         ("HaveSecurityExt",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          lu,@{theory ARM_Monadic}),
                                                       close
                                                         (var_b"b",
                                                          ite(var_b"b",
                                                              mb(mr(close
                                                                      (var("s",qTy),
                                                                       call
                                                                         ("state.CP15",@{typ CP15},
                                                                          var("s",qTy),@{theory ARM_Monadic}))),
                                                                 close
                                                                   (var("v",@{typ CP15}),        
                                                                    mb(mb(mu(call
                                                                               ("CP15.SCR",
                                                                                @{typ SCR},
                                                                                var("v",@{typ CP15}),
                                                                                @{theory ARM_Monadic}),qTy),
                                                                          close
                                                                            (var("v",@{typ SCR}),
                                                                             mu(call
                                                                                  ("SCR.NS",
                                                                                   HOLogic.boolT,
                                                                                   var("v",
                                                                                       @{typ SCR}),
                                                                                   @{theory ARM_Monadic}),qTy))),
                                                                       close
                                                                         (var_b"b",
                                                                          ite(var_b"b",
                                                                              mb(mr(close
                                                                                      (var("s",qTy),
                                                                                       call
                                                                                         ("state.CPSR",
                                                                                          @{typ PSR},
                                                                                          var("s",
                                                                                              qTy),
                                                                                          @{theory ARM_Monadic}))),
                                                                                 close
                                                                                   (var("v",
                                                                                        @{typ PSR}),
                                                                                    mb(mu(call
                                                                                            ("PSR.M",
                                                                                             (Word_Lib.mk_wordT 5),
                                                                                             var("v",
                                                                                                 @{typ PSR}),
                                                                                             prev_thy ),
                                                                                          qTy),
                                                                                       close
                                                                                         (var_w("v",5),
                                                                                          mu(eq(var_w("v",5),
                                                                                                lw(26,
                                                                                                   5)),
                                                                                             qTy))))),
                                                                              mu(lf,qTy)))))),
                                                              mu(lf,qTy)))),mu(lf,qTy)),
                                                close
                                                  (var_b"take_to_hyp",
                                                   itb([(var_b"route_to_monitor",
                                                         mb(mr(close
                                                                 (var("s",qTy),
                                                                  call
                                                                    ("state.CPSR",@{typ PSR},
                                                                     var("s",qTy),@{theory ARM_Monadic}))),
                                                            close
                                                              (var("v",@{typ PSR}),
                                                               mb(mb(mb(mu(call
                                                                             ("PSR.M",
                                                                              (Word_Lib.mk_wordT 5),
                                                                              var("v",@{typ PSR}),
                                                                              prev_thy ),qTy),
                                                                        close
                                                                          (var_w("v",5),
                                                                           mu(eq(var_w("v",5),
                                                                                 lw(22,5)),qTy))),
                                                                     close
                                                                       (var_b"b",
                                                                        ite(var_b"b",
                                                                            mb(mr(close
                                                                                    (var("s",qTy),
                                                                                     call
                                                                                       ("state.CP15",
                                                                                        @{typ CP15},
                                                                                        var("s",qTy),
                                                                                        @{theory ARM_Monadic}))),
                                                                               close             
                                                                                 (var("v",
                                                                                      @{typ CP15}),
                                                                                  mb(mu(call
                                                                                          ("CP15.SCR",
                                                                                           @{typ SCR},
                                                                                           var("v",
                                                                                               @{typ CP15}),
                                                                                           @{theory ARM_Monadic}),
                                                                                        qTy),
                                                                                     close
                                                                                       (var("x0",
                                                                                            @{typ SCR}),
                                                                                        mb(mr(close
                                                                                                (var("s",
                                                                                                     qTy),
                                                                                                 call
                                                                                                   ("state.CP15",
                                                                                                    @{typ CP15},
                                                                                                    var("s",
                                                                                                        qTy),
                                                                                                    @{theory ARM_Monadic}))),
                                                                                           close
                                                                                             (var("v",
                                                                                                  @{typ CP15}),
                                                                                              mb(mb(mu(tp[var("v",
                                                                                                              @{typ CP15}),
                                                                                                          rupd
                                                                                                            ("SCR.NS",
                                                                                                             tp[var("x0",
                                                                                                                    @{typ SCR}),
                                                                                                                lf],
                                                                                                             @{theory ARM_Monadic})],
                                                                                                       qTy),
                                                                                                    close
                                                                                                      (var("v",
                                                                                                           @{typ
                                                                                                           "CP15 \<times>
                                                                                                            SCR"}),
                                                                                                       mu(rupd
                                                                                                            ("CP15.SCR",
                                                                                                             var("v",
                                                                                                                 @{typ
                                                                                                                 "CP15 \<times>
                                                                                                                  SCR"}),
                                                                                                             @{theory ARM_Monadic}),
                                                                                                          qTy))),
                                                                                                 close
                                                                                                   (var("v",
                                                                                                        @{typ CP15}),
                                                                                                    mw(close
                                                                                                         (var("s",
                                                                                                              qTy),
                                                                                                          rupd
                                                                                                            ("state.CP15",
                                                                                                             tp[var("s",
                                                                                                                    qTy),
                                                                                                                var("v",
                                                                                                                    @{typ CP15})],
                                                                                                             @{theory ARM_Monadic}))))))))))),
                                                                            mu(lu,qTy)))),
                                                                  close
                                                                    (var_a HOLogic.unitT,
                                                                     call
                                                                       ("EnterMonitorMode",
                                                                        @{typ
                                                                        "'b state_scheme \<Rightarrow>
                                                                         (unit \<times> 'b state_scheme)"},
                                                                        tp[var("new_spsr_value",
                                                                               @{typ PSR}),
                                                                           var_w("new_lr_value",32),
                                                                           var_w("vect_offset",32)],
                                                                        @{theory})))))),
                                                        (var_b"take_to_hyp",
                                                         call
                                                           ("EnterHypMode",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (unit \<times> 'b state_scheme)"},
                                                            tp[var("new_spsr_value",@{typ PSR}),
                                                               bop(Sub,var_w("new_lr_value",32),
                                                                   lw(4,32)),var_w("vect_offset",32)],
                                                            @{theory }))],
                                                       mb(call
                                                            ("HaveSecurityExt",
                                                             @{typ
                                                             "'b state_scheme \<Rightarrow>
                                                              (bool \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic}),
                                                          close
                                                            (var_b"v",
                                                             mb(mb(ite(var_b"v",
                                                                       mb(mr(close
                                                                               (var("s",qTy),
                                                                                call
                                                                                  ("state.CPSR",
                                                                                   @{typ PSR},
                                                                                   var("s",qTy),
                                                                                   @{theory ARM_Monadic}))),
                                                                          close
                                                                            (var("v",@{typ PSR}),
                                                                             mb(mu(call
                                                                                     ("PSR.M",
                                                                                      (Word_Lib.mk_wordT 5),
                                                                                      var("v",
                                                                                          @{typ PSR}),
                                                                                      prev_thy),qTy),
                                                                                close
                                                                                  (var_w("v",5),
                                                                                   mu(eq(var_w("v",5),
                                                                                         lw(22,5)),
                                                                                      qTy))))),
                                                                       mu(lf,qTy)),
                                                                   close
                                                                     (var_b"b",
                                                                      ite(var_b"b",
                                                                          mb(mr(close
                                                                                  (var("s",qTy),
                                                                                   call
                                                                                     ("state.CP15",
                                                                                      @{typ CP15},
                                                                                      var("s",qTy),
                                                                                      @{theory ARM_Monadic}))),
                                                                             close
                                                                               (var("v",@{typ CP15}),
                                                                                mb(mu(call
                                                                                        ("CP15.SCR",
                                                                                         @{typ SCR},
                                                                                         var("v",
                                                                                             @{typ CP15}),
                                                                                         @{theory ARM_Monadic}),
                                                                                      qTy),
                                                                                   close
                                                                                     (var("x0",
                                                                                          @{typ SCR}),
                                                                                      mb(mr(close
                                                                                              (var("s",
                                                                                                   qTy),
                                                                                               call
                                                                                                 ("state.CP15",
                                                                                                  @{typ CP15},
                                                                                                  var("s",
                                                                                                      qTy),
                                                                                                  @{theory ARM_Monadic}))),
                                                                                         close
                                                                                           (var("v",
                                                                                                @{typ CP15}),
                                                                                            mb(mb(mu(tp[var("v",
                                                                                                            @{typ CP15}),
                                                                                                        rupd
                                                                                                          ("SCR.NS",
                                                                                                           tp[var("x0",
                                                                                                                  @{typ SCR}),
                                                                                                              lf],
                                                                                                           @{theory ARM_Monadic})],
                                                                                                     qTy),
                                                                                                  close
                                                                                                    (var("v",
                                                                                                         @{typ
                                                                                                         "CP15 \<times>
                                                                                                          SCR"}),
                                                                                                     mu(rupd
                                                                                                          ("CP15.SCR",
                                                                                                           var("v",
                                                                                                               @{typ
                                                                                                               "CP15 \<times>
                                                                                                                SCR"}),
                                                                                                           @{theory ARM_Monadic}),
                                                                                                        qTy))),
                                                                                               close
                                                                                                 (var("v",
                                                                                                      @{typ CP15}),
                                                                                                  mw(close
                                                                                                       (var("s",
                                                                                                            qTy),
                                                                                                        rupd
                                                                                                          ("state.CP15",
                                                                                                           tp[var("s",
                                                                                                                  qTy),
                                                                                                              var("v",
                                                                                                                  @{typ CP15})],
                                                                                                           @{theory ARM_Monadic}))))))))))),
                                                                          mu(lu,qTy)))),
                                                                close
                                                                  (var_a HOLogic.unitT,
                                                                   mb(mr(close
                                                                           (var("s",qTy),
                                                                            call
                                                                              ("state.CPSR",
                                                                               @{typ PSR},
                                                                               var("s",qTy),
                                                                               @{theory ARM_Monadic}))),
                                                                      close
                                                                        (var("v",@{typ PSR}),
                                                                         mb(mb(mb(mu(tp[var("v",
                                                                                            @{typ PSR}),
                                                                                        lw(23,5)],
                                                                                     qTy),
                                                                                  close
                                                                                    (var("v",
                                                                                         @{typ
                                                                                         "PSR \<times>
                                                                                          5 word"}),
                                                                                     mu(rupd
                                                                                          ("PSR.M",
                                                                                           var("v",
                                                                                               @{typ
                                                                                               "PSR \<times>
                                                                                                5 word"}),
                                                                                           prev_thy),
                                                                                        qTy))),
                                                                               close
                                                                                 (var("v",@{typ PSR}),
                                                                                  mw(close
                                                                                       (var("s",qTy),
                                                                                        rupd
                                                                                          ("state.CPSR",
                                                                                           tp[var("s",
                                                                                                  qTy),
                                                                                              var("v",
                                                                                                  @{typ PSR})],
                                                                                           @{theory ARM_Monadic}))))),
                                                                            close
                                                                              (var_a HOLogic.unitT,
                                                                               mb(call
                                                                                    ("write'SPSR",
                                                                                     @{typ
                                                                                     "'b state_scheme \<Rightarrow>
                                                                                      (unit \<times>
                                                                                       'b state_scheme)"},
                                                                                     var("new_spsr_value",
                                                                                         @{typ PSR}),
                                                                                     @{theory ARM_Monadic}),
                                                                                  close
                                                                                    (var_a
                                                                                       HOLogic.unitT,
                                                                                     mb(call
                                                                                          ("write'R",
                                                                                           @{typ
                                                                                           "'b state_scheme \<Rightarrow>
                                                                                            (unit \<times>
                                                                                             'b state_scheme)"},
                                                                                           tp[var_w("new_lr_value",32),
                                                                                              lw(14,
                                                                                                 4)],
                                                                                           @{theory ARM_Monadic}),
                                                                                        close
                                                                                          (var_a
                                                                                             HOLogic.unitT,
                                                                                           mb(mr(close
                                                                                                   (var("s",
                                                                                                        qTy),
                                                                                                    call
                                                                                                      ("state.CPSR",
                                                                                                       @{typ PSR},
                                                                                                       var("s",
                                                                                                           qTy),
                                                                                                       @{theory ARM_Monadic}))),
                                                                                              close
                                                                                                (var("v",
                                                                                                     @{typ PSR}),
                                                                                                 mb(mb(mb(mu(tp[var("v",
                                                                                                                    @{typ PSR}),
                                                                                                                lt],
                                                                                                             qTy),
                                                                                                          close
                                                                                                            (var("v",
                                                                                                                 @{typ
                                                                                                                 "PSR \<times>
                                                                                                                  bool"}),
                                                                                                             mu(rupd
                                                                                                                  ("PSR.I",
                                                                                                                   var("v",
                                                                                                                       @{typ
                                                                                                                       "PSR \<times>
                                                                                                                        bool"}),
                                                                                                                   @{theory ARM_Monadic}),
                                                                                                                qTy))),
                                                                                                       close
                                                                                                         (var("v",
                                                                                                              @{typ PSR}),
                                                                                                          mw(close
                                                                                                               (var("s",
                                                                                                                    qTy),
                                                                                                                rupd
                                                                                                                  ("state.CPSR",
                                                                                                                   tp[var("s",
                                                                                                                          qTy),
                                                                                                                      var("v",
                                                                                                                          @{typ PSR})],
                                                                                                                   @{theory ARM_Monadic}))))),
                                                                                                    close
                                                                                                      (var_a
                                                                                                         HOLogic.unitT,
                                                                                                       mb(call
                                                                                                            ("HaveSecurityExt",
                                                                                                             @{typ
                                                                                                             "'b state_scheme \<Rightarrow>
                                                                                                              (bool \<times>
                                                                                                               'b state_scheme)"},
                                                                                                             lu,
                                                                                                             @{theory ARM_Monadic}),
                                                                                                          close
                                                                                                            (var_b"v",
                                                                                                             mb(mb(mb(mu(mop(Not,
                                                                                                                             var_b"v"),
                                                                                                                         qTy),
                                                                                                                      close
                                                                                                                        (var_b"b",
                                                                                                                         ite(var_b"b",
                                                                                                                             mu(lt,
                                                                                                                                qTy),
                                                                                                                             mb(call
                                                                                                                                  ("HaveVirtExt",
                                                                                                                                   @{typ
                                                                                                                                   "'b state_scheme \<Rightarrow>
                                                                                                                                    (bool \<times>
                                                                                                                                     'b state_scheme)"},
                                                                                                                                   lu,
                                                                                                                                   prev_thy),
                                                                                                                                close
                                                                                                                                  (var_b"b",
                                                                                                                                   ite(var_b"b",
                                                                                                                                       mu(lt,
                                                                                                                                          qTy),
                                                                                                                                       mb(mr(close
                                                                                                                                               (var("s",
                                                                                                                                                    qTy),
                                                                                                                                                call
                                                                                                                                                  ("state.CP15",
                                                                                                                                                   @{typ CP15},
                                                                                                                                                   var("s",
                                                                                                                                                       qTy),
                                                                                                                                                   @{theory ARM_Monadic}))),
                                                                                                                                          close
                                                                                                                                            (var("v",
                                                                                                                                                 @{typ CP15}),
                                                                                                                                             mb(mb(mb(mu(call
                                                                                                                                                           ("CP15.SCR",
                                                                                                                                                            @{typ SCR},
                                                                                                                                                            var("v",
                                                                                                                                                                @{typ CP15}),
                                                                                                                                                            @{theory ARM_Monadic}),
                                                                                                                                                         qTy),
                                                                                                                                                      close
                                                                                                                                                        (var("v",
                                                                                                                                                             @{typ SCR}),
                                                                                                                                                         mu(call
                                                                                                                                                              ("SCR.NS",
                                                                                                                                                               HOLogic.boolT,
                                                                                                                                                               var("v",
                                                                                                                                                                   @{typ SCR}),
                                                                                                                                                               @{theory ARM_Monadic}),
                                                                                                                                                            qTy))),
                                                                                                                                                   close
                                                                                                                                                     (var_b"v",
                                                                                                                                                      mu(mop(Not,
                                                                                                                                                             var_b"v"),
                                                                                                                                                         qTy))),
                                                                                                                                                close
                                                                                                                                                  (var_b"b",
                                                                                                                                                   ite(var_b"b",
                                                                                                                                                       mu(lt,
                                                                                                                                                          qTy),
                                                                                                                                                       mb(mr(close
                                                                                                                                                               (var("s",
                                                                                                                                                                    qTy),
                                                                                                                                                                call
                                                                                                                                                                  ("state.CP15",
                                                                                                                                                                   @{typ CP15},
                                                                                                                                                                   var("s",
                                                                                                                                                                       qTy),
                                                                                                                                                                   @{theory ARM_Monadic}))),
                                                                                                                                                          close
                                                                                                                                                            (var("v",
                                                                                                                                                                 @{typ CP15}),
                                                                                                                                                             mb(mu(call
                                                                                                                                                                     ("CP15.SCR",
                                                                                                                                                                      @{typ SCR},
                                                                                                                                                                      var("v",
                                                                                                                                                                          @{typ CP15}),
                                                                                                                                                                      @{theory ARM_Monadic}),
                                                                                                                                                                   qTy),
                                                                                                                                                                close
                                                                                                                                                                  (var("v",
                                                                                                                                                                       @{typ SCR}),
                                                                                                                                                                   mu(call
                                                                                                                                                                        ("SCR.AW",
                                                                                                                                                                         HOLogic.boolT,
                                                                                                                                                                         var("v",
                                                                                                                                                                             @{typ SCR}),
                                                                                                                                                                         prev_thy ),
                                                                                                                                                                      qTy)))))))))))))))),
                                                                                                                   close
                                                                                                                     (var_b"b",
                                                                                                                      ite(var_b"b",
                                                                                                                          mb(mr(close
                                                                                                                                  (var("s",
                                                                                                                                       qTy),
                                                                                                                                   call
                                                                                                                                     ("state.CPSR",
                                                                                                                                      @{typ PSR},
                                                                                                                                      var("s",
                                                                                                                                          qTy),
                                                                                                                                      @{theory ARM_Monadic}))),
                                                                                                                             close
                                                                                                                               (var("v",
                                                                                                                                    @{typ PSR}),
                                                                                                                                mb(mb(mu(tp[var("v",
                                                                                                                                                @{typ PSR}),
                                                                                                                                            lt],
                                                                                                                                         qTy),
                                                                                                                                      close
                                                                                                                                        (var("v",
                                                                                                                                             @{typ
                                                                                                                                             "PSR \<times>
                                                                                                                                              bool"}),
                                                                                                                                         mu(rupd
                                                                                                                                              ("PSR.A",
                                                                                                                                               var("v",
                                                                                                                                                   @{typ
                                                                                                                                                   "PSR \<times>
                                                                                                                                                    bool"}),
                                                                                                                                               @{theory ARM_Monadic}),
                                                                                                                                            qTy))),
                                                                                                                                   close
                                                                                                                                     (var("v",
                                                                                                                                          @{typ PSR}),
                                                                                                                                      mw(close
                                                                                                                                           (var("s",
                                                                                                                                                qTy),
                                                                                                                                            rupd
                                                                                                                                              ("state.CPSR",
                                                                                                                                               tp[var("s",
                                                                                                                                                      qTy),
                                                                                                                                                  var("v",
                                                                                                                                                      @{typ PSR})],
                                                                                                                                               @{theory ARM_Monadic}))))))),
                                                                                                                          mu(lu,
                                                                                                                             qTy)))),
                                                                                                                close
                                                                                                                  (var_a
                                                                                                                     HOLogic.unitT,
                                                                                                                   mb(mr(close
                                                                                                                           (var("s",
                                                                                                                                qTy),
                                                                                                                            call
                                                                                                                              ("state.CPSR",
                                                                                                                               @{typ PSR},
                                                                                                                               var("s",
                                                                                                                                   qTy),
                                                                                                                               @{theory ARM_Monadic}))),
                                                                                                                      close
                                                                                                                        (var("v",
                                                                                                                             @{typ PSR}),
                                                                                                                         mb(mb(mb(mu(tp[var("v",
                                                                                                                                            @{typ PSR}),
                                                                                                                                        lw(0,
                                                                                                                                           8)],
                                                                                                                                     qTy),
                                                                                                                                  close
                                                                                                                                    (var("v",
                                                                                                                                         @{typ
                                                                                                                                         "PSR \<times>
                                                                                                                                          8 word"}),
                                                                                                                                     mu(rupd
                                                                                                                                          ("PSR.IT",
                                                                                                                                           var("v",
                                                                                                                                               @{typ
                                                                                                                                               "PSR \<times>
                                                                                                                                                8 word"}),
                                                                                                                                           @{theory ARM_Monadic}),
                                                                                                                                        qTy))),
                                                                                                                               close
                                                                                                                                 (var("v",
                                                                                                                                      @{typ PSR}),
                                                                                                                                  mw(close
                                                                                                                                       (var("s",
                                                                                                                                            qTy),
                                                                                                                                        rupd
                                                                                                                                          ("state.CPSR",
                                                                                                                                           tp[var("s",
                                                                                                                                                  qTy),
                                                                                                                                              var("v",
                                                                                                                                                  @{typ PSR})],
                                                                                                                                           @{theory ARM_Monadic}))))),
                                                                                                                            close
                                                                                                                              (var_a
                                                                                                                                 HOLogic.unitT,
                                                                                                                               mb(mr(close
                                                                                                                                       (var("s",
                                                                                                                                            qTy),
                                                                                                                                        call
                                                                                                                                          ("state.CPSR",
                                                                                                                                           @{typ PSR},
                                                                                                                                           var("s",
                                                                                                                                               qTy),
                                                                                                                                           @{theory ARM_Monadic}))),
                                                                                                                                  close
                                                                                                                                    (var("v",
                                                                                                                                         @{typ PSR}),
                                                                                                                                     mb(mb(mb(mu(tp[var("v",
                                                                                                                                                        @{typ PSR}),
                                                                                                                                                    lf],
                                                                                                                                                 qTy),
                                                                                                                                              close
                                                                                                                                                (var("v",
                                                                                                                                                     @{typ
                                                                                                                                                     "PSR \<times>
                                                                                                                                                      bool"}),
                                                                                                                                                 mu(rupd
                                                                                                                                                      ("PSR.J",
                                                                                                                                                       var("v",
                                                                                                                                                           @{typ
                                                                                                                                                           "PSR \<times>
                                                                                                                                                            bool"}),
                                                                                                                                                       @{theory ARM_Monadic}),
                                                                                                                                                    qTy))),
                                                                                                                                           close
                                                                                                                                             (var("v",
                                                                                                                                                  @{typ PSR}),
                                                                                                                                              mw(close
                                                                                                                                                   (var("s",
                                                                                                                                                        qTy),
                                                                                                                                                    rupd
                                                                                                                                                      ("state.CPSR",
                                                                                                                                                       tp[var("s",
                                                                                                                                                              qTy),
                                                                                                                                                          var("v",
                                                                                                                                                              @{typ PSR})],
                                                                                                                                                       @{theory ARM_Monadic}))))),
                                                                                                                                        close
                                                                                                                                          (var_a
                                                                                                                                             HOLogic.unitT,
                                                                                                                                           mb(mr(close
                                                                                                                                                   (var("s",
                                                                                                                                                        qTy),
                                                                                                                                                    call
                                                                                                                                                      ("state.CPSR",
                                                                                                                                                       @{typ PSR},
                                                                                                                                                       var("s",
                                                                                                                                                           qTy),
                                                                                                                                                       @{theory ARM_Monadic}))),
                                                                                                                                              close
                                                                                                                                                (var("v",
                                                                                                                                                     @{typ PSR}),
                                                                                                                                                 mb(mb(mb(mb(mr(close
                                                                                                                                                                  (var("s",
                                                                                                                                                                       qTy),
                                                                                                                                                                   call
                                                                                                                                                                     ("state.CP15",
                                                                                                                                                                      @{typ CP15},
                                                                                                                                                                      var("s",
                                                                                                                                                                          qTy),
                                                                                                                                                                      @{theory ARM_Monadic}))),
                                                                                                                                                             close
                                                                                                                                                               (var("v0",
                                                                                                                                                                    @{typ CP15}),
                                                                                                                                                                mb(mb(mu(call
                                                                                                                                                                           ("CP15.SCTLR",
                                                                                                                                                                            @{typ SCTLR},
                                                                                                                                                                            var("v0",
                                                                                                                                                                                @{typ CP15}),
                                                                                                                                                                            @{theory ARM_Monadic}),
                                                                                                                                                                         qTy),
                                                                                                                                                                      close
                                                                                                                                                                        (var("v",
                                                                                                                                                                             @{typ SCTLR}),
                                                                                                                                                                         mu(call
                                                                                                                                                                              ("SCTLR.TE",
                                                                                                                                                                               HOLogic.boolT,
                                                                                                                                                                               var("v",
                                                                                                                                                                                   @{typ SCTLR}),
                                                                                                                                                                               @{theory ARM_Monadic}),
                                                                                                                                                                            qTy))),
                                                                                                                                                                   close
                                                                                                                                                                     (var_b"v0",
                                                                                                                                                                      mu(tp[var("v",
                                                                                                                                                                                @{typ PSR}),
                                                                                                                                                                            var_b"v0"],
                                                                                                                                                                         qTy))))),
                                                                                                                                                          close
                                                                                                                                                            (var("v",
                                                                                                                                                                 @{typ
                                                                                                                                                                 "PSR \<times>
                                                                                                                                                                  bool"}),
                                                                                                                                                             mu(rupd
                                                                                                                                                                  ("PSR.T",
                                                                                                                                                                   var("v",
                                                                                                                                                                       @{typ
                                                                                                                                                                       "PSR \<times>
                                                                                                                                                                        bool"}),
                                                                                                                                                                   prev_thy ),
                                                                                                                                                                qTy))),
                                                                                                                                                       close
                                                                                                                                                         (var("v",
                                                                                                                                                              @{typ PSR}),
                                                                                                                                                          mw(close
                                                                                                                                                               (var("s",
                                                                                                                                                                    qTy),
                                                                                                                                                                rupd
                                                                                                                                                                  ("state.CPSR",
                                                                                                                                                                   tp[var("s",
                                                                                                                                                                          qTy),
                                                                                                                                                                      var("v",
                                                                                                                                                                          @{typ PSR})],
                                                                                                                                                                   @{theory ARM_Monadic}))))),
                                                                                                                                                    close
                                                                                                                                                      (var_a
                                                                                                                                                         HOLogic.unitT,
                                                                                                                                                       mb(mr(close
                                                                                                                                                               (var("s",
                                                                                                                                                                    qTy),
                                                                                                                                                                call
                                                                                                                                                                  ("state.CPSR",
                                                                                                                                                                   @{typ PSR},
                                                                                                                                                                   var("s",
                                                                                                                                                                       qTy),
                                                                                                                                                                   @{theory ARM_Monadic}))),
                                                                                                                                                          close
                                                                                                                                                            (var("v",
                                                                                                                                                                 @{typ PSR}),
                                                                                                                                                             mb(mb(mb(mb(mr(close
                                                                                                                                                                              (var("s",
                                                                                                                                                                                   qTy),
                                                                                                                                                                               call
                                                                                                                                                                                 ("state.CP15",
                                                                                                                                                                                  @{typ CP15},
                                                                                                                                                                                  var("s",
                                                                                                                                                                                      qTy),
                                                                                                                                                                                  @{theory ARM_Monadic}))),
                                                                                                                                                                         close
                                                                                                                                                                           (var("v0",
                                                                                                                                                                                @{typ CP15}),
                                                                                                                                                                            mb(mb(mu(call
                                                                                                                                                                                       ("CP15.SCTLR",
                                                                                                                                                                                        @{typ SCTLR},
                                                                                                                                                                                        var("v0",
                                                                                                                                                                                            @{typ CP15}),
                                                                                                                                                                                        @{theory ARM_Monadic}),
                                                                                                                                                                                     qTy),
                                                                                                                                                                                  close
                                                                                                                                                                                    (var("v",
                                                                                                                                                                                         @{typ SCTLR}),
                                                                                                                                                                                     mu(call
                                                                                                                                                                                          ("SCTLR.EE",
                                                                                                                                                                                           HOLogic.boolT,
                                                                                                                                                                                           var("v",
                                                                                                                                                                                               @{typ SCTLR}),
                                                                                                                                                                                           @{theory ARM_Monadic}),
                                                                                                                                                                                        qTy))),
                                                                                                                                                                               close
                                                                                                                                                                                 (var_b"v0",
                                                                                                                                                                                  mu(tp[var("v",
                                                                                                                                                                                            @{typ PSR}),
                                                                                                                                                                                        var_b"v0"],
                                                                                                                                                                                     qTy))))),
                                                                                                                                                                      close
                                                                                                                                                                        (var("v",
                                                                                                                                                                             @{typ
                                                                                                                                                                             "PSR \<times>
                                                                                                                                                                              bool"}),
                                                                                                                                                                         mu(rupd
                                                                                                                                                                              ("PSR.E",
                                                                                                                                                                               var("v",
                                                                                                                                                                                   @{typ
                                                                                                                                                                                   "PSR \<times>
                                                                                                                                                                                    bool"}),
                                                                                                                                                                               @{theory ARM_Monadic}),
                                                                                                                                                                            qTy))),
                                                                                                                                                                   close
                                                                                                                                                                     (var("v",
                                                                                                                                                                          @{typ PSR}),
                                                                                                                                                                      mw(close
                                                                                                                                                                           (var("s",
                                                                                                                                                                                qTy),
                                                                                                                                                                            rupd
                                                                                                                                                                              ("state.CPSR",
                                                                                                                                                                               tp[var("s",
                                                                                                                                                                                      qTy),
                                                                                                                                                                                  var("v",
                                                                                                                                                                                      @{typ PSR})],
                                                                                                                                                                               @{theory ARM_Monadic}))))),
                                                                                                                                                                close
                                                                                                                                                                  (var_a
                                                                                                                                                                     HOLogic.unitT,
                                                                                                                                                                   mb(call
                                                                                                                                                                        ("ExcVectorBase",
                                                                                                                                                                         @{typ
                                                                                                                                                                         "'b state_scheme \<Rightarrow>
                                                                                                                                                                          (32 word \<times>
                                                                                                                                                                           'b state_scheme)"},
                                                                                                                                                                         lu,
                                                                                                                                                                         @{theory}),
                                                                                                                                                                      close
                                                                                                                                                                        (var_w("v",32),
                                                                                                                                                                         mb(mu(bop(Add,
                                                                                                                                                                                   var_w("v",32),
                                                                                                                                                                                   var_w("vect_offset",32)),
                                                                                                                                                                               qTy),
                                                                                                                                                                            close
                                                                                                                                                                              (var_w("v",32),
                                                                                                                                                                               call
                                                                                                                                                                                 ("BranchTo",
                                                                                                                                                                                  @{typ
                                                                                                                                                                                  "'b state_scheme \<Rightarrow>
                                                                                                                                                                                   (unit \<times>
                                                                                                                                                                                    'b state_scheme)"},
                                                                                                                                                                                  var_w("v",32),
                                                                                                                                                                                  @{theory ARM_Monadic})))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("TakePhysicalIRQException",
   close
     (var_a HOLogic.unitT,
      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
         close
           (var("v",@{typ PSR}),
            mb(mb(mu(call("PSR.T",HOLogic.boolT,var("v",@{typ PSR}),@{theory ARM_Monadic}),qTy),
                  close
                    (var_b"b",
                     ite(var_b"b",
                         const("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
                         mb(const
                              ("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
                            close(var_w("v",32),mu(bop(Sub,var_w("v",32),lw(4,32)),qTy)))))),
               close
                 (var_w("new_lr_value",32),
                  mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                     close
                       (var("new_spsr_value",@{typ PSR}),
                        let'
                          (var_w("vect_offset",32),lw(24,32),
                           mb(call
                                ("HaveSecurityExt",
                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic}),
                              close
                                (var_b"v",
                                 mb(ite(var_b"v",
                                        mb(mr(close
                                                (var("s",qTy),
                                                 call
                                                   ("state.CP15",@{typ CP15},var("s",qTy),@{theory ARM_Monadic}))),
                                           close
                                             (var("v",@{typ CP15}),
                                              mb(mu(call
                                                      ("CP15.SCR",@{typ SCR},var("v",@{typ CP15}),
                                                       @{theory ARM_Monadic}),qTy),
                                                 close
                                                   (var("v",@{typ SCR}),
                                                    mu(call
                                                         ("SCR.IRQ",HOLogic.boolT,
                                                          var("v",@{typ SCR}),prev_thy ),qTy))))),
                                        mu(lf,qTy)),
                                    close
                                      (var_b"route_to_monitor",
                                       mb(call
                                            ("HaveVirtExt",
                                             @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                             @{theory ARM_Monadic}),
                                          close
                                            (var_b"v",
                                             mb(mb(ite(var_b"v",
                                                       mb(call
                                                            ("HaveSecurityExt",
                                                             @{typ
                                                             "'b state_scheme \<Rightarrow>
                                                              (bool \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic}),
                                                          close
                                                            (var_b"b",
                                                             ite(var_b"b",
                                                                 mb(mr(close
                                                                         (var("s",qTy),
                                                                          call
                                                                            ("state.CP15",
                                                                             @{typ CP15},
                                                                             var("s",qTy),@{theory ARM_Monadic}))),
                                                                    close
                                                                      (var("v",@{typ CP15}),
                                                                       mb(mb(mb(mu(call
                                                                                     ("CP15.SCR",
                                                                                      @{typ SCR},
                                                                                      var("v",
                                                                                          @{typ CP15}),
                                                                                      @{theory ARM_Monadic}),qTy),
                                                                                close
                                                                                  (var("v",
                                                                                       @{typ SCR}),
                                                                                   mu(call
                                                                                        ("SCR.IRQ",
                                                                                         HOLogic.boolT,
                                                                                         var("v",
                                                                                             @{typ SCR}),
                                                                                         prev_thy ),
                                                                                      qTy))),
                                                                             close
                                                                               (var_b"v",
                                                                                mu(mop(Not,var_b"v"),
                                                                                   qTy))),
                                                                          close
                                                                            (var_b"b",
                                                                             ite(var_b"b",
                                                                                 mb(mr(close
                                                                                         (var("s",
                                                                                              qTy),
                                                                                          call
                                                                                            ("state.CP15",
                                                                                             @{typ CP15},
                                                                                             var("s",
                                                                                                 qTy),
                                                                                             @{theory ARM_Monadic}))),
                                                                                    close
                                                                                      (var("v",
                                                                                           @{typ CP15}),
                                                                                       mb(mb(mu(call
                                                                                                  ("CP15.HCR",
                                                                                                   @{typ HCR},
                                                                                                   var("v",
                                                                                                       @{typ CP15}),
                                                                                                   prev_thy ),
                                                                                                qTy),
                                                                                             close
                                                                                               (var("v",
                                                                                                    @{typ HCR}),
                                                                                                mu(call
                                                                                                     ("HCR.IMO",
                                                                                                      HOLogic.boolT,
                                                                                                      var("v",
                                                                                                          @{typ HCR}),
                                                                                                      prev_thy ),
                                                                                                   qTy))),
                                                                                          close
                                                                                            (var_b"b",
                                                                                             ite(var_b"b",
                                                                                                 mb(call
                                                                                                      ("IsSecure",
                                                                                                       @{typ
                                                                                                       "'b state_scheme \<Rightarrow>
                                                                                                        (bool \<times>
                                                                                                         'b state_scheme)"},
                                                                                                       lu,
                                                                                                       prev_thy ),
                                                                                                    close
                                                                                                      (var_b"v",
                                                                                                       mu(mop(Not,
                                                                                                              var_b"v"),
                                                                                                          qTy))),
                                                                                                 mu(lf,
                                                                                                    qTy)))))),
                                                                                 mu(lf,qTy)))))),
                                                                 mu(lf,qTy)))),mu(lf,qTy)),
                                                   close
                                                     (var_b"b",
                                                      ite(var_b"b",mu(lt,qTy),
                                                          mb(mr(close
                                                                  (var("s",qTy),
                                                                   call
                                                                     ("state.CPSR",@{typ PSR},
                                                                      var("s",qTy),@{theory ARM_Monadic}))),
                                                             close
                                                               (var("v",@{typ PSR}),
                                                                mb(mu(call
                                                                        ("PSR.M",
                                                                         (Word_Lib.mk_wordT 5),
                                                                         var("v",@{typ PSR}),
                                                                         prev_thy ),qTy),
                                                                   close
                                                                     (var_w("v",5),
                                                                      mu(eq(var_w("v",5),lw(26,5)),
                                                                         qTy)))))))),
                                                close
                                                  (var_b"route_to_hyp",
                                                   itb([(var_b"route_to_monitor",
                                                         mb(mr(close
                                                                 (var("s",qTy),
                                                                  call
                                                                    ("state.CPSR",@{typ PSR},
                                                                     var("s",qTy),prev_thy ))),
                                                            close
                                                              (var("v",@{typ PSR}),
                                                               mb(mb(mb(mu(call
                                                                             ("PSR.M",
                                                                              (Word_Lib.mk_wordT 5),
                                                                              var("v",@{typ PSR}),
                                                                              prev_thy ),qTy),
                                                                        close
                                                                          (var_w("v",5),
                                                                           mu(eq(var_w("v",5),
                                                                                 lw(22,5)),qTy))),
                                                                     close
                                                                       (var_b"b",
                                                                        ite(var_b"b",
                                                                            mb(mr(close
                                                                                    (var("s",qTy),
                                                                                     call
                                                                                       ("state.CP15",
                                                                                        @{typ CP15},
                                                                                        var("s",qTy),
                                                                                        @{theory ARM_Monadic}))),
                                                                               close
                                                                                 (var("v",
                                                                                      @{typ CP15}),
                                                                                  mb(mu(call
                                                                                          ("CP15.SCR",
                                                                                           @{typ SCR},
                                                                                           var("v",
                                                                                               @{typ CP15}),
                                                                                           @{theory ARM_Monadic}),
                                                                                        qTy),
                                                                                     close
                                                                                       (var("x0",
                                                                                            @{typ SCR}),
                                                                                        mb(mr(close
                                                                                                (var("s",
                                                                                                     qTy),
                                                                                                 call
                                                                                                   ("state.CP15",
                                                                                                    @{typ CP15},
                                                                                                    var("s",
                                                                                                        qTy),
                                                                                                    @{theory ARM_Monadic}))),
                                                                                           close
                                                                                             (var("v",
                                                                                                  @{typ CP15}),
                                                                                              mb(mb(mu(tp[var("v",
                                                                                                              @{typ CP15}),
                                                                                                          rupd
                                                                                                            ("SCR.NS",
                                                                                                             tp[var("x0",
                                                                                                                    @{typ SCR}),
                                                                                                                lf],
                                                                                                             @{theory  ARM_Monadic})],
                                                                                                       qTy),
                                                                                                    close
                                                                                                      (var("v",
                                                                                                           @{typ
                                                                                                           "CP15 \<times>
                                                                                                            SCR"}),
                                                                                                       mu(rupd
                                                                                                            ("CP15.SCR",
                                                                                                             var("v",
                                                                                                                 @{typ
                                                                                                                 "CP15 \<times>
                                                                                                                  SCR"}),
                                                                                                             @{theory ARM_Monadic}),
                                                                                                          qTy))),
                                                                                                 close
                                                                                                   (var("v",
                                                                                                        @{typ CP15}),
                                                                                                    mw(close
                                                                                                         (var("s",
                                                                                                              qTy),
                                                                                                          rupd
                                                                                                            ("state.CP15",
                                                                                                             tp[var("s",
                                                                                                                    qTy),
                                                                                                                var("v",
                                                                                                                    @{typ CP15})],
                                                                                                             @{theory ARM_Monadic}))))))))))),
                                                                            mu(lu,qTy)))),
                                                                  close
                                                                    (var_a HOLogic.unitT,
                                                                     call
                                                                       ("EnterMonitorMode",
                                                                        @{typ
                                                                        "'b state_scheme \<Rightarrow>
                                                                         (unit \<times> 'b state_scheme)"},
                                                                        tp[var("new_spsr_value",
                                                                               @{typ PSR}),
                                                                           var_w("new_lr_value",32),
                                                                           var_w("vect_offset",32)],
                                                                        @{theory })))))),
                                                        (var_b"route_to_hyp",
                                                         mb(mr(close
                                                                 (var("s",qTy),
                                                                  call
                                                                    ("state.CP15",@{typ CP15},
                                                                     var("s",qTy),@{theory ARM_Monadic}))),
                                                            close
                                                              (var("v",@{typ CP15}),
                                                               mb(mb(mb(mu(tp[var("v",@{typ CP15}),
                                                                              lx @{typ HSR}],qTy),
                                                                        close
                                                                          (var("v",
                                                                               @{typ
                                                                               "CP15 \<times> HSR"}),
                                                                           mu(rupd
                                                                                ("CP15.HSR",
                                                                                 var("v",
                                                                                     @{typ
                                                                                     "CP15 \<times>
                                                                                      HSR"}),
                                                                                 prev_thy ),qTy))),
                                                                     close
                                                                       (var("v",@{typ CP15}),
                                                                        mw(close
                                                                             (var("s",qTy),
                                                                              rupd
                                                                                ("state.CP15",
                                                                                 tp[var("s",qTy),
                                                                                    var("v",
                                                                                        @{typ CP15})],
                                                                                 @{theory ARM_Monadic}))))),
                                                                  close
                                                                    (var_a HOLogic.unitT,
                                                                     call
                                                                       ("EnterHypMode",
                                                                        @{typ
                                                                        "'b state_scheme \<Rightarrow>
                                                                         (unit \<times> 'b state_scheme)"},
                                                                        tp[var("new_spsr_value",
                                                                               @{typ PSR}),
                                                                           bop(Sub,
                                                                               var_w("new_lr_value",32),
                                                                               lw(4,32)),
                                                                           var_w("vect_offset",32)],
                                                                        @{theory }))))))],
                                                       mb(mr(close
                                                               (var("s",qTy),
                                                                call
                                                                  ("state.CPSR",@{typ PSR},
                                                                   var("s",qTy),prev_thy ))),
                                                          close
                                                            (var("v",@{typ PSR}),
                                                             mb(mb(mb(mu(call
                                                                           ("PSR.M",
                                                                            (Word_Lib.mk_wordT 5),
                                                                            var("v",@{typ PSR}),
                                                                            prev_thy ),qTy),
                                                                      close
                                                                        (var_w("v",5),
                                                                         mu(eq(var_w("v",5),lw(22,5)),
                                                                            qTy))),
                                                                   close
                                                                     (var_b"b",
                                                                      ite(var_b"b",
                                                                          mb(mr(close
                                                                                  (var("s",qTy),
                                                                                   call
                                                                                     ("state.CP15",
                                                                                      @{typ CP15},
                                                                                      var("s",qTy),
                                                                                      @{theory ARM_Monadic}))),
                                                                             close
                                                                               (var("v",@{typ CP15}),
                                                                                mb(mu(call
                                                                                        ("CP15.SCR",
                                                                                         @{typ SCR},
                                                                                         var("v",
                                                                                             @{typ CP15}),
                                                                                         @{theory ARM_Monadic}),
                                                                                      qTy),
                                                                                   close
                                                                                     (var("x0",
                                                                                          @{typ SCR}),
                                                                                      mb(mr(close
                                                                                              (var("s",
                                                                                                   qTy),
                                                                                               call
                                                                                                 ("state.CP15",
                                                                                                  @{typ CP15},
                                                                                                  var("s",
                                                                                                      qTy),
                                                                                                  @{theory ARM_Monadic}))),
                                                                                         close
                                                                                           (var("v",
                                                                                                @{typ CP15}),
                                                                                            mb(mb(mu(tp[var("v",
                                                                                                            @{typ CP15}),
                                                                                                        rupd
                                                                                                          ("SCR.NS",
                                                                                                           tp[var("x0",
                                                                                                                  @{typ SCR}),
                                                                                                              lf],
                                                                                                           @{theory ARM_Monadic})],
                                                                                                     qTy),
                                                                                                  close
                                                                                                    (var("v",
                                                                                                         @{typ
                                                                                                         "CP15 \<times>
                                                                                                          SCR"}),
                                                                                                     mu(rupd
                                                                                                          ("CP15.SCR",
                                                                                                           var("v",
                                                                                                               @{typ
                                                                                                               "CP15 \<times>
                                                                                                                SCR"}),
                                                                                                           @{theory ARM_Monadic}),
                                                                                                        qTy))),
                                                                                               close
                                                                                                 (var("v",
                                                                                                      @{typ CP15}),
                                                                                                  mw(close
                                                                                                       (var("s",
                                                                                                            qTy),
                                                                                                        rupd
                                                                                                          ("state.CP15",
                                                                                                           tp[var("s",
                                                                                                                  qTy),
                                                                                                              var("v",
                                                                                                                  @{typ CP15})],
                                                                                                           @{theory ARM_Monadic}))))))))))),
                                                                          mu(lu,qTy)))),
                                                                close
                                                                  (var_a HOLogic.unitT,
                                                                   mb(mr(close
                                                                           (var("s",qTy),
                                                                            call
                                                                              ("state.CPSR",
                                                                               @{typ PSR},
                                                                               var("s",qTy),
                                                                               prev_thy ))),
                                                                      close
                                                                        (var("v",@{typ PSR}),
                                                                         mb(mb(mb(mu(tp[var("v",
                                                                                            @{typ PSR}),
                                                                                        lw(18,5)],
                                                                                     qTy),
                                                                                  close
                                                                                    (var("v",
                                                                                         @{typ
                                                                                         "PSR \<times>
                                                                                          5 word"}),
                                                                                     mu(rupd
                                                                                          ("PSR.M",
                                                                                           var("v",
                                                                                               @{typ
                                                                                               "PSR \<times>
                                                                                                5 word"}),
                                                                                           prev_thy ),
                                                                                        qTy))),
                                                                               close
                                                                                 (var("v",@{typ PSR}),
                                                                                  mw(close
                                                                                       (var("s",qTy),
                                                                                        rupd
                                                                                          ("state.CPSR",
                                                                                           tp[var("s",
                                                                                                  qTy),
                                                                                              var("v",
                                                                                                  @{typ PSR})],
                                                                                           prev_thy ))))),
                                                                            close
                                                                              (var_a HOLogic.unitT,
                                                                               mb(call
                                                                                    ("write'SPSR",
                                                                                     @{typ
                                                                                     "'b state_scheme \<Rightarrow>
                                                                                      (unit \<times>
                                                                                       'b state_scheme)"},
                                                                                     var("new_spsr_value",
                                                                                         @{typ PSR}),
                                                                                     @{theory ARM_Monadic}),
                                                                                  close
                                                                                    (var_a
                                                                                       HOLogic.unitT,
                                                                                     mb(call
                                                                                          ("write'R",
                                                                                           @{typ
                                                                                           "'b state_scheme \<Rightarrow>
                                                                                            (unit \<times>
                                                                                             'b state_scheme)"},
                                                                                           tp[var_w("new_lr_value",32),
                                                                                              lw(14,
                                                                                                 4)],
                                                                                           @{theory ARM_Monadic}),
                                                                                        close
                                                                                          (var_a
                                                                                             HOLogic.unitT,
                                                                                           mb(mr(close
                                                                                                   (var("s",
                                                                                                        qTy),
                                                                                                    call
                                                                                                      ("state.CPSR",
                                                                                                       @{typ PSR},
                                                                                                       var("s",
                                                                                                           qTy),
                                                                                                       prev_thy ))),
                                                                                              close
                                                                                                (var("v",
                                                                                                     @{typ PSR}),
                                                                                                 mb(mb(mb(mu(tp[var("v",
                                                                                                                    @{typ PSR}),
                                                                                                                lt],
                                                                                                             qTy),
                                                                                                          close
                                                                                                            (var("v",
                                                                                                                 @{typ
                                                                                                                 "PSR \<times>
                                                                                                                  bool"}),
                                                                                                             mu(rupd
                                                                                                                  ("PSR.I",
                                                                                                                   var("v",
                                                                                                                       @{typ
                                                                                                                       "PSR \<times>
                                                                                                                        bool"}),
                                                                                                                   @{theory ARM_Monadic}),
                                                                                                                qTy))),
                                                                                                       close
                                                                                                         (var("v",
                                                                                                              @{typ PSR}),
                                                                                                          mw(close
                                                                                                               (var("s",
                                                                                                                    qTy),
                                                                                                                rupd
                                                                                                                  ("state.CPSR",
                                                                                                                   tp[var("s",
                                                                                                                          qTy),
                                                                                                                      var("v",
                                                                                                                          @{typ PSR})],
                                                                                                                   prev_thy ))))),
                                                                                                    close
                                                                                                      (var_a
                                                                                                         HOLogic.unitT,
                                                                                                       mb(call
                                                                                                            ("HaveSecurityExt",
                                                                                                             @{typ
                                                                                                             "'b state_scheme \<Rightarrow>
                                                                                                              (bool \<times>
                                                                                                               'b state_scheme)"},
                                                                                                             lu,
                                                                                                             @{theory ARM_Monadic}),
                                                                                                          close
                                                                                                            (var_b"v",
                                                                                                             mb(mb(mb(mu(mop(Not,
                                                                                                                             var_b"v"),
                                                                                                                         qTy),
                                                                                                                      close
                                                                                                                        (var_b"b",
                                                                                                                         ite(var_b"b",
                                                                                                                             mu(lt,
                                                                                                                                qTy),
                                                                                                                             mb(call
                                                                                                                                  ("HaveVirtExt",
                                                                                                                                   @{typ
                                                                                                                                   "'b state_scheme \<Rightarrow>
                                                                                                                                    (bool \<times>
                                                                                                                                     'b state_scheme)"},
                                                                                                                                   lu,
                                                                                                                                   prev_thy ),
                                                                                                                                close
                                                                                                                                  (var_b"b",
                                                                                                                                   ite(var_b"b",
                                                                                                                                       mu(lt,
                                                                                                                                          qTy),
                                                                                                                                       mb(mr(close
                                                                                                                                               (var("s",
                                                                                                                                                    qTy),
                                                                                                                                                call
                                                                                                                                                  ("state.CP15",
                                                                                                                                                   @{typ CP15},
                                                                                                                                                   var("s",
                                                                                                                                                       qTy),
                                                                                                                                                   @{theory ARM_Monadic}))),
                                                                                                                                          close
                                                                                                                                            (var("v",
                                                                                                                                                 @{typ CP15}),
                                                                                                                                             mb(mb(mb(mu(call
                                                                                                                                                           ("CP15.SCR",
                                                                                                                                                            @{typ SCR},
                                                                                                                                                            var("v",
                                                                                                                                                                @{typ CP15}),
                                                                                                                                                            @{theory ARM_Monadic}),
                                                                                                                                                         qTy),
                                                                                                                                                      close
                                                                                                                                                        (var("v",
                                                                                                                                                             @{typ SCR}),
                                                                                                                                                         mu(call
                                                                                                                                                              ("SCR.NS",
                                                                                                                                                               HOLogic.boolT,
                                                                                                                                                               var("v",
                                                                                                                                                                   @{typ SCR}),
                                                                                                                                                               @{theory ARM_Monadic}),
                                                                                                                                                            qTy))),
                                                                                                                                                   close
                                                                                                                                                     (var_b"v",
                                                                                                                                                      mu(mop(Not,
                                                                                                                                                             var_b"v"),
                                                                                                                                                         qTy))),
                                                                                                                                                close
                                                                                                                                                  (var_b"b",
                                                                                                                                                   ite(var_b"b",
                                                                                                                                                       mu(lt,
                                                                                                                                                          qTy),
                                                                                                                                                       mb(mr(close
                                                                                                                                                               (var("s",
                                                                                                                                                                    qTy),
                                                                                                                                                                call
                                                                                                                                                                  ("state.CP15",
                                                                                                                                                                   @{typ CP15},
                                                                                                                                                                   var("s",
                                                                                                                                                                       qTy),
                                                                                                                                                                   @{theory ARM_Monadic}))),
                                                                                                                                                          close
                                                                                                                                                            (var("v",
                                                                                                                                                                 @{typ CP15}),
                                                                                                                                                             mb(mu(call
                                                                                                                                                                     ("CP15.SCR",
                                                                                                                                                                      @{typ SCR},
                                                                                                                                                                      var("v",
                                                                                                                                                                          @{typ CP15}),
                                                                                                                                                                      @{theory ARM_Monadic}),
                                                                                                                                                                   qTy),
                                                                                                                                                                close
                                                                                                                                                                  (var("v",
                                                                                                                                                                       @{typ SCR}),
                                                                                                                                                                   mu(call
                                                                                                                                                                        ("SCR.AW",
                                                                                                                                                                         HOLogic.boolT,
                                                                                                                                                                         var("v",
                                                                                                                                                                             @{typ SCR}),
                                                                                                                                                                         prev_thy ),
                                                                                                                                                                      qTy)))))))))))))))),
                                                                                                                   close
                                                                                                                     (var_b"b",
                                                                                                                      ite(var_b"b",
                                                                                                                          mb(mr(close
                                                                                                                                  (var("s",
                                                                                                                                       qTy),
                                                                                                                                   call
                                                                                                                                     ("state.CPSR",
                                                                                                                                      @{typ PSR},
                                                                                                                                      var("s",
                                                                                                                                          qTy),
                                                                                                                                      prev_thy ))),
                                                                                                                             close
                                                                                                                               (var("v",
                                                                                                                                    @{typ PSR}),
                                                                                                                                mb(mb(mu(tp[var("v",
                                                                                                                                                @{typ PSR}),
                                                                                                                                            lt],
                                                                                                                                         qTy),
                                                                                                                                      close
                                                                                                                                        (var("v",
                                                                                                                                             @{typ
                                                                                                                                             "PSR \<times>
                                                                                                                                              bool"}),
                                                                                                                                         mu(rupd
                                                                                                                                              ("PSR.A",
                                                                                                                                               var("v",
                                                                                                                                                   @{typ
                                                                                                                                                   "PSR \<times>
                                                                                                                                                    bool"}),
                                                                                                                                               @{theory ARM_Monadic}),
                                                                                                                                            qTy))),
                                                                                                                                   close
                                                                                                                                     (var("v",
                                                                                                                                          @{typ PSR}),
                                                                                                                                      mw(close
                                                                                                                                           (var("s",
                                                                                                                                                qTy),
                                                                                                                                            rupd
                                                                                                                                              ("state.CPSR",
                                                                                                                                               tp[var("s",
                                                                                                                                                      qTy),
                                                                                                                                                  var("v",
                                                                                                                                                      @{typ PSR})],
                                                                                                                                               prev_thy ))))))),
                                                                                                                          mu(lu,
                                                                                                                             qTy)))),
                                                                                                                close
                                                                                                                  (var_a
                                                                                                                     HOLogic.unitT,
                                                                                                                   mb(mr(close
                                                                                                                           (var("s",
                                                                                                                                qTy),
                                                                                                                            call
                                                                                                                              ("state.CPSR",
                                                                                                                               @{typ PSR},
                                                                                                                               var("s",
                                                                                                                                   qTy),
                                                                                                                               prev_thy ))),
                                                                                                                      close
                                                                                                                        (var("v",
                                                                                                                             @{typ PSR}),
                                                                                                                         mb(mb(mb(mu(tp[var("v",
                                                                                                                                            @{typ PSR}),
                                                                                                                                        lw(0,
                                                                                                                                           8)],
                                                                                                                                     qTy),
                                                                                                                                  close
                                                                                                                                    (var("v",
                                                                                                                                         @{typ
                                                                                                                                         "PSR \<times>
                                                                                                                                          8 word"}),
                                                                                                                                     mu(rupd
                                                                                                                                          ("PSR.IT",
                                                                                                                                           var("v",
                                                                                                                                               @{typ
                                                                                                                                               "PSR \<times>
                                                                                                                                                8 word"}),
                                                                                                                                           @{theory ARM_Monadic}),
                                                                                                                                        qTy))),
                                                                                                                               close
                                                                                                                                 (var("v",
                                                                                                                                      @{typ PSR}),
                                                                                                                                  mw(close
                                                                                                                                       (var("s",
                                                                                                                                            qTy),
                                                                                                                                        rupd
                                                                                                                                          ("state.CPSR",
                                                                                                                                           tp[var("s",
                                                                                                                                                  qTy),
                                                                                                                                              var("v",
                                                                                                                                                  @{typ PSR})],
                                                                                                                                           prev_thy ))))),
                                                                                                                            close
                                                                                                                              (var_a
                                                                                                                                 HOLogic.unitT,
                                                                                                                               mb(mr(close
                                                                                                                                       (var("s",
                                                                                                                                            qTy),
                                                                                                                                        call
                                                                                                                                          ("state.CPSR",
                                                                                                                                           @{typ PSR},
                                                                                                                                           var("s",
                                                                                                                                               qTy),
                                                                                                                                           prev_thy ))),
                                                                                                                                  close
                                                                                                                                    (var("v",
                                                                                                                                         @{typ PSR}),
                                                                                                                                     mb(mb(mb(mu(tp[var("v",
                                                                                                                                                        @{typ PSR}),
                                                                                                                                                    lf],
                                                                                                                                                 qTy),
                                                                                                                                              close
                                                                                                                                                (var("v",
                                                                                                                                                     @{typ
                                                                                                                                                     "PSR \<times>
                                                                                                                                                      bool"}),
                                                                                                                                                 mu(rupd
                                                                                                                                                      ("PSR.J",
                                                                                                                                                       var("v",
                                                                                                                                                           @{typ
                                                                                                                                                           "PSR \<times>
                                                                                                                                                            bool"}),
                                                                                                                                                       @{theory ARM_Monadic}),
                                                                                                                                                    qTy))),
                                                                                                                                           close
                                                                                                                                             (var("v",
                                                                                                                                                  @{typ PSR}),
                                                                                                                                              mw(close
                                                                                                                                                   (var("s",
                                                                                                                                                        qTy),
                                                                                                                                                    rupd
                                                                                                                                                      ("state.CPSR",
                                                                                                                                                       tp[var("s",
                                                                                                                                                              qTy),
                                                                                                                                                          var("v",
                                                                                                                                                              @{typ PSR})],
                                                                                                                                                       prev_thy ))))),
                                                                                                                                        close
                                                                                                                                          (var_a
                                                                                                                                             HOLogic.unitT,
                                                                                                                                           mb(mr(close
                                                                                                                                                   (var("s",
                                                                                                                                                        qTy),
                                                                                                                                                    call
                                                                                                                                                      ("state.CPSR",
                                                                                                                                                       @{typ PSR},
                                                                                                                                                       var("s",
                                                                                                                                                           qTy),
                                                                                                                                                       prev_thy ))),
                                                                                                                                              close
                                                                                                                                                (var("v",
                                                                                                                                                     @{typ PSR}),
                                                                                                                                                 mb(mb(mb(mb(mr(close
                                                                                                                                                                  (var("s",
                                                                                                                                                                       qTy),
                                                                                                                                                                   call
                                                                                                                                                                     ("state.CP15",
                                                                                                                                                                      @{typ CP15},
                                                                                                                                                                      var("s",
                                                                                                                                                                          qTy),
                                                                                                                                                                      @{theory ARM_Monadic}))),
                                                                                                                                                             close
                                                                                                                                                               (var("v0",
                                                                                                                                                                    @{typ CP15}),
                                                                                                                                                                mb(mb(mu(call
                                                                                                                                                                           ("CP15.SCTLR",
                                                                                                                                                                            @{typ SCTLR},
                                                                                                                                                                            var("v0",
                                                                                                                                                                                @{typ CP15}),
                                                                                                                                                                            @{theory ARM_Monadic}),
                                                                                                                                                                         qTy),
                                                                                                                                                                      close
                                                                                                                                                                        (var("v",
                                                                                                                                                                             @{typ SCTLR}),
                                                                                                                                                                         mu(call
                                                                                                                                                                              ("SCTLR.TE",
                                                                                                                                                                               HOLogic.boolT,
                                                                                                                                                                               var("v",
                                                                                                                                                                                   @{typ SCTLR}),
                                                                                                                                                                               @{theory ARM_Monadic}),
                                                                                                                                                                            qTy))),
                                                                                                                                                                   close
                                                                                                                                                                     (var_b"v0",
                                                                                                                                                                      mu(tp[var("v",
                                                                                                                                                                                @{typ PSR}),
                                                                                                                                                                            var_b"v0"],
                                                                                                                                                                         qTy))))),
                                                                                                                                                          close
                                                                                                                                                            (var("v",
                                                                                                                                                                 @{typ
                                                                                                                                                                 "PSR \<times>
                                                                                                                                                                  bool"}),
                                                                                                                                                             mu(rupd
                                                                                                                                                                  ("PSR.T",
                                                                                                                                                                   var("v",
                                                                                                                                                                       @{typ
                                                                                                                                                                       "PSR \<times>
                                                                                                                                                                        bool"}),
                                                                                                                                                                   prev_thy ),
                                                                                                                                                                qTy))),
                                                                                                                                                       close
                                                                                                                                                         (var("v",
                                                                                                                                                              @{typ PSR}),
                                                                                                                                                          mw(close
                                                                                                                                                               (var("s",
                                                                                                                                                                    qTy),
                                                                                                                                                                rupd
                                                                                                                                                                  ("state.CPSR",
                                                                                                                                                                   tp[var("s",
                                                                                                                                                                          qTy),
                                                                                                                                                                      var("v",
                                                                                                                                                                          @{typ PSR})],
                                                                                                                                                                   prev_thy ))))),
                                                                                                                                                    close
                                                                                                                                                      (var_a
                                                                                                                                                         HOLogic.unitT,
                                                                                                                                                       mb(mr(close
                                                                                                                                                               (var("s",
                                                                                                                                                                    qTy),
                                                                                                                                                                call
                                                                                                                                                                  ("state.CPSR",
                                                                                                                                                                   @{typ PSR},
                                                                                                                                                                   var("s",
                                                                                                                                                                       qTy),
                                                                                                                                                                   prev_thy ))),
                                                                                                                                                          close
                                                                                                                                                            (var("v",
                                                                                                                                                                 @{typ PSR}),
                                                                                                                                                             mb(mb(mb(mb(mr(close
                                                                                                                                                                              (var("s",
                                                                                                                                                                                   qTy),
                                                                                                                                                                               call
                                                                                                                                                                                 ("state.CP15",
                                                                                                                                                                                  @{typ CP15},
                                                                                                                                                                                  var("s",
                                                                                                                                                                                      qTy),
                                                                                                                                                                                  @{theory ARM_Monadic}))),
                                                                                                                                                                         close
                                                                                                                                                                           (var("v0",
                                                                                                                                                                                @{typ CP15}),
                                                                                                                                                                            mb(mb(mu(call
                                                                                                                                                                                       ("CP15.SCTLR",
                                                                                                                                                                                        @{typ SCTLR},
                                                                                                                                                                                        var("v0",
                                                                                                                                                                                            @{typ CP15}),
                                                                                                                                                                                        @{theory ARM_Monadic}),
                                                                                                                                                                                     qTy),
                                                                                                                                                                                  close
                                                                                                                                                                                    (var("v",
                                                                                                                                                                                         @{typ SCTLR}),
                                                                                                                                                                                     mu(call
                                                                                                                                                                                          ("SCTLR.EE",
                                                                                                                                                                                           HOLogic.boolT,
                                                                                                                                                                                           var("v",
                                                                                                                                                                                               @{typ SCTLR}),
                                                                                                                                                                                           @{theory ARM_Monadic}),
                                                                                                                                                                                        qTy))),
                                                                                                                                                                               close
                                                                                                                                                                                 (var_b"v0",
                                                                                                                                                                                  mu(tp[var("v",
                                                                                                                                                                                            @{typ PSR}),
                                                                                                                                                                                        var_b"v0"],
                                                                                                                                                                                     qTy))))),
                                                                                                                                                                      close
                                                                                                                                                                        (var("v",
                                                                                                                                                                             @{typ
                                                                                                                                                                             "PSR \<times>
                                                                                                                                                                              bool"}),
                                                                                                                                                                         mu(rupd
                                                                                                                                                                              ("PSR.E",
                                                                                                                                                                               var("v",
                                                                                                                                                                                   @{typ
                                                                                                                                                                                   "PSR \<times>
                                                                                                                                                                                    bool"}),
                                                                                                                                                                               @{theory ARM_Monadic}),
                                                                                                                                                                            qTy))),
                                                                                                                                                                   close
                                                                                                                                                                     (var("v",
                                                                                                                                                                          @{typ PSR}),
                                                                                                                                                                      mw(close
                                                                                                                                                                           (var("s",
                                                                                                                                                                                qTy),
                                                                                                                                                                            rupd
                                                                                                                                                                              ("state.CPSR",
                                                                                                                                                                               tp[var("s",
                                                                                                                                                                                      qTy),
                                                                                                                                                                                  var("v",
                                                                                                                                                                                      @{typ PSR})],
                                                                                                                                                                               prev_thy ))))),
                                                                                                                                                                close
                                                                                                                                                                  (var_a
                                                                                                                                                                     HOLogic.unitT,
                                                                                                                                                                   mb(mr(close
                                                                                                                                                                           (var("s",
                                                                                                                                                                                qTy),
                                                                                                                                                                            call
                                                                                                                                                                              ("state.CP15",
                                                                                                                                                                               @{typ CP15},
                                                                                                                                                                               var("s",
                                                                                                                                                                                   qTy),
                                                                                                                                                                               @{theory ARM_Monadic}))),
                                                                                                                                                                      close
                                                                                                                                                                        (var("v",
                                                                                                                                                                             @{typ CP15}),
                                                                                                                                                                         mb(mb(mu(call
                                                                                                                                                                                    ("CP15.SCTLR",
                                                                                                                                                                                     @{typ SCTLR},
                                                                                                                                                                                     var("v",
                                                                                                                                                                                         @{typ CP15}),
                                                                                                                                                                                     @{theory ARM_Monadic}),
                                                                                                                                                                                  qTy),
                                                                                                                                                                               close
                                                                                                                                                                                 (var("v",
                                                                                                                                                                                      @{typ SCTLR}),
                                                                                                                                                                                  mu(call
                                                                                                                                                                                       ("SCTLR.VE",
                                                                                                                                                                                        HOLogic.boolT,
                                                                                                                                                                                        var("v",
                                                                                                                                                                                            @{typ SCTLR}),
                                                                                                                                                                                        prev_thy ),
                                                                                                                                                                                     qTy))),
                                                                                                                                                                            close
                                                                                                                                                                              (var_b"b",
                                                                                                                                                                               ite(var_b"b",
                                                                                                                                                                                   call
                                                                                                                                                                                     ("raise'exception",
                                                                                                                                                                                      @{typ
                                                                                                                                                                                      "'b state_scheme \<Rightarrow>
                                                                                                                                                                                       (unit \<times>
                                                                                                                                                                                        'b state_scheme)"},
                                                                                                                                                                                      call
                                                                                                                                                                                        ("exception.IMPLEMENTATION_DEFINED",
                                                                                                                                                                                         @{typ exception},
                                                                                                                                                                                         ls
                                                                                                                                                                                          "branch to an IRQ vector",
                                                                                                                                                                                         @{theory ARM_Monadic}),
                                                                                                                                                                                      @{theory ARM_Monadic}),
                                                                                                                                                                                   mb(call
                                                                                                                                                                                        ("ExcVectorBase",
                                                                                                                                                                                         @{typ
                                                                                                                                                                                         "'b state_scheme \<Rightarrow>
                                                                                                                                                                                          (32 word \<times>
                                                                                                                                                                                           'b state_scheme)"},
                                                                                                                                                                                         lu,
                                                                                                                                                                                         @{theory}),
                                                                                                                                                                                      close
                                                                                                                                                                                        (var_w("v",32),
                                                                                                                                                                                         mb(mu(bop(Add,
                                                                                                                                                                                                   var_w("v",32),
                                                                                                                                                                                                   var_w("vect_offset",32)),
                                                                                                                                                                                               qTy),
                                                                                                                                                                                            close
                                                                                                                                                                                              (var_w("v",32),
                                                                                                                                                                                               call
                                                                                                                                                                                                 ("BranchTo",
                                                                                                                                                                                                  @{typ
                                                                                                                                                                                                  "'b state_scheme \<Rightarrow>
                                                                                                                                                                                                   (unit \<times>
                                                                                                                                                                                                    'b state_scheme)"},
                                                                                                                                                                                                  var_w("v",32),
                                                                                                                                                                                                  @{theory ARM_Monadic}))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("TakeVirtualIRQException",
   close
     (var_a HOLogic.unitT,
      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
         close
           (var("v",@{typ PSR}),
            mb(mb(mu(call("PSR.T",HOLogic.boolT,var("v",@{typ PSR}),@{theory ARM_Monadic}),qTy),
                  close
                    (var_b"b",
                     ite(var_b"b",
                         const("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
                         mb(const
                              ("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
                            close(var_w("v",32),mu(bop(Sub,var_w("v",32),lw(4,32)),qTy)))))),
               close
                 (var_w("new_lr_value",32),
                  mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                     close
                       (var("new_spsr_value",@{typ PSR}),
                        mb(mr(close
                                (var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                           close
                             (var("v",@{typ PSR}),
                              mb(mb(mb(mu(tp[var("v",@{typ PSR}),lw(18,5)],qTy),
                                       close
                                         (var("v",@{typ "PSR \<times> 5 word"}),
                                          mu(rupd
                                               ("PSR.M",var("v",@{typ "PSR \<times> 5 word"}),
                                                prev_thy ),qTy))),
                                    close
                                      (var("v",@{typ PSR}),
                                       mw(close
                                            (var("s",qTy),
                                             rupd
                                               ("state.CPSR",tp[var("s",qTy),var("v",@{typ PSR})],
                                                prev_thy ))))),
                                 close
                                   (var_a HOLogic.unitT,
                                    mb(call
                                         ("write'SPSR",
                                          @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                          var("new_spsr_value",@{typ PSR}),@{theory ARM_Monadic}),
                                       close
                                         (var_a HOLogic.unitT,
                                          mb(call
                                               ("write'R",
                                                @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                tp[var_w("new_lr_value",32),lw(14,4)],@{theory ARM_Monadic}),
                                             close
                                               (var_a HOLogic.unitT,
                                                mb(mr(close
                                                        (var("s",qTy),
                                                         call
                                                           ("state.CPSR",@{typ PSR},var("s",qTy),
                                                            prev_thy ))),
                                                   close
                                                     (var("v",@{typ PSR}),
                                                      mb(mb(mb(mu(tp[var("v",@{typ PSR}),lt],qTy),
                                                               close
                                                                 (var("v",@{typ "PSR \<times> bool"}),
                                                                  mu(rupd
                                                                       ("PSR.I",
                                                                        var("v",
                                                                            @{typ
                                                                            "PSR \<times> bool"}),
                                                                        @{theory ARM_Monadic}),qTy))),
                                                            close
                                                              (var("v",@{typ PSR}),
                                                               mw(close
                                                                    (var("s",qTy),
                                                                     rupd
                                                                       ("state.CPSR",
                                                                        tp[var("s",qTy),
                                                                           var("v",@{typ PSR})],
                                                                        prev_thy ))))),
                                                         close
                                                           (var_a HOLogic.unitT,
                                                            mb(mr(close
                                                                    (var("s",qTy),
                                                                     call
                                                                       ("state.CPSR",@{typ PSR},
                                                                        var("s",qTy),prev_thy ))),
                                                               close
                                                                 (var("v",@{typ PSR}),
                                                                  mb(mb(mb(mu(tp[var("v",@{typ PSR}),
                                                                                 lt],qTy),
                                                                           close
                                                                             (var("v",
                                                                                  @{typ
                                                                                  "PSR \<times> bool"}),
                                                                              mu(rupd
                                                                                   ("PSR.A",
                                                                                    var("v",
                                                                                        @{typ
                                                                                        "PSR \<times>
                                                                                         bool"}),
                                                                                    @{theory ARM_Monadic}),qTy))),
                                                                        close
                                                                          (var("v",@{typ PSR}),
                                                                           mw(close
                                                                                (var("s",qTy),
                                                                                 rupd
                                                                                   ("state.CPSR",
                                                                                    tp[var("s",qTy),
                                                                                       var("v",
                                                                                           @{typ PSR})],
                                                                                    prev_thy ))))),
                                                                     close
                                                                       (var_a HOLogic.unitT,
                                                                        mb(mr(close
                                                                                (var("s",qTy),
                                                                                 call
                                                                                   ("state.CPSR",
                                                                                    @{typ PSR},
                                                                                    var("s",qTy),
                                                                                    prev_thy ))),
                                                                           close
                                                                             (var("v",@{typ PSR}),
                                                                              mb(mb(mb(mu(tp[var("v",
                                                                                                 @{typ PSR}),
                                                                                             lw(0,8)],
                                                                                          qTy),
                                                                                       close
                                                                                         (var("v",
                                                                                              @{typ
                                                                                              "PSR \<times>
                                                                                               8 word"}),
                                                                                          mu(rupd
                                                                                               ("PSR.IT",
                                                                                                var("v",
                                                                                                    @{typ
                                                                                                    "PSR \<times>
                                                                                                     8 word"}),
                                                                                                @{theory ARM_Monadic}),
                                                                                             qTy))),
                                                                                    close
                                                                                      (var("v",
                                                                                           @{typ PSR}),
                                                                                       mw(close
                                                                                            (var("s",
                                                                                                 qTy),
                                                                                             rupd
                                                                                               ("state.CPSR",
                                                                                                tp[var("s",
                                                                                                       qTy),
                                                                                                   var("v",
                                                                                                       @{typ PSR})],
                                                                                                prev_thy ))))),
                                                                                 close
                                                                                   (var_a
                                                                                      HOLogic.unitT,
                                                                                    mb(mr(close
                                                                                            (var("s",
                                                                                                 qTy),
                                                                                             call
                                                                                               ("state.CPSR",
                                                                                                @{typ PSR},
                                                                                                var("s",
                                                                                                    qTy),
                                                                                                prev_thy ))),
                                                                                       close
                                                                                         (var("v",
                                                                                              @{typ PSR}),
                                                                                          mb(mb(mb(mu(tp[var("v",
                                                                                                             @{typ PSR}),
                                                                                                         lf],
                                                                                                      qTy),
                                                                                                   close
                                                                                                     (var("v",
                                                                                                          @{typ
                                                                                                          "PSR \<times>
                                                                                                           bool"}),
                                                                                                      mu(rupd
                                                                                                           ("PSR.J",
                                                                                                            var("v",
                                                                                                                @{typ
                                                                                                                "PSR \<times>
                                                                                                                 bool"}),
                                                                                                            @{theory ARM_Monadic}),
                                                                                                         qTy))),
                                                                                                close
                                                                                                  (var("v",
                                                                                                       @{typ PSR}),
                                                                                                   mw(close
                                                                                                        (var("s",
                                                                                                             qTy),
                                                                                                         rupd
                                                                                                           ("state.CPSR",
                                                                                                            tp[var("s",
                                                                                                                   qTy),
                                                                                                               var("v",
                                                                                                                   @{typ PSR})],
                                                                                                            prev_thy ))))),
                                                                                             close
                                                                                               (var_a
                                                                                                  HOLogic.unitT,
                                                                                                mb(mr(close
                                                                                                        (var("s",
                                                                                                             qTy),
                                                                                                         call
                                                                                                           ("state.CPSR",
                                                                                                            @{typ PSR},
                                                                                                            var("s",
                                                                                                                qTy),
                                                                                                            prev_thy ))),
                                                                                                   close
                                                                                                     (var("v",
                                                                                                          @{typ PSR}),
                                                                                                      mb(mb(mb(mb(mr(close
                                                                                                                       (var("s",
                                                                                                                            qTy),
                                                                                                                        call
                                                                                                                          ("state.CP15",
                                                                                                                           @{typ CP15},
                                                                                                                           var("s",
                                                                                                                               qTy),
                                                                                                                           @{theory ARM_Monadic}))),
                                                                                                                  close
                                                                                                                    (var("v0",
                                                                                                                         @{typ CP15}),
                                                                                                                     mb(mb(mu(call
                                                                                                                                ("CP15.SCTLR",
                                                                                                                                 @{typ SCTLR},
                                                                                                                                 var("v0",
                                                                                                                                     @{typ CP15}),
                                                                                                                                 @{theory ARM_Monadic}),
                                                                                                                              qTy),
                                                                                                                           close
                                                                                                                             (var("v",
                                                                                                                                  @{typ SCTLR}),
                                                                                                                              mu(call
                                                                                                                                   ("SCTLR.TE",
                                                                                                                                    HOLogic.boolT,
                                                                                                                                    var("v",
                                                                                                                                        @{typ SCTLR}),
                                                                                                                                    @{theory ARM_Monadic}),
                                                                                                                                 qTy))),
                                                                                                                        close
                                                                                                                          (var_b"v0",
                                                                                                                           mu(tp[var("v",
                                                                                                                                     @{typ PSR}),
                                                                                                                                 var_b"v0"],
                                                                                                                              qTy))))),
                                                                                                               close
                                                                                                                 (var("v",
                                                                                                                      @{typ
                                                                                                                      "PSR \<times>
                                                                                                                       bool"}),
                                                                                                                  mu(rupd
                                                                                                                       ("PSR.T",
                                                                                                                        var("v",
                                                                                                                            @{typ
                                                                                                                            "PSR \<times>
                                                                                                                             bool"}),
                                                                                                                        prev_thy ),
                                                                                                                     qTy))),
                                                                                                            close
                                                                                                              (var("v",
                                                                                                                   @{typ PSR}),
                                                                                                               mw(close
                                                                                                                    (var("s",
                                                                                                                         qTy),
                                                                                                                     rupd
                                                                                                                       ("state.CPSR",
                                                                                                                        tp[var("s",
                                                                                                                               qTy),
                                                                                                                           var("v",
                                                                                                                               @{typ PSR})],
                                                                                                                        prev_thy ))))),
                                                                                                         close
                                                                                                           (var_a
                                                                                                              HOLogic.unitT,
                                                                                                            mb(mr(close
                                                                                                                    (var("s",
                                                                                                                         qTy),
                                                                                                                     call
                                                                                                                       ("state.CPSR",
                                                                                                                        @{typ PSR},
                                                                                                                        var("s",
                                                                                                                            qTy),
                                                                                                                        prev_thy ))),
                                                                                                               close
                                                                                                                 (var("v",
                                                                                                                      @{typ PSR}),
                                                                                                                  mb(mb(mb(mb(mr(close
                                                                                                                                   (var("s",
                                                                                                                                        qTy),
                                                                                                                                    call
                                                                                                                                      ("state.CP15",
                                                                                                                                       @{typ CP15},
                                                                                                                                       var("s",
                                                                                                                                           qTy),
                                                                                                                                       @{theory ARM_Monadic}))),
                                                                                                                              close
                                                                                                                                (var("v0",
                                                                                                                                     @{typ CP15}),
                                                                                                                                 mb(mb(mu(call
                                                                                                                                            ("CP15.SCTLR",
                                                                                                                                             @{typ SCTLR},
                                                                                                                                             var("v0",
                                                                                                                                                 @{typ CP15}),
                                                                                                                                             @{theory ARM_Monadic}),
                                                                                                                                          qTy),
                                                                                                                                       close
                                                                                                                                         (var("v",
                                                                                                                                              @{typ SCTLR}),
                                                                                                                                          mu(call
                                                                                                                                               ("SCTLR.EE",
                                                                                                                                                HOLogic.boolT,
                                                                                                                                                var("v",
                                                                                                                                                    @{typ SCTLR}),
                                                                                                                                                @{theory ARM_Monadic}),
                                                                                                                                             qTy))),
                                                                                                                                    close
                                                                                                                                      (var_b"v0",
                                                                                                                                       mu(tp[var("v",
                                                                                                                                                 @{typ PSR}),
                                                                                                                                             var_b"v0"],
                                                                                                                                          qTy))))),
                                                                                                                           close
                                                                                                                             (var("v",
                                                                                                                                  @{typ
                                                                                                                                  "PSR \<times>
                                                                                                                                   bool"}),
                                                                                                                              mu(rupd
                                                                                                                                   ("PSR.E",
                                                                                                                                    var("v",
                                                                                                                                        @{typ
                                                                                                                                        "PSR \<times>
                                                                                                                                         bool"}),
                                                                                                                                    @{theory ARM_Monadic}),
                                                                                                                                 qTy))),
                                                                                                                        close
                                                                                                                          (var("v",
                                                                                                                               @{typ PSR}),
                                                                                                                           mw(close
                                                                                                                                (var("s",
                                                                                                                                     qTy),
                                                                                                                                 rupd
                                                                                                                                   ("state.CPSR",
                                                                                                                                    tp[var("s",
                                                                                                                                           qTy),
                                                                                                                                       var("v",
                                                                                                                                           @{typ PSR})],
                                                                                                                                    prev_thy ))))),
                                                                                                                     close
                                                                                                                       (var_a
                                                                                                                          HOLogic.unitT,
                                                                                                                        mb(mr(close
                                                                                                                                (var("s",
                                                                                                                                     qTy),
                                                                                                                                 call
                                                                                                                                   ("state.CP15",
                                                                                                                                    @{typ CP15},
                                                                                                                                    var("s",
                                                                                                                                        qTy),
                                                                                                                                    @{theory ARM_Monadic}))),
                                                                                                                           close
                                                                                                                             (var("v",
                                                                                                                                  @{typ CP15}),
                                                                                                                              mb(mb(mu(call
                                                                                                                                         ("CP15.SCTLR",
                                                                                                                                          @{typ SCTLR},
                                                                                                                                          var("v",
                                                                                                                                              @{typ CP15}),
                                                                                                                                          @{theory ARM_Monadic}),
                                                                                                                                       qTy),
                                                                                                                                    close
                                                                                                                                      (var("v",
                                                                                                                                           @{typ SCTLR}),
                                                                                                                                       mu(call
                                                                                                                                            ("SCTLR.VE",
                                                                                                                                             HOLogic.boolT,
                                                                                                                                             var("v",
                                                                                                                                                 @{typ SCTLR}),
                                                                                                                                             prev_thy ),
                                                                                                                                          qTy))),
                                                                                                                                 close
                                                                                                                                   (var_b"b",
                                                                                                                                    ite(var_b"b",
                                                                                                                                        call
                                                                                                                                          ("raise'exception",
                                                                                                                                           @{typ
                                                                                                                                           "'b state_scheme \<Rightarrow>
                                                                                                                                            (unit \<times>
                                                                                                                                             'b state_scheme)"},
                                                                                                                                           call
                                                                                                                                             ("exception.IMPLEMENTATION_DEFINED",
                                                                                                                                              @{typ exception},
                                                                                                                                              ls
                                                                                                                                               "branch to an IRQ vector",
                                                                                                                                              @{theory ARM_Monadic}),
                                                                                                                                           @{theory ARM_Monadic}),
                                                                                                                                        mb(call
                                                                                                                                             ("ExcVectorBase",
                                                                                                                                              @{typ
                                                                                                                                              "'b state_scheme \<Rightarrow>
                                                                                                                                               (32 word \<times>
                                                                                                                                                'b state_scheme)"},
                                                                                                                                              lu,
                                                                                                                                              @{theory }),
                                                                                                                                           close
                                                                                                                                             (var_w("v",32),
                                                                                                                                              mb(mu(bop(Add,
                                                                                                                                                        var_w("v",32),
                                                                                                                                                        lw(24,
                                                                                                                                                           32)),
                                                                                                                                                    qTy),
                                                                                                                                                 close
                                                                                                                                                   (var_w("v",32),
                                                                                                                                                    call
                                                                                                                                                      ("BranchTo",
                                                                                                                                                       @{typ
                                                                                                                                                       "'b state_scheme \<Rightarrow>
                                                                                                                                                        (unit \<times>
                                                                                                                                                         'b state_scheme)"},
                                                                                                                                                       var_w("v",32),
                                                                                                                                                       @{theory ARM_Monadic}))))))))))))))))))))))))))))))))))))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("TakePhysicalFIQException",
   close
     (var_a HOLogic.unitT,
      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
         close
           (var("v",@{typ PSR}),
            mb(mb(mu(call("PSR.T",HOLogic.boolT,var("v",@{typ PSR}),@{theory ARM_Monadic}),qTy),
                  close
                    (var_b"b",
                     ite(var_b"b",
                         const("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
                         mb(const
                              ("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
                            close(var_w("v",32),mu(bop(Sub,var_w("v",32),lw(4,32)),qTy)))))),
               close
                 (var_w("new_lr_value",32),
                  mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                     close
                       (var("new_spsr_value",@{typ PSR}),
                        let'
                          (var_w("vect_offset",32),lw(28,32),
                           mb(call
                                ("HaveSecurityExt",
                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic}),
                              close
                                (var_b"v",
                                 mb(ite(var_b"v",
                                        mb(mr(close
                                                (var("s",qTy),
                                                 call
                                                   ("state.CP15",@{typ CP15},var("s",qTy),@{theory ARM_Monadic}))),
                                           close
                                             (var("v",@{typ CP15}),
                                              mb(mu(call
                                                      ("CP15.SCR",@{typ SCR},var("v",@{typ CP15}),
                                                       @{theory ARM_Monadic}),qTy),
                                                 close
                                                   (var("v",@{typ SCR}),
                                                    mu(call
                                                         ("SCR.FIQ",HOLogic.boolT,
                                                          var("v",@{typ SCR}),prev_thy ),qTy))))),
                                        mu(lf,qTy)),
                                    close
                                      (var_b"route_to_monitor",
                                       mb(call
                                            ("HaveVirtExt",
                                             @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                             @{theory ARM_Monadic}),
                                          close
                                            (var_b"v",
                                             mb(mb(ite(var_b"v",
                                                       mb(call
                                                            ("HaveSecurityExt",
                                                             @{typ
                                                             "'b state_scheme \<Rightarrow>
                                                              (bool \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic}),
                                                          close
                                                            (var_b"b",
                                                             ite(var_b"b",
                                                                 mb(mr(close
                                                                         (var("s",qTy),
                                                                          call
                                                                            ("state.CP15",
                                                                             @{typ CP15},
                                                                             var("s",qTy),@{theory ARM_Monadic}))),
                                                                    close
                                                                      (var("v",@{typ CP15}),
                                                                       mb(mb(mb(mu(call
                                                                                     ("CP15.SCR",
                                                                                      @{typ SCR},
                                                                                      var("v",
                                                                                          @{typ CP15}),
                                                                                      @{theory ARM_Monadic}),qTy),
                                                                                close
                                                                                  (var("v",
                                                                                       @{typ SCR}),
                                                                                   mu(call
                                                                                        ("SCR.FIQ",
                                                                                         HOLogic.boolT,
                                                                                         var("v",
                                                                                             @{typ SCR}),
                                                                                         prev_thy ),
                                                                                      qTy))),
                                                                             close
                                                                               (var_b"v",
                                                                                mu(mop(Not,var_b"v"),
                                                                                   qTy))),
                                                                          close
                                                                            (var_b"b",
                                                                             ite(var_b"b",
                                                                                 mb(mr(close
                                                                                         (var("s",
                                                                                              qTy),
                                                                                          call
                                                                                            ("state.CP15",
                                                                                             @{typ CP15},
                                                                                             var("s",
                                                                                                 qTy),
                                                                                             @{theory ARM_Monadic}))),
                                                                                    close
                                                                                      (var("v",
                                                                                           @{typ CP15}),
                                                                                       mb(mb(mu(call
                                                                                                  ("CP15.HCR",
                                                                                                   @{typ HCR},
                                                                                                   var("v",
                                                                                                       @{typ CP15}),
                                                                                                   prev_thy ),
                                                                                                qTy),
                                                                                             close
                                                                                               (var("v",
                                                                                                    @{typ HCR}),
                                                                                                mu(call
                                                                                                     ("HCR.FMO",
                                                                                                      HOLogic.boolT,
                                                                                                      var("v",
                                                                                                          @{typ HCR}),
                                                                                                      prev_thy ),
                                                                                                   qTy))),
                                                                                          close
                                                                                            (var_b"b",
                                                                                             ite(var_b"b",
                                                                                                 mb(call
                                                                                                      ("IsSecure",
                                                                                                       @{typ
                                                                                                       "'b state_scheme \<Rightarrow>
                                                                                                        (bool \<times>
                                                                                                         'b state_scheme)"},
                                                                                                       lu,
                                                                                                       prev_thy ),
                                                                                                    close
                                                                                                      (var_b"v",
                                                                                                       mu(mop(Not,
                                                                                                              var_b"v"),
                                                                                                          qTy))),
                                                                                                 mu(lf,
                                                                                                    qTy)))))),
                                                                                 mu(lf,qTy)))))),
                                                                 mu(lf,qTy)))),mu(lf,qTy)),
                                                   close
                                                     (var_b"b",
                                                      ite(var_b"b",mu(lt,qTy),
                                                          mb(mr(close
                                                                  (var("s",qTy),
                                                                   call
                                                                     ("state.CPSR",@{typ PSR},
                                                                      var("s",qTy),prev_thy ))),
                                                             close
                                                               (var("v",@{typ PSR}),
                                                                mb(mu(call
                                                                        ("PSR.M",
                                                                         (Word_Lib.mk_wordT 5),
                                                                         var("v",@{typ PSR}),
                                                                         prev_thy ),qTy),
                                                                   close
                                                                     (var_w("v",5),
                                                                      mu(eq(var_w("v",5),lw(26,5)),
                                                                         qTy)))))))),
                                                close
                                                  (var_b"route_to_hyp",
                                                   itb([(var_b"route_to_monitor",
                                                         mb(mr(close
                                                                 (var("s",qTy),
                                                                  call
                                                                    ("state.CPSR",@{typ PSR},
                                                                     var("s",qTy),prev_thy ))),
                                                            close
                                                              (var("v",@{typ PSR}),
                                                               mb(mb(mb(mu(call
                                                                             ("PSR.M",
                                                                              (Word_Lib.mk_wordT 5),
                                                                              var("v",@{typ PSR}),
                                                                              prev_thy ),qTy),
                                                                        close
                                                                          (var_w("v",5),
                                                                           mu(eq(var_w("v",5),
                                                                                 lw(22,5)),qTy))),
                                                                     close
                                                                       (var_b"b",
                                                                        ite(var_b"b",
                                                                            mb(mr(close
                                                                                    (var("s",qTy),
                                                                                     call
                                                                                       ("state.CP15",
                                                                                        @{typ CP15},
                                                                                        var("s",qTy),
                                                                                        @{theory ARM_Monadic}))),
                                                                               close
                                                                                 (var("v",
                                                                                      @{typ CP15}),
                                                                                  mb(mu(call
                                                                                          ("CP15.SCR",
                                                                                           @{typ SCR},
                                                                                           var("v",
                                                                                               @{typ CP15}),
                                                                                           @{theory ARM_Monadic}),
                                                                                        qTy),
                                                                                     close
                                                                                       (var("x0",
                                                                                            @{typ SCR}),
                                                                                        mb(mr(close
                                                                                                (var("s",
                                                                                                     qTy),
                                                                                                 call
                                                                                                   ("state.CP15",
                                                                                                    @{typ CP15},
                                                                                                    var("s",
                                                                                                        qTy),
                                                                                                    @{theory ARM_Monadic}))),
                                                                                           close
                                                                                             (var("v",
                                                                                                  @{typ CP15}),
                                                                                              mb(mb(mu(tp[var("v",
                                                                                                              @{typ CP15}),
                                                                                                          rupd
                                                                                                            ("SCR.NS",
                                                                                                             tp[var("x0",
                                                                                                                    @{typ SCR}),
                                                                                                                lf],
                                                                                                             @{theory ARM_Monadic})],
                                                                                                       qTy),
                                                                                                    close
                                                                                                      (var("v",
                                                                                                           @{typ
                                                                                                           "CP15 \<times>
                                                                                                            SCR"}),
                                                                                                       mu(rupd
                                                                                                            ("CP15.SCR",
                                                                                                             var("v",
                                                                                                                 @{typ
                                                                                                                 "CP15 \<times>
                                                                                                                  SCR"}),
                                                                                                             @{theory ARM_Monadic}),
                                                                                                          qTy))),
                                                                                                 close
                                                                                                   (var("v",
                                                                                                        @{typ CP15}),
                                                                                                    mw(close
                                                                                                         (var("s",
                                                                                                              qTy),
                                                                                                          rupd
                                                                                                            ("state.CP15",
                                                                                                             tp[var("s",
                                                                                                                    qTy),
                                                                                                                var("v",
                                                                                                                    @{typ CP15})],
                                                                                                             @{theory ARM_Monadic}))))))))))),
                                                                            mu(lu,qTy)))),
                                                                  close
                                                                    (var_a HOLogic.unitT,
                                                                     call
                                                                       ("EnterMonitorMode",
                                                                        @{typ
                                                                        "'b state_scheme \<Rightarrow>
                                                                         (unit \<times> 'b state_scheme)"},
                                                                        tp[var("new_spsr_value",
                                                                               @{typ PSR}),
                                                                           var_w("new_lr_value",32),
                                                                           var_w("vect_offset",32)],
                                                                        @{theory })))))),
                                                        (var_b"route_to_hyp",
                                                         mb(mr(close
                                                                 (var("s",qTy),
                                                                  call
                                                                    ("state.CP15",@{typ CP15},
                                                                     var("s",qTy),@{theory ARM_Monadic}))),
                                                            close
                                                              (var("v",@{typ CP15}),
                                                               mb(mb(mb(mu(tp[var("v",@{typ CP15}),
                                                                              lx @{typ HSR}],qTy),
                                                                        close
                                                                          (var("v",
                                                                               @{typ
                                                                               "CP15 \<times> HSR"}),
                                                                           mu(rupd
                                                                                ("CP15.HSR",
                                                                                 var("v",
                                                                                     @{typ
                                                                                     "CP15 \<times>
                                                                                      HSR"}),
                                                                                 prev_thy ),qTy))),
                                                                     close
                                                                       (var("v",@{typ CP15}),
                                                                        mw(close
                                                                             (var("s",qTy),
                                                                              rupd
                                                                                ("state.CP15",
                                                                                 tp[var("s",qTy),
                                                                                    var("v",
                                                                                        @{typ CP15})],
                                                                                 @{theory ARM_Monadic}))))),
                                                                  close
                                                                    (var_a HOLogic.unitT,
                                                                     call
                                                                       ("EnterHypMode",
                                                                        @{typ
                                                                        "'b state_scheme \<Rightarrow>
                                                                         (unit \<times> 'b state_scheme)"},
                                                                        tp[var("new_spsr_value",
                                                                               @{typ PSR}),
                                                                           bop(Sub,
                                                                               var_w("new_lr_value",32),
                                                                               lw(4,32)),
                                                                           var_w("vect_offset",32)],
                                                                        @{theory}))))))],
                                                       mb(mr(close
                                                               (var("s",qTy),
                                                                call
                                                                  ("state.CPSR",@{typ PSR},
                                                                   var("s",qTy),prev_thy ))),
                                                          close
                                                            (var("v",@{typ PSR}),
                                                             mb(mb(mb(mu(call
                                                                           ("PSR.M",
                                                                            (Word_Lib.mk_wordT 5),
                                                                            var("v",@{typ PSR}),
                                                                            prev_thy ),qTy),
                                                                      close
                                                                        (var_w("v",5),
                                                                         mu(eq(var_w("v",5),lw(22,5)),
                                                                            qTy))),
                                                                   close
                                                                     (var_b"b",
                                                                      ite(var_b"b",
                                                                          mb(mr(close
                                                                                  (var("s",qTy),
                                                                                   call
                                                                                     ("state.CP15",
                                                                                      @{typ CP15},
                                                                                      var("s",qTy),
                                                                                      @{theory ARM_Monadic}))),
                                                                             close
                                                                               (var("v",@{typ CP15}),
                                                                                mb(mu(call
                                                                                        ("CP15.SCR",
                                                                                         @{typ SCR},
                                                                                         var("v",
                                                                                             @{typ CP15}),
                                                                                         @{theory ARM_Monadic}),
                                                                                      qTy),
                                                                                   close
                                                                                     (var("x0",
                                                                                          @{typ SCR}),
                                                                                      mb(mr(close
                                                                                              (var("s",
                                                                                                   qTy),
                                                                                               call
                                                                                                 ("state.CP15",
                                                                                                  @{typ CP15},
                                                                                                  var("s",
                                                                                                      qTy),
                                                                                                  @{theory ARM_Monadic}))),
                                                                                         close
                                                                                           (var("v",
                                                                                                @{typ CP15}),
                                                                                            mb(mb(mu(tp[var("v",
                                                                                                            @{typ CP15}),
                                                                                                        rupd
                                                                                                          ("SCR.NS",
                                                                                                           tp[var("x0",
                                                                                                                  @{typ SCR}),
                                                                                                              lf],
                                                                                                           @{theory ARM_Monadic})],
                                                                                                     qTy),
                                                                                                  close
                                                                                                    (var("v",
                                                                                                         @{typ
                                                                                                         "CP15 \<times>
                                                                                                          SCR"}),
                                                                                                     mu(rupd
                                                                                                          ("CP15.SCR",
                                                                                                           var("v",
                                                                                                               @{typ
                                                                                                               "CP15 \<times>
                                                                                                                SCR"}),
                                                                                                           @{theory ARM_Monadic}),
                                                                                                        qTy))),
                                                                                               close
                                                                                                 (var("v",
                                                                                                      @{typ CP15}),
                                                                                                  mw(close
                                                                                                       (var("s",
                                                                                                            qTy),
                                                                                                        rupd
                                                                                                          ("state.CP15",
                                                                                                           tp[var("s",
                                                                                                                  qTy),
                                                                                                              var("v",
                                                                                                                  @{typ CP15})],
                                                                                                           @{theory ARM_Monadic}))))))))))),
                                                                          mu(lu,qTy)))),
                                                                close
                                                                  (var_a HOLogic.unitT,
                                                                   mb(mr(close
                                                                           (var("s",qTy),
                                                                            call
                                                                              ("state.CPSR",
                                                                               @{typ PSR},
                                                                               var("s",qTy),
                                                                               prev_thy ))),
                                                                      close
                                                                        (var("v",@{typ PSR}),
                                                                         mb(mb(mb(mu(tp[var("v",
                                                                                            @{typ PSR}),
                                                                                        lw(17,5)],
                                                                                     qTy),
                                                                                  close
                                                                                    (var("v",
                                                                                         @{typ
                                                                                         "PSR \<times>
                                                                                          5 word"}),
                                                                                     mu(rupd
                                                                                          ("PSR.M",
                                                                                           var("v",
                                                                                               @{typ
                                                                                               "PSR \<times>
                                                                                                5 word"}),
                                                                                           prev_thy ),
                                                                                        qTy))),
                                                                               close
                                                                                 (var("v",@{typ PSR}),
                                                                                  mw(close
                                                                                       (var("s",qTy),
                                                                                        rupd
                                                                                          ("state.CPSR",
                                                                                           tp[var("s",
                                                                                                  qTy),
                                                                                              var("v",
                                                                                                  @{typ PSR})],
                                                                                           prev_thy ))))),
                                                                            close
                                                                              (var_a HOLogic.unitT,
                                                                               mb(call
                                                                                    ("write'SPSR",
                                                                                     @{typ
                                                                                     "'b state_scheme \<Rightarrow>
                                                                                      (unit \<times>
                                                                                       'b state_scheme)"},
                                                                                     var("new_spsr_value",
                                                                                         @{typ PSR}),
                                                                                     @{theory ARM_Monadic}),
                                                                                  close
                                                                                    (var_a
                                                                                       HOLogic.unitT,
                                                                                     mb(call
                                                                                          ("write'R",
                                                                                           @{typ
                                                                                           "'b state_scheme \<Rightarrow>
                                                                                            (unit \<times>
                                                                                             'b state_scheme)"},
                                                                                           tp[var_w("new_lr_value",32),
                                                                                              lw(14,
                                                                                                 4)],
                                                                                           @{theory ARM_Monadic}),
                                                                                        close
                                                                                          (var_a
                                                                                             HOLogic.unitT,
                                                                                           mb(mr(close
                                                                                                   (var("s",
                                                                                                        qTy),
                                                                                                    call
                                                                                                      ("state.CPSR",
                                                                                                       @{typ PSR},
                                                                                                       var("s",
                                                                                                           qTy),
                                                                                                       prev_thy ))),
                                                                                              close
                                                                                                (var("v",
                                                                                                     @{typ PSR}),
                                                                                                 mb(mb(mb(mu(tp[var("v",
                                                                                                                    @{typ PSR}),
                                                                                                                lt],
                                                                                                             qTy),
                                                                                                          close
                                                                                                            (var("v",
                                                                                                                 @{typ
                                                                                                                 "PSR \<times>
                                                                                                                  bool"}),
                                                                                                             mu(rupd
                                                                                                                  ("PSR.I",
                                                                                                                   var("v",
                                                                                                                       @{typ
                                                                                                                       "PSR \<times>
                                                                                                                        bool"}),
                                                                                                                   @{theory ARM_Monadic}),
                                                                                                                qTy))),
                                                                                                       close
                                                                                                         (var("v",
                                                                                                              @{typ PSR}),
                                                                                                          mw(close
                                                                                                               (var("s",
                                                                                                                    qTy),
                                                                                                                rupd
                                                                                                                  ("state.CPSR",
                                                                                                                   tp[var("s",
                                                                                                                          qTy),
                                                                                                                      var("v",
                                                                                                                          @{typ PSR})],
                                                                                                                   prev_thy ))))),
                                                                                                    close
                                                                                                      (var_a
                                                                                                         HOLogic.unitT,
                                                                                                       mb(call
                                                                                                            ("HaveSecurityExt",
                                                                                                             @{typ
                                                                                                             "'b state_scheme \<Rightarrow>
                                                                                                              (bool \<times>
                                                                                                               'b state_scheme)"},
                                                                                                             lu,
                                                                                                             @{theory ARM_Monadic}),
                                                                                                          close
                                                                                                            (var_b"v",
                                                                                                             mb(mb(mb(mu(mop(Not,
                                                                                                                             var_b"v"),
                                                                                                                         qTy),
                                                                                                                      close
                                                                                                                        (var_b"b",
                                                                                                                         ite(var_b"b",
                                                                                                                             mu(lt,
                                                                                                                                qTy),
                                                                                                                             mb(call
                                                                                                                                  ("HaveVirtExt",
                                                                                                                                   @{typ
                                                                                                                                   "'b state_scheme \<Rightarrow>
                                                                                                                                    (bool \<times>
                                                                                                                                     'b state_scheme)"},
                                                                                                                                   lu,
                                                                                                                                   prev_thy ),
                                                                                                                                close
                                                                                                                                  (var_b"b",
                                                                                                                                   ite(var_b"b",
                                                                                                                                       mu(lt,
                                                                                                                                          qTy),
                                                                                                                                       mb(mr(close
                                                                                                                                               (var("s",
                                                                                                                                                    qTy),
                                                                                                                                                call
                                                                                                                                                  ("state.CP15",
                                                                                                                                                   @{typ CP15},
                                                                                                                                                   var("s",
                                                                                                                                                       qTy),
                                                                                                                                                   @{theory ARM_Monadic}))),
                                                                                                                                          close
                                                                                                                                            (var("v",
                                                                                                                                                 @{typ CP15}),
                                                                                                                                             mb(mb(mb(mu(call
                                                                                                                                                           ("CP15.SCR",
                                                                                                                                                            @{typ SCR},
                                                                                                                                                            var("v",
                                                                                                                                                                @{typ CP15}),
                                                                                                                                                            @{theory ARM_Monadic}),
                                                                                                                                                         qTy),
                                                                                                                                                      close
                                                                                                                                                        (var("v",
                                                                                                                                                             @{typ SCR}),
                                                                                                                                                         mu(call
                                                                                                                                                              ("SCR.NS",
                                                                                                                                                               HOLogic.boolT,
                                                                                                                                                               var("v",
                                                                                                                                                                   @{typ SCR}),
                                                                                                                                                               @{theory ARM_Monadic}),
                                                                                                                                                            qTy))),
                                                                                                                                                   close
                                                                                                                                                     (var_b"v",
                                                                                                                                                      mu(mop(Not,
                                                                                                                                                             var_b"v"),
                                                                                                                                                         qTy))),
                                                                                                                                                close
                                                                                                                                                  (var_b"b",
                                                                                                                                                   ite(var_b"b",
                                                                                                                                                       mu(lt,
                                                                                                                                                          qTy),
                                                                                                                                                       mb(mr(close
                                                                                                                                                               (var("s",
                                                                                                                                                                    qTy),
                                                                                                                                                                call
                                                                                                                                                                  ("state.CP15",
                                                                                                                                                                   @{typ CP15},
                                                                                                                                                                   var("s",
                                                                                                                                                                       qTy),
                                                                                                                                                                   @{theory ARM_Monadic}))),
                                                                                                                                                          close
                                                                                                                                                            (var("v",
                                                                                                                                                                 @{typ CP15}),
                                                                                                                                                             mb(mu(call
                                                                                                                                                                     ("CP15.SCR",
                                                                                                                                                                      @{typ SCR},
                                                                                                                                                                      var("v",
                                                                                                                                                                          @{typ CP15}),
                                                                                                                                                                      @{theory ARM_Monadic}),
                                                                                                                                                                   qTy),
                                                                                                                                                                close
                                                                                                                                                                  (var("v",
                                                                                                                                                                       @{typ SCR}),
                                                                                                                                                                   mu(call
                                                                                                                                                                        ("SCR.FW",
                                                                                                                                                                         HOLogic.boolT,
                                                                                                                                                                         var("v",
                                                                                                                                                                             @{typ SCR}),
                                                                                                                                                                         prev_thy ),
                                                                                                                                                                      qTy)))))))))))))))),
                                                                                                                   close
                                                                                                                     (var_b"b",
                                                                                                                      ite(var_b"b",
                                                                                                                          mb(mr(close
                                                                                                                                  (var("s",
                                                                                                                                       qTy),
                                                                                                                                   call
                                                                                                                                     ("state.CPSR",
                                                                                                                                      @{typ PSR},
                                                                                                                                      var("s",
                                                                                                                                          qTy),
                                                                                                                                      prev_thy ))),
                                                                                                                             close
                                                                                                                               (var("v",
                                                                                                                                    @{typ PSR}),
                                                                                                                                mb(mb(mu(tp[var("v",
                                                                                                                                                @{typ PSR}),
                                                                                                                                            lt],
                                                                                                                                         qTy),
                                                                                                                                      close
                                                                                                                                        (var("v",
                                                                                                                                             @{typ
                                                                                                                                             "PSR \<times>
                                                                                                                                              bool"}),
                                                                                                                                         mu(rupd
                                                                                                                                              ("PSR.F",
                                                                                                                                               var("v",
                                                                                                                                                   @{typ
                                                                                                                                                   "PSR \<times>
                                                                                                                                                    bool"}),
                                                                                                                                               @{theory ARM_Monadic}),
                                                                                                                                            qTy))),
                                                                                                                                   close
                                                                                                                                     (var("v",
                                                                                                                                          @{typ PSR}),
                                                                                                                                      mw(close
                                                                                                                                           (var("s",
                                                                                                                                                qTy),
                                                                                                                                            rupd
                                                                                                                                              ("state.CPSR",
                                                                                                                                               tp[var("s",
                                                                                                                                                      qTy),
                                                                                                                                                  var("v",
                                                                                                                                                      @{typ PSR})],
                                                                                                                                               prev_thy ))))))),
                                                                                                                          mu(lu,
                                                                                                                             qTy)))),
                                                                                                                close
                                                                                                                  (var_a
                                                                                                                     HOLogic.unitT,
                                                                                                                   mb(call
                                                                                                                        ("HaveSecurityExt",
                                                                                                                         @{typ
                                                                                                                         "'b state_scheme \<Rightarrow>
                                                                                                                          (bool \<times>
                                                                                                                           'b state_scheme)"},
                                                                                                                         lu,
                                                                                                                         @{theory ARM_Monadic}),
                                                                                                                      close
                                                                                                                        (var_b"v",
                                                                                                                         mb(mb(mb(mu(mop(Not,
                                                                                                                                         var_b"v"),
                                                                                                                                     qTy),
                                                                                                                                  close
                                                                                                                                    (var_b"b",
                                                                                                                                     ite(var_b"b",
                                                                                                                                         mu(lt,
                                                                                                                                            qTy),
                                                                                                                                         mb(call
                                                                                                                                              ("HaveVirtExt",
                                                                                                                                               @{typ
                                                                                                                                               "'b state_scheme \<Rightarrow>
                                                                                                                                                (bool \<times>
                                                                                                                                                 'b state_scheme)"},
                                                                                                                                               lu,
                                                                                                                                               prev_thy ),
                                                                                                                                            close
                                                                                                                                              (var_b"b",
                                                                                                                                               ite(var_b"b",
                                                                                                                                                   mu(lt,
                                                                                                                                                      qTy),
                                                                                                                                                   mb(mr(close
                                                                                                                                                           (var("s",
                                                                                                                                                                qTy),
                                                                                                                                                            call
                                                                                                                                                              ("state.CP15",
                                                                                                                                                               @{typ CP15},
                                                                                                                                                               var("s",
                                                                                                                                                                   qTy),
                                                                                                                                                               @{theory ARM_Monadic}))),
                                                                                                                                                      close
                                                                                                                                                        (var("v",
                                                                                                                                                             @{typ CP15}),
                                                                                                                                                         mb(mb(mb(mu(call
                                                                                                                                                                       ("CP15.SCR",
                                                                                                                                                                        @{typ SCR},
                                                                                                                                                                        var("v",
                                                                                                                                                                            @{typ CP15}),
                                                                                                                                                                        @{theory ARM_Monadic}),
                                                                                                                                                                     qTy),
                                                                                                                                                                  close
                                                                                                                                                                    (var("v",
                                                                                                                                                                         @{typ SCR}),
                                                                                                                                                                     mu(call
                                                                                                                                                                          ("SCR.NS",
                                                                                                                                                                           HOLogic.boolT,
                                                                                                                                                                           var("v",
                                                                                                                                                                               @{typ SCR}),
                                                                                                                                                                           @{theory ARM_Monadic}),
                                                                                                                                                                        qTy))),
                                                                                                                                                               close
                                                                                                                                                                 (var_b"v",
                                                                                                                                                                  mu(mop(Not,
                                                                                                                                                                         var_b"v"),
                                                                                                                                                                     qTy))),
                                                                                                                                                            close
                                                                                                                                                              (var_b"b",
                                                                                                                                                               ite(var_b"b",
                                                                                                                                                                   mu(lt,
                                                                                                                                                                      qTy),
                                                                                                                                                                   mb(mr(close
                                                                                                                                                                           (var("s",
                                                                                                                                                                                qTy),
                                                                                                                                                                            call
                                                                                                                                                                              ("state.CP15",
                                                                                                                                                                               @{typ CP15},
                                                                                                                                                                               var("s",
                                                                                                                                                                                   qTy),
                                                                                                                                                                               @{theory ARM_Monadic}))),
                                                                                                                                                                      close
                                                                                                                                                                        (var("v",
                                                                                                                                                                             @{typ CP15}),
                                                                                                                                                                         mb(mu(call
                                                                                                                                                                                 ("CP15.SCR",
                                                                                                                                                                                  @{typ SCR},
                                                                                                                                                                                  var("v",
                                                                                                                                                                                      @{typ CP15}),
                                                                                                                                                                                  @{theory ARM_Monadic}),
                                                                                                                                                                               qTy),
                                                                                                                                                                            close
                                                                                                                                                                              (var("v",
                                                                                                                                                                                   @{typ SCR}),
                                                                                                                                                                               mu(call
                                                                                                                                                                                    ("SCR.AW",
                                                                                                                                                                                     HOLogic.boolT,
                                                                                                                                                                                     var("v",
                                                                                                                                                                                         @{typ SCR}),
                                                                                                                                                                                     prev_thy ),
                                                                                                                                                                                  qTy)))))))))))))))),
                                                                                                                               close
                                                                                                                                 (var_b"b",
                                                                                                                                  ite(var_b"b",
                                                                                                                                      mb(mr(close
                                                                                                                                              (var("s",
                                                                                                                                                   qTy),
                                                                                                                                               call
                                                                                                                                                 ("state.CPSR",
                                                                                                                                                  @{typ PSR},
                                                                                                                                                  var("s",
                                                                                                                                                      qTy),
                                                                                                                                                  prev_thy ))),
                                                                                                                                         close
                                                                                                                                           (var("v",
                                                                                                                                                @{typ PSR}),
                                                                                                                                            mb(mb(mu(tp[var("v",
                                                                                                                                                            @{typ PSR}),
                                                                                                                                                        lt],
                                                                                                                                                     qTy),
                                                                                                                                                  close
                                                                                                                                                    (var("v",
                                                                                                                                                         @{typ
                                                                                                                                                         "PSR \<times>
                                                                                                                                                          bool"}),
                                                                                                                                                     mu(rupd
                                                                                                                                                          ("PSR.A",
                                                                                                                                                           var("v",
                                                                                                                                                               @{typ
                                                                                                                                                               "PSR \<times>
                                                                                                                                                                bool"}),
                                                                                                                                                           @{theory ARM_Monadic}),
                                                                                                                                                        qTy))),    
                                                                                                                                               close
                                                                                                                                                 (var("v",
                                                                                                                                                      @{typ PSR}),
                                                                                                                                                  mw(close
                                                                                                                                                       (var("s",
                                                                                                                                                            qTy),
                                                                                                                                                        rupd
                                                                                                                                                          ("state.CPSR",
                                                                                                                                                           tp[var("s",
                                                                                                                                                                  qTy),
                                                                                                                                                              var("v",
                                                                                                                                                                  @{typ PSR})],
                                                                                                                                                           prev_thy ))))))),
                                                                                                                                      mu(lu,
                                                                                                                                         qTy)))),
                                                                                                                            close
                                                                                                                              (var_a
                                                                                                                                 HOLogic.unitT,
                                                                                                                               mb(mr(close
                                                                                                                                       (var("s",
                                                                                                                                            qTy),
                                                                                                                                        call
                                                                                                                                          ("state.CPSR",
                                                                                                                                           @{typ PSR},
                                                                                                                                           var("s",
                                                                                                                                               qTy),
                                                                                                                                           prev_thy ))),
                                                                                                                                  close
                                                                                                                                    (var("v",
                                                                                                                                         @{typ PSR}),
                                                                                                                                     mb(mb(mb(mu(tp[var("v",
                                                                                                                                                        @{typ PSR}),
                                                                                                                                                    lw(0,
                                                                                                                                                       8)],
                                                                                                                                                 qTy),
                                                                                                                                              close
                                                                                                                                                (var("v",
                                                                                                                                                     @{typ
                                                                                                                                                     "PSR \<times>
                                                                                                                                                      8 word"}),
                                                                                                                                                 mu(rupd
                                                                                                                                                      ("PSR.IT",
                                                                                                                                                       var("v",
                                                                                                                                                           @{typ
                                                                                                                                                           "PSR \<times>
                                                                                                                                                            8 word"}),
                                                                                                                                                       @{theory ARM_Monadic}),
                                                                                                                                                    qTy))),
                                                                                                                                           close
                                                                                                                                             (var("v",
                                                                                                                                                  @{typ PSR}),
                                                                                                                                              mw(close
                                                                                                                                                   (var("s",
                                                                                                                                                        qTy),
                                                                                                                                                    rupd
                                                                                                                                                      ("state.CPSR",
                                                                                                                                                       tp[var("s",
                                                                                                                                                              qTy),
                                                                                                                                                          var("v",
                                                                                                                                                              @{typ PSR})],
                                                                                                                                                       prev_thy ))))),
                                                                                                                                        close
                                                                                                                                          (var_a
                                                                                                                                             HOLogic.unitT,
                                                                                                                                           mb(mr(close
                                                                                                                                                   (var("s",
                                                                                                                                                        qTy),
                                                                                                                                                    call
                                                                                                                                                      ("state.CPSR",
                                                                                                                                                       @{typ PSR},
                                                                                                                                                       var("s",
                                                                                                                                                           qTy),
                                                                                                                                                       prev_thy ))),
                                                                                                                                              close
                                                                                                                                                (var("v",
                                                                                                                                                     @{typ PSR}),
                                                                                                                                                 mb(mb(mb(mu(tp[var("v",
                                                                                                                                                                    @{typ PSR}),
                                                                                                                                                                lf],
                                                                                                                                                             qTy),
                                                                                                                                                          close
                                                                                                                                                            (var("v",
                                                                                                                                                                 @{typ
                                                                                                                                                                 "PSR \<times>
                                                                                                                                                                  bool"}),
                                                                                                                                                             mu(rupd
                                                                                                                                                                  ("PSR.J",
                                                                                                                                                                   var("v",
                                                                                                                                                                       @{typ
                                                                                                                                                                       "PSR \<times>
                                                                                                                                                                        bool"}),
                                                                                                                                                                   @{theory ARM_Monadic}),
                                                                                                                                                                qTy))),
                                                                                                                                                       close
                                                                                                                                                         (var("v",
                                                                                                                                                              @{typ PSR}),
                                                                                                                                                          mw(close
                                                                                                                                                               (var("s",
                                                                                                                                                                    qTy),
                                                                                                                                                                rupd
                                                                                                                                                                  ("state.CPSR",
                                                                                                                                                                   tp[var("s",
                                                                                                                                                                          qTy),
                                                                                                                                                                      var("v",
                                                                                                                                                                          @{typ PSR})],
                                                                                                                                                                   prev_thy ))))),
                                                                                                                                                    close
                                                                                                                                                      (var_a
                                                                                                                                                         HOLogic.unitT,
                                                                                                                                                       mb(mr(close
                                                                                                                                                               (var("s",
                                                                                                                                                                    qTy),
                                                                                                                                                                call
                                                                                                                                                                  ("state.CPSR",
                                                                                                                                                                   @{typ PSR},
                                                                                                                                                                   var("s",
                                                                                                                                                                       qTy),
                                                                                                                                                                   prev_thy ))),
                                                                                                                                                          close
                                                                                                                                                            (var("v",
                                                                                                                                                                 @{typ PSR}),
                                                                                                                                                             mb(mb(mb(mb(mr(close
                                                                                                                                                                              (var("s",
                                                                                                                                                                                   qTy),
                                                                                                                                                                               call
                                                                                                                                                                                 ("state.CP15",
                                                                                                                                                                                  @{typ CP15},
                                                                                                                                                                                  var("s",
                                                                                                                                                                                      qTy),
                                                                                                                                                                                  @{theory ARM_Monadic}))),
                                                                                                                                                                         close
                                                                                                                                                                           (var("v0",
                                                                                                                                                                                @{typ CP15}),
                                                                                                                                                                            mb(mb(mu(call
                                                                                                                                                                                       ("CP15.SCTLR",
                                                                                                                                                                                        @{typ SCTLR},
                                                                                                                                                                                        var("v0",
                                                                                                                                                                                            @{typ CP15}),
                                                                                                                                                                                        @{theory ARM_Monadic}),
                                                                                                                                                                                     qTy),
                                                                                                                                                                                  close
                                                                                                                                                                                    (var("v",
                                                                                                                                                                                         @{typ SCTLR}),
                                                                                                                                                                                     mu(call
                                                                                                                                                                                          ("SCTLR.TE",
                                                                                                                                                                                           HOLogic.boolT,
                                                                                                                                                                                           var("v",
                                                                                                                                                                                               @{typ SCTLR}),
                                                                                                                                                                                           @{theory ARM_Monadic}),
                                                                                                                                                                                        qTy))),
                                                                                                                                                                               close
                                                                                                                                                                                 (var_b"v0",
                                                                                                                                                                                  mu(tp[var("v",
                                                                                                                                                                                            @{typ PSR}),
                                                                                                                                                                                        var_b"v0"],
                                                                                                                                                                                     qTy))))),
                                                                                                                                                                      close
                                                                                                                                                                        (var("v",
                                                                                                                                                                             @{typ
                                                                                                                                                                             "PSR \<times>
                                                                                                                                                                              bool"}),
                                                                                                                                                                         mu(rupd
                                                                                                                                                                              ("PSR.T",
                                                                                                                                                                               var("v",
                                                                                                                                                                                   @{typ
                                                                                                                                                                                   "PSR \<times>
                                                                                                                                                                                    bool"}),
                                                                                                                                                                               prev_thy ),
                                                                                                                                                                            qTy))),
                                                                                                                                                                   close
                                                                                                                                                                     (var("v",
                                                                                                                                                                          @{typ PSR}),
                                                                                                                                                                      mw(close
                                                                                                                                                                           (var("s",
                                                                                                                                                                                qTy),
                                                                                                                                                                            rupd
                                                                                                                                                                              ("state.CPSR",
                                                                                                                                                                               tp[var("s",
                                                                                                                                                                                      qTy),
                                                                                                                                                                                  var("v",
                                                                                                                                                                                      @{typ PSR})],
                                                                                                                                                                               prev_thy ))))),
                                                                                                                                                                close
                                                                                                                                                                  (var_a
                                                                                                                                                                     HOLogic.unitT,
                                                                                                                                                                   mb(mr(close
                                                                                                                                                                           (var("s",
                                                                                                                                                                                qTy),
                                                                                                                                                                            call
                                                                                                                                                                              ("state.CPSR",
                                                                                                                                                                               @{typ PSR},
                                                                                                                                                                               var("s",
                                                                                                                                                                                   qTy),
                                                                                                                                                                               prev_thy ))),
                                                                                                                                                                      close
                                                                                                                                                                        (var("v",
                                                                                                                                                                             @{typ PSR}),
                                                                                                                                                                         mb(mb(mb(mb(mr(close
                                                                                                                                                                                          (var("s",
                                                                                                                                                                                               qTy),
                                                                                                                                                                                           call
                                                                                                                                                                                             ("state.CP15",
                                                                                                                                                                                              @{typ CP15},
                                                                                                                                                                                              var("s",
                                                                                                                                                                                                  qTy),
                                                                                                                                                                                              @{theory ARM_Monadic}))),
                                                                                                                                                                                     close
                                                                                                                                                                                       (var("v0",
                                                                                                                                                                                            @{typ CP15}),
                                                                                                                                                                                        mb(mb(mu(call
                                                                                                                                                                                                   ("CP15.SCTLR",
                                                                                                                                                                                                    @{typ SCTLR},
                                                                                                                                                                                                    var("v0",
                                                                                                                                                                                                        @{typ CP15}),
                                                                                                                                                                                                    @{theory ARM_Monadic}),
                                                                                                                                                                                                 qTy),
                                                                                                                                                                                              close
                                                                                                                                                                                                (var("v",
                                                                                                                                                                                                     @{typ SCTLR}),
                                                                                                                                                                                                 mu(call
                                                                                                                                                                                                      ("SCTLR.EE",
                                                                                                                                                                                                       HOLogic.boolT,
                                                                                                                                                                                                       var("v",
                                                                                                                                                                                                           @{typ SCTLR}),
                                                                                                                                                                                                       @{theory ARM_Monadic}),
                                                                                                                                                                                                    qTy))),
                                                                                                                                                                                           close
                                                                                                                                                                                             (var_b"v0",
                                                                                                                                                                                              mu(tp[var("v",
                                                                                                                                                                                                        @{typ PSR}),
                                                                                                                                                                                                    var_b"v0"],
                                                                                                                                                                                                 qTy))))),
                                                                                                                                                                                  close
                                                                                                                                                                                    (var("v",
                                                                                                                                                                                         @{typ
                                                                                                                                                                                         "PSR \<times>
                                                                                                                                                                                          bool"}),
                                                                                                                                                                                     mu(rupd
                                                                                                                                                                                          ("PSR.E",
                                                                                                                                                                                           var("v",
                                                                                                                                                                                               @{typ
                                                                                                                                                                                               "PSR \<times>
                                                                                                                                                                                                bool"}),
                                                                                                                                                                                           @{theory ARM_Monadic}),
                                                                                                                                                                                        qTy))),
                                                                                                                                                                               close
                                                                                                                                                                                 (var("v",
                                                                                                                                                                                      @{typ PSR}),
                                                                                                                                                                                  mw(close
                                                                                                                                                                                       (var("s",
                                                                                                                                                                                            qTy),
                                                                                                                                                                                        rupd
                                                                                                                                                                                          ("state.CPSR",
                                                                                                                                                                                           tp[var("s",
                                                                                                                                                                                                  qTy),
                                                                                                                                                                                              var("v",
                                                                                                                                                                                                  @{typ PSR})],
                                                                                                                                                                                           prev_thy ))))),
                                                                                                                                                                            close
                                                                                                                                                                              (var_a
                                                                                                                                                                                 HOLogic.unitT,
                                                                                                                                                                               mb(mr(close
                                                                                                                                                                                       (var("s",
                                                                                                                                                                                            qTy),
                                                                                                                                                                                        call
                                                                                                                                                                                          ("state.CP15",
                                                                                                                                                                                           @{typ CP15},
                                                                                                                                                                                           var("s",
                                                                                                                                                                                               qTy),
                                                                                                                                                                                           @{theory ARM_Monadic}))),
                                                                                                                                                                                  close
                                                                                                                                                                                    (var("v",
                                                                                                                                                                                         @{typ CP15}),
                                                                                                                                                                                     mb(mb(mu(call
                                                                                                                                                                                                ("CP15.SCTLR",
                                                                                                                                                                                                 @{typ SCTLR},
                                                                                                                                                                                                 var("v",
                                                                                                                                                                                                     @{typ CP15}),
                                                                                                                                                                                                 @{theory ARM_Monadic}),
                                                                                                                                                                                              qTy),
                                                                                                                                                                                           close
                                                                                                                                                                                             (var("v",
                                                                                                                                                                                                  @{typ SCTLR}),
                                                                                                                                                                                              mu(call
                                                                                                                                                                                                   ("SCTLR.VE",
                                                                                                                                                                                                    HOLogic.boolT,
                                                                                                                                                                                                    var("v",
                                                                                                                                                                                                        @{typ SCTLR}),
                                                                                                                                                                                                    prev_thy ),
                                                                                                                                                                                                 qTy))),
                                                                                                                                                                                        close
                                                                                                                                                                                          (var_b"b",
                                                                                                                                                                                           ite(var_b"b",
                                                                                                                                                                                               call
                                                                                                                                                                                                 ("raise'exception",
                                                                                                                                                                                                  @{typ
                                                                                                                                                                                                  "'b state_scheme \<Rightarrow>
                                                                                                                                                                                                   (unit \<times>
                                                                                                                                                                                                    'b state_scheme)"},
                                                                                                                                                                                                  call
                                                                                                                                                                                                    ("exception.IMPLEMENTATION_DEFINED",
                                                                                                                                                                                                     @{typ exception},
                                                                                                                                                                                                     ls
                                                                                                                                                                                                      "branch to an FIQ vector",
                                                                                                                                                                                                     @{theory ARM_Monadic}),
                                                                                                                                                                                                  @{theory ARM_Monadic}),
                                                                                                                                                                                               mb(call
                                                                                                                                                                                                    ("ExcVectorBase",
                                                                                                                                                                                                     @{typ
                                                                                                                                                                                                     "'b state_scheme \<Rightarrow>
                                                                                                                                                                                                      (32 word \<times>
                                                                                                                                                                                                       'b state_scheme)"},
                                                                                                                                                                                                     lu,
                                                                                                                                                                                                     @{theory }),
                                                                                                                                                                                                  close
                                                                                                                                                                                                    (var_w("v",32),
                                                                                                                                                                                                     mb(mu(bop(Add,
                                                                                                                                                                                                               var_w("v",32),
                                                                                                                                                                                                               var_w("vect_offset",32)),
                                                                                                                                                                                                           qTy),
                                                                                                                                                                                                        close
                                                                                                                                                                                                          (var_w("v",32),
                                                                                                                                                                                                           call
                                                                                                                                                                                                             ("BranchTo",
                                                                                                                                                                                                              @{typ
                                                                                                                                                                                                              "'b state_scheme \<Rightarrow>
                                                                                                                                                                                                               (unit \<times>
                                                                                                                                                                                                                'b state_scheme)"},
                                                                                                                                                                                                              var_w("v",32),
                                                                                                                                                                                                              @{theory ARM_Monadic}))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("TakeVirtualFIQException",
   close
     (var_a HOLogic.unitT,
      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
         close
           (var("v",@{typ PSR}),
            mb(mb(mu(call("PSR.T",HOLogic.boolT,var("v",@{typ PSR}),@{theory ARM_Monadic}),qTy),
                  close
                    (var_b"b",
                     ite(var_b"b",
                         const("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
                         mb(const
                              ("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
                            close(var_w("v",32),mu(bop(Sub,var_w("v",32),lw(4,32)),qTy)))))),
               close
                 (var_w("new_lr_value",32),
                  mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                     close
                       (var("new_spsr_value",@{typ PSR}),
                        mb(mr(close
                                (var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                           close
                             (var("v",@{typ PSR}),
                              mb(mb(mb(mu(tp[var("v",@{typ PSR}),lw(17,5)],qTy),
                                       close
                                         (var("v",@{typ "PSR \<times> 5 word"}),
                                          mu(rupd
                                               ("PSR.M",var("v",@{typ "PSR \<times> 5 word"}),
                                                prev_thy ),qTy))),
                                    close
                                      (var("v",@{typ PSR}),
                                       mw(close
                                            (var("s",qTy),
                                             rupd
                                               ("state.CPSR",tp[var("s",qTy),var("v",@{typ PSR})],
                                                prev_thy ))))),
                                 close
                                   (var_a HOLogic.unitT,
                                    mb(call
                                         ("write'SPSR",
                                          @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                          var("new_spsr_value",@{typ PSR}),@{theory ARM_Monadic}),
                                       close
                                         (var_a HOLogic.unitT,
                                          mb(call
                                               ("write'R",
                                                @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                tp[var_w("new_lr_value",32),lw(14,4)],@{theory ARM_Monadic}),
                                             close
                                               (var_a HOLogic.unitT,
                                                mb(mr(close
                                                        (var("s",qTy),
                                                         call
                                                           ("state.CPSR",@{typ PSR},var("s",qTy),
                                                            prev_thy ))),
                                                   close
                                                     (var("v",@{typ PSR}),
                                                      mb(mb(mb(mu(tp[var("v",@{typ PSR}),lt],qTy),
                                                               close
                                                                 (var("v",@{typ "PSR \<times> bool"}),
                                                                  mu(rupd
                                                                       ("PSR.I",
                                                                        var("v",
                                                                            @{typ
                                                                            "PSR \<times> bool"}),
                                                                        @{theory ARM_Monadic}),qTy))),
                                                            close
                                                              (var("v",@{typ PSR}),
                                                               mw(close
                                                                    (var("s",qTy),
                                                                     rupd
                                                                       ("state.CPSR",
                                                                        tp[var("s",qTy),
                                                                           var("v",@{typ PSR})],
                                                                        prev_thy ))))),
                                                         close
                                                           (var_a HOLogic.unitT,
                                                            mb(mr(close
                                                                    (var("s",qTy),
                                                                     call
                                                                       ("state.CPSR",@{typ PSR},
                                                                        var("s",qTy),prev_thy ))),
                                                               close
                                                                 (var("v",@{typ PSR}),
                                                                  mb(mb(mb(mu(tp[var("v",@{typ PSR}),
                                                                                 lt],qTy),
                                                                           close
                                                                             (var("v",
                                                                                  @{typ
                                                                                  "PSR \<times> bool"}),
                                                                              mu(rupd
                                                                                   ("PSR.F",
                                                                                    var("v",
                                                                                        @{typ
                                                                                        "PSR \<times>
                                                                                         bool"}),
                                                                                    @{theory ARM_Monadic}),qTy))),
                                                                        close
                                                                          (var("v",@{typ PSR}),
                                                                           mw(close
                                                                                (var("s",qTy),
                                                                                 rupd
                                                                                   ("state.CPSR",
                                                                                    tp[var("s",qTy),
                                                                                       var("v",
                                                                                           @{typ PSR})],
                                                                                    prev_thy ))))),
                                                                     close
                                                                       (var_a HOLogic.unitT,
                                                                        mb(mr(close
                                                                                (var("s",qTy),
                                                                                 call
                                                                                   ("state.CPSR",
                                                                                    @{typ PSR},
                                                                                    var("s",qTy),
                                                                                    prev_thy ))),
                                                                           close
                                                                             (var("v",@{typ PSR}),
                                                                              mb(mb(mb(mu(tp[var("v",
                                                                                                 @{typ PSR}),
                                                                                             lt],qTy),
                                                                                       close
                                                                                         (var("v",
                                                                                              @{typ
                                                                                              "PSR \<times>
                                                                                               bool"}),
                                                                                          mu(rupd
                                                                                               ("PSR.A",
                                                                                                var("v",
                                                                                                    @{typ
                                                                                                    "PSR \<times>
                                                                                                     bool"}),
                                                                                                @{theory ARM_Monadic}),
                                                                                             qTy))),
                                                                                    close
                                                                                      (var("v",
                                                                                           @{typ PSR}),
                                                                                       mw(close
                                                                                            (var("s",
                                                                                                 qTy),
                                                                                             rupd
                                                                                               ("state.CPSR",
                                                                                                tp[var("s",
                                                                                                       qTy),
                                                                                                   var("v",
                                                                                                       @{typ PSR})],
                                                                                                prev_thy ))))),
                                                                                 close
                                                                                   (var_a
                                                                                      HOLogic.unitT,
                                                                                    mb(mr(close
                                                                                            (var("s",
                                                                                                 qTy),
                                                                                             call
                                                                                               ("state.CPSR",
                                                                                                @{typ PSR},
                                                                                                var("s",
                                                                                                    qTy),
                                                                                                prev_thy ))),
                                                                                       close
                                                                                         (var("v",
                                                                                              @{typ PSR}),
                                                                                          mb(mb(mb(mu(tp[var("v",
                                                                                                             @{typ PSR}),
                                                                                                         lw(0,
                                                                                                            8)],
                                                                                                      qTy),
                                                                                                   close
                                                                                                     (var("v",
                                                                                                          @{typ
                                                                                                          "PSR \<times>
                                                                                                           8 word"}),
                                                                                                      mu(rupd
                                                                                                           ("PSR.IT",
                                                                                                            var("v",
                                                                                                                @{typ
                                                                                                                "PSR \<times>
                                                                                                                 8 word"}),
                                                                                                            @{theory ARM_Monadic}),
                                                                                                         qTy))),
                                                                                                close
                                                                                                  (var("v",
                                                                                                       @{typ PSR}),
                                                                                                   mw(close
                                                                                                        (var("s",
                                                                                                             qTy),
                                                                                                         rupd
                                                                                                           ("state.CPSR",
                                                                                                            tp[var("s",
                                                                                                                   qTy),
                                                                                                               var("v",
                                                                                                                   @{typ PSR})],
                                                                                                            prev_thy ))))),
                                                                                             close
                                                                                               (var_a
                                                                                                  HOLogic.unitT,
                                                                                                mb(mr(close
                                                                                                        (var("s",
                                                                                                             qTy),
                                                                                                         call
                                                                                                           ("state.CPSR",
                                                                                                            @{typ PSR},
                                                                                                            var("s",
                                                                                                                qTy),
                                                                                                            prev_thy ))),
                                                                                                   close
                                                                                                     (var("v",
                                                                                                          @{typ PSR}),
                                                                                                      mb(mb(mb(mu(tp[var("v",
                                                                                                                         @{typ PSR}),
                                                                                                                     lf],
                                                                                                                  qTy),
                                                                                                               close
                                                                                                                 (var("v",
                                                                                                                      @{typ
                                                                                                                      "PSR \<times>
                                                                                                                       bool"}),
                                                                                                                  mu(rupd
                                                                                                                       ("PSR.J",
                                                                                                                        var("v",
                                                                                                                            @{typ
                                                                                                                            "PSR \<times>
                                                                                                                             bool"}),
                                                                                                                        @{theory ARM_Monadic}),
                                                                                                                     qTy))),
                                                                                                            close
                                                                                                              (var("v",
                                                                                                                   @{typ PSR}),
                                                                                                               mw(close
                                                                                                                    (var("s",
                                                                                                                         qTy),
                                                                                                                     rupd
                                                                                                                       ("state.CPSR",
                                                                                                                        tp[var("s",
                                                                                                                               qTy),
                                                                                                                           var("v",
                                                                                                                               @{typ PSR})],
                                                                                                                        prev_thy ))))),
                                                                                                         close
                                                                                                           (var_a
                                                                                                              HOLogic.unitT,
                                                                                                            mb(mr(close
                                                                                                                    (var("s",
                                                                                                                         qTy),
                                                                                                                     call
                                                                                                                       ("state.CPSR",
                                                                                                                        @{typ PSR},
                                                                                                                        var("s",
                                                                                                                            qTy),
                                                                                                                        prev_thy ))),
                                                                                                               close
                                                                                                                 (var("v",
                                                                                                                      @{typ PSR}),
                                                                                                                  mb(mb(mb(mb(mr(close
                                                                                                                                   (var("s",
                                                                                                                                        qTy),
                                                                                                                                    call
                                                                                                                                      ("state.CP15",
                                                                                                                                       @{typ CP15},
                                                                                                                                       var("s",
                                                                                                                                           qTy),
                                                                                                                                       @{theory ARM_Monadic}))),
                                                                                                                              close
                                                                                                                                (var("v0",
                                                                                                                                     @{typ CP15}),
                                                                                                                                 mb(mb(mu(call
                                                                                                                                            ("CP15.SCTLR",
                                                                                                                                             @{typ SCTLR},
                                                                                                                                             var("v0",
                                                                                                                                                 @{typ CP15}),
                                                                                                                                             @{theory ARM_Monadic}),
                                                                                                                                          qTy),
                                                                                                                                       close
                                                                                                                                         (var("v",
                                                                                                                                              @{typ SCTLR}),
                                                                                                                                          mu(call
                                                                                                                                               ("SCTLR.TE",
                                                                                                                                                HOLogic.boolT,
                                                                                                                                                var("v",
                                                                                                                                                    @{typ SCTLR}),
                                                                                                                                                @{theory ARM_Monadic}),
                                                                                                                                             qTy))),
                                                                                                                                    close
                                                                                                                                      (var_b"v0",
                                                                                                                                       mu(tp[var("v",
                                                                                                                                                 @{typ PSR}),
                                                                                                                                             var_b"v0"],
                                                                                                                                          qTy))))),
                                                                                                                           close
                                                                                                                             (var("v",
                                                                                                                                  @{typ
                                                                                                                                  "PSR \<times>
                                                                                                                                   bool"}),
                                                                                                                              mu(rupd
                                                                                                                                   ("PSR.T",
                                                                                                                                    var("v",
                                                                                                                                        @{typ
                                                                                                                                        "PSR \<times>
                                                                                                                                         bool"}),
                                                                                                                                    prev_thy ),
                                                                                                                                 qTy))),
                                                                                                                        close
                                                                                                                          (var("v",
                                                                                                                               @{typ PSR}),
                                                                                                                           mw(close
                                                                                                                                (var("s",
                                                                                                                                     qTy),
                                                                                                                                 rupd
                                                                                                                                   ("state.CPSR",
                                                                                                                                    tp[var("s",
                                                                                                                                           qTy),
                                                                                                                                       var("v",
                                                                                                                                           @{typ PSR})],
                                                                                                                                    prev_thy ))))),
                                                                                                                     close
                                                                                                                       (var_a
                                                                                                                          HOLogic.unitT,
                                                                                                                        mb(mr(close
                                                                                                                                (var("s",
                                                                                                                                     qTy),
                                                                                                                                 call
                                                                                                                                   ("state.CPSR",
                                                                                                                                    @{typ PSR},
                                                                                                                                    var("s",
                                                                                                                                        qTy),
                                                                                                                                    prev_thy ))),
                                                                                                                           close
                                                                                                                             (var("v",
                                                                                                                                  @{typ PSR}),
                                                                                                                              mb(mb(mb(mb(mr(close
                                                                                                                                               (var("s",
                                                                                                                                                    qTy),
                                                                                                                                                call
                                                                                                                                                  ("state.CP15",
                                                                                                                                                   @{typ CP15},
                                                                                                                                                   var("s",
                                                                                                                                                       qTy),
                                                                                                                                                   @{theory ARM_Monadic}))),
                                                                                                                                          close
                                                                                                                                            (var("v0",
                                                                                                                                                 @{typ CP15}),
                                                                                                                                             mb(mb(mu(call
                                                                                                                                                        ("CP15.SCTLR",
                                                                                                                                                         @{typ SCTLR},
                                                                                                                                                         var("v0",
                                                                                                                                                             @{typ CP15}),
                                                                                                                                                         @{theory ARM_Monadic}),
                                                                                                                                                      qTy),
                                                                                                                                                   close
                                                                                                                                                     (var("v",
                                                                                                                                                          @{typ SCTLR}),
                                                                                                                                                      mu(call
                                                                                                                                                           ("SCTLR.EE",
                                                                                                                                                            HOLogic.boolT,
                                                                                                                                                            var("v",
                                                                                                                                                                @{typ SCTLR}),
                                                                                                                                                            @{theory ARM_Monadic}),
                                                                                                                                                         qTy))),
                                                                                                                                                close
                                                                                                                                                  (var_b"v0",
                                                                                                                                                   mu(tp[var("v",
                                                                                                                                                             @{typ PSR}),
                                                                                                                                                         var_b"v0"],
                                                                                                                                                      qTy))))),
                                                                                                                                       close
                                                                                                                                         (var("v",
                                                                                                                                              @{typ
                                                                                                                                              "PSR \<times>
                                                                                                                                               bool"}),
                                                                                                                                          mu(rupd
                                                                                                                                               ("PSR.E",
                                                                                                                                                var("v",
                                                                                                                                                    @{typ
                                                                                                                                                    "PSR \<times>
                                                                                                                                                     bool"}),
                                                                                                                                                @{theory ARM_Monadic}),
                                                                                                                                             qTy))),
                                                                                                                                    close
                                                                                                                                      (var("v",
                                                                                                                                           @{typ PSR}),
                                                                                                                                       mw(close
                                                                                                                                            (var("s",
                                                                                                                                                 qTy),
                                                                                                                                             rupd
                                                                                                                                               ("state.CPSR",
                                                                                                                                                tp[var("s",
                                                                                                                                                       qTy),
                                                                                                                                                   var("v",
                                                                                                                                                       @{typ PSR})],
                                                                                                                                                prev_thy ))))),
                                                                                                                                 close
                                                                                                                                   (var_a
                                                                                                                                      HOLogic.unitT,
                                                                                                                                    mb(mr(close
                                                                                                                                            (var("s",
                                                                                                                                                 qTy),
                                                                                                                                             call
                                                                                                                                               ("state.CP15",
                                                                                                                                                @{typ CP15},
                                                                                                                                                var("s",
                                                                                                                                                    qTy),
                                                                                                                                                @{theory ARM_Monadic}))),
                                                                                                                                       close
                                                                                                                                         (var("v",
                                                                                                                                              @{typ CP15}),
                                                                                                                                          mb(mb(mu(call
                                                                                                                                                     ("CP15.SCTLR",
                                                                                                                                                      @{typ SCTLR},
                                                                                                                                                      var("v",
                                                                                                                                                          @{typ CP15}),
                                                                                                                                                      @{theory ARM_Monadic}),
                                                                                                                                                   qTy),
                                                                                                                                                close
                                                                                                                                                  (var("v",
                                                                                                                                                       @{typ SCTLR}),
                                                                                                                                                   mu(call
                                                                                                                                                        ("SCTLR.VE",
                                                                                                                                                         HOLogic.boolT,
                                                                                                                                                         var("v",
                                                                                                                                                             @{typ SCTLR}),
                                                                                                                                                         prev_thy ),
                                                                                                                                                      qTy))),
                                                                                                                                             close
                                                                                                                                               (var_b"b",
                                                                                                                                                ite(var_b"b",
                                                                                                                                                    call
                                                                                                                                                      ("raise'exception",
                                                                                                                                                       @{typ
                                                                                                                                                       "'b state_scheme \<Rightarrow>
                                                                                                                                                        (unit \<times>
                                                                                                                                                         'b state_scheme)"},
                                                                                                                                                       call
                                                                                                                                                         ("exception.IMPLEMENTATION_DEFINED",
                                                                                                                                                          @{typ exception},
                                                                                                                                                          ls
                                                                                                                                                           "branch to an FIQ vector",
                                                                                                                                                          @{theory ARM_Monadic}),
                                                                                                                                                       @{theory ARM_Monadic}),
                                                                                                                                                    mb(call
                                                                                                                                                         ("ExcVectorBase",
                                                                                                                                                          @{typ
                                                                                                                                                          "'b state_scheme \<Rightarrow>
                                                                                                                                                           (32 word \<times>
                                                                                                                                                            'b state_scheme)"},
                                                                                                                                                          lu,
                                                                                                                                                          @{theory }),
                                                                                                                                                       close
                                                                                                                                                         (var_w("v",32),
                                                                                                                                                          mb(mu(bop(Add,
                                                                                                                                                                    var_w("v",32),
                                                                                                                                                                    lw(28,
                                                                                                                                                                       32)),
                                                                                                                                                                qTy),
                                                                                                                                                             close
                                                                                                                                                               (var_w("v",32),
                                                                                                                                                                call
                                                                                                                                                                  ("BranchTo",
                                                                                                                                                                   @{typ
                                                                                                                                                                   "'b state_scheme \<Rightarrow>
                                                                                                                                                                    (unit \<times>
                                                                                                                                                                     'b state_scheme)"},
                                                                                                                                                                   var_w("v",32),
                                                                                                                                                                   @{theory ARM_Monadic}))))))))))))))))))))))))))))))))))))))))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("TakeHypTrapException",
   close
     (var_a HOLogic.unitT,
      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
         close
           (var("v",@{typ PSR}),
            mb(mb(mu(call("PSR.T",HOLogic.boolT,var("v",@{typ PSR}),@{theory ARM_Monadic}),qTy),
                  close
                    (var_b"b",
                     ite(var_b"b",
                         mb(const
                              ("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
                            close(var_w("v",32),mu(bop(Sub,var_w("v",32),lw(4,32)),qTy))),
                         mb(const
                              ("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
                            close(var_w("v",32),mu(bop(Sub,var_w("v",32),lw(8,32)),qTy)))))),
               close
                 (var_w("preferred_exceptn_return",32),
                  mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                     close
                       (var("new_spsr_value",@{typ PSR}),
                        call
                          ("EnterHypMode",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                           tp[var("new_spsr_value",@{typ PSR}),var_w("preferred_exceptn_return",32),
                              lw(20,32)],@{theory })))))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("WriteHSR",
   close
     (tp[var_w("ec",6),var_w("HSRString",25)],
      mn(lw(0,32),
         mb(mr(close
                 (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                  mop(Fst,var("s",@{typ "32 word \<times> 'b state_scheme"})))),
            close
              (var_w("v",32),
               mb(mb(mu(bfi(ln 31,ln 26,var_w("ec",6),var_w("v",32)),@{typ "32 word \<times> 'b state_scheme"}),
                     close
                       (var_w("v",32),
                        mw(close
                             (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                              tp[var_w("v",32),mop(Snd,var("s",@{typ "32 word \<times> 'b state_scheme"}))])))),
                  close
                    (var_a HOLogic.unitT,
                     mb(ite(bop(Or,
                                mop(Not,
                                    eq(ex(var_w("ec",6),ln 5,ln 3,(Word_Lib.mk_wordT 3)),lw(4,3))),
                                bop(And,bop(Bit,var_w("ec",6),ln 2),
                                    bop(Bit,var_w("HSRString",25),ln 24))),
                            mb(mr(close
                                    (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                                     mop(Fst,var("s",@{typ "32 word \<times> 'b state_scheme"})))),
                               close
                                 (var_w("v",32),
                                  mb(mb(md(call
                                             ("ThisInstrLength",
                                              @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                              prev_thy),w32),
                                        close
                                          (var_n"v0",
                                           mb(mb(mu(eq(var_n"v0",ln 32),
                                                    @{typ "32 word \<times> 'b state_scheme"}),
                                                 close
                                                   (var_b"v",
                                                    mu(mop(Cast w1,var_b"v"),
                                                       @{typ "32 word \<times> 'b state_scheme"}))),
                                              close
                                                (var_w("v0",1),
                                                 mu(bfi(ln 25,ln 25,var_w("v0",1),var_w("v",32)),
                                                    @{typ "32 word \<times> 'b state_scheme"}))))),
                                     close
                                       (var_w("v",32),
                                        mw(close
                                             (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                                              tp[var_w("v",32),
                                                 mop(Snd,var("s",@{typ "32 word \<times> 'b state_scheme"}))])))))),
                            mu(lu,@{typ "32 word \<times> 'b state_scheme"})),
                        close
                          (var_a HOLogic.unitT,
                           mb(ite(bop(And,
                                      eq(ex(var_w("ec",6),ln 5,ln 4,(Word_Lib.mk_wordT 2)),lw(0,2)),
                                      mop(Not,eq(ex(var_w("ec",6),ln 3,ln 0,w4),lw(0,4)))),
                                  mb(md(call
                                          ("CurrentInstrSet",
                                           @{typ "'b state_scheme \<Rightarrow> (ARM_Monadic.InstrSet \<times> 'b state_scheme)"},
                                           lu,@{theory ARM_Monadic}),w32),
                                     close
                                       (var("v",@{typ ARM_Monadic.InstrSet}),
                                        mb(mu(eq(var("v",@{typ ARM_Monadic.InstrSet}),
                                                 lc("InstrSet_ARM","InstrSet", prev_thy )),
                                              @{typ "32 word \<times> 'b state_scheme"}),
                                           close
                                             (var_b"b",
                                              ite(var_b"b",
                                                  mb(mr(close
                                                          (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                                                           mop(Fst,
                                                               var("s",
                                                                   @{typ "32 word \<times> 'b state_scheme"})))),
                                                     close
                                                       (var_w("v",32),
                                                        mb(mb(mu(bfi(ln 24,ln 24,mop(Cast w1,lt),
                                                                     var_w("v",32)),
                                                                 @{typ "32 word \<times> 'b state_scheme"}),
                                                              close
                                                                (var_w("v",32),
                                                                 mw(close
                                                                      (var("s",
                                                                           @{typ
                                                                           "32 word \<times> 'b state_scheme"}),
                                                                       tp[var_w("v",32),
                                                                          mop(Snd,
                                                                              var("s",
                                                                                  @{typ
                                                                                  "32 word \<times>
                                                                                   'b state_scheme"}))])))),
                                                           close
                                                             (var_a HOLogic.unitT,
                                                              mb(mr(close
                                                                      (var("s",
                                                                           @{typ
                                                                           "32 word \<times> 'b state_scheme"}),
                                                                       mop(Fst,
                                                                           var("s",
                                                                               @{typ
                                                                               "32 word \<times>
                                                                                'b state_scheme"})))),
                                                                 close
                                                                   (var_w("v",32),
                                                                    mb(mb(md(call
                                                                               ("CurrentCond",
                                                                                @{typ
                                                                                "'b state_scheme \<Rightarrow>
                                                                                 (4 word \<times>
                                                                                  'b state_scheme)"},lu,
                                                                                prev_thy ),w32),
                                                                          close
                                                                            (var_w("v0",4),
                                                                             mu(bfi(ln 23,ln 20,
                                                                                    var_w("v0",4),
                                                                                    var_w("v",32)),
                                                                                @{typ
                                                                                "32 word \<times>
                                                                                 'b state_scheme"}))),
                                                                       close
                                                                         (var_w("v",32),
                                                                          mw(close
                                                                               (var("s",
                                                                                    @{typ
                                                                                    "32 word \<times>
                                                                                     'b state_scheme"}),
                                                                                tp[var_w("v",32),
                                                                                   mop(Snd,
                                                                                       var("s",
                                                                                           @{typ
                                                                                           "32 word \<times>
                                                                                            'b state_scheme"}))])))))))))),
                                                  mb(mr(close
                                                          (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                                                           mop(Fst,
                                                               var("s",
                                                                   @{typ "32 word \<times> 'b state_scheme"})))),
                                                     close
                                                       (var_w("v",32),
                                                        mb(mb(mu(bfi(ln 24,ln 24,
                                                                     mop(Cast w1,lx HOLogic.boolT),
                                                                     var_w("v",32)),
                                                                 @{typ "32 word \<times> 'b state_scheme"}),
                                                              close
                                                                (var_w("v",32),
                                                                 mw(close
                                                                      (var("s",
                                                                           @{typ
                                                                           "32 word \<times> 'b state_scheme"}),
                                                                       tp[var_w("v",32),
                                                                          mop(Snd,
                                                                              var("s",
                                                                                  @{typ
                                                                                  "32 word \<times>
                                                                                   'b state_scheme"}))])))),
                                                           close
                                                             (var_a HOLogic.unitT,
                                                              mb(mr(close
                                                                      (var("s",
                                                                           @{typ
                                                                           "32 word \<times> 'b state_scheme"}),
                                                                       mop(Fst,
                                                                           var("s",
                                                                               @{typ
                                                                               "32 word \<times>
                                                                                'b state_scheme"})))),
                                                                 close
                                                                   (var_w("v",32),
                                                                    mb(mb(mu(bop(Bit,var_w("v",32),
                                                                                 ln 24),
                                                                             @{typ
                                                                             "32 word \<times> 'b state_scheme"}),
                                                                          close
                                                                            (var_b"b",
                                                                             ite(var_b"b",
                                                                                 mb(md(call
                                                                                         ("ConditionPassed",
                                                                                          @{typ
                                                                                          "'b state_scheme \<Rightarrow>
                                                                                           (bool \<times>
                                                                                            'b state_scheme)"},
                                                                                          lu,
                                                                                          prev_thy ),
                                                                                       w32),
                                                                                    close
                                                                                      (var_b"b",
                                                                                       ite(var_b"b",
                                                                                           mb(mr(close
                                                                                                   (var("s",
                                                                                                        @{typ
                                                                                                        "32 word \<times>
                                                                                                         'b state_scheme"}),
                                                                                                    mop(Fst,
                                                                                                        var("s",
                                                                                                            @{typ
                                                                                                            "32 word \<times>
                                                                                                             'b state_scheme"})))),
                                                                                              close
                                                                                                (var_w("v",32),
                                                                                                 mb(mb(ite(lx HOLogic.boolT,
                                                                                                           md(call
                                                                                                                ("CurrentCond",
                                                                                                                 @{typ
                                                                                                                 "'b state_scheme \<Rightarrow>
                                                                                                                  (4 word \<times>
                                                                                                                   'b state_scheme)"},
                                                                                                                 lu,
                                                                                                                 prev_thy ),
                                                                                                              w32),
                                                                                                           mu(lw(14,
                                                                                                                 4),
                                                                                                              @{typ
                                                                                                              "32 word \<times>
                                                                                                               'b state_scheme"})),
                                                                                                       close
                                                                                                         (var_w("v0",4),
                                                                                                          mu(bfi(ln
                                                                                                                  23,
                                                                                                                 ln
                                                                                                                  20,
                                                                                                                 var_w("v0",4),
                                                                                                                 var_w("v",32)),
                                                                                                             @{typ
                                                                                                             "32 word \<times>
                                                                                                              'b state_scheme"}))),
                                                                                                    close
                                                                                                      (var_w("v",32),
                                                                                                       mw(close
                                                                                                            (var("s",
                                                                                                                 @{typ
                                                                                                                 "32 word \<times>
                                                                                                                  'b state_scheme"}),
                                                                                                             tp[var_w("v",32),
                                                                                                                mop(Snd,
                                                                                                                    var("s",
                                                                                                                        @{typ
                                                                                                                        "32 word \<times>
                                                                                                                         'b state_scheme"}))])))))),
                                                                                           mb(mr(close
                                                                                                   (var("s",
                                                                                                        @{typ
                                                                                                        "32 word \<times>
                                                                                                         'b state_scheme"}),
                                                                                                    mop(Fst,
                                                                                                        var("s",
                                                                                                            @{typ
                                                                                                            "32 word \<times>
                                                                                                             'b state_scheme"})))),
                                                                                              close
                                                                                                (var_w("v",32),
                                                                                                 mb(mb(md(call
                                                                                                            ("CurrentCond",
                                                                                                             @{typ
                                                                                                             "'b state_scheme \<Rightarrow>
                                                                                                              (4 word \<times>
                                                                                                               'b state_scheme)"},
                                                                                                             lu,
                                                                                                             prev_thy ),
                                                                                                          w32),
                                                                                                       close
                                                                                                         (var_w("v0",4),
                                                                                                          mu(bfi(ln
                                                                                                                  23,
                                                                                                                 ln
                                                                                                                  20,
                                                                                                                 var_w("v0",4),
                                                                                                                 var_w("v",32)),
                                                                                                             @{typ
                                                                                                             "32 word \<times>
                                                                                                              'b state_scheme"}))),
                                                                                                    close
                                                                                                      (var_w("v",32),
                                                                                                       mw(close
                                                                                                            (var("s",
                                                                                                                 @{typ
                                                                                                                 "32 word \<times>
                                                                                                                  'b state_scheme"}),
                                                                                                             tp[var_w("v",32),
                                                                                                                mop(Snd,
                                                                                                                    var("s",
                                                                                                                        @{typ
                                                                                                                        "32 word \<times>
                                                                                                                         'b state_scheme"}))]))))))))),
                                                                                 mu(lu,
                                                                                    @{typ
                                                                                    "32 word \<times>
                                                                                     'b state_scheme"})))),
                                                                       close
                                                                         (var_a HOLogic.unitT,
                                                                          mb(mr(close
                                                                                  (var("s",
                                                                                       @{typ
                                                                                       "32 word \<times>
                                                                                        'b state_scheme"}),
                                                                                   mop(Fst,
                                                                                       var("s",
                                                                                           @{typ
                                                                                           "32 word \<times>
                                                                                            'b state_scheme"})))),
                                                                             close
                                                                               (var_w("v",32),
                                                                                mb(mu(bfi(ln 19,
                                                                                          ln 0,
                                                                                          ex(var_w("HSRString",25),
                                                                                             ln 19,
                                                                                             ln 0,
                                                                                             (Word_Lib.mk_wordT 20)),
                                                                                          var_w("v",32)),
                                                                                      @{typ
                                                                                      "32 word \<times>
                                                                                       'b state_scheme"}),
                                                                                   close
                                                                                     (var_w("v",32),
                                                                                      mw(close
                                                                                           (var("s",
                                                                                                @{typ
                                                                                                "32 word \<times>
                                                                                                 'b state_scheme"}),
                                                                                            tp[var_w("v",32),
                                                                                               mop(Snd,
                                                                                                   var("s",
                                                                                                       @{typ
                                                                                                       "32 word \<times>
                                                                                                        'b state_scheme"}))]))))))))))))))))))),
                                  mb(mr(close
                                          (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                                           mop(Fst,var("s",@{typ "32 word \<times> 'b state_scheme"})))),
                                     close
                                       (var_w("v",32),
                                        mb(mu(bfi(ln 24,ln 0,var_w("HSRString",25),var_w("v",32)),
                                              @{typ "32 word \<times> 'b state_scheme"}),
                                           close
                                             (var_w("v",32),
                                              mw(close
                                                   (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                                                    tp[var_w("v",32),
                                                       mop(Snd,
                                                           var("s",@{typ "32 word \<times> 'b state_scheme"}))]))))))),
                              close
                                (var_a HOLogic.unitT,
                                 mb(mr(close
                                         (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                                          call
                                            ("state.CP15",@{typ CP15},
                                             mop(Snd,var("s",@{typ "32 word \<times> 'b state_scheme"})),
                                             @{theory ARM_Monadic}))),
                                    close
                                      (var("v",@{typ CP15}),
                                       mb(mu(call
                                               ("CP15.HSR",@{typ HSR},var("v",@{typ CP15}),prev_thy ),
                                             @{typ "32 word \<times> 'b state_scheme"}),
                                          close
                                            (var("x0",@{typ HSR}),
                                             mb(mr(close
                                                     (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                                                      call
                                                        ("state.CP15",@{typ CP15},
                                                         mop(Snd,
                                                             var("s",@{typ "32 word \<times> 'b state_scheme"})),
                                                         @{theory ARM_Monadic}))),
                                                close
                                                  (var("v",@{typ CP15}),                    
                                                   mb(mb(mb(mr(close
                                                                 (var("s",
                                                                      @{typ
                                                                      "32 word \<times> 'b state_scheme"}),
                                                                  mop(Fst,
                                                                      var("s",
                                                                          @{typ
                                                                          "32 word \<times> 'b state_scheme"})))),
                                                            close
                                                              (var_w("v0",32),
                                                               mb(mb(mu(tp[var("x0",@{typ HSR}),
                                                                           var_w("v0",32)],
                                                                        @{typ
                                                                        "32 word \<times> 'b state_scheme"}),
                                                                     close
                                                                       (var("v",
                                                                            @{typ
                                                                            "HSR \<times> 32 word"}),
                                                                        mu(call
                                                                             ("write'reg'HSR",
                                                                              @{typ HSR},
                                                                              var("v",
                                                                                  @{typ
                                                                                  "HSR \<times>
                                                                                   32 word"}),
                                                                              prev_thy ),
                                                                           @{typ
                                                                           "32 word \<times> 'b state_scheme"}))),
                                                                  close
                                                                    (var("v0",@{typ HSR}),
                                                                     mu(tp[var("v",@{typ CP15}),
                                                                           var("v0",@{typ HSR})],
                                                                        @{typ
                                                                        "32 word \<times> 'b state_scheme"}))))),
                                                         close
                                                           (var("v",@{typ "CP15 \<times> HSR"}),
                                                            mu(rupd
                                                                 ("CP15.HSR",
                                                                  var("v",@{typ "CP15 \<times> HSR"}),
                                                                  prev_thy ),
                                                               @{typ "32 word \<times> 'b state_scheme"}))),
                                                      close
                                                        (var("v",@{typ CP15}),
                                                         mw(close
                                                              (var("s",
                                                                   @{typ "32 word \<times> 'b state_scheme"}),
                                                               tp[mop(Fst,
                                                                      var("s",
                                                                          @{typ
                                                                          "32 word \<times> 'b state_scheme"})),
                                                                  rupd
                                                                    ("state.CP15",
                                                                     tp[mop(Snd,
                                                                            var("s",
                                                                                @{typ     
                                                                                "32 word \<times>
                                                                                 'b state_scheme"})),
                                                                        var("v",@{typ CP15})],
                                                                     @{theory ARM_Monadic})])))))))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("CallSupervisor",
   close
     (var_w("immediate",16),
      mb(call("CurrentModeIsHyp",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,prev_thy ),
         close
           (var_b"v",
            mb(mb(ite(var_b"v",mu(lt,qTy),
                      mb(call
                           ("HaveVirtExt",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                            prev_thy ),
                         close
                           (var_b"b",
                            ite(var_b"b",
                                mb(call
                                     ("IsSecure",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                      lu,prev_thy ),
                                   close
                                     (var_b"v",
                                      mb(mu(mop(Not,var_b"v"),qTy),
                                         close
                                           (var_b"b",
                                            ite(var_b"b",
                                                mb(call
                                                     ("CurrentModeIsNotUser",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                      lu,prev_thy ),
                                                   close
                                                     (var_b"v",
                                                      mb(mu(mop(Not,var_b"v"),qTy),
                                                         close
                                                           (var_b"b",
                                                            ite(var_b"b",
                                                                mb(mr(close
                                                                        (var("s",qTy),
                                                                         call
                                                                           ("state.CP15",
                                                                            @{typ CP15},
                                                                            var("s",qTy),@{theory ARM_Monadic}))),
                                                                   close
                                                                     (var("v",@{typ CP15}),
                                                                      mb(mu(call
                                                                              ("CP15.HCR",
                                                                               @{typ HCR},
                                                                               var("v",@{typ CP15}),
                                                                               prev_thy ),qTy),
                                                                         close
                                                                           (var("v",@{typ HCR}),
                                                                            mu(call
                                                                                 ("HCR.TGE",
                                                                                  HOLogic.boolT,
                                                                                  var("v",@{typ HCR}),
                                                                                  prev_thy ),qTy))))),
                                                                mu(lf,qTy)))))),mu(lf,qTy)))))),
                                mu(lf,qTy))))),
                  close
                    (var_b"b",
                     ite(var_b"b",
                         mn(lw(0,25),
                            mb(mr(close
                                    (var("s",@{typ "25 word \<times> 'b state_scheme"}),
                                     mop(Fst,var("s",@{typ "25 word \<times> 'b state_scheme"})))),
                               close
                                 (var_w("v",25),
                                  mb(mb(mb(md(call
                                                ("CurrentCond",
                                                 @{typ
                                                 "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                                 prev_thy ),(Word_Lib.mk_wordT 25)),
                                           close
                                             (var_w("v0",4),
                                              mb(mb(mu(eq(var_w("v0",4),lw(14,4)),
                                                       @{typ "25 word \<times> 'b state_scheme"}),
                                                    close
                                                      (var_b"b",
                                                       mu(ite(var_b"b",var_w("immediate",16),lx w16),
                                                          @{typ "25 word \<times> 'b state_scheme"}))),
                                                 close
                                                   (var_w("v0",16),
                                                    mu(bfi(ln 15,ln 0,var_w("v0",16),var_w("v",25)),
                                                       @{typ "25 word \<times> 'b state_scheme"}))))),
                                        close
                                          (var_w("v",25),
                                           mw(close
                                                (var("s",@{typ "25 word \<times> 'b state_scheme"}),
                                                 tp[var_w("v",25),
                                                    mop(Snd,var("s",@{typ "25 word \<times> 'b state_scheme"}))])))),
                                     close
                                       (var_a HOLogic.unitT,
                                        mb(mr(close
                                                (var("s",@{typ "25 word \<times> 'b state_scheme"}),
                                                 mop(Fst,var("s",@{typ "25 word \<times> 'b state_scheme"})))),
                                           close
                                             (var_w("v",25),
                                              mb(mu(tp[lw(18,6),var_w("v",25)],
                                                    @{typ "25 word \<times> 'b state_scheme"}),
                                                 close
                                                   (var("v",@{typ "6 word \<times> 25 word"}),
                                                    md(call
                                                         ("WriteHSR",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                          var("v",@{typ "6 word \<times> 25 word"}),
                                                          @{theory}),(Word_Lib.mk_wordT 25))))))))))),
                         mu(lu,qTy)))),
               close
                 (var_a HOLogic.unitT,
                  call
                    ("TakeSVCException",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,
                     @{theory})))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("CallHypervisor",
   close
     (var_w("immediate",16),
      mb(call
           ("WriteHSR",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
            tp[lw(18,6),cc[var_w("immediate",16),lw(0,9)]],@{theory}),
         close
           (var_a HOLogic.unitT,
            call("TakeHVCException",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("BankedRegisterAccessValid",
   close
     (tp[var_w("SYSm",5),var_w("mode",5)],
      itb([(eq(ex(var_w("SYSm",5),ln 4,ln 3,(Word_Lib.mk_wordT 2)),lw(0,2)),
            itb([(eq(ex(var_w("SYSm",5),ln 2,ln 0,(Word_Lib.mk_wordT 3)),lw(7,3)),
                  call
                    ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                     call
                       ("exception.UNPREDICTABLE",@{typ exception},ls"BankedRegisterAccessValid",
                        @{theory ARM_Monadic}),@{theory ARM_Monadic})),
                 (eq(ex(var_w("SYSm",5),ln 2,ln 0,(Word_Lib.mk_wordT 3)),lw(6,3)),
                  ite(bop(In,var_w("mode",5),sl[lw(26,5),lw(31,5)]),
                      call
                        ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                         call
                           ("exception.UNPREDICTABLE",@{typ exception},
                            ls"BankedRegisterAccessValid",@{theory ARM_Monadic}),@{theory ARM_Monadic}),mu(lu,qTy))),
                 (eq(ex(var_w("SYSm",5),ln 2,ln 0,(Word_Lib.mk_wordT 3)),lw(5,3)),
                  ite(eq(var_w("mode",5),lw(31,5)),
                      call
                        ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                         call
                           ("exception.UNPREDICTABLE",@{typ exception},
                            ls"BankedRegisterAccessValid",@{theory ARM_Monadic}),@{theory ARM_Monadic}),mu(lu,qTy))),
                 (mop(Not,eq(var_w("mode",5),lw(17,5))),
                  call
                    ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                     call
                       ("exception.UNPREDICTABLE",@{typ exception},ls"BankedRegisterAccessValid",
                        @{theory ARM_Monadic}),@{theory ARM_Monadic}))],mu(lu,qTy))),
           (eq(ex(var_w("SYSm",5),ln 4,ln 3,(Word_Lib.mk_wordT 2)),lw(1,2)),
            mb(itb([(eq(ex(var_w("SYSm",5),ln 2,ln 0,(Word_Lib.mk_wordT 3)),lw(7,3)),mu(lt,qTy)),
                    (eq(var_w("mode",5),lw(17,5)),mu(lt,qTy))],
                   mb(mr(close(var("s",qTy),call("state.CP15",@{typ CP15},var("s",qTy),@{theory ARM_Monadic}))),
                      close
                        (var("v",@{typ CP15}),
                         mb(mb(mu(call("CP15.NSACR",@{typ NSACR},var("v",@{typ CP15}),prev_thy ),qTy),
                               close
                                 (var("v",@{typ NSACR}),
                                  mu(call("NSACR.RFR",HOLogic.boolT,var("v",@{typ NSACR}),prev_thy ),
                                     qTy))),
                            close
                              (var_b"b",
                               ite(var_b"b",
                                   mb(call
                                        ("IsSecure",
                                         @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                         prev_thy ),close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                   mu(lf,qTy))))))),
               close
                 (var_b"b",
                  ite(var_b"b",
                      call
                        ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                         call
                           ("exception.UNPREDICTABLE",@{typ exception},
                            ls"BankedRegisterAccessValid",@{theory ARM_Monadic}),@{theory ARM_Monadic}),mu(lu,qTy))))),
           (eq(ex(var_w("SYSm",5),ln 4,ln 3,(Word_Lib.mk_wordT 2)),lw(3,2)),
            itb([(mop(Not,bop(Bit,var_w("SYSm",5),ln 2)),
                  call
                    ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                     call
                       ("exception.UNPREDICTABLE",@{typ exception},ls"BankedRegisterAccessValid",
                        @{theory ARM_Monadic}),@{theory ARM_Monadic})),
                 (mop(Not,bop(Bit,var_w("SYSm",5),ln 1)),
                  mb(call
                       ("IsSecure",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,prev_thy ),
                     close
                       (var_b"v",
                        mb(mb(mu(mop(Not,var_b"v"),qTy),
                              close(var_b"b",mu(bop(Or,var_b"b",eq(var_w("mode",5),lw(22,5))),qTy))),
                           close
                             (var_b"b",
                              ite(var_b"b",
                                  call
                                    ("raise'exception",
                                     @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                     call
                                       ("exception.UNPREDICTABLE",@{typ exception},
                                        ls"BankedRegisterAccessValid",@{theory ARM_Monadic}),@{theory ARM_Monadic}),
                                  mu(lu,qTy))))))),
                 (mop(Not,eq(var_w("mode",5),lw(22,5))),
                  call
                    ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                     call
                       ("exception.UNPREDICTABLE",@{typ exception},ls"BankedRegisterAccessValid",
                        @{theory ARM_Monadic}),@{theory ARM_Monadic}))],mu(lu,qTy)))],mu(lu,qTy))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("SPSRAccessValid",
   close
     (tp[var_w("SYSm",5),var_w("mode",5)],
      itb([(eq(var_w("SYSm",5),lw(14,5)),
            mb(call("IsSecure",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,prev_thy ),
               close
                 (var_b"v",
                  mb(mb(mb(mu(mop(Not,var_b"v"),qTy),
                           close
                             (var_b"b",
                              ite(var_b"b",
                                  mb(mr(close
                                          (var("s",qTy),
                                           call("state.CP15",@{typ CP15},var("s",qTy),@{theory ARM_Monadic}))),
                                     close
                                       (var("v",@{typ CP15}),
                                        mb(mu(call
                                                ("CP15.NSACR",@{typ NSACR},var("v",@{typ CP15}),
                                                 prev_thy ),qTy),
                                           close
                                             (var("v",@{typ NSACR}),
                                              mu(call
                                                   ("NSACR.RFR",HOLogic.boolT,var("v",@{typ NSACR}),
                                                    prev_thy ),qTy))))),mu(lf,qTy)))),
                        close(var_b"b",mu(bop(Or,var_b"b",eq(var_w("mode",5),lw(17,5))),qTy))),
                     close
                       (var_b"b",
                        ite(var_b"b",
                            call
                              ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                               call
                                 ("exception.UNPREDICTABLE",@{typ exception},ls"SPSRAccessValid",
                                  @{theory ARM_Monadic}),@{theory ARM_Monadic}),mu(lu,qTy))))))),
           (eq(var_w("SYSm",5),lw(16,5)),
            ite(eq(var_w("mode",5),lw(18,5)),
                call
                  ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                   call("exception.UNPREDICTABLE",@{typ exception},ls"SPSRAccessValid",@{theory ARM_Monadic}),
                   @{theory ARM_Monadic}),mu(lu,qTy))),
           (eq(var_w("SYSm",5),lw(18,5)),
            ite(eq(var_w("mode",5),lw(19,5)),
                call
                  ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                   call("exception.UNPREDICTABLE",@{typ exception},ls"SPSRAccessValid",@{theory ARM_Monadic}),
                   @{theory ARM_Monadic}),mu(lu,qTy))),
           (eq(var_w("SYSm",5),lw(20,5)),
            ite(eq(var_w("mode",5),lw(23,5)),
                call
                  ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                   call("exception.UNPREDICTABLE",@{typ exception},ls"SPSRAccessValid",@{theory ARM_Monadic}),
                   @{theory ARM_Monadic}),mu(lu,qTy))),
           (eq(var_w("SYSm",5),lw(22,5)),
            ite(eq(var_w("mode",5),lw(27,5)),
                call
                  ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                   call("exception.UNPREDICTABLE",@{typ exception},ls"SPSRAccessValid",@{theory ARM_Monadic}),
                   @{theory ARM_Monadic}),mu(lu,qTy))),
           (eq(var_w("SYSm",5),lw(28,5)),
            mb(ite(eq(var_w("mode",5),lw(22,5)),mu(lt,qTy),
                   mb(call
                        ("IsSecure",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,prev_thy ),
                      close(var_b"v",mu(mop(Not,var_b"v"),qTy)))),
               close
                 (var_b"b",
                  ite(var_b"b",
                      call
                        ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                         call
                           ("exception.UNPREDICTABLE",@{typ exception},ls"SPSRAccessValid",@{theory ARM_Monadic}),
                         @{theory ARM_Monadic}),mu(lu,qTy))))),
           (eq(var_w("SYSm",5),lw(30,5)),
            ite(mop(Not,eq(var_w("mode",5),lw(22,5))),
                call
                  ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                   call("exception.UNPREDICTABLE",@{typ exception},ls"SPSRAccessValid",@{theory ARM_Monadic}),
                   @{theory ARM_Monadic}),mu(lu,qTy)))],
          call
            ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
             call("exception.UNPREDICTABLE",@{typ exception},ls"SPSRAccessValid",@{theory ARM_Monadic}),
             @{theory ARM_Monadic}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("rec'FPSCR",
   close
     (var_w("x",32),
      record
        ("FPSCR",
         [bop(Bit,var_w("x",32),ln 26),bop(Bit,var_w("x",32),ln 29),bop(Bit,var_w("x",32),ln 25),
          bop(Bit,var_w("x",32),ln 1),bop(Bit,var_w("x",32),ln 9),bop(Bit,var_w("x",32),ln 24),
          bop(Bit,var_w("x",32),ln 7),bop(Bit,var_w("x",32),ln 15),bop(Bit,var_w("x",32),ln 0),
          bop(Bit,var_w("x",32),ln 8),bop(Bit,var_w("x",32),ln 4),bop(Bit,var_w("x",32),ln 12),
          bop(Bit,var_w("x",32),ln 31),bop(Bit,var_w("x",32),ln 2),bop(Bit,var_w("x",32),ln 10),
          bop(Bit,var_w("x",32),ln 27),ex(var_w("x",32),ln 23,ln 22,(Word_Lib.mk_wordT 2)),
          bop(Bit,var_w("x",32),ln 3),bop(Bit,var_w("x",32),ln 11),bop(Bit,var_w("x",32),ln 28),
          bop(Bit,var_w("x",32),ln 30),
          cc[ex(var_w("x",32),ln 6,ln 5,(Word_Lib.mk_wordT 2)),
             ex(var_w("x",32),ln 14,ln 13,(Word_Lib.mk_wordT 2)),
             ex(var_w("x",32),ln 21,ln 16,(Word_Lib.mk_wordT 6))]],prev_thy )))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("reg'FPSCR",
   close
     (var("x",@{typ FPSCR}),
      let'
        (var_w("fpscr'rst",10),
         call("FPSCR.fpscr'rst",(Word_Lib.mk_wordT 10),var("x",@{typ FPSCR}),prev_thy ),
         cc[mop(Cast w1,call("FPSCR.N",HOLogic.boolT,var("x",@{typ FPSCR}),prev_thy )),
            mop(Cast w1,call("FPSCR.Z",HOLogic.boolT,var("x",@{typ FPSCR}),prev_thy )),
            mop(Cast w1,call("FPSCR.C",HOLogic.boolT,var("x",@{typ FPSCR}),prev_thy )),
            mop(Cast w1,call("FPSCR.V",HOLogic.boolT,var("x",@{typ FPSCR}),prev_thy )),
            mop(Cast w1,call("FPSCR.QC",HOLogic.boolT,var("x",@{typ FPSCR}),prev_thy )),
            mop(Cast w1,call("FPSCR.AHP",HOLogic.boolT,var("x",@{typ FPSCR}),prev_thy )),
            mop(Cast w1,call("FPSCR.DN",HOLogic.boolT,var("x",@{typ FPSCR}),prev_thy )),
            mop(Cast w1,call("FPSCR.FZ",HOLogic.boolT,var("x",@{typ FPSCR}),prev_thy )),
            call("FPSCR.RMode",(Word_Lib.mk_wordT 2),var("x",@{typ FPSCR}),prev_thy ),
            ex(var_w("fpscr'rst",10),ln 5,ln 0,(Word_Lib.mk_wordT 6)),
            mop(Cast w1,call("FPSCR.IDE",HOLogic.boolT,var("x",@{typ FPSCR}),prev_thy )),
            ex(var_w("fpscr'rst",10),ln 7,ln 6,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("FPSCR.IXE",HOLogic.boolT,var("x",@{typ FPSCR}),prev_thy )),
            mop(Cast w1,call("FPSCR.UFE",HOLogic.boolT,var("x",@{typ FPSCR}),prev_thy )),
            mop(Cast w1,call("FPSCR.OFE",HOLogic.boolT,var("x",@{typ FPSCR}),prev_thy )),
            mop(Cast w1,call("FPSCR.DZE",HOLogic.boolT,var("x",@{typ FPSCR}),prev_thy )),
            mop(Cast w1,call("FPSCR.IOE",HOLogic.boolT,var("x",@{typ FPSCR}),prev_thy )),
            mop(Cast w1,call("FPSCR.IDC",HOLogic.boolT,var("x",@{typ FPSCR}),prev_thy )),
            ex(var_w("fpscr'rst",10),ln 9,ln 8,(Word_Lib.mk_wordT 2)),
            mop(Cast w1,call("FPSCR.IXC",HOLogic.boolT,var("x",@{typ FPSCR}),prev_thy )),
            mop(Cast w1,call("FPSCR.UFC",HOLogic.boolT,var("x",@{typ FPSCR}),prev_thy )),
            mop(Cast w1,call("FPSCR.OFC",HOLogic.boolT,var("x",@{typ FPSCR}),prev_thy )),
            mop(Cast w1,call("FPSCR.DZC",HOLogic.boolT,var("x",@{typ FPSCR}),prev_thy )),
            mop(Cast w1,call("FPSCR.IOC",HOLogic.boolT,var("x",@{typ FPSCR}),prev_thy ))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'rec'FPSCR",
   close(tp[var_a w32,var("x",@{typ FPSCR})],call("reg'FPSCR",w32,var("x",@{typ FPSCR}),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'reg'FPSCR",
   close
     (tp[var_a @{typ FPSCR},var_w("x",32)],call("rec'FPSCR",@{typ FPSCR},var_w("x",32),@{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("RoundingMode",
   mb(mr(close(var("s",qTy),call("state.FP",@{typ FP},var("s",qTy),prev_thy ))),
      close
        (var("v",@{typ FP}),
         mb(mb(mu(call("FP.FPSCR",@{typ FPSCR},var("v",@{typ FP}),prev_thy ),qTy),
               close
                 (var("v",@{typ FPSCR}),
                  mu(call("FPSCR.RMode",(Word_Lib.mk_wordT 2),var("v",@{typ FPSCR}),prev_thy ),qTy))),
            close
              (var_w("x",2),
               mu(itb([(eq(var_w("x",2),lw(0,2)),@{term roundTiesToEven}),
                       (eq(var_w("x",2),lw(1,2)),@{term roundTowardPositive}),
                       (eq(var_w("x",2),lw(2,2)),@{term roundTowardNegative}),
                       (eq(var_w("x",2),lw(3,2)),@{term roundTowardZero})],lx @{typ ieee_rounding}),
                  qTy))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("FPAdd32",
   close
     (tp[var_w("op1",32),var_w("op2",32)],
      mb(const
           ("RoundingMode",@{typ "'b state_scheme \<Rightarrow> (L3_Lib.ieee_rounding \<times> 'b state_scheme)"},
            @{theory}),
         close
           (var("v",@{typ ieee_rounding}),
            mb(mu(tp[var("v",@{typ ieee_rounding}),var_w("op1",32),var_w("op2",32)],qTy),
               close
                 (var("v",@{typ "L3_Lib.ieee_rounding \<times> 32 word \<times> 32 word"}),
                  mu(mop(FPAdd false,
                         var("v",@{typ "L3_Lib.ieee_rounding \<times> 32 word \<times> 32 word"})),
                     qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("FPSub32",
   close
     (tp[var_w("op1",32),var_w("op2",32)],
      mb(const
           ("RoundingMode",@{typ "'b state_scheme \<Rightarrow> (L3_Lib.ieee_rounding \<times> 'b state_scheme)"},
            @{theory}),
         close
           (var("v",@{typ ieee_rounding}),
            mb(mu(tp[var("v",@{typ ieee_rounding}),var_w("op1",32),var_w("op2",32)],qTy),
               close
                 (var("v",@{typ "L3_Lib.ieee_rounding \<times> 32 word \<times> 32 word"}),
                  mu(mop(FPSub false,
                         var("v",@{typ "L3_Lib.ieee_rounding \<times> 32 word \<times> 32 word"})),
                     qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("FPMul32",
   close
     (tp[var_w("op1",32),var_w("op2",32)],
      mb(const
           ("RoundingMode",@{typ "'b state_scheme \<Rightarrow> (L3_Lib.ieee_rounding \<times> 'b state_scheme)"},
            @{theory }),
         close
           (var("v",@{typ ieee_rounding}),
            mb(mu(tp[var("v",@{typ ieee_rounding}),var_w("op1",32),var_w("op2",32)],qTy),
               close
                 (var("v",@{typ "L3_Lib.ieee_rounding \<times> 32 word \<times> 32 word"}),
                  mu(mop(FPMul false,
                         var("v",@{typ "L3_Lib.ieee_rounding \<times> 32 word \<times> 32 word"})),
                     qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("FPAdd64",
   close
     (tp[var_w("op1",64),var_w("op2",64)],
      mb(const
           ("RoundingMode",@{typ "'b state_scheme \<Rightarrow> (L3_Lib.ieee_rounding \<times> 'b state_scheme)"},
            @{theory }),
         close
           (var("v",@{typ ieee_rounding}),
            mb(mu(tp[var("v",@{typ ieee_rounding}),var_w("op1",64),var_w("op2",64)],qTy),
               close
                 (var("v",@{typ "L3_Lib.ieee_rounding \<times> 64 word \<times> 64 word"}),
                  mu(mop(FPAdd true,
                         var("v",@{typ "L3_Lib.ieee_rounding \<times> 64 word \<times> 64 word"})),
                     qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("FPSub64",
   close
     (tp[var_w("op1",64),var_w("op2",64)],
      mb(const
           ("RoundingMode",@{typ "'b state_scheme \<Rightarrow> (L3_Lib.ieee_rounding \<times> 'b state_scheme)"},
            @{theory}),
         close
           (var("v",@{typ ieee_rounding}),
            mb(mu(tp[var("v",@{typ ieee_rounding}),var_w("op1",64),var_w("op2",64)],qTy),
               close
                 (var("v",@{typ "L3_Lib.ieee_rounding \<times> 64 word \<times> 64 word"}),
                  mu(mop(FPSub true,
                         var("v",@{typ "L3_Lib.ieee_rounding \<times> 64 word \<times> 64 word"})),
                     qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("FPMul64",
   close
     (tp[var_w("op1",64),var_w("op2",64)],
      mb(const
           ("RoundingMode",@{typ "'b state_scheme \<Rightarrow> (L3_Lib.ieee_rounding \<times> 'b state_scheme)"},
            @{theory }),
         close
           (var("v",@{typ ieee_rounding}),
            mb(mu(tp[var("v",@{typ ieee_rounding}),var_w("op1",64),var_w("op2",64)],qTy),
               close
                 (var("v",@{typ "L3_Lib.ieee_rounding \<times> 64 word \<times> 64 word"}),
                  mu(mop(FPMul true,
                         var("v",@{typ "L3_Lib.ieee_rounding \<times> 64 word \<times> 64 word"})),
                     qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("FPToFixed32",
   close
     (tp[var_w("operand",32),var_b"unsigned",var_b"round_towards_zero"],
      mb(ite(var_b"round_towards_zero",mu(@{term roundTowardZero},qTy),
             const
               ("RoundingMode",@{typ "'b state_scheme \<Rightarrow> (L3_Lib.ieee_rounding \<times> 'b state_scheme)"},
                @{theory })),
         close
           (var("mode",@{typ ieee_rounding}),
            cs(mop(FPToInt false,tp[var("mode",@{typ ieee_rounding}),var_w("operand",32)]),
               [(mop(Some,var_i"i"),
                 mb(call
                      ("SatQ",@{typ "'b state_scheme \<Rightarrow> ((32 word \<times> bool) \<times> 'b state_scheme)"},
                       tp[var_i"i",ln 32,var_b"unsigned"],@{theory}),
                    close
                      (var("x",@{typ "32 word \<times> bool"}),
                       cs(var("x",@{typ "32 word \<times> bool"}),
                          [(tp[var_w("result",32),var_b"overflow"],
                            ite(var_b"overflow",
                                call
                                  ("raise'exception",
                                   @{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                   call
                                     ("exception.VFP_EXCEPTION",@{typ exception},
                                      ls"FPToFixed32: overflow exception",@{theory ARM_Monadic}),@{theory ARM_Monadic}),
                                mu(var_w("result",32),qTy)))],@{context})))),
                (lo HOLogic.intT,
                 call
                   ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                    call
                      ("exception.VFP_EXCEPTION",@{typ exception},ls"FPToFixed32: NaN or infinity",
                       @{theory ARM_Monadic}),@{theory ARM_Monadic}))],@{context})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("FPToFixed64",
   close
     (tp[var_w("operand",64),var_b"unsigned",var_b"round_towards_zero"],
      mb(ite(var_b"round_towards_zero",mu(@{term roundTowardZero},qTy),
             const
               ("RoundingMode",@{typ "'b state_scheme \<Rightarrow> (L3_Lib.ieee_rounding \<times> 'b state_scheme)"},
                @{theory })),
         close
           (var("mode",@{typ ieee_rounding}),
            cs(mop(FPToInt true,tp[var("mode",@{typ ieee_rounding}),var_w("operand",64)]),
               [(mop(Some,var_i"i"),
                 mb(call
                      ("SatQ",@{typ "'b state_scheme \<Rightarrow> ((32 word \<times> bool) \<times> 'b state_scheme)"},
                       tp[var_i"i",ln 32,var_b"unsigned"],@{theory }),
                    close
                      (var("x",@{typ "32 word \<times> bool"}),
                       cs(var("x",@{typ "32 word \<times> bool"}),
                          [(tp[var_w("result",32),var_b"overflow"],
                            ite(var_b"overflow",
                                call
                                  ("raise'exception",
                                   @{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                   call
                                     ("exception.VFP_EXCEPTION",@{typ exception},
                                      ls"FPToFixed64: overflow exception",@{theory ARM_Monadic}),@{theory ARM_Monadic}),
                                mu(var_w("result",32),qTy)))],@{context})))),
                (lo HOLogic.intT,
                 call
                   ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                    call
                      ("exception.VFP_EXCEPTION",@{typ exception},ls"FPToFixed64: NaN or infinity",
                       @{theory ARM_Monadic}),@{theory ARM_Monadic}))],@{context})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("FixedToFP32",
   close
     (tp[var_w("operand",32),var_b"unsigned",var_b"round_to_nearest"],
      mb(ite(var_b"round_to_nearest",mu(@{term roundTiesToEven},qTy),
             const
               ("RoundingMode",@{typ "'b state_scheme \<Rightarrow> (L3_Lib.ieee_rounding \<times> 'b state_scheme)"},
                @{theory })),
         close
           (var("mode",@{typ ieee_rounding}),
            mu(mop(FPFromInt false,
                   tp[var("mode",@{typ ieee_rounding}),
                      ite(var_b"unsigned",
                          mop(Cast HOLogic.intT,mop(Cast HOLogic.natT,var_w("operand",32))),
                          mop(Cast HOLogic.intT,var_w("operand",32)))]),qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("FixedToFP64",
   close
     (tp[var_w("operand",32),var_b"unsigned",var_b"round_to_nearest"],
      mb(ite(var_b"round_to_nearest",mu(@{term roundTiesToEven},qTy),
             const
               ("RoundingMode",@{typ "'b state_scheme \<Rightarrow> (L3_Lib.ieee_rounding \<times> 'b state_scheme)"},
                @{theory })),
         close
           (var("mode",@{typ ieee_rounding}),
            mu(mop(FPFromInt true,
                   tp[var("mode",@{typ ieee_rounding}),
                      ite(var_b"unsigned",
                          mop(Cast HOLogic.intT,mop(Cast HOLogic.natT,var_w("operand",32))),
                          mop(Cast HOLogic.intT,var_w("operand",32)))]),qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("D",
   close
     (var_w("n",5),
      mb(mr(close(var("s",qTy),call("state.FP",@{typ FP},var("s",qTy),prev_thy ))),
         close
           (var("v",@{typ FP}),
            mb(mu(call("FP.REG",@{typ "5 word \<Rightarrow> 64 word"},var("v",@{typ FP}),prev_thy ),
                  qTy),
               close
                 (var("v",@{typ "5 word \<Rightarrow> 64 word"}),
                  mu(apply(var("v",@{typ "5 word \<Rightarrow> 64 word"}),var_w("n",5)),qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("write'D",
   close
     (tp[var_w("value",64),var_w("n",5)],
      mb(mr(close(var("s",qTy),call("state.FP",@{typ FP},var("s",qTy),prev_thy ))),
         close
           (var("v",@{typ FP}),
            mb(mu(call("FP.REG",@{typ "5 word \<Rightarrow> 64 word"},var("v",@{typ FP}),prev_thy ),
                  qTy),
               close
                 (var("f",@{typ "5 word \<Rightarrow> 64 word"}),
                  mb(mr(close(var("s",qTy),call("state.FP",@{typ FP},var("s",qTy),prev_thy ))),
                     close
                       (var("v",@{typ FP}),
                        mb(mb(mu(tp[var("v",@{typ FP}),
                                    fupd
                                      (var("f",@{typ "5 word \<Rightarrow> 64 word"}),var_w("n",5),
                                       var_w("value",64))],qTy),
                              close
                                (var("v",@{typ "FP \<times> (5 word \<Rightarrow> 64 word)"}),
                                 mu(rupd
                                      ("FP.REG",
                                       var("v",@{typ "FP \<times> (5 word \<Rightarrow> 64 word)"}),
                                       prev_thy ),qTy))),
                           close
                             (var("v",@{typ FP}),
                              mw(close
                                   (var("s",qTy),
                                    rupd("state.FP",tp[var("s",qTy),var("v",@{typ FP})],prev_thy )))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("S",
   close
     (var_w("n",5),
      ite(bop(Bit,var_w("n",5),ln 0),
          mb(call
               ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                bop(Div,var_w("n",5),lw(2,5)),@{theory}),
             close(var_w("v",64),mu(ex(var_w("v",64),ln 63,ln 32,w32),qTy))),
          mb(call
               ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                bop(Div,var_w("n",5),lw(2,5)),@{theory}),
             close(var_w("v",64),mu(ex(var_w("v",64),ln 31,ln 0,w32),qTy))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("write'S",
   close
     (tp[var_w("value",32),var_w("n",5)],
      ite(bop(Bit,var_w("n",5),ln 0),
          let'
            (var_w("x",5),bop(Div,var_w("n",5),lw(2,5)),
             mb(call
                  ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},var_w("x",5),@{theory}),
                close
                  (var_w("w",64),
                   call
                     ("write'D",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                      tp[bfi(ln 63,ln 32,var_w("value",32),var_w("w",64)),var_w("x",5)],@{theory})))),
          let'
            (var_w("x",5),bop(Div,var_w("n",5),lw(2,5)),
             mb(call
                  ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},var_w("x",5),@{theory}),
                close
                  (var_w("w",64),
                   call
                     ("write'D",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                      tp[bfi(ln 31,ln 0,var_w("value",32),var_w("w",64)),var_w("x",5)],@{theory})))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("VFPExpandImm",
   close
     (tp[var_w("imm8",8),var_b"single"],
      ite(var_b"single",
          mop(Cast w64,
              cc[ex(var_w("imm8",8),ln 7,ln 7,w1),mop(BNot,ex(var_w("imm8",8),ln 6,ln 6,w1)),
                 rep(ex(var_w("imm8",8),ln 6,ln 6,w1),ln 5,(Word_Lib.mk_wordT 5)),
                 ex(var_w("imm8",8),ln 5,ln 0,(Word_Lib.mk_wordT 6)),
                 rep(lw(0,1),ln 19,(Word_Lib.mk_wordT 19))]),
          cc[ex(var_w("imm8",8),ln 7,ln 7,w1),mop(BNot,ex(var_w("imm8",8),ln 6,ln 6,w1)),
             rep(ex(var_w("imm8",8),ln 6,ln 6,w1),ln 8,w8),
             ex(var_w("imm8",8),ln 5,ln 0,(Word_Lib.mk_wordT 6)),
             rep(lw(0,1),ln 48,(Word_Lib.mk_wordT 48))])))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("FPCompare32",
   close
     (tp[var_w("op1",32),var_w("op2",32)],
      itb([(bop(Or,mop(FPIsNan false,var_w("op1",32)),mop(FPIsNan false,var_w("op2",32))),lw(3,4)),
           (mop(FPEqual false,tp[var_w("op1",32),var_w("op2",32)]),lw(6,4)),
           (mop(FPLessThan false,tp[var_w("op1",32),var_w("op2",32)]),lw(8,4))],lw(2,4))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("FPCompare64",
   close
     (tp[var_w("op1",64),var_w("op2",64)],
      itb([(bop(Or,mop(FPIsNan true,var_w("op1",64)),mop(FPIsNan true,var_w("op2",64))),lw(3,4)),
           (mop(FPEqual true,tp[var_w("op1",64),var_w("op2",64)]),lw(6,4)),
           (mop(FPLessThan true,tp[var_w("op1",64),var_w("op2",64)]),lw(8,4))],lw(2,4))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("FPZero32",close(var_w("sign",1),cc[var_w("sign",1),lw(0,31)]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def ("FPZero64",close(var_w("sign",1),cc[var_w("sign",1),lw(0,63)]))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'vmov_imm",
   close
     (tp[var_b"single_register",var_w("d",5),var_w("imm64",64)],
      mb(ite(var_b"single_register",
             call
               ("write'S",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                tp[ex(var_w("imm64",64),ln 31,ln 0,w32),var_w("d",5)],@{theory}),
             call
               ("write'D",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                tp[var_w("imm64",64),var_w("d",5)],@{theory})),
         close
           (var_a HOLogic.unitT,
            call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'vmov",
   close
     (tp[var_b"single_register",var_w("d",5),var_w("m",5)],
      mb(ite(var_b"single_register",
             mb(call
                  ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",5),@{theory}),
                close
                  (var_w("v",32),
                   mb(mu(tp[var_w("v",32),var_w("d",5)],qTy),
                      close
                        (var("v",@{typ "32 word \<times> 5 word"}),
                         call
                           ("write'S",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "32 word \<times> 5 word"}),@{theory}))))),
             mb(call
                  ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},var_w("m",5),@{theory }),
                close
                  (var_w("v",64),
                   mb(mu(tp[var_w("v",64),var_w("d",5)],qTy),
                      close
                        (var("v",@{typ "64 word \<times> 5 word"}),
                         call
                           ("write'D",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "64 word \<times> 5 word"}),@{theory})))))),
         close
           (var_a HOLogic.unitT,
            call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'vmov_single",
   close
     (tp[var_b"to_arm_register",var_w("t",4),var_w("n",5)],
      mb(ite(var_b"to_arm_register",
             mb(call
                  ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",5),@{theory}),
                close
                  (var_w("v",32),
                   mb(mu(tp[var_w("v",32),var_w("t",4)],qTy),
                      close
                        (var("v",@{typ "32 word \<times> 4 word"}),
                         call
                           ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "32 word \<times> 4 word"}),@{theory ARM_Monadic}))))),
             mb(call
                  ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("t",4),@{theory ARM_Monadic}),
                close
                  (var_w("v",32),
                   mb(mu(tp[var_w("v",32),var_w("n",5)],qTy),
                      close
                        (var("v",@{typ "32 word \<times> 5 word"}),
                         call
                           ("write'S",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "32 word \<times> 5 word"}),@{theory})))))),
         close
           (var_a HOLogic.unitT,
            call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'vmov_two_singles",
   close
     (tp[var_b"to_arm_registers",var_w("t",4),var_w("t2",4),var_w("m",5)],
      mb(ite(var_b"to_arm_registers",
             mb(call
                  ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",5),@{theory}),
                close
                  (var_w("v",32),
                   mb(mb(mu(tp[var_w("v",32),var_w("t",4)],qTy),
                         close
                           (var("v",@{typ "32 word \<times> 4 word"}),
                            call
                              ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                               var("v",@{typ "32 word \<times> 4 word"}),@{theory ARM_Monadic}))),
                      close
                        (var_a HOLogic.unitT,
                         mb(call
                              ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                               bop(Add,var_w("m",5),lw(1,5)),@{theory}),
                            close
                              (var_w("v",32),
                               mb(mu(tp[var_w("v",32),var_w("t2",4)],qTy),
                                  close
                                    (var("v",@{typ "32 word \<times> 4 word"}),
                                     call
                                       ("write'R",
                                        @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                        var("v",@{typ "32 word \<times> 4 word"}),@{theory ARM_Monadic}))))))))),
             mb(call
                  ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("t",4),@{theory ARM_Monadic}),
                close
                  (var_w("v",32),
                   mb(mb(mu(tp[var_w("v",32),var_w("m",5)],qTy),
                         close
                           (var("v",@{typ "32 word \<times> 5 word"}),
                            call
                              ("write'S",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                               var("v",@{typ "32 word \<times> 5 word"}),@{theory}))),
                      close
                        (var_a HOLogic.unitT,
                         mb(call
                              ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                               var_w("t2",4),@{theory ARM_Monadic}),
                            close
                              (var_w("v",32),
                               mb(mu(tp[var_w("v",32),bop(Add,var_w("m",5),lw(1,5))],qTy),
                                  close
                                    (var("v",@{typ "32 word \<times> 5 word"}),
                                     call
                                       ("write'S",
                                        @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                        var("v",@{typ "32 word \<times> 5 word"}),@{theory})))))))))),
         close
           (var_a HOLogic.unitT,
            call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'vmov_double",
   close
     (tp[var_b"to_arm_registers",var_w("t",4),var_w("t2",4),var_w("m",5)],
      mb(ite(var_b"to_arm_registers",
             mb(call
                  ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},var_w("m",5),@{theory}),
                close
                  (var_w("v",64),
                   mb(mb(mb(mu(ex(var_w("v",64),ln 31,ln 0,w32),qTy),
                            close(var_w("v",32),mu(tp[var_w("v",32),var_w("t",4)],qTy))),
                         close
                           (var("v",@{typ "32 word \<times> 4 word"}),
                            call
                              ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                               var("v",@{typ "32 word \<times> 4 word"}),@{theory ARM_Monadic}))),
                      close
                        (var_a HOLogic.unitT,
                         mb(call
                              ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                               var_w("m",5),@{theory}),
                            close
                              (var_w("v",64),
                               mb(mb(mu(ex(var_w("v",64),ln 63,ln 32,w32),qTy),
                                     close(var_w("v",32),mu(tp[var_w("v",32),var_w("t2",4)],qTy))),
                                  close
                                    (var("v",@{typ "32 word \<times> 4 word"}),
                                     call
                                       ("write'R",
                                        @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                        var("v",@{typ "32 word \<times> 4 word"}),@{theory ARM_Monadic}))))))))),
             mb(call
                  ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},var_w("m",5),@{theory}),
                close
                  (var_w("v",64),
                   mb(mb(call
                           ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("t",4),
                            @{theory ARM_Monadic}),
                         close
                           (var_w("v0",32),
                            mb(mb(mu(bfi(ln 31,ln 0,var_w("v0",32),var_w("v",64)),qTy),
                                  close(var_w("v",64),mu(tp[var_w("v",64),var_w("m",5)],qTy))),
                               close
                                 (var("v",@{typ "64 word \<times> 5 word"}),
                                  call
                                    ("write'D",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                     var("v",@{typ "64 word \<times> 5 word"}),@{theory}))))),
                      close
                        (var_a HOLogic.unitT,
                         mb(call
                              ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                               var_w("m",5),@{theory}),
                            close
                              (var_w("w",64),
                               mb(call
                                    ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                     var_w("t2",4),@{theory ARM_Monadic}),
                                  close
                                    (var_w("v",32),
                                     mb(mb(mu(bfi(ln 63,ln 32,var_w("v",32),var_w("w",64)),qTy),
                                           close
                                             (var_w("v",64),mu(tp[var_w("v",64),var_w("m",5)],qTy))),
                                        close
                                          (var("v",@{typ "64 word \<times> 5 word"}),
                                           call
                                             ("write'D",
                                              @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                              var("v",@{typ "64 word \<times> 5 word"}),@{theory})))))))))))),
         close
           (var_a HOLogic.unitT,
            call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))))
end
\<close>

(*

ML \<open>
local 
open L3 
val qTy = @{typ state} 
in
val () = def
  ("dfn'vabs",
   close
     (tp[var_b"dp_operation",var_w("d",5),var_w("m",5)],
      mb(ite(var_b"dp_operation",
             mb(call
                  ("D",@{typ "state \<Rightarrow> (64 word \<times> state)"},var_w("m",5),@{theory}),
                close
                  (var_w("v",64),
                   mb(mb(mu(mop(FPAbs (true, false),var_w("v",64)),qTy),
                         close(var_w("v",64),mu(tp[var_w("v",64),var_w("d",5)],qTy))),
                      close
                        (var("v",@{typ "64 word \<times> 5 word"}),
                         call
                           ("write'D",@{typ "state \<Rightarrow> (unit \<times> state)"},
                            var("v",@{typ "64 word \<times> 5 word"}),@{theory}))))),
             mb(call
                  ("S",@{typ "state \<Rightarrow> (32 word \<times> state)"},var_w("m",5),@{theory}),
                close
                  (var_w("v",32),
                   mb(mb(mu(mop(FPAbs (false, false),var_w("v",32)),qTy),
                         close(var_w("v",32),mu(tp[var_w("v",32),var_w("d",5)],qTy))),
                      close
                        (var("v",@{typ "32 word \<times> 5 word"}),
                         call
                           ("write'S",@{typ "state \<Rightarrow> (unit \<times> state)"},
                            var("v",@{typ "32 word \<times> 5 word"}),@{theory})))))),
         close
           (var_a HOLogic.unitT,
            call("IncPC",@{typ "state \<Rightarrow> (unit \<times> state)"},lu,@{theory})))))
end
\<close>

*)

thm write'D_def
term write'D

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'vabs",
   close
     (tp[var_b"dp_operation",var_w("d",5),var_w("m",5)],
      mb(ite(var_b"dp_operation",
             mb(call
                  ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},var_w("m",5),@{theory }),
                close
                  (var_w("v",64),
                   mb(mb(mu(mop(FPAbs (true, false),var_w("v",64)),qTy),
                         close(var_w("v",64),mu(tp[var_w("v",64),var_w("d",5)],qTy))),
                      close
                        (var("v",@{typ "64 word \<times> 5 word"}),
                         call
                           ("write'D",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "64 word \<times> 5 word"}),@{theory}))))),
             mb(call
                  ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",5),@{theory}),
                close
                  (var_w("v",32),
                   mb(mb(mu(mop(FPAbs (false, false),var_w("v",32)),qTy),
                         close(var_w("v",32),mu(tp[var_w("v",32),var_w("d",5)],qTy))),
                      close
                        (var("v",@{typ "32 word \<times> 5 word"}),
                         call
                           ("write'S",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "32 word \<times> 5 word"}),@{theory})))))),
         close
           (var_a HOLogic.unitT,
            call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'vneg",
   close
     (tp[var_b"dp_operation",var_w("d",5),var_w("m",5)],
      mb(ite(var_b"dp_operation",
             mb(call
                  ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},var_w("m",5),@{theory }),
                close
                  (var_w("v",64),
                   mb(mb(mu(mop(FPNeg (true, false),var_w("v",64)),qTy),
                         close(var_w("v",64),mu(tp[var_w("v",64),var_w("d",5)],qTy))),
                      close
                        (var("v",@{typ "64 word \<times> 5 word"}),
                         call
                           ("write'D",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "64 word \<times> 5 word"}),@{theory}))))),
             mb(call
                  ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",5),@{theory}),
                close
                  (var_w("v",32),
                   mb(mb(mu(mop(FPNeg (false, false),var_w("v",32)),qTy),
                         close(var_w("v",32),mu(tp[var_w("v",32),var_w("d",5)],qTy))),
                      close
                        (var("v",@{typ "32 word \<times> 5 word"}),
                         call
                           ("write'S",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "32 word \<times> 5 word"}),@{theory})))))),
         close
           (var_a HOLogic.unitT,
            call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'vsqrt",
   close
     (tp[var_b"dp_operation",var_w("d",5),var_w("m",5)],
      mb(ite(var_b"dp_operation",
             mb(const
                  ("RoundingMode",
                   @{typ "'b state_scheme \<Rightarrow> (L3_Lib.ieee_rounding \<times> 'b state_scheme)"},@{theory }),
                close
                  (var("v",@{typ ieee_rounding}),
                   mb(mb(mb(mb(call
                                 ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                                  var_w("m",5),@{theory}),
                               close
                                 (var_w("v0",64),
                                  mu(tp[var("v",@{typ ieee_rounding}),var_w("v0",64)],qTy))),
                            close
                              (var("v",@{typ "L3_Lib.ieee_rounding \<times> 64 word"}),
                               mu(mop(FPSqrt true,
                                      var("v",@{typ "L3_Lib.ieee_rounding \<times> 64 word"})),qTy))),
                         close(var_w("v",64),mu(tp[var_w("v",64),var_w("d",5)],qTy))),
                      close
                        (var("v",@{typ "64 word \<times> 5 word"}),
                         call
                           ("write'D",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "64 word \<times> 5 word"}),@{theory}))))),
             mb(const
                  ("RoundingMode",
                   @{typ "'b state_scheme \<Rightarrow> (L3_Lib.ieee_rounding \<times> 'b state_scheme)"},@{theory }),
                close
                  (var("v",@{typ ieee_rounding}),
                   mb(mb(mb(mb(call
                                 ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                  var_w("m",5),@{theory}),
                               close
                                 (var_w("v0",32),
                                  mu(tp[var("v",@{typ ieee_rounding}),var_w("v0",32)],qTy))),
                            close
                              (var("v",@{typ "L3_Lib.ieee_rounding \<times> 32 word"}),
                               mu(mop(FPSqrt false,
                                      var("v",@{typ "L3_Lib.ieee_rounding \<times> 32 word"})),qTy))),
                         close(var_w("v",32),mu(tp[var_w("v",32),var_w("d",5)],qTy))),
                      close
                        (var("v",@{typ "32 word \<times> 5 word"}),
                         call
                           ("write'S",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "32 word \<times> 5 word"}),@{theory})))))),
         close
           (var_a HOLogic.unitT,
            call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'vcvt_float",
   close
     (tp[var_b"double_to_single",var_w("d",5),var_w("m",5)],
      mb(ite(var_b"double_to_single",
             mb(const
                  ("RoundingMode",
                   @{typ "'b state_scheme \<Rightarrow> (L3_Lib.ieee_rounding \<times> 'b state_scheme)"},@{theory}),
                close
                  (var("v",@{typ ieee_rounding}),
                   mb(mb(mb(mb(call
                                 ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                                  var_w("m",5),@{theory}),
                               close
                                 (var_w("v0",64),
                                  mu(tp[var("v",@{typ ieee_rounding}),var_w("v0",64)],qTy))),
                            close
                              (var("v",@{typ "L3_Lib.ieee_rounding \<times> 64 word"}),
                               mu(mop(FP64To32,
                                      var("v",@{typ "L3_Lib.ieee_rounding \<times> 64 word"})),qTy))),
                         close(var_w("v",32),mu(tp[var_w("v",32),var_w("d",5)],qTy))),
                      close
                        (var("v",@{typ "32 word \<times> 5 word"}),
                         call
                           ("write'S",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "32 word \<times> 5 word"}),@{theory}))))),
             mb(call
                  ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",5),@{theory}),
                close
                  (var_w("v",32),
                   mb(mb(mu(mop(FP32To64,var_w("v",32)),qTy),
                         close(var_w("v",64),mu(tp[var_w("v",64),var_w("d",5)],qTy))),
                      close
                        (var("v",@{typ "64 word \<times> 5 word"}),
                         call
                           ("write'D",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "64 word \<times> 5 word"}),@{theory})))))),
         close
           (var_a HOLogic.unitT,
            call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'vcvt_to_integer",
   close
     (tp[var_b"dp_operation",var_b"unsigned",var_b"round_zero",var_w("d",5),var_w("m",5)],
      mb(ite(var_b"dp_operation",
             mb(call
                  ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},var_w("m",5),@{theory}),
                close
                  (var_w("v",64),
                   mb(mb(mb(mu(tp[var_w("v",64),var_b"unsigned",var_b"round_zero"],qTy),
                            close
                              (var("v",@{typ "64 word \<times> bool \<times> bool"}),
                               call
                                 ("FPToFixed64",
                                  @{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                  var("v",@{typ "64 word \<times> bool \<times> bool"}),@{theory}))),
                         close(var_w("v",32),mu(tp[var_w("v",32),var_w("d",5)],qTy))),
                      close
                        (var("v",@{typ "32 word \<times> 5 word"}),
                         call
                           ("write'S",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "32 word \<times> 5 word"}),@{theory}))))),
             mb(call
                  ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",5),@{theory}),
                close
                  (var_w("v",32),
                   mb(mb(mb(mu(tp[var_w("v",32),var_b"unsigned",var_b"round_zero"],qTy),
                            close
                              (var("v",@{typ "32 word \<times> bool \<times> bool"}),
                               call
                                 ("FPToFixed32",
                                  @{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                  var("v",@{typ "32 word \<times> bool \<times> bool"}),@{theory}))),
                         close(var_w("v",32),mu(tp[var_w("v",32),var_w("d",5)],qTy))),
                      close
                        (var("v",@{typ "32 word \<times> 5 word"}),
                         call
                           ("write'S",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "32 word \<times> 5 word"}),@{theory})))))),
         close
           (var_a HOLogic.unitT,
            call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'vcvt_from_integer",
   close
     (tp[var_b"dp_operation",var_b"unsigned",var_w("d",5),var_w("m",5)],
      mb(ite(var_b"dp_operation",
             mb(call
                  ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",5),@{theory}),
                close
                  (var_w("v",32),
                   mb(mb(mb(mu(tp[var_w("v",32),var_b"unsigned",lf],qTy),
                            close
                              (var("v",@{typ "32 word \<times> bool \<times> bool"}),
                               call
                                 ("FixedToFP64",
                                  @{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                                  var("v",@{typ "32 word \<times> bool \<times> bool"}),@{theory}))),
                         close(var_w("v",64),mu(tp[var_w("v",64),var_w("d",5)],qTy))),
                      close
                        (var("v",@{typ "64 word \<times> 5 word"}),
                         call
                           ("write'D",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "64 word \<times> 5 word"}),@{theory}))))),
             mb(call
                  ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",5),@{theory}),
                close
                  (var_w("v",32),
                   mb(mb(mb(mu(tp[var_w("v",32),var_b"unsigned",lf],qTy),
                            close
                              (var("v",@{typ "32 word \<times> bool \<times> bool"}),
                               call
                                 ("FixedToFP32",
                                  @{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                  var("v",@{typ "32 word \<times> bool \<times> bool"}),@{theory}))),
                         close(var_w("v",32),mu(tp[var_w("v",32),var_w("d",5)],qTy))),
                      close
                        (var("v",@{typ "32 word \<times> 5 word"}),
                         call
                           ("write'S",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "32 word \<times> 5 word"}),@{theory})))))),
         close
           (var_a HOLogic.unitT,
            call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'vcmp",
   close
     (tp[var_b"dp_operation",var_w("d",5),var("m_with_zero",@{typ "5 word option"})],
      mb(ite(var_b"dp_operation",
             mb(cs(var("m_with_zero",@{typ "5 word option"}),
                   [(mop(Some,var_w("m",5)),
                     call
                       ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},var_w("m",5),
                        @{theory})),
                    (lo (Word_Lib.mk_wordT 5),mu(call("FPZero64",w64,lw(0,1),@{theory}),qTy))],
                   @{context}),
                close
                  (var_w("op2",64),
                   mb(mr(close(var("s",qTy),call("state.FP",@{typ FP},var("s",qTy),prev_thy))),
                      close
                        (var("v",@{typ FP}),
                         mb(mu(call("FP.FPSCR",@{typ FPSCR},var("v",@{typ FP}),prev_thy),qTy),
                            close
                              (var("x0",@{typ FPSCR}),
                               mb(mr(close
                                       (var("s",qTy),
                                        call("state.FP",@{typ FP},var("s",qTy),prev_thy))),
                                  close
                                    (var("v",@{typ FP}),
                                     mb(mb(mb(call
                                                ("D",
                                                 @{typ
                                                 "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                                                 var_w("d",5),@{theory}),
                                              close
                                                (var_w("v0",64),
                                                 mb(mb(mb(mb(mb(mu(tp[var_w("v0",64),var_w("op2",64)],
                                                                   qTy),
                                                                close
                                                                  (var("v",
                                                                       @{typ
                                                                       "64 word \<times> 64 word"}),
                                                                   mu(call
                                                                        ("FPCompare64",w4,
                                                                         var("v",
                                                                             @{typ
                                                                             "64 word \<times>
                                                                              64 word"}),@{theory}),
                                                                      qTy))),
                                                             close
                                                               (var_w("v",4),
                                                                mu(bfi(ln 31,ln 28,var_w("v",4),
                                                                       call
                                                                         ("reg'FPSCR",w32,
                                                                          var("x0",@{typ FPSCR}),
                                                                          @{theory })),qTy))),
                                                          close
                                                            (var_w("v",32),
                                                             mu(tp[var("x0",@{typ FPSCR}),
                                                                   var_w("v",32)],qTy))),
                                                       close
                                                         (var("v",@{typ "FPSCR \<times> 32 word"}),
                                                          mu(call
                                                               ("write'reg'FPSCR",@{typ FPSCR},
                                                                var("v",
                                                                    @{typ "FPSCR \<times> 32 word"}),
                                                                @{theory}),qTy))),
                                                    close
                                                      (var("v0",@{typ FPSCR}),
                                                       mu(tp[var("v",@{typ FP}),
                                                             var("v0",@{typ FPSCR})],qTy))))),
                                           close
                                             (var("v",@{typ "FP \<times> FPSCR"}),
                                              mu(rupd
                                                   ("FP.FPSCR",var("v",@{typ "FP \<times> FPSCR"}),
                                                    prev_thy),qTy))),
                                        close
                                          (var("v",@{typ FP}),
                                           mw(close
                                                (var("s",qTy),
                                                 rupd
                                                   ("state.FP",tp[var("s",qTy),var("v",@{typ FP})],
                                                    prev_thy))))))))))))),
             mb(cs(var("m_with_zero",@{typ "5 word option"}),
                   [(mop(Some,var_w("m",5)),
                     call
                       ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",5),
                        @{theory})),
                    (lo (Word_Lib.mk_wordT 5),mu(call("FPZero32",w32,lw(0,1),@{theory}),qTy))],
                   @{context}),
                close
                  (var_w("op2",32),
                   mb(mr(close(var("s",qTy),call("state.FP",@{typ FP},var("s",qTy),prev_thy))),
                      close
                        (var("v",@{typ FP}),
                         mb(mu(call("FP.FPSCR",@{typ FPSCR},var("v",@{typ FP}),prev_thy),qTy),
                            close
                              (var("x0",@{typ FPSCR}),
                               mb(mr(close
                                       (var("s",qTy),
                                        call("state.FP",@{typ FP},var("s",qTy),prev_thy))),
                                  close
                                    (var("v",@{typ FP}),
                                     mb(mb(mb(call
                                                ("S",
                                                 @{typ
                                                 "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                                 var_w("d",5),@{theory}),
                                              close
                                                (var_w("v0",32),
                                                 mb(mb(mb(mb(mb(mu(tp[var_w("v0",32),var_w("op2",32)],
                                                                   qTy),
                                                                close
                                                                  (var("v",
                                                                       @{typ
                                                                       "32 word \<times> 32 word"}),
                                                                   mu(call
                                                                        ("FPCompare32",w4,
                                                                         var("v",
                                                                             @{typ
                                                                             "32 word \<times>
                                                                              32 word"}),@{theory}),
                                                                      qTy))),
                                                             close
                                                               (var_w("v",4),
                                                                mu(bfi(ln 31,ln 28,var_w("v",4),
                                                                       call
                                                                         ("reg'FPSCR",w32,
                                                                          var("x0",@{typ FPSCR}),
                                                                          @{theory})),qTy))),
                                                          close
                                                            (var_w("v",32),
                                                             mu(tp[var("x0",@{typ FPSCR}),
                                                                   var_w("v",32)],qTy))),
                                                       close
                                                         (var("v",@{typ "FPSCR \<times> 32 word"}),
                                                          mu(call
                                                               ("write'reg'FPSCR",@{typ FPSCR},
                                                                var("v",
                                                                    @{typ "FPSCR \<times> 32 word"}),
                                                                @{theory}),qTy))),
                                                    close
                                                      (var("v0",@{typ FPSCR}),
                                                       mu(tp[var("v",@{typ FP}),
                                                             var("v0",@{typ FPSCR})],qTy))))),
                                           close
                                             (var("v",@{typ "FP \<times> FPSCR"}),
                                              mu(rupd
                                                   ("FP.FPSCR",var("v",@{typ "FP \<times> FPSCR"}),
                                                    prev_thy),qTy))),
                                        close
                                          (var("v",@{typ FP}),
                                           mw(close
                                                (var("s",qTy),
                                                 rupd
                                                   ("state.FP",tp[var("s",qTy),var("v",@{typ FP})],
                                                    prev_thy)))))))))))))),
         close
           (var_a HOLogic.unitT,
            call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'vmsr",
   close
     (var_w("t",4),
      mb(mr(close(var("s",qTy),call("state.FP",@{typ FP},var("s",qTy),prev_thy))),
         close
           (var("v",@{typ FP}),
            mb(mb(mu(call("FP.FPSCR",@{typ FPSCR},var("v",@{typ FP}),prev_thy),qTy),
                  close
                    (var("x0",@{typ FPSCR}),
                     mb(mr(close(var("s",qTy),call("state.FP",@{typ FP},var("s",qTy),prev_thy))),
                        close
                          (var("v",@{typ FP}),
                           mb(mb(mb(call
                                      ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                       var_w("t",4),@{theory ARM_Monadic}),
                                    close
                                      (var_w("v0",32),
                                       mb(mb(mu(tp[var("x0",@{typ FPSCR}),var_w("v0",32)],qTy),
                                             close
                                               (var("v",@{typ "FPSCR \<times> 32 word"}),
                                                mu(call
                                                     ("write'reg'FPSCR",@{typ FPSCR},
                                                      var("v",@{typ "FPSCR \<times> 32 word"}),
                                                      @{theory}),qTy))),
                                          close
                                            (var("v0",@{typ FPSCR}),
                                             mu(tp[var("v",@{typ FP}),var("v0",@{typ FPSCR})],qTy))))),
                                 close
                                   (var("v",@{typ "FP \<times> FPSCR"}),
                                    mu(rupd
                                         ("FP.FPSCR",var("v",@{typ "FP \<times> FPSCR"}),prev_thy),
                                       qTy))),
                              close
                                (var("v",@{typ FP}),
                                 mw(close
                                      (var("s",qTy),
                                       rupd
                                         ("state.FP",tp[var("s",qTy),var("v",@{typ FP})],prev_thy))))))))),
               close
                 (var_a HOLogic.unitT,
                  call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'vmrs",
   close
     (var_w("t",4),
      mb(ite(mop(Not,eq(var_w("t",4),lw(15,4))),
             mb(mr(close(var("s",qTy),call("state.FP",@{typ FP},var("s",qTy),prev_thy))),
                close
                  (var("v",@{typ FP}),
                   mb(mb(mb(mu(call("FP.FPSCR",@{typ FPSCR},var("v",@{typ FP}),prev_thy),qTy),
                            close
                              (var("v",@{typ FPSCR}),
                               mu(call("reg'FPSCR",w32,var("v",@{typ FPSCR}),@{theory}),qTy))),
                         close(var_w("v",32),mu(tp[var_w("v",32),var_w("t",4)],qTy))),
                      close
                        (var("v",@{typ "32 word \<times> 4 word"}),
                         call
                           ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "32 word \<times> 4 word"}),@{theory ARM_Monadic}))))),
             mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                close
                  (var("v",@{typ PSR}),
                   mb(mb(mb(mb(mr(close
                                    (var("s",qTy),call("state.FP",@{typ FP},var("s",qTy),prev_thy))),
                               close
                                 (var("v0",@{typ FP}),
                                  mb(mb(mu(call
                                             ("FP.FPSCR",@{typ FPSCR},var("v0",@{typ FP}),prev_thy),
                                           qTy),
                                        close
                                          (var("v",@{typ FPSCR}),
                                           mu(call
                                                ("FPSCR.N",HOLogic.boolT,var("v",@{typ FPSCR}),
                                                 prev_thy),qTy))),
                                     close(var_b"v0",mu(tp[var("v",@{typ PSR}),var_b"v0"],qTy))))),
                            close
                              (var("v",@{typ "PSR \<times> bool"}),
                               mu(rupd("PSR.N",var("v",@{typ "PSR \<times> bool"}),prev_thy),qTy))),
                         close
                           (var("v",@{typ PSR}),
                            mw(close
                                 (var("s",qTy),
                                  rupd("state.CPSR",tp[var("s",qTy),var("v",@{typ PSR})],prev_thy))))),
                      close
                        (var_a HOLogic.unitT,
                         mb(mr(close
                                 (var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                            close
                              (var("v",@{typ PSR}),
                               mb(mb(mb(mb(mr(close
                                                (var("s",qTy),
                                                 call("state.FP",@{typ FP},var("s",qTy),prev_thy))),
                                           close
                                             (var("v0",@{typ FP}),
                                              mb(mb(mu(call
                                                         ("FP.FPSCR",@{typ FPSCR},
                                                          var("v0",@{typ FP}),prev_thy),qTy),
                                                    close
                                                      (var("v",@{typ FPSCR}),
                                                       mu(call
                                                            ("FPSCR.Z",HOLogic.boolT,
                                                             var("v",@{typ FPSCR}),prev_thy),qTy))),
                                                 close
                                                   (var_b"v0",
                                                    mu(tp[var("v",@{typ PSR}),var_b"v0"],qTy))))),
                                        close
                                          (var("v",@{typ "PSR \<times> bool"}),
                                           mu(rupd
                                                ("PSR.Z",var("v",@{typ "PSR \<times> bool"}),
                                                 prev_thy),qTy))),
                                     close
                                       (var("v",@{typ PSR}),
                                        mw(close
                                             (var("s",qTy),
                                              rupd
                                                ("state.CPSR",tp[var("s",qTy),var("v",@{typ PSR})],
                                                 prev_thy))))),
                                  close
                                    (var_a HOLogic.unitT,
                                     mb(mr(close
                                             (var("s",qTy),
                                              call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                                        close
                                          (var("v",@{typ PSR}),
                                           mb(mb(mb(mb(mr(close
                                                            (var("s",qTy),
                                                             call
                                                               ("state.FP",@{typ FP},var("s",qTy),
                                                                prev_thy))),
                                                       close
                                                         (var("v0",@{typ FP}),
                                                          mb(mb(mu(call
                                                                     ("FP.FPSCR",@{typ FPSCR},
                                                                      var("v0",@{typ FP}),prev_thy),
                                                                   qTy),
                                                                close
                                                                  (var("v",@{typ FPSCR}),
                                                                   mu(call
                                                                        ("FPSCR.C",HOLogic.boolT,
                                                                         var("v",@{typ FPSCR}),
                                                                         prev_thy),qTy))),
                                                             close
                                                               (var_b"v0",
                                                                mu(tp[var("v",@{typ PSR}),var_b"v0"],
                                                                   qTy))))),
                                                    close
                                                      (var("v",@{typ "PSR \<times> bool"}),
                                                       mu(rupd
                                                            ("PSR.C",
                                                             var("v",@{typ "PSR \<times> bool"}),
                                                             prev_thy),qTy))),
                                                 close
                                                   (var("v",@{typ PSR}),
                                                    mw(close
                                                         (var("s",qTy),
                                                          rupd
                                                            ("state.CPSR",
                                                             tp[var("s",qTy),var("v",@{typ PSR})],
                                                             prev_thy))))),
                                              close
                                                (var_a HOLogic.unitT,
                                                 mb(mr(close
                                                         (var("s",qTy),
                                                          call
                                                            ("state.CPSR",@{typ PSR},var("s",qTy),
                                                             prev_thy))),
                                                    close
                                                      (var("v",@{typ PSR}),
                                                       mb(mb(mb(mr(close
                                                                     (var("s",qTy),
                                                                      call
                                                                        ("state.FP",@{typ FP},
                                                                         var("s",qTy),prev_thy))),
                                                                close
                                                                  (var("v0",@{typ FP}),
                                                                   mb(mb(mu(call
                                                                              ("FP.FPSCR",
                                                                               @{typ FPSCR},
                                                                               var("v0",@{typ FP}),
                                                                               prev_thy),qTy),
                                                                         close
                                                                           (var("v",@{typ FPSCR}),
                                                                            mu(call
                                                                                 ("FPSCR.V",
                                                                                  HOLogic.boolT,
                                                                                  var("v",
                                                                                      @{typ FPSCR}),
                                                                                  prev_thy),qTy))),
                                                                      close
                                                                        (var_b"v0",
                                                                         mu(tp[var("v",@{typ PSR}),
                                                                               var_b"v0"],qTy))))),
                                                             close
                                                               (var("v",@{typ "PSR \<times> bool"}),
                                                                mu(rupd
                                                                     ("PSR.V",
                                                                      var("v",
                                                                          @{typ "PSR \<times> bool"}),
                                                                      prev_thy),qTy))),
                                                          close
                                                            (var("v",@{typ PSR}),
                                                             mw(close
                                                                  (var("s",qTy),
                                                                   rupd
                                                                     ("state.CPSR",
                                                                      tp[var("s",qTy),
                                                                         var("v",@{typ PSR})],
                                                                      prev_thy)))))))))))))))))))),
         close
           (var_a HOLogic.unitT,
            call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'vadd",
   close
     (tp[var_b"dp_operation",var_w("d",5),var_w("n",5),var_w("m",5)],
      mb(ite(var_b"dp_operation",
             mb(call
                  ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},var_w("n",5),@{theory}),
                close
                  (var_w("v",64),
                   mb(mb(mb(mb(call
                                 ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                                  var_w("m",5),@{theory}),
                               close(var_w("v0",64),mu(tp[var_w("v",64),var_w("v0",64)],qTy))),
                            close
                              (var("v",@{typ "64 word \<times> 64 word"}),
                               call
                                 ("FPAdd64",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                                  var("v",@{typ "64 word \<times> 64 word"}),@{theory}))),
                         close(var_w("v",64),mu(tp[var_w("v",64),var_w("d",5)],qTy))),
                      close
                        (var("v",@{typ "64 word \<times> 5 word"}),
                         call
                           ("write'D",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "64 word \<times> 5 word"}),@{theory}))))),
             mb(call
                  ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",5),@{theory}),
                close
                  (var_w("v",32),
                   mb(mb(mb(mb(call
                                 ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                  var_w("m",5),@{theory}),
                               close(var_w("v0",32),mu(tp[var_w("v",32),var_w("v0",32)],qTy))),
                            close
                              (var("v",@{typ "32 word \<times> 32 word"}),
                               call
                                 ("FPAdd32",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                  var("v",@{typ "32 word \<times> 32 word"}),@{theory}))),
                         close(var_w("v",32),mu(tp[var_w("v",32),var_w("d",5)],qTy))),
                      close
                        (var("v",@{typ "32 word \<times> 5 word"}),
                         call
                           ("write'S",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "32 word \<times> 5 word"}),@{theory})))))),
         close
           (var_a HOLogic.unitT,
            call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'vsub",
   close
     (tp[var_b"dp_operation",var_w("d",5),var_w("n",5),var_w("m",5)],
      mb(ite(var_b"dp_operation",
             mb(call
                  ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},var_w("n",5),@{theory}),
                close
                  (var_w("v",64),
                   mb(mb(mb(mb(call
                                 ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                                  var_w("m",5),@{theory}),
                               close(var_w("v0",64),mu(tp[var_w("v",64),var_w("v0",64)],qTy))),
                            close
                              (var("v",@{typ "64 word \<times> 64 word"}),
                               call
                                 ("FPSub64",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                                  var("v",@{typ "64 word \<times> 64 word"}),@{theory}))),
                         close(var_w("v",64),mu(tp[var_w("v",64),var_w("d",5)],qTy))),
                      close
                        (var("v",@{typ "64 word \<times> 5 word"}),
                         call
                           ("write'D",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "64 word \<times> 5 word"}),@{theory}))))),
             mb(call
                  ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",5),@{theory}),
                close
                  (var_w("v",32),
                   mb(mb(mb(mb(call
                                 ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                  var_w("m",5),@{theory}),
                               close(var_w("v0",32),mu(tp[var_w("v",32),var_w("v0",32)],qTy))),
                            close
                              (var("v",@{typ "32 word \<times> 32 word"}),
                               call
                                 ("FPSub32",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                  var("v",@{typ "32 word \<times> 32 word"}),@{theory}))),
                         close(var_w("v",32),mu(tp[var_w("v",32),var_w("d",5)],qTy))),
                      close
                        (var("v",@{typ "32 word \<times> 5 word"}),
                         call
                           ("write'S",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "32 word \<times> 5 word"}),@{theory})))))),
         close
           (var_a HOLogic.unitT,
            call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'vmul",
   close
     (tp[var_b"dp_operation",var_w("d",5),var_w("n",5),var_w("m",5)],
      mb(ite(var_b"dp_operation",
             mb(call
                  ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},var_w("n",5),@{theory}),
                close
                  (var_w("v",64),
                   mb(mb(mb(mb(call
                                 ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                                  var_w("m",5),@{theory}),
                               close(var_w("v0",64),mu(tp[var_w("v",64),var_w("v0",64)],qTy))),
                            close
                              (var("v",@{typ "64 word \<times> 64 word"}),
                               call
                                 ("FPMul64",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                                  var("v",@{typ "64 word \<times> 64 word"}),@{theory}))),
                         close(var_w("v",64),mu(tp[var_w("v",64),var_w("d",5)],qTy))),
                      close
                        (var("v",@{typ "64 word \<times> 5 word"}),
                         call
                           ("write'D",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "64 word \<times> 5 word"}),@{theory}))))),
             mb(call
                  ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",5),@{theory}),
                close
                  (var_w("v",32),
                   mb(mb(mb(mb(call
                                 ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                  var_w("m",5),@{theory}),
                               close(var_w("v0",32),mu(tp[var_w("v",32),var_w("v0",32)],qTy))),
                            close
                              (var("v",@{typ "32 word \<times> 32 word"}),
                               call
                                 ("FPMul32",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                  var("v",@{typ "32 word \<times> 32 word"}),@{theory}))),
                         close(var_w("v",32),mu(tp[var_w("v",32),var_w("d",5)],qTy))),
                      close
                        (var("v",@{typ "32 word \<times> 5 word"}),
                         call
                           ("write'S",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "32 word \<times> 5 word"}),@{theory})))))),
         close
           (var_a HOLogic.unitT,
            call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'vdiv",
   close
     (tp[var_b"dp_operation",var_w("d",5),var_w("n",5),var_w("m",5)],
      mb(ite(var_b"dp_operation",
             mb(const
                  ("RoundingMode",
                   @{typ "'b state_scheme \<Rightarrow> (L3_Lib.ieee_rounding \<times> 'b state_scheme)"},@{theory }),
                close
                  (var("v",@{typ ieee_rounding}),
                   mb(mb(mb(mb(call
                                 ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                                  var_w("n",5),@{theory}),
                               close
                                 (var_w("v0",64),
                                  mb(mb(call
                                          ("D",
                                           @{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                                           var_w("m",5),@{theory}),
                                        close
                                          (var_w("v1",64),mu(tp[var_w("v0",64),var_w("v1",64)],qTy))),
                                     close
                                       (var("v0",@{typ "64 word \<times> 64 word"}),
                                        mu(tp[var("v",@{typ ieee_rounding}),
                                              var("v0",@{typ "64 word \<times> 64 word"})],qTy))))),
                            close
                              (var("v",
                                   @{typ "L3_Lib.ieee_rounding \<times> 64 word \<times> 64 word"}),
                               mu(mop(FPDiv true,
                                      var("v",
                                          @{typ
                                          "L3_Lib.ieee_rounding \<times> 64 word \<times> 64 word"})),
                                  qTy))),close(var_w("v",64),mu(tp[var_w("v",64),var_w("d",5)],qTy))),
                      close
                        (var("v",@{typ "64 word \<times> 5 word"}),
                         call
                           ("write'D",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "64 word \<times> 5 word"}),@{theory}))))),
             mb(const
                  ("RoundingMode",
                   @{typ "'b state_scheme \<Rightarrow> (L3_Lib.ieee_rounding \<times> 'b state_scheme)"},@{theory }),
                close
                  (var("v",@{typ ieee_rounding}),
                   mb(mb(mb(mb(call
                                 ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                  var_w("n",5),@{theory}),
                               close
                                 (var_w("v0",32),
                                  mb(mb(call
                                          ("S",
                                           @{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                           var_w("m",5),@{theory}),
                                        close
                                          (var_w("v1",32),mu(tp[var_w("v0",32),var_w("v1",32)],qTy))),
                                     close
                                       (var("v0",@{typ "32 word \<times> 32 word"}),
                                        mu(tp[var("v",@{typ ieee_rounding}),
                                              var("v0",@{typ "32 word \<times> 32 word"})],qTy))))),
                            close
                              (var("v",
                                   @{typ "L3_Lib.ieee_rounding \<times> 32 word \<times> 32 word"}),
                               mu(mop(FPDiv false,
                                      var("v",
                                          @{typ
                                          "L3_Lib.ieee_rounding \<times> 32 word \<times> 32 word"})),
                                  qTy))),close(var_w("v",32),mu(tp[var_w("v",32),var_w("d",5)],qTy))),
                      close
                        (var("v",@{typ "32 word \<times> 5 word"}),
                         call
                           ("write'S",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "32 word \<times> 5 word"}),@{theory})))))),
         close
           (var_a HOLogic.unitT,
            call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'vmla_vmls",
   close
     (tp[var_b"dp_operation",var_b"add",var_w("d",5),var_w("n",5),var_w("m",5)],
      mb(ite(var_b"dp_operation",
             mb(call
                  ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},var_w("n",5),@{theory}),
                close
                  (var_w("v",64),
                   mb(mb(mb(call
                              ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                               var_w("m",5),@{theory}),
                            close(var_w("v0",64),mu(tp[var_w("v",64),var_w("v0",64)],qTy))),
                         close
                           (var("v",@{typ "64 word \<times> 64 word"}),
                            call
                              ("FPMul64",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                               var("v",@{typ "64 word \<times> 64 word"}),@{theory}))),
                      close
                        (var_w("product",64),
                         mb(call
                              ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                               var_w("n",5),@{theory}),
                            close
                              (var_w("v",64),
                               mb(mb(mb(mu(tp[var_w("v",64),
                                              ite(var_b"add",var_w("product",64),
                                                  mop(FPNeg (true, false),var_w("product",64)))],qTy),
                                        close
                                          (var("v",@{typ "64 word \<times> 64 word"}),
                                           call
                                             ("FPAdd64",
                                              @{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                                              var("v",@{typ "64 word \<times> 64 word"}),@{theory}))),
                                     close(var_w("v",64),mu(tp[var_w("v",64),var_w("d",5)],qTy))),
                                  close
                                    (var("v",@{typ "64 word \<times> 5 word"}),
                                     call
                                       ("write'D",
                                        @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                        var("v",@{typ "64 word \<times> 5 word"}),@{theory}))))))))),
             mb(call
                  ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",5),@{theory}),
                close
                  (var_w("v",32),
                   mb(mb(mb(call
                              ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                               var_w("m",5),@{theory}),
                            close(var_w("v0",32),mu(tp[var_w("v",32),var_w("v0",32)],qTy))),
                         close
                           (var("v",@{typ "32 word \<times> 32 word"}),
                            call
                              ("FPMul32",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                               var("v",@{typ "32 word \<times> 32 word"}),@{theory}))),
                      close
                        (var_w("product",32),
                         mb(call
                              ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                               var_w("n",5),@{theory}),
                            close
                              (var_w("v",32),
                               mb(mb(mb(mu(tp[var_w("v",32),
                                              ite(var_b"add",var_w("product",32),
                                                  mop(FPNeg (false, false),var_w("product",32)))],
                                           qTy),
                                        close
                                          (var("v",@{typ "32 word \<times> 32 word"}),
                                           call
                                             ("FPAdd32",
                                              @{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                              var("v",@{typ "32 word \<times> 32 word"}),@{theory}))),
                                     close(var_w("v",32),mu(tp[var_w("v",32),var_w("d",5)],qTy))),
                                  close
                                    (var("v",@{typ "32 word \<times> 5 word"}),
                                     call
                                       ("write'S",
                                        @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                        var("v",@{typ "32 word \<times> 5 word"}),@{theory})))))))))),
         close
           (var_a HOLogic.unitT,
            call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'vfma_vfms",
   close
     (tp[var_b"dp_operation",var_b"add",var_w("d",5),var_w("n",5),var_w("m",5)],
      mb(ite(var_b"dp_operation",
             mb(call
                  ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},var_w("n",5),@{theory}),
                close
                  (var_w("op64",64),
                   mb(const
                        ("RoundingMode",
                         @{typ "'b state_scheme \<Rightarrow> (L3_Lib.ieee_rounding \<times> 'b state_scheme)"},
                         @{theory }),
                      close
                        (var("v",@{typ ieee_rounding}),
                         mb(mb(mb(mb(call
                                       ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                                        var_w("m",5),@{theory}),
                                     close
                                       (var_w("v0",64),
                                        mb(mb(mb(call
                                                   ("D",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                                                    var_w("d",5),@{theory}),
                                                 close
                                                   (var_w("v1",64),
                                                    mu(tp[var_w("v0",64),var_w("v1",64)],qTy))),
                                              close
                                                (var("v",@{typ "64 word \<times> 64 word"}),
                                                 mu(tp[ite(var_b"add",var_w("op64",64),
                                                           mop(FPNeg (true, false),var_w("op64",64))),
                                                       var("v",@{typ "64 word \<times> 64 word"})],
                                                    qTy))),
                                           close
                                             (var("v0",
                                                  @{typ "64 word \<times> 64 word \<times> 64 word"}),
                                              mu(tp[var("v",@{typ ieee_rounding}),
                                                    var("v0",
                                                        @{typ
                                                        "64 word \<times> 64 word \<times> 64 word"})],
                                                 qTy))))),
                                  close
                                    (var("v",
                                         @{typ
                                         "L3_Lib.ieee_rounding \<times>
                                          64 word \<times> 64 word \<times> 64 word"}),
                                     mu(mop(FPMulAdd true,
                                            var("v",
                                                @{typ
                                                "L3_Lib.ieee_rounding \<times>
                                                 64 word \<times> 64 word \<times> 64 word"})),qTy))),
                               close(var_w("v",64),mu(tp[var_w("v",64),var_w("d",5)],qTy))),
                            close
                              (var("v",@{typ "64 word \<times> 5 word"}),
                               call
                                 ("write'D",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                  var("v",@{typ "64 word \<times> 5 word"}),@{theory}))))))),
             mb(call
                  ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",5),@{theory}),
                close
                  (var_w("op32",32),
                   mb(const
                        ("RoundingMode",
                         @{typ "'b state_scheme \<Rightarrow> (L3_Lib.ieee_rounding \<times> 'b state_scheme)"},
                         @{theory }),
                      close
                        (var("v",@{typ ieee_rounding}),
                         mb(mb(mb(mb(call
                                       ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                        var_w("m",5),@{theory}),
                                     close
                                       (var_w("v0",32),
                                        mb(mb(mb(call
                                                   ("S",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                                    var_w("d",5),@{theory}),
                                                 close
                                                   (var_w("v1",32),
                                                    mu(tp[var_w("v0",32),var_w("v1",32)],qTy))),
                                              close
                                                (var("v",@{typ "32 word \<times> 32 word"}),
                                                 mu(tp[ite(var_b"add",var_w("op32",32),
                                                           mop(FPNeg (false, false),var_w("op32",32))),
                                                       var("v",@{typ "32 word \<times> 32 word"})],
                                                    qTy))),
                                           close
                                             (var("v0",
                                                  @{typ "32 word \<times> 32 word \<times> 32 word"}),
                                              mu(tp[var("v",@{typ ieee_rounding}),
                                                    var("v0",
                                                        @{typ
                                                        "32 word \<times> 32 word \<times> 32 word"})],
                                                 qTy))))),
                                  close
                                    (var("v",
                                         @{typ
                                         "L3_Lib.ieee_rounding \<times>
                                          32 word \<times> 32 word \<times> 32 word"}),
                                     mu(mop(FPMulAdd false,
                                            var("v",
                                                @{typ
                                                "L3_Lib.ieee_rounding \<times>
                                                 32 word \<times> 32 word \<times> 32 word"})),qTy))),
                               close(var_w("v",32),mu(tp[var_w("v",32),var_w("d",5)],qTy))),
                            close
                              (var("v",@{typ "32 word \<times> 5 word"}),
                               call
                                 ("write'S",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                  var("v",@{typ "32 word \<times> 5 word"}),@{theory})))))))),
         close
           (var_a HOLogic.unitT,
            call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'vfnma_vfnms",
   close
     (tp[var_b"dp_operation",var_b"add",var_w("d",5),var_w("n",5),var_w("m",5)],
      mb(ite(var_b"dp_operation",
             mb(call
                  ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},var_w("n",5),@{theory}),
                close
                  (var_w("op64",64),
                   mb(const
                        ("RoundingMode",
                         @{typ "'b state_scheme \<Rightarrow> (L3_Lib.ieee_rounding \<times> 'b state_scheme)"},
                         @{theory }),
                      close
                        (var("v",@{typ ieee_rounding}),
                         mb(mb(mb(mb(call
                                       ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                                        var_w("m",5),@{theory}),
                                     close
                                       (var_w("v0",64),
                                        mb(mb(mb(call
                                                   ("D",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                                                    var_w("d",5),@{theory}),
                                                 close
                                                   (var_w("v1",64),
                                                    mb(mu(mop(FPNeg (true, false),var_w("v1",64)),
                                                          qTy),
                                                       close
                                                         (var_w("v1",64),
                                                          mu(tp[var_w("v0",64),var_w("v1",64)],qTy))))),
                                              close
                                                (var("v",@{typ "64 word \<times> 64 word"}),
                                                 mu(tp[ite(var_b"add",var_w("op64",64),
                                                           mop(FPNeg (true, false),var_w("op64",64))),
                                                       var("v",@{typ "64 word \<times> 64 word"})],
                                                    qTy))),
                                           close
                                             (var("v0",
                                                  @{typ "64 word \<times> 64 word \<times> 64 word"}),
                                              mu(tp[var("v",@{typ ieee_rounding}),
                                                    var("v0",
                                                        @{typ
                                                        "64 word \<times> 64 word \<times> 64 word"})],
                                                 qTy))))),
                                  close
                                    (var("v",
                                         @{typ
                                         "L3_Lib.ieee_rounding \<times>
                                          64 word \<times> 64 word \<times> 64 word"}),
                                     mu(mop(FPMulAdd true,
                                            var("v",
                                                @{typ
                                                "L3_Lib.ieee_rounding \<times>
                                                 64 word \<times> 64 word \<times> 64 word"})),qTy))),
                               close(var_w("v",64),mu(tp[var_w("v",64),var_w("d",5)],qTy))),
                            close
                              (var("v",@{typ "64 word \<times> 5 word"}),
                               call
                                 ("write'D",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                  var("v",@{typ "64 word \<times> 5 word"}),@{theory}))))))),
             mb(call
                  ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",5),@{theory}),
                close
                  (var_w("op32",32),
                   mb(const
                        ("RoundingMode",
                         @{typ "'b state_scheme \<Rightarrow> (L3_Lib.ieee_rounding \<times> 'b state_scheme)"},
                         @{theory }),
                      close
                        (var("v",@{typ ieee_rounding}),
                         mb(mb(mb(mb(call
                                       ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                        var_w("m",5),@{theory}),
                                     close
                                       (var_w("v0",32),
                                        mb(mb(mb(call
                                                   ("S",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                                    var_w("d",5),@{theory}),
                                                 close
                                                   (var_w("v1",32),
                                                    mb(mu(mop(FPNeg (false, false),var_w("v1",32)),
                                                          qTy),
                                                       close
                                                         (var_w("v1",32),
                                                          mu(tp[var_w("v0",32),var_w("v1",32)],qTy))))),
                                              close
                                                (var("v",@{typ "32 word \<times> 32 word"}),
                                                 mu(tp[ite(var_b"add",var_w("op32",32),
                                                           mop(FPNeg (false, false),var_w("op32",32))),
                                                       var("v",@{typ "32 word \<times> 32 word"})],
                                                    qTy))),
                                           close
                                             (var("v0",
                                                  @{typ "32 word \<times> 32 word \<times> 32 word"}),
                                              mu(tp[var("v",@{typ ieee_rounding}),
                                                    var("v0",
                                                        @{typ
                                                        "32 word \<times> 32 word \<times> 32 word"})],
                                                 qTy))))),
                                  close
                                    (var("v",
                                         @{typ
                                         "L3_Lib.ieee_rounding \<times>
                                          32 word \<times> 32 word \<times> 32 word"}),
                                     mu(mop(FPMulAdd false,
                                            var("v",
                                                @{typ
                                                "L3_Lib.ieee_rounding \<times>
                                                 32 word \<times> 32 word \<times> 32 word"})),qTy))),
                               close(var_w("v",32),mu(tp[var_w("v",32),var_w("d",5)],qTy))),
                            close
                              (var("v",@{typ "32 word \<times> 5 word"}),
                               call
                                 ("write'S",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                  var("v",@{typ "32 word \<times> 5 word"}),@{theory})))))))),
         close
           (var_a HOLogic.unitT,
            call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'vneg_mul",
   close
     (tp[var_b"dp_operation",var("typ",@{typ VFPNegMul}),var_w("d",5),var_w("n",5),var_w("m",5)],
      mb(ite(var_b"dp_operation",
             mb(call
                  ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},var_w("n",5),@{theory}),
                close
                  (var_w("v",64),
                   mb(mb(mb(call
                              ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                               var_w("m",5),@{theory}),
                            close(var_w("v0",64),mu(tp[var_w("v",64),var_w("v0",64)],qTy))),
                         close
                           (var("v",@{typ "64 word \<times> 64 word"}),
                            call
                              ("FPMul64",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                               var("v",@{typ "64 word \<times> 64 word"}),@{theory}))),
                      close
                        (var_w("product",64),
                         cs(var("typ",@{typ VFPNegMul}),
                            [(lc("VFPNegMul_VNMLA","VFPNegMul",@{theory}),
                              mb(call
                                   ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                                    var_w("d",5),@{theory}),
                                 close
                                   (var_w("v",64),
                                    mb(mb(mb(mb(mu(mop(FPNeg (true, false),var_w("v",64)),qTy),
                                                close
                                                  (var_w("v",64),
                                                   mu(tp[var_w("v",64),
                                                         mop(FPNeg (true, false),var_w("product",64))],
                                                      qTy))),
                                             close
                                               (var("v",@{typ "64 word \<times> 64 word"}),
                                                call
                                                  ("FPAdd64",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                                                   var("v",@{typ "64 word \<times> 64 word"}),
                                                   @{theory}))),
                                          close
                                            (var_w("v",64),mu(tp[var_w("v",64),var_w("d",5)],qTy))),
                                       close
                                         (var("v",@{typ "64 word \<times> 5 word"}),
                                          call
                                            ("write'D",
                                             @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                             var("v",@{typ "64 word \<times> 5 word"}),@{theory})))))),
                             (lc("VFPNegMul_VNMLS","VFPNegMul",@{theory}),
                              mb(call
                                   ("D",@{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                                    var_w("d",5),@{theory}),
                                 close
                                   (var_w("v",64),
                                    mb(mb(mb(mb(mu(mop(FPNeg (true, false),var_w("v",64)),qTy),
                                                close
                                                  (var_w("v",64),
                                                   mu(tp[var_w("v",64),var_w("product",64)],qTy))),
                                             close
                                               (var("v",@{typ "64 word \<times> 64 word"}),
                                                call
                                                  ("FPAdd64",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                                                   var("v",@{typ "64 word \<times> 64 word"}),
                                                   @{theory}))),
                                          close
                                            (var_w("v",64),mu(tp[var_w("v",64),var_w("d",5)],qTy))),
                                       close
                                         (var("v",@{typ "64 word \<times> 5 word"}),
                                          call
                                            ("write'D",
                                             @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                             var("v",@{typ "64 word \<times> 5 word"}),@{theory})))))),
                             (lc("VFPNegMul_VNMUL","VFPNegMul",@{theory}),
                              call
                                ("write'D",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                 tp[mop(FPNeg (true, false),var_w("product",64)),var_w("d",5)],
                                 @{theory}))],@{context}))))),
             mb(call
                  ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",5),@{theory}),
                close
                  (var_w("v",32),
                   mb(mb(mb(call
                              ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                               var_w("m",5),@{theory}),
                            close(var_w("v0",32),mu(tp[var_w("v",32),var_w("v0",32)],qTy))),
                         close
                           (var("v",@{typ "32 word \<times> 32 word"}),
                            call
                              ("FPMul32",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                               var("v",@{typ "32 word \<times> 32 word"}),@{theory}))),
                      close
                        (var_w("product",32),
                         cs(var("typ",@{typ VFPNegMul}),
                            [(lc("VFPNegMul_VNMLA","VFPNegMul",@{theory}),
                              mb(call
                                   ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                    var_w("d",5),@{theory}),
                                 close
                                   (var_w("v",32),
                                    mb(mb(mb(mb(mu(mop(FPNeg (false, false),var_w("v",32)),qTy),
                                                close
                                                  (var_w("v",32),
                                                   mu(tp[var_w("v",32),
                                                         mop(FPNeg (false, false),
                                                             var_w("product",32))],qTy))),
                                             close
                                               (var("v",@{typ "32 word \<times> 32 word"}),
                                                call
                                                  ("FPAdd32",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                                   var("v",@{typ "32 word \<times> 32 word"}),
                                                   @{theory}))),
                                          close
                                            (var_w("v",32),mu(tp[var_w("v",32),var_w("d",5)],qTy))),
                                       close
                                         (var("v",@{typ "32 word \<times> 5 word"}),
                                          call
                                            ("write'S",
                                             @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                             var("v",@{typ "32 word \<times> 5 word"}),@{theory})))))),
                             (lc("VFPNegMul_VNMLS","VFPNegMul",@{theory}),
                              mb(call
                                   ("S",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                    var_w("d",5),@{theory}),
                                 close
                                   (var_w("v",32),
                                    mb(mb(mb(mb(mu(mop(FPNeg (false, false),var_w("v",32)),qTy),
                                                close
                                                  (var_w("v",32),
                                                   mu(tp[var_w("v",32),var_w("product",32)],qTy))),
                                             close
                                               (var("v",@{typ "32 word \<times> 32 word"}),
                                                call
                                                  ("FPAdd32",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                                   var("v",@{typ "32 word \<times> 32 word"}),
                                                   @{theory}))),
                                          close
                                            (var_w("v",32),mu(tp[var_w("v",32),var_w("d",5)],qTy))),
                                       close
                                         (var("v",@{typ "32 word \<times> 5 word"}),
                                          call
                                            ("write'S",
                                             @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                             var("v",@{typ "32 word \<times> 5 word"}),@{theory})))))),
                             (lc("VFPNegMul_VNMUL","VFPNegMul",@{theory}),
                              call
                                ("write'S",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                 tp[mop(FPNeg (false, false),var_w("product",32)),var_w("d",5)],
                                 @{theory}))],@{context})))))),
         close
           (var_a HOLogic.unitT,
            call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy)))))
end
\<close>



definition
  dfn'vldr :: "bool \<times> bool \<times> 5 word \<times> 4 word \<times> 32 word \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
  "dfn'vldr \<equiv> \<lambda>(single_reg, add, d, n, imm32). do {
                 base \<leftarrow> if n = 15 then do {
                                          v \<leftarrow> PC;
                                          v \<leftarrow> return (v, 4);
                                          return (Align v)
                                        }
                         else R n;
                 let address = (if add then base + imm32 else base - imm32);
                 _ \<leftarrow> if single_reg then do {
                                           v \<leftarrow> MemA ((Addr address), 4);
                                           return (v, d) \<bind> write'S
                                         }
                      else do {
                             word1::32 word \<leftarrow> MemA ((Addr address), 4);
                             word2::32 word \<leftarrow> MemA (Addr (address + 4), 4);
                             v \<leftarrow> BigEndian ();
                             do {
                               v \<leftarrow> return (if v then word_cat word1 word2 else word_cat word2 word1);
                               return (v, d)
                             } \<bind> write'D
                           };
                 IncPC ()
               }"


definition
  dfn'vstr :: "bool \<times> bool \<times> 5 word \<times> 4 word \<times> 32 word \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'vstr \<equiv> \<lambda>(single_reg, add, d, n, imm32). do {
                 address \<leftarrow> if add then do {
                                          v \<leftarrow> R n;
                                          return (v + imm32)
                                        }
                            else do {
                                   v \<leftarrow> R n;
                                   return (v - imm32)
                                 };
                 _ \<leftarrow> if single_reg then do {
                                            v \<leftarrow> S d;
                                            return (v, (Addr address), 4) \<bind> write'MemA
                                          }
                       else do {
                              word \<leftarrow> D d;
                              _ \<leftarrow> do {
                                  v \<leftarrow> BigEndian ();
                                  do {
                                    v::32 word \<leftarrow> return (if v then word_extract 63 32 word else word_extract 31 0 word);
                                    return (v, (Addr address), 4)
                                  } \<bind> write'MemA
                                };
                              v \<leftarrow> BigEndian ();
                              do {
                                v::32 word \<leftarrow> return (if v then word_extract 31 0 word else word_extract 63 32 word);
                                return (v, Addr (address + 4), 4)
                              } \<bind> write'MemA
                            };
                 IncPC ()
               }"



ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'vldm",
   close
     (tp[var_b"single_regs",var_b"add",var_b"wback",var_w("d",5),var_w("n",4),var_w("imm8",8)],
      let'
        (var_w("imm32",32),mop(Cast w32,cc[var_w("imm8",8),lw(0,2)]),
         mb(ite(var_b"add",
                call
                  ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
                mb(call
                     ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),
                      @{theory ARM_Monadic}),
                   close(var_w("v",32),mu(bop(Sub,var_w("v",32),var_w("imm32",32)),qTy)))),
            close
              (var_w("v",32),
               mn(var_w("v",32),
                  mb(forloop
                       (tp[ln 0,
                           bop(Sub,
                               ite(var_b"single_regs",mop(Cast HOLogic.natT,var_w("imm8",8)),
                                   bop(Div,mop(Cast HOLogic.natT,var_w("imm8",8)),ln 2)),ln 1),
                           close
                             (var_n"r",
                              ite(var_b"single_regs",
                                  mb(mb(mr(close
                                             (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                                              mop(Fst,var("s",@{typ "32 word \<times> 'b state_scheme"})))),
                                        close
                                          (var_w("v",32),
                                           mb(mb(mb(mu(tp[var_w("v",32),ln 4],
                                                       @{typ "32 word \<times> 'b state_scheme"}),
                                                    close
                                                      (var("v",@{typ "32 word \<times> nat"}),
                                                       md(call
                                                            ("MemA",
                                                             @{typ
                                                             "'b state_scheme \<Rightarrow>
                                                              (32 word \<times> 'b state_scheme)"},
                                                             var("v",@{typ "32 word \<times> nat"}),
                                                             @{theory}),w32))),
                                                 close
                                                   (var_w("v",32),
                                                    mu(tp[var_w("v",32),
                                                          bop(Add,var_w("d",5),
                                                              mop(Cast (Word_Lib.mk_wordT 5),
                                                                  var_n"r"))],
                                                       @{typ "32 word \<times> 'b state_scheme"}))),
                                              close
                                                (var("v",@{typ "32 word \<times> 5 word"}),
                                                 md(call
                                                      ("write'S",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                       var("v",@{typ "32 word \<times> 5 word"}),
                                                       @{theory}),w32))))),
                                     close
                                       (var_a HOLogic.unitT,
                                        mb(mr(close
                                                (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                                                 mop(Fst,var("s",@{typ "32 word \<times> 'b state_scheme"})))),
                                           close
                                             (var_w("v",32),
                                              mb(mu(bop(Add,var_w("v",32),lw(4,32)),
                                                    @{typ "32 word \<times> 'b state_scheme"}),
                                                 close
                                                   (var_w("v",32),
                                                    mw(close
                                                         (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                                                          tp[var_w("v",32),
                                                             mop(Snd,
                                                                 var("s",
                                                                     @{typ "32 word \<times> 'b state_scheme"}))])))))))),
                                  mb(mr(close
                                          (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                                           mop(Fst,var("s",@{typ "32 word \<times> 'b state_scheme"})))),
                                     close
                                       (var_w("v",32),
                                        mb(mb(mu(tp[var_w("v",32),ln 4],
                                                 @{typ "32 word \<times> 'b state_scheme"}),
                                              close
                                                (var("v",@{typ "32 word \<times> nat"}),
                                                 md(call
                                                      ("MemA",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                                       var("v",@{typ "32 word \<times> nat"}),
                                                       @{theory}),w32))),
                                           close
                                             (var_w("word1",32),
                                              mb(mr(close
                                                      (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                                                       mop(Fst,
                                                           var("s",@{typ "32 word \<times> 'b state_scheme"})))),
                                                 close
                                                   (var_w("v",32),
                                                    mb(mb(mb(mu(bop(Add,var_w("v",32),lw(4,32)),
                                                                @{typ "32 word \<times> 'b state_scheme"}),
                                                             close
                                                               (var_w("v",32),
                                                                mu(tp[var_w("v",32),ln 4],
                                                                   @{typ "32 word \<times> 'b state_scheme"}))),
                                                          close
                                                            (var("v",@{typ "32 word \<times> nat"}),
                                                             md(call
                                                                  ("MemA",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (32 word \<times> 'b state_scheme)"},
                                                                   var("v",
                                                                       @{typ "32 word \<times> nat"}),
                                                                   @{theory}),w32))),
                                                       close
                                                         (var_w("word2",32),
                                                          mb(mr(close
                                                                  (var("s",
                                                                       @{typ
                                                                       "32 word \<times> 'b state_scheme"}),
                                                                   mop(Fst,
                                                                       var("s",
                                                                           @{typ
                                                                           "32 word \<times> 'b state_scheme"})))),
                                                             close
                                                               (var_w("v",32),
                                                                mb(mb(mu(bop(Add,var_w("v",32),
                                                                             lw(8,32)),
                                                                         @{typ
                                                                         "32 word \<times> 'b state_scheme"}),
                                                                      close
                                                                        (var_w("v",32),
                                                                         mw(close
                                                                              (var("s",
                                                                                   @{typ
                                                                                   "32 word \<times>
                                                                                    'b state_scheme"}),
                                                                               tp[var_w("v",32),
                                                                                  mop(Snd,
                                                                                      var("s",
                                                                                          @{typ
                                                                                          "32 word \<times>
                                                                                           'b state_scheme"}))])))),
                                                                   close
                                                                     (var_a HOLogic.unitT,
                                                                      mb(md(call
                                                                              ("BigEndian",
                                                                               @{typ
                                                                               "'b state_scheme \<Rightarrow>
                                                                                (bool \<times> 'b state_scheme)"},
                                                                               lu,prev_thy),w32),
                                                                         close
                                                                           (var_b"v",
                                                                            mb(mb(mu(ite(var_b"v",
                                                                                         cc[var_w("word1",32),
                                                                                            var_w("word2",32)],
                                                                                         cc[var_w("word2",32),
                                                                                            var_w("word1",32)]),
                                                                                     @{typ
                                                                                     "32 word \<times>
                                                                                      'b state_scheme"}),
                                                                                  close
                                                                                    (var_w("v",64),
                                                                                     mu(tp[var_w("v",64),
                                                                                           bop(Add,
                                                                                               var_w("d",5),
                                                                                               mop(Cast
                                                                                                     (Word_Lib.mk_wordT 5),
                                                                                                   var_n"r"))],
                                                                                        @{typ
                                                                                        "32 word \<times>
                                                                                         'b state_scheme"}))),
                                                                               close
                                                                                 (var("v",
                                                                                      @{typ
                                                                                      "64 word \<times>
                                                                                       5 word"}),
                                                                                  md(call
                                                                                       ("write'D",
                                                                                        @{typ
                                                                                        "'b state_scheme \<Rightarrow>
                                                                                         (unit \<times>
                                                                                          'b state_scheme)"},
                                                                                        var("v",
                                                                                            @{typ
                                                                                            "64 word \<times>
                                                                                             5 word"}),
                                                                                        @{theory}),
                                                                                     w32)))))))))))))))))))]),
                     close
                       (var_a HOLogic.unitT,
                        mb(ite(var_b"wback",
                               mb(ite(var_b"add",
                                      mb(md(call
                                              ("R",
                                               @{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                               var_w("n",4),@{theory ARM_Monadic}),w32),
                                         close
                                           (var_w("v",32),
                                            mu(bop(Add,var_w("v",32),var_w("imm32",32)),
                                               @{typ "32 word \<times> 'b state_scheme"}))),
                                      mb(md(call
                                              ("R",
                                               @{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                               var_w("n",4),@{theory ARM_Monadic}),w32),
                                         close
                                           (var_w("v",32),
                                            mu(bop(Sub,var_w("v",32),var_w("imm32",32)),
                                               @{typ "32 word \<times> 'b state_scheme"})))),
                                  close
                                    (var_w("v",32),
                                     mb(mu(tp[var_w("v",32),var_w("n",4)],
                                           @{typ "32 word \<times> 'b state_scheme"}),
                                        close
                                          (var("v",@{typ "32 word \<times> 4 word"}),
                                           md(call
                                                ("write'R",
                                                 @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                 var("v",@{typ "32 word \<times> 4 word"}),@{theory ARM_Monadic}),
                                              w32))))),mu(lu,@{typ "32 word \<times> 'b state_scheme"})),
                           close
                             (var_a HOLogic.unitT,
                              md(call
                                   ("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,
                                    prev_thy),w32)))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'vstm",
   close
     (tp[var_b"single_regs",var_b"add",var_b"wback",var_w("d",5),var_w("n",4),var_w("imm8",8)],
      let'
        (var_w("imm32",32),mop(Cast w32,cc[var_w("imm8",8),lw(0,2)]),
         mb(ite(var_b"add",
                call
                  ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
                mb(call
                     ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),
                      @{theory ARM_Monadic}),
                   close(var_w("v",32),mu(bop(Sub,var_w("v",32),var_w("imm32",32)),qTy)))),
            close
              (var_w("v",32),
               mn(var_w("v",32),
                  mb(forloop
                       (tp[ln 0,
                           bop(Sub,
                               ite(var_b"single_regs",mop(Cast HOLogic.natT,var_w("imm8",8)),
                                   bop(Div,mop(Cast HOLogic.natT,var_w("imm8",8)),ln 2)),ln 1),
                           close
                             (var_n"r",
                              ite(var_b"single_regs",
                                  mb(mr(close
                                          (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                                           mop(Fst,var("s",@{typ "32 word \<times> 'b state_scheme"})))),
                                     close
                                       (var_w("v",32),
                                        mb(mb(mu(tp[var_w("v",32),ln 4],
                                                 @{typ "32 word \<times> 'b state_scheme"}),
                                              close
                                                (var("x",@{typ "32 word \<times> nat"}),
                                                 mb(md(call
                                                         ("S",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow>
                                                           (32 word \<times> 'b state_scheme)"},
                                                          bop(Add,var_w("d",5),
                                                              mop(Cast (Word_Lib.mk_wordT 5),
                                                                  var_n"r")),@{theory}),w32),
                                                    close
                                                      (var_w("v",32),
                                                       mb(mu(tp[var_w("v",32),
                                                                var("x",
                                                                    @{typ "32 word \<times> nat"})],
                                                             @{typ "32 word \<times> 'b state_scheme"}),
                                                          close
                                                            (var("v",
                                                                 @{typ
                                                                 "32 word \<times>
                                                                  32 word \<times> nat"}),
                                                             md(call
                                                                  ("write'MemA",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (unit \<times> 'b state_scheme)"},
                                                                   var("v",
                                                                       @{typ
                                                                       "32 word \<times>
                                                                        32 word \<times> nat"}),
                                                                   @{theory}),w32))))))),
                                           close
                                             (var_a HOLogic.unitT,
                                              mb(mr(close
                                                      (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                                                       mop(Fst,
                                                           var("s",@{typ "32 word \<times> 'b state_scheme"})))),
                                                 close
                                                   (var_w("v",32),
                                                    mb(mu(bop(Add,var_w("v",32),lw(4,32)),
                                                          @{typ "32 word \<times> 'b state_scheme"}),
                                                       close
                                                         (var_w("v",32),
                                                          mw(close
                                                               (var("s",
                                                                    @{typ "32 word \<times> 'b state_scheme"}),
                                                                tp[var_w("v",32),
                                                                   mop(Snd,
                                                                       var("s",
                                                                           @{typ
                                                                           "32 word \<times> 'b state_scheme"}))])))))))))),
                                  mb(md(call
                                          ("D",
                                           @{typ "'b state_scheme \<Rightarrow> (64 word \<times> 'b state_scheme)"},
                                           bop(Add,var_w("d",5),
                                               mop(Cast (Word_Lib.mk_wordT 5),var_n"r")),@{theory}),
                                        w32),
                                     close
                                       (var_w("d",64),
                                        mb(mr(close
                                                (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                                                 mop(Fst,var("s",@{typ "32 word \<times> 'b state_scheme"})))),
                                           close
                                             (var_w("v",32),
                                              mb(mb(mu(tp[var_w("v",32),ln 4],
                                                       @{typ "32 word \<times> 'b state_scheme"}),
                                                    close
                                                      (var("x",@{typ "32 word \<times> nat"}),
                                                       mb(md(call
                                                               ("BigEndian",
                                                                @{typ
                                                                "'b state_scheme \<Rightarrow>
                                                                 (bool \<times> 'b state_scheme)"},lu,
                                                                prev_thy),w32),
                                                          close
                                                            (var_b"v",
                                                             mb(mb(mu(ite(var_b"v",
                                                                          ex(var_w("d",64),ln 63,
                                                                             ln 32,w32),
                                                                          ex(var_w("d",64),ln 31,
                                                                             ln 0,w32)),
                                                                      @{typ
                                                                      "32 word \<times> 'b state_scheme"}),
                                                                   close
                                                                     (var_w("v",32),
                                                                      mu(tp[var_w("v",32),
                                                                            var("x",
                                                                                @{typ
                                                                                "32 word \<times>
                                                                                 nat"})],
                                                                         @{typ
                                                                         "32 word \<times> 'b state_scheme"}))),
                                                                close
                                                                  (var("v",
                                                                       @{typ
                                                                       "32 word \<times>
                                                                        32 word \<times> nat"}),
                                                                   md(call
                                                                        ("write'MemA",
                                                                         @{typ
                                                                         "'b state_scheme \<Rightarrow>
                                                                          (unit \<times> 'b state_scheme)"},
                                                                         var("v",
                                                                             @{typ
                                                                             "32 word \<times>
                                                                              32 word \<times> nat"}),
                                                                         @{theory}),w32))))))),
                                                 close
                                                   (var_a HOLogic.unitT,
                                                    mb(mr(close
                                                            (var("s",@{typ "32 word \<times> 'b state_scheme"}),
                                                             mop(Fst,
                                                                 var("s",
                                                                     @{typ "32 word \<times> 'b state_scheme"})))),
                                                       close
                                                         (var_w("v",32),
                                                          mb(mb(mb(mu(bop(Add,var_w("v",32),lw(4,32)),
                                                                      @{typ
                                                                      "32 word \<times> 'b state_scheme"}),
                                                                   close
                                                                     (var_w("v",32),
                                                                      mu(tp[var_w("v",32),ln 4],
                                                                         @{typ
                                                                         "32 word \<times> 'b state_scheme"}))),
                                                                close
                                                                  (var("x",
                                                                       @{typ "32 word \<times> nat"}),
                                                                   mb(md(call
                                                                           ("BigEndian",
                                                                            @{typ
                                                                            "'b state_scheme \<Rightarrow>
                                                                             (bool \<times> 'b state_scheme)"},
                                                                            lu,prev_thy ),w32),
                                                                      close
                                                                        (var_b"v",
                                                                         mb(mb(mu(ite(var_b"v",
                                                                                      ex(var_w("d",64),
                                                                                         ln 31,ln 0,
                                                                                         w32),
                                                                                      ex(var_w("d",64),
                                                                                         ln 63,
                                                                                         ln 32,w32)),
                                                                                  @{typ
                                                                                  "32 word \<times>
                                                                                   'b state_scheme"}),
                                                                               close
                                                                                 (var_w("v",32),
                                                                                  mu(tp[var_w("v",32),
                                                                                        var("x",
                                                                                            @{typ
                                                                                            "32 word \<times>
                                                                                             nat"})],
                                                                                     @{typ
                                                                                     "32 word \<times>
                                                                                      'b state_scheme"}))),
                                                                            close
                                                                              (var("v",
                                                                                   @{typ
                                                                                   "32 word \<times>
                                                                                    32 word \<times>
                                                                                    nat"}),
                                                                               md(call
                                                                                    ("write'MemA",
                                                                                     @{typ
                                                                                     "'b state_scheme \<Rightarrow>
                                                                                      (unit \<times>
                                                                                       'b state_scheme)"},
                                                                                     var("v",
                                                                                         @{typ
                                                                                         "32 word \<times>
                                                                                          32 word \<times>
                                                                                          nat"}),
                                                                                     @{theory}),w32))))))),
                                                             close
                                                               (var_a HOLogic.unitT,
                                                                mb(mr(close
                                                                        (var("s",
                                                                             @{typ
                                                                             "32 word \<times> 'b state_scheme"}),
                                                                         mop(Fst,
                                                                             var("s",
                                                                                 @{typ
                                                                                 "32 word \<times>
                                                                                  'b state_scheme"})))),
                                                                   close
                                                                     (var_w("v",32),
                                                                      mb(mu(bop(Add,var_w("v",32),
                                                                                lw(8,32)),
                                                                            @{typ
                                                                            "32 word \<times> 'b state_scheme"}),
                                                                         close
                                                                           (var_w("v",32),
                                                                            mw(close
                                                                                 (var("s",
                                                                                      @{typ
                                                                                      "32 word \<times>
                                                                                       'b state_scheme"}),
                                                                                  tp[var_w("v",32),
                                                                                     mop(Snd,
                                                                                         var("s",
                                                                                             @{typ
                                                                                             "32 word \<times>
                                                                                              'b state_scheme"}))]))))))))))))))))))]),
                     close
                       (var_a HOLogic.unitT,
                        mb(ite(var_b"wback",
                               mb(ite(var_b"add",
                                      mb(md(call
                                              ("R",
                                               @{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                               var_w("n",4),@{theory ARM_Monadic}),w32),
                                         close
                                           (var_w("v",32),
                                            mu(bop(Add,var_w("v",32),var_w("imm32",32)),
                                               @{typ "32 word \<times> 'b state_scheme"}))),
                                      mb(md(call
                                              ("R",
                                               @{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                               var_w("n",4),@{theory ARM_Monadic}),w32),
                                         close
                                           (var_w("v",32),
                                            mu(bop(Sub,var_w("v",32),var_w("imm32",32)),
                                               @{typ "32 word \<times> 'b state_scheme"})))),
                                  close
                                    (var_w("v",32),
                                     mb(mu(tp[var_w("v",32),var_w("n",4)],
                                           @{typ "32 word \<times> 'b state_scheme"}),
                                        close
                                          (var("v",@{typ "32 word \<times> 4 word"}),
                                           md(call
                                                ("write'R",
                                                 @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                 var("v",@{typ "32 word \<times> 4 word"}),@{theory ARM_Monadic}),
                                              w32))))),mu(lu,@{typ "32 word \<times> 'b state_scheme"})),
                           close
                             (var_a HOLogic.unitT,
                              md(call
                                   ("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,
                                    prev_thy),w32)))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'BranchTarget",
   close
     (var_w("imm32",32),
      mb(const("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
         close
           (var_w("v",32),
            mb(mu(bop(Add,var_w("v",32),var_w("imm32",32)),qTy),
               close
                 (var_w("v",32),
                  call
                    ("BranchWritePC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                     var_w("v",32),@{theory  ARM_Monadic})))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'BranchExchange",
   close
     (var_w("m",4),
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
         close
           (var_w("v",32),
            call
              ("BXWritePC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},var_w("v",32),
               prev_thy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'BranchLinkExchangeImmediate",
   close
     (tp[var("targetInstrSet",@{typ ARM_Monadic.InstrSet}),var_w("imm32",32)],
      mb(call("CurrentInstrSet",@{typ "'b state_scheme \<Rightarrow> (ARM_Monadic.InstrSet \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic}),
         close
           (var("v",@{typ InstrSet}),
            mb(mb(mu(eq(var("v",@{typ InstrSet}),lc("InstrSet_ARM","InstrSet",prev_thy)),qTy),
                  close
                    (var_b"b",
                     ite(var_b"b",
                         mb(const
                              ("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
                            close
                              (var_w("v",32),
                               mb(mu(bop(Sub,var_w("v",32),lw(4,32)),qTy),
                                  close
                                    (var_w("v",32),
                                     call
                                       ("write'LR",
                                        @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                        var_w("v",32),@{theory ARM_Monadic}))))),
                         mb(const
                              ("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
                            close
                              (var_w("v",32),
                               mb(mb(mu(ex(var_w("v",32),ln 31,ln 1,(Word_Lib.mk_wordT 31)),qTy),
                                     close(var_w("v",31),mu(cc[var_w("v",31),lw(1,1)],qTy))),
                                  close
                                    (var_w("v",32),
                                     call
                                       ("write'LR",
                                        @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                        var_w("v",32),@{theory ARM_Monadic})))))))),
               close
                 (var_a HOLogic.unitT,
                  mb(ite(eq(var("targetInstrSet",@{typ InstrSet}),
                            lc("InstrSet_ARM","InstrSet",prev_thy)),
                         mb(const
                              ("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
                            close
                              (var_w("v",32),
                               mb(mb(mu(tp[var_w("v",32),ln 4],qTy),
                                     close
                                       (var("v",@{typ "32 word \<times> nat"}),
                                        mu(call
                                             ("Align",w32,var("v",@{typ "32 word \<times> nat"}),
                                              @{theory}),qTy))),
                                  close
                                    (var_w("v",32),mu(bop(Add,var_w("v",32),var_w("imm32",32)),qTy))))),
                         mb(const
                              ("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
                            close(var_w("v",32),mu(bop(Add,var_w("v",32),var_w("imm32",32)),qTy)))),
                     close
                       (var_w("targetAddress",32),
                        mb(call
                             ("SelectInstrSet",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                              var("targetInstrSet",@{typ InstrSet}),prev_thy ),
                           close
                             (var_a HOLogic.unitT,
                              call
                                ("BranchWritePC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                 var_w("targetAddress",32),@{theory  ARM_Monadic})))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'BranchLinkExchangeRegister",
   close
     (var_w("m",4),
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
         close
           (var_w("target",32),
            mb(call
                 ("CurrentInstrSet",@{typ "'b state_scheme \<Rightarrow> (InstrSet \<times> 'b state_scheme)"},lu,
                  @{theory ARM_Monadic}),
               close
                 (var("v",@{typ InstrSet}),
                  mb(mb(mu(eq(var("v",@{typ InstrSet}),lc("InstrSet_ARM","InstrSet",prev_thy )),qTy),
                        close
                          (var_b"b",
                           ite(var_b"b",
                               mb(const
                                    ("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                     @{theory ARM_Monadic}),
                                  close
                                    (var_w("v",32),
                                     mb(mu(bop(Sub,var_w("v",32),lw(4,32)),qTy),
                                        close
                                          (var_w("next_instr_addr",32),
                                           call
                                             ("write'LR",
                                              @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                              var_w("next_instr_addr",32),@{theory ARM_Monadic}))))),
                               mb(const
                                    ("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                     @{theory ARM_Monadic}),
                                  close
                                    (var_w("v",32),
                                     mb(mu(bop(Sub,var_w("v",32),lw(2,32)),qTy),
                                        close
                                          (var_w("next_instr_addr",32),
                                           call
                                             ("write'LR",
                                              @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                              cc[ex(var_w("next_instr_addr",32),ln 31,ln 1,
                                                    (Word_Lib.mk_wordT 31)),lw(1,1)],@{theory ARM_Monadic})))))))),
                     close
                       (var_a HOLogic.unitT,
                        call
                          ("BXWritePC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                           var_w("target",32),prev_thy )))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'CompareBranch",
   close
     (tp[var_b"nonzero",var_w("n",4),var_w("imm32",32)],
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
         close
           (var_w("v",32),
            mb(mb(mb(mu(eq(var_w("v",32),lw(0,32)),qTy),
                     close(var_b"v",mu(eq(var_b"nonzero",var_b"v"),qTy))),
                  close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
               close
                 (var_b"b",
                  ite(var_b"b",
                      mb(const("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
                         close
                           (var_w("v",32),
                            mb(mu(bop(Add,var_w("v",32),var_w("imm32",32)),qTy),
                               close
                                 (var_w("v",32),
                                  call
                                    ("BranchWritePC",
                                     @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                     var_w("v",32),@{theory  ARM_Monadic}))))),
                      call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy ))))))))
end
\<close>


definition
  dfn'TableBranchByte :: "bool \<times> 4 word \<times> 4 word \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
  "dfn'TableBranchByte \<equiv> \<lambda>(is_tbh, m, n). do {
                            b \<leftarrow> NullCheckIfThumbEE n;
                            if b then do {
                                        halfwords::16 word \<leftarrow> if is_tbh then do {
                                                                      v \<leftarrow> R n;
                                                                      do {
                                                                        v \<leftarrow> do {
                                                                            v0 \<leftarrow> R m;
                                                                            v0 \<leftarrow> return (v0, 1) \<bind> LSL;
                                                                            return (v + v0)
                                                                          };
                                                                        return (Addr v, 2)
                                                                      } \<bind> MemU
                                                                    }
                                                     else do {
                                                            v \<leftarrow> R n;
                                                            do {
                                                              v \<leftarrow> do {
                                                                  v0 \<leftarrow> R m;
                                                                  return (v + v0)
                                                                };
                                                              return (Addr v, 1)
                                                            } \<bind> MemU
                                                          };
                                        v \<leftarrow> PC;
                                        return (v + 2 * word_of_int (uint halfwords)) \<bind> BranchWritePC
                                      }
                            else return ()
                          }"



ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'CheckArray",
   close
     (tp[var_w("m",4),var_w("n",4)],
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
         close
           (var_w("v",32),
            mb(mb(call
                    ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),
                     @{theory ARM_Monadic}),close(var_w("v0",32),mu(bop(Ule,var_w("v",32),var_w("v0",32)),qTy))),
               close
                 (var_b"b",
                  ite(var_b"b",
                      mb(const("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
                         close
                           (var_w("v",32),
                            mb(mb(mb(mu(ex(var_w("v",32),ln 31,ln 1,(Word_Lib.mk_wordT 31)),qTy),
                                     close(var_w("v",31),mu(cc[var_w("v",31),lw(1,1)],qTy))),
                                  close
                                    (var_w("v",32),
                                     call
                                       ("write'LR",
                                        @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                        var_w("v",32),@{theory ARM_Monadic}))),
                               close
                                 (var_a HOLogic.unitT,
                                  mb(call
                                       ("write'ITSTATE",
                                        @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lw(0,8),
                                        @{theory ARM_Monadic}),
                                     close
                                       (var_a HOLogic.unitT,
                                        mb(mr(close
                                                (var("s",qTy),
                                                 call
                                                   ("state.CP14",@{typ CP14},var("s",qTy),@{theory ARM_Monadic}))),
                                           close
                                             (var("v",@{typ CP14}),
                                              mb(mb(mu(call
                                                         ("CP14.TEEHBR",w32,var("v",@{typ CP14}),
                                                          @{theory ARM_Monadic}),qTy),
                                                    close
                                                      (var_w("v",32),
                                                       mu(bop(Sub,var_w("v",32),lw(8,32)),qTy))),
                                                 close
                                                   (var_w("v",32),
                                                    call
                                                      ("BranchWritePC",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                       var_w("v",32),@{theory  ARM_Monadic}))))))))))),
                      call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'HandlerBranchLink",
   close
     (tp[var_b"generate_link",var_w("handler_offset",32)],
      mb(ite(var_b"generate_link",
             mb(const("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
                close
                  (var_w("v",32),
                   mb(mu(bop(Sub,var_w("v",32),lw(2,32)),qTy),
                      close
                        (var_w("next_instr_addr",32),
                         call
                           ("write'LR",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            cc[ex(var_w("next_instr_addr",32),ln 31,ln 1,(Word_Lib.mk_wordT 31)),
                               lw(1,1)],@{theory ARM_Monadic}))))),mu(lu,qTy)),
         close
           (var_a HOLogic.unitT,
            mb(mr(close(var("s",qTy),call("state.CP14",@{typ CP14},var("s",qTy),@{theory ARM_Monadic}))),
               close
                 (var("v",@{typ CP14}),
                  mb(mb(mu(call("CP14.TEEHBR",w32,var("v",@{typ CP14}),@{theory ARM_Monadic}),qTy),
                        close
                          (var_w("v",32),mu(bop(Add,var_w("v",32),var_w("handler_offset",32)),qTy))),
                     close
                       (var_w("v",32),
                        call
                          ("BranchWritePC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                           var_w("v",32),@{theory  ARM_Monadic})))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'HandlerBranchLinkParameter",
   close
     (tp[var_w("imm32",32),var_w("handler_offset",32)],
      mb(call
           ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
            tp[var_w("imm32",32),lw(8,4)],@{theory ARM_Monadic}),
         close
           (var_a HOLogic.unitT,
            mb(const("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
               close
                 (var_w("v",32),
                  mb(mu(bop(Sub,var_w("v",32),lw(2,32)),qTy),
                     close
                       (var_w("next_instr_addr",32),
                        mb(call
                             ("write'LR",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                              cc[ex(var_w("next_instr_addr",32),ln 31,ln 1,(Word_Lib.mk_wordT 31)),
                                 lw(1,1)],@{theory ARM_Monadic}),
                           close
                             (var_a HOLogic.unitT,
                              mb(mr(close
                                      (var("s",qTy),
                                       call("state.CP14",@{typ CP14},var("s",qTy),@{theory ARM_Monadic}))),
                                 close
                                   (var("v",@{typ CP14}),
                                    mb(mb(mu(call("CP14.TEEHBR",w32,var("v",@{typ CP14}),@{theory ARM_Monadic}),
                                             qTy),
                                          close
                                            (var_w("v",32),
                                             mu(bop(Add,var_w("v",32),var_w("handler_offset",32)),
                                                qTy))),
                                       close
                                         (var_w("v",32),
                                          call
                                            ("BranchWritePC",
                                             @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                             var_w("v",32),@{theory  ARM_Monadic})))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'HandlerBranchParameter",
   close
     (tp[var_w("imm32",32),var_w("handler_offset",32)],
      mb(call
           ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
            tp[var_w("imm32",32),lw(8,4)],@{theory ARM_Monadic}),
         close
           (var_a HOLogic.unitT,
            mb(mr(close(var("s",qTy),call("state.CP14",@{typ CP14},var("s",qTy),@{theory ARM_Monadic}))),
               close
                 (var("v",@{typ CP14}),
                  mb(mb(mu(call("CP14.TEEHBR",w32,var("v",@{typ CP14}),@{theory ARM_Monadic}),qTy),
                        close
                          (var_w("v",32),mu(bop(Add,var_w("v",32),var_w("handler_offset",32)),qTy))),
                     close
                       (var_w("v",32),
                        call
                          ("BranchWritePC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                           var_w("v",32),@{theory  ARM_Monadic})))))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'EnterxLeavex",
   close
     (var_b"is_enterx",
      ite(var_b"is_enterx",
          mb(call
               ("CurrentModeIsHyp",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,prev_thy ),
             close
               (var_b"b",
                ite(var_b"b",
                    call
                      ("TakeUndefInstrException",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                       lu,@{theory}),
                    mb(call
                         ("SelectInstrSet",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                          lc("InstrSet_ThumbEE","InstrSet",prev_thy ),prev_thy ),
                       close
                         (var_a HOLogic.unitT,
                          call
                            ("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))))),
          mb(call
               ("SelectInstrSet",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                lc("InstrSet_Thumb","InstrSet",prev_thy ),prev_thy ),
             close
               (var_a HOLogic.unitT,
                call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy ))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'IfThen",
   close
     (tp[var_w("firstcond",4),var_w("mask",4)],
      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
         close
           (var("v",@{typ PSR}),
            mb(mb(mb(mu(tp[var("v",@{typ PSR}),cc[var_w("firstcond",4),var_w("mask",4)]],qTy),
                     close
                       (var("v",@{typ "PSR \<times> 8 word"}),
                        mu(rupd("PSR.IT",var("v",@{typ "PSR \<times> 8 word"}),@{theory ARM_Monadic}),qTy))),
                  close
                    (var("v",@{typ PSR}),
                     mw(close
                          (var("s",qTy),
                           rupd("state.CPSR",tp[var("s",qTy),var("v",@{typ PSR})],prev_thy ))))),
               close
                 (var_a HOLogic.unitT,
                  mb(call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy ),
                     close
                       (var_a HOLogic.unitT,
                        mw(close
                             (var("s",qTy),
                              rupd
                                ("state.Encoding",
                                 tp[var("s",qTy),lc("Encoding_ARM","Encoding",prev_thy )],prev_thy )))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'CountLeadingZeroes",
   close
     (tp[var_w("d",4),var_w("m",4)],
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
         close
           (var_w("v",32),
            mb(mb(mb(mb(mu(call("CountLeadingZeroBits",HOLogic.natT,var_w("v",32),@{theory}),qTy),
                        close(var_n"v",mu(mop(Cast w32,var_n"v"),qTy))),
                     close(var_w("v",32),mu(tp[var_w("v",32),var_w("d",4)],qTy))),
                  close
                    (var("v",@{typ "32 word \<times> 4 word"}),
                     call
                       ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                        var("v",@{typ "32 word \<times> 4 word"}),@{theory ARM_Monadic}))),
               close
                 (var_a HOLogic.unitT,
                  call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'MoveHalfword",
   close
     (tp[var_b"high",var_w("d",4),var_w("imm16",16)],
      mb(ite(var_b"high",
             mb(call
                  ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("d",4),@{theory ARM_Monadic}),
                close
                  (var_w("w",32),
                   call
                     ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                      tp[bfi(ln 31,ln 16,var_w("imm16",16),var_w("w",32)),var_w("d",4)],@{theory ARM_Monadic}))),
             call
               ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                tp[mop(Cast w32,var_w("imm16",16)),var_w("d",4)],@{theory ARM_Monadic})),
         close
           (var_a HOLogic.unitT,
            call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("DataProcessing",
   close
     (tp[var_w("opc",4),var_b"setflags",var_w("d",4),var_w("n",4),var_w("imm32",32),var_b"C"],
      mb(itb([(bop(Or,eq(var_w("opc",4),lw(13,4)),
                   bop(And,eq(var_w("opc",4),lw(15,4)),eq(var_w("n",4),lw(15,4)))),mu(lw(0,32),qTy)),
              (bop(And,bop(In,var_w("opc",4),sl[lw(4,4),lw(2,4)]),
                   bop(And,eq(var_w("n",4),lw(15,4)),mop(Not,var_b"setflags"))),
               mb(const("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
                  close
                    (var_w("v",32),
                     mb(mu(tp[var_w("v",32),ln 4],qTy),
                        close
                          (var("v",@{typ "32 word \<times> nat"}),
                           mu(call("Align",w32,var("v",@{typ "32 word \<times> nat"}),@{theory}),qTy))))))],
             call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic})),
         close
           (var_w("rn",32),
            mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
               close
                 (var("v",@{typ PSR}),
                  mb(mb(mb(mb(mb(mu(call("PSR.C",HOLogic.boolT,var("v",@{typ PSR}),prev_thy ),qTy),
                                 close(var_b"v",mu(tp[var_w("imm32",32),var_b"v"],qTy))),
                              close
                                (var("v",@{typ "32 word \<times> bool"}),
                                 mu(tp[var_w("rn",32),var("v",@{typ "32 word \<times> bool"})],qTy))),
                           close
                             (var("v",@{typ "32 word \<times> 32 word \<times> bool"}),
                              mu(tp[var_w("opc",4),
                                    var("v",@{typ "32 word \<times> 32 word \<times> bool"})],qTy))),
                        close
                          (var("v",@{typ "4 word \<times> 32 word \<times> 32 word \<times> bool"}),
                           mu(call
                                ("DataProcessingALU",@{typ "32 word \<times> bool \<times> bool"},
                                 var("v",
                                     @{typ "4 word \<times> 32 word \<times> 32 word \<times> bool"}),
                                 @{theory}),qTy))),
                     close
                       (var("x",@{typ "32 word \<times> bool \<times> bool"}),
                        cs(var("x",@{typ "32 word \<times> bool \<times> bool"}),
                           [(tp[var_w("result",32),var_b"carry",var_b"overflow"],
                             mb(ite(mop(Not,
                                        eq(ex(var_w("opc",4),ln 3,ln 2,(Word_Lib.mk_wordT 2)),
                                           lw(2,2))),
                                    call
                                      ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                       tp[var_w("result",32),var_w("d",4)],prev_thy ),mu(lu,qTy)),
                                close
                                  (var_a HOLogic.unitT,
                                   mb(ite(var_b"setflags",
                                          mb(mr(close
                                                  (var("s",qTy),
                                                   call
                                                     ("state.CPSR",@{typ PSR},var("s",qTy),prev_thy ))),
                                             close
                                               (var("v",@{typ PSR}),
                                                mb(mb(mb(mu(tp[var("v",@{typ PSR}),
                                                               bop(Bit,var_w("result",32),ln 31)],
                                                            qTy),
                                                         close
                                                           (var("v",@{typ "PSR \<times> bool"}),
                                                            mu(rupd
                                                                 ("PSR.N",
                                                                  var("v",@{typ "PSR \<times> bool"}),
                                                                  prev_thy ),qTy))),
                                                      close
                                                        (var("v",@{typ PSR}),
                                                         mw(close
                                                              (var("s",qTy),
                                                               rupd
                                                                 ("state.CPSR",
                                                                  tp[var("s",qTy),
                                                                     var("v",@{typ PSR})],prev_thy ))))),
                                                   close
                                                     (var_a HOLogic.unitT,
                                                      mb(mr(close
                                                              (var("s",qTy),
                                                               call
                                                                 ("state.CPSR",@{typ PSR},
                                                                  var("s",qTy),prev_thy ))),
                                                         close
                                                           (var("v",@{typ PSR}),
                                                            mb(mb(mb(mu(tp[var("v",@{typ PSR}),
                                                                           eq(var_w("result",32),
                                                                              lw(0,32))],qTy),
                                                                     close
                                                                       (var("v",
                                                                            @{typ
                                                                            "PSR \<times> bool"}),
                                                                        mu(rupd
                                                                             ("PSR.Z",
                                                                              var("v",
                                                                                  @{typ
                                                                                  "PSR \<times> bool"}),
                                                                              prev_thy ),qTy))),
                                                                  close
                                                                    (var("v",@{typ PSR}),
                                                                     mw(close
                                                                          (var("s",qTy),
                                                                           rupd
                                                                             ("state.CPSR",
                                                                              tp[var("s",qTy),
                                                                                 var("v",@{typ PSR})],
                                                                              prev_thy ))))),
                                                               close
                                                                 (var_a HOLogic.unitT,
                                                                  ite(call
                                                                        ("ArithmeticOpcode",
                                                                         HOLogic.boolT,
                                                                         var_w("opc",4),@{theory}),
                                                                      mb(mr(close
                                                                              (var("s",qTy),
                                                                               call
                                                                                 ("state.CPSR",
                                                                                  @{typ PSR},
                                                                                  var("s",qTy),
                                                                                  prev_thy ))),
                                                                         close
                                                                           (var("v",@{typ PSR}),
                                                                            mb(mb(mb(mu(tp[var("v",
                                                                                               @{typ PSR}),
                                                                                           var_b"carry"],
                                                                                        qTy),
                                                                                     close
                                                                                       (var("v",
                                                                                            @{typ
                                                                                            "PSR \<times>
                                                                                             bool"}),
                                                                                        mu(rupd
                                                                                             ("PSR.C",
                                                                                              var("v",
                                                                                                  @{typ
                                                                                                  "PSR \<times>
                                                                                                   bool"}),
                                                                                              prev_thy ),
                                                                                           qTy))),
                                                                                  close
                                                                                    (var("v",
                                                                                         @{typ PSR}),
                                                                                     mw(close
                                                                                          (var("s",
                                                                                               qTy),
                                                                                           rupd
                                                                                             ("state.CPSR",
                                                                                              tp[var("s",
                                                                                                     qTy),
                                                                                                 var("v",
                                                                                                     @{typ PSR})],
                                                                                              prev_thy ))))),
                                                                               close
                                                                                 (var_a
                                                                                    HOLogic.unitT,
                                                                                  mb(mr(close
                                                                                          (var("s",
                                                                                               qTy),
                                                                                           call
                                                                                             ("state.CPSR",
                                                                                              @{typ PSR},
                                                                                              var("s",
                                                                                                  qTy),
                                                                                              prev_thy ))),
                                                                                     close
                                                                                       (var("v",
                                                                                            @{typ PSR}),
                                                                                        mb(mb(mu(tp[var("v",
                                                                                                        @{typ PSR}),
                                                                                                    var_b"overflow"],
                                                                                                 qTy),
                                                                                              close
                                                                                                (var("v",
                                                                                                     @{typ
                                                                                                     "PSR \<times>
                                                                                                      bool"}),
                                                                                                 mu(rupd
                                                                                                      ("PSR.V",
                                                                                                       var("v",
                                                                                                           @{typ
                                                                                                           "PSR \<times>
                                                                                                            bool"}),
                                                                                                       prev_thy ),
                                                                                                    qTy))),
                                                                                           close
                                                                                             (var("v",
                                                                                                  @{typ PSR}),
                                                                                              mw(close
                                                                                                   (var("s",
                                                                                                        qTy),
                                                                                                    rupd
                                                                                                      ("state.CPSR",
                                                                                                       tp[var("s",
                                                                                                              qTy),
                                                                                                          var("v",
                                                                                                              @{typ PSR})],
                                                                                                       prev_thy ))))))))))),
                                                                      mb(mr(close
                                                                              (var("s",qTy),
                                                                               call
                                                                                 ("state.CPSR",
                                                                                  @{typ PSR},
                                                                                  var("s",qTy),
                                                                                  prev_thy ))),
                                                                         close
                                                                           (var("v",@{typ PSR}),
                                                                            mb(mb(mu(tp[var("v",
                                                                                            @{typ PSR}),
                                                                                        var_b"C"],
                                                                                     qTy),
                                                                                  close
                                                                                    (var("v",
                                                                                         @{typ
                                                                                         "PSR \<times>
                                                                                          bool"}),
                                                                                     mu(rupd
                                                                                          ("PSR.C",
                                                                                           var("v",
                                                                                               @{typ
                                                                                               "PSR \<times>
                                                                                                bool"}),
                                                                                           prev_thy ),
                                                                                        qTy))),
                                                                               close
                                                                                 (var("v",@{typ PSR}),
                                                                                  mw(close
                                                                                       (var("s",qTy),
                                                                                        rupd
                                                                                          ("state.CPSR",
                                                                                           tp[var("s",
                                                                                                  qTy),
                                                                                              var("v",
                                                                                                  @{typ PSR})],
                                                                                           prev_thy )))))))))))))))),
                                          mu(lu,qTy)),
                                      close
                                        (var_a HOLogic.unitT,
                                         call
                                           ("IncPC",
                                            @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,
                                            prev_thy ))))))],@{context})))))))))
end
\<close>


ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("DataProcessingPC",
   close
     (tp[var_w("opc",4),var_b"setflags",var_w("n",4),var_w("imm32",32)],
      mb(itb([(bop(Or,eq(var_w("opc",4),lw(13,4)),
                   bop(And,eq(var_w("opc",4),lw(15,4)),eq(var_w("n",4),lw(15,4)))),mu(lw(0,32),qTy)),
              (bop(And,bop(In,var_w("opc",4),sl[lw(4,4),lw(2,4)]),
                   bop(And,eq(var_w("n",4),lw(15,4)),mop(Not,var_b"setflags"))),
               mb(const("PC",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},@{theory ARM_Monadic}),
                  close
                    (var_w("v",32),
                     mb(mu(tp[var_w("v",32),ln 4],qTy),
                        close
                          (var("v",@{typ "32 word \<times> nat"}),
                           mu(call("Align",w32,var("v",@{typ "32 word \<times> nat"}),@{theory}),qTy))))))],
             call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic})),
         close
           (var_w("rn",32),
            mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
               close
                 (var("v",@{typ PSR}),
                  mb(mb(mb(mb(mb(mu(call("PSR.C",HOLogic.boolT,var("v",@{typ PSR}),prev_thy ),qTy),
                                 close(var_b"v",mu(tp[var_w("imm32",32),var_b"v"],qTy))),
                              close
                                (var("v",@{typ "32 word \<times> bool"}),
                                 mu(tp[var_w("rn",32),var("v",@{typ "32 word \<times> bool"})],qTy))),
                           close
                             (var("v",@{typ "32 word \<times> 32 word \<times> bool"}),
                              mu(tp[var_w("opc",4),
                                    var("v",@{typ "32 word \<times> 32 word \<times> bool"})],qTy))),
                        close
                          (var("v",@{typ "4 word \<times> 32 word \<times> 32 word \<times> bool"}),
                           mu(call
                                ("DataProcessingALU",@{typ "32 word \<times> bool \<times> bool"},
                                 var("v",
                                     @{typ "4 word \<times> 32 word \<times> 32 word \<times> bool"}),
                                 @{theory}),qTy))),
                     close
                       (var("x",@{typ "32 word \<times> bool \<times> bool"}),
                        cs(var("x",@{typ "32 word \<times> bool \<times> bool"}),
                           [(tp[var_w("result",32),var_a HOLogic.boolT,var_a HOLogic.boolT],
                             ite(var_b"setflags",
                                 mb(call
                                      ("CurrentModeIsHyp",
                                       @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                       prev_thy ),
                                    close
                                      (var_b"b",
                                       ite(var_b"b",
                                           call
                                             ("TakeUndefInstrException",
                                              @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,
                                              @{theory}),
                                           mb(call
                                                ("CurrentModeIsUserOrSystem",
                                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                 lu,prev_thy ),
                                              close
                                                (var_b"b",
                                                 ite(var_b"b",
                                                     call
                                                       ("raise'exception",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                        call
                                                          ("exception.UNPREDICTABLE",
                                                           @{typ exception},ls"DataProcessingPC",
                                                           @{theory ARM_Monadic}),@{theory ARM_Monadic}),
                                                     mb(const
                                                          ("SPSR",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow> (PSR \<times> 'b state_scheme)"},
                                                           prev_thy ),
                                                        close
                                                          (var("v",@{typ PSR}),
                                                           mb(mb(mb(mu(call
                                                                         ("reg'PSR",w32,
                                                                          var("v",@{typ PSR}),
                                                                          prev_thy ),qTy),
                                                                    close
                                                                      (var_w("v",32),
                                                                       mu(tp[var_w("v",32),lw(15,4),
                                                                             lt],qTy))),
                                                                 close
                                                                   (var("v",
                                                                        @{typ
                                                                        "32 word \<times>
                                                                         4 word \<times> bool"}),
                                                                    call
                                                                      ("CPSRWriteByInstr",
                                                                       @{typ
                                                                       "'b state_scheme \<Rightarrow>
                                                                        (unit \<times> 'b state_scheme)"},
                                                                       var("v",
                                                                           @{typ
                                                                           "32 word \<times>
                                                                            4 word \<times> bool"}),
                                                                       prev_thy ))),
                                                              close
                                                                (var_a HOLogic.unitT,
                                                                 mb(mr(close
                                                                         (var("s",qTy),
                                                                          call
                                                                            ("state.CPSR",
                                                                             @{typ PSR},
                                                                             var("s",qTy),prev_thy ))),
                                                                    close
                                                                      (var("v",@{typ PSR}),
                                                                       mb(mb(mb(mu(call
                                                                                     ("PSR.M",
                                                                                      (Word_Lib.mk_wordT 5),
                                                                                      var("v",
                                                                                          @{typ PSR}),
                                                                                      prev_thy ),qTy),
                                                                                close
                                                                                  (var_w("v",5),
                                                                                   mu(eq(var_w("v",5),
                                                                                         lw(26,5)),
                                                                                      qTy))),
                                                                             close
                                                                               (var_b"b",
                                                                                ite(var_b"b",
                                                                                    mb(call
                                                                                         ("CurrentInstrSet",
                                                                                          @{typ
                                                                                          "'b state_scheme \<Rightarrow>
                                                                                           (InstrSet \<times>
                                                                                            'b state_scheme)"},
                                                                                          lu,
                                                                                          @{theory ARM_Monadic}),
                                                                                       close
                                                                                         (var("v",
                                                                                              @{typ InstrSet}),
                                                                                          mu(eq(var("v",
                                                                                                    @{typ InstrSet}),
                                                                                                lc("InstrSet_ThumbEE",
                                                                                                   "InstrSet",
                                                                                                   prev_thy)),
                                                                                             qTy))),
                                                                                    mu(lf,qTy)))),
                                                                          close
                                                                            (var_b"b",
                                                                             ite(var_b"b",
                                                                                 call
                                                                                   ("raise'exception",
                                                                                    @{typ
                                                                                    "'b state_scheme \<Rightarrow>
                                                                                     (unit \<times>
                                                                                      'b state_scheme)"},
                                                                                    call
                                                                                      ("exception.UNPREDICTABLE",
                                                                                       @{typ exception},
                                                                                       ls
                                                                                        "DataProcessingPC",
                                                                                       @{theory ARM_Monadic}),
                                                                                    @{theory ARM_Monadic}),
                                                                                 call
                                                                                   ("BranchWritePC",
                                                                                    @{typ
                                                                                    "'b state_scheme \<Rightarrow>
                                                                                     (unit \<times>
                                                                                      'b state_scheme)"},
                                                                                    var_w("result",32),
                                                                                    @{theory ARM_Monadic})))))))))))))))),
                                 call
                                   ("ALUWritePC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                    var_w("result",32),prev_thy )))],@{context})))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'Move",
   close
     (tp[var_b"setflags",var_b"negate",var_w("d",4),var_w("imm12",12)],
      let'
        (var_w("opc",4),cc[lw(3,2),mop(Cast w1,var_b"negate"),lw(1,1)],
         mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
            close
              (var("v",@{typ PSR}),
               mb(mb(mb(mu(call("PSR.C",HOLogic.boolT,var("v",@{typ PSR}),prev_thy ),qTy),
                        close(var_b"v",mu(tp[var_w("imm12",12),var_b"v"],qTy))),
                     close
                       (var("v",@{typ "12 word \<times> bool"}),
                        call
                          ("ExpandImm_C",
                           @{typ "'b state_scheme \<Rightarrow> ((32 word \<times> bool) \<times> 'b state_scheme)"},
                           var("v",@{typ "12 word \<times> bool"}),@{theory}))),
                  close
                    (var("x",@{typ "32 word \<times> bool"}),
                     cs(var("x",@{typ "32 word \<times> bool"}),
                        [(tp[var_w("imm32",32),var_b"carry"],
                          ite(eq(var_w("d",4),lw(15,4)),
                              call
                                ("DataProcessingPC",
                                 @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                 tp[var_w("opc",4),var_b"setflags",lw(15,4),var_w("imm32",32)],
                                 @{theory}),
                              call
                                ("DataProcessing",
                                 @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                 tp[var_w("opc",4),var_b"setflags",var_w("d",4),lw(15,4),
                                    var_w("imm32",32),var_b"carry"],@{theory})))],@{context}))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'TestCompareImmediate",
   close
     (tp[var_w("op",2),var_w("n",4),var_w("imm12",12)],
      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
         close
           (var("v",@{typ PSR}),
            mb(mb(mb(mu(call("PSR.C",HOLogic.boolT,var("v",@{typ PSR}),prev_thy ),qTy),
                     close(var_b"v",mu(tp[var_w("imm12",12),var_b"v"],qTy))),
                  close
                    (var("v",@{typ "12 word \<times> bool"}),
                     call
                       ("ExpandImm_C",
                        @{typ "'b state_scheme \<Rightarrow> ((32 word \<times> bool) \<times> 'b state_scheme)"},
                        var("v",@{typ "12 word \<times> bool"}),@{theory}))),
               close
                 (var("x",@{typ "32 word \<times> bool"}),
                  cs(var("x",@{typ "32 word \<times> bool"}),
                     [(tp[var_w("imm32",32),var_b"carry"],
                       call
                         ("DataProcessing",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                          tp[cc[lw(2,2),var_w("op",2)],lt,lx w4,var_w("n",4),var_w("imm32",32),
                             var_b"carry"],@{theory}))],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'ArithLogicImmediate",
   close
     (tp[var_w("opc",4),var_b"setflags",var_w("d",4),var_w("n",4),var_w("imm12",12)],
      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
         close
           (var("v",@{typ PSR}),
            mb(mb(mb(mu(call("PSR.C",HOLogic.boolT,var("v",@{typ PSR}),prev_thy ),qTy),
                     close(var_b"v",mu(tp[var_w("imm12",12),var_b"v"],qTy))),
                  close
                    (var("v",@{typ "12 word \<times> bool"}),
                     call
                       ("ExpandImm_C",
                        @{typ "'b state_scheme \<Rightarrow> ((32 word \<times> bool) \<times> 'b state_scheme)"},
                        var("v",@{typ "12 word \<times> bool"}),@{theory}))),
               close
                 (var("x",@{typ "32 word \<times> bool"}),
                  cs(var("x",@{typ "32 word \<times> bool"}),
                     [(tp[var_w("imm32",32),var_b"carry"],
                       ite(eq(var_w("d",4),lw(15,4)),
                           call
                             ("DataProcessingPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                              tp[var_w("opc",4),var_b"setflags",var_w("n",4),var_w("imm32",32)],
                              @{theory}),
                           call
                             ("DataProcessing",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                              tp[var_w("opc",4),var_b"setflags",var_w("d",4),var_w("n",4),
                                 var_w("imm32",32),var_b"carry"],@{theory})))],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("doRegister",
   close
     (tp[var_w("opc",4),var_b"setflags",var_w("d",4),var_w("n",4),var_w("m",4),
         var("shift_t",@{typ SRType}),var_n"shift_n"],
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
         close
           (var_w("v",32),
            mb(mb(mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                     close
                       (var("v0",@{typ PSR}),
                        mb(mb(mb(mu(call("PSR.C",HOLogic.boolT,var("v0",@{typ PSR}),prev_thy ),qTy),
                                 close(var_b"v",mu(tp[var_n"shift_n",var_b"v"],qTy))),
                              close
                                (var("v",@{typ "nat \<times> bool"}),
                                 mu(tp[var("shift_t",@{typ SRType}),
                                       var("v",@{typ "nat \<times> bool"})],qTy))),
                           close
                             (var("v0",@{typ "SRType \<times> nat \<times> bool"}),
                              mu(tp[var_w("v",32),
                                    var("v0",@{typ "SRType \<times> nat \<times> bool"})],qTy))))),
                  close
                    (var("v",@{typ "32 word \<times> SRType \<times> nat \<times> bool"}),
                     call
                       ("Shift_C",
                        @{typ "'b state_scheme \<Rightarrow> ((32 word \<times> bool) \<times> 'b state_scheme)"},
                        var("v",@{typ "32 word \<times> SRType \<times> nat \<times> bool"}),
                        @{theory}))),
               close
                 (var("x",@{typ "32 word \<times> bool"}),
                  cs(var("x",@{typ "32 word \<times> bool"}),
                     [(tp[var_w("shifted",32),var_b"carry"],
                       ite(eq(var_w("d",4),lw(15,4)),
                           call
                             ("DataProcessingPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                              tp[var_w("opc",4),var_b"setflags",var_w("n",4),var_w("shifted",32)],
                              @{theory}),
                           call
                             ("DataProcessing",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                              tp[var_w("opc",4),var_b"setflags",var_w("d",4),var_w("n",4),
                                 var_w("shifted",32),var_b"carry"],@{theory})))],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'Register",
   close
     (tp[var_w("opc",4),var_b"setflags",var_w("d",4),var_w("n",4),var_w("m",4),
         var("shift_t",@{typ SRType}),var_n"shift_n"],
      call
        ("doRegister",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
         tp[var_w("opc",4),var_b"setflags",var_w("d",4),var_w("n",4),var_w("m",4),
            var("shift_t",@{typ SRType}),var_n"shift_n"],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'TestCompareRegister",
   close
     (tp[var_w("opc",2),var_w("n",4),var_w("m",4),var("shift_t",@{typ SRType}),var_n"shift_n"],
      call
        ("doRegister",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
         tp[cc[lw(2,2),var_w("opc",2)],lt,lw(0,4),var_w("n",4),var_w("m",4),
            var("shift_t",@{typ SRType}),var_n"shift_n"],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'ShiftImmediate",
   close
     (tp[var_b"negate",var_b"setflags",var_w("d",4),var_w("m",4),var("shift_t",@{typ SRType}),
         var_n"shift_n"],
      ite(var_b"negate",
          call
            ("doRegister",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
             tp[lw(15,4),var_b"setflags",var_w("d",4),lw(15,4),var_w("m",4),
                var("shift_t",@{typ SRType}),var_n"shift_n"],@{theory}),
          call
            ("doRegister",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
             tp[lw(13,4),var_b"setflags",var_w("d",4),lx w4,var_w("m",4),
                var("shift_t",@{typ SRType}),var_n"shift_n"],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("doRegisterShiftedRegister",
   close
     (tp[var_w("opc",4),var_b"setflags",var_w("d",4),var_w("n",4),var_w("m",4),
         var("shift_t",@{typ SRType}),var_w("s",4)],
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
         close
           (var_w("v",32),
            mb(mb(mb(call
                       ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("s",4),
                        @{theory ARM_Monadic}),
                     close
                       (var_w("v0",32),
                        mb(mb(mb(mb(mu(ex(var_w("v0",32),ln 7,ln 0,w8),qTy),
                                    close(var_w("v",8),mu(mop(Cast HOLogic.natT,var_w("v",8)),qTy))),
                                 close
                                   (var_n"v",
                                    mb(mr(close
                                            (var("s",qTy),
                                             call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                                       close
                                         (var("v0",@{typ PSR}),
                                          mb(mu(call
                                                  ("PSR.C",HOLogic.boolT,var("v0",@{typ PSR}),
                                                   prev_thy ),qTy),
                                             close(var_b"v0",mu(tp[var_n"v",var_b"v0"],qTy))))))),
                              close
                                (var("v",@{typ "nat \<times> bool"}),
                                 mu(tp[var("shift_t",@{typ SRType}),
                                       var("v",@{typ "nat \<times> bool"})],qTy))),
                           close
                             (var("v0",@{typ "SRType \<times> nat \<times> bool"}),
                              mu(tp[var_w("v",32),
                                    var("v0",@{typ "SRType \<times> nat \<times> bool"})],qTy))))),
                  close
                    (var("v",@{typ "32 word \<times> SRType \<times> nat \<times> bool"}),
                     call
                       ("Shift_C",
                        @{typ "'b state_scheme \<Rightarrow> ((32 word \<times> bool) \<times> 'b state_scheme)"},
                        var("v",@{typ "32 word \<times> SRType \<times> nat \<times> bool"}),
                        @{theory}))),
               close
                 (var("x",@{typ "32 word \<times> bool"}),
                  cs(var("x",@{typ "32 word \<times> bool"}),
                     [(tp[var_w("shifted",32),var_b"carry"],
                       call
                         ("DataProcessing",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                          tp[var_w("opc",4),var_b"setflags",var_w("d",4),var_w("n",4),
                             var_w("shifted",32),var_b"carry"],@{theory}))],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'RegisterShiftedRegister",
   close
     (tp[var_w("opc",4),var_b"setflags",var_w("d",4),var_w("n",4),var_w("m",4),
         var("shift_t",@{typ SRType}),var_w("s",4)],
      call
        ("doRegisterShiftedRegister",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
         tp[var_w("opc",4),var_b"setflags",var_w("d",4),var_w("n",4),var_w("m",4),
            var("shift_t",@{typ SRType}),var_w("s",4)],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'ShiftRegister",
   close
     (tp[var_b"negate",var_b"setflags",var_w("d",4),var_w("n",4),var("shift_t",@{typ SRType}),
         var_w("m",4)],
      ite(var_b"negate",
          call
            ("doRegisterShiftedRegister",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
             tp[lw(15,4),var_b"setflags",var_w("d",4),lw(15,4),var_w("n",4),
                var("shift_t",@{typ SRType}),var_w("m",4)],@{theory}),
          call
            ("doRegisterShiftedRegister",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
             tp[lw(13,4),var_b"setflags",var_w("d",4),lx w4,var_w("n",4),
                var("shift_t",@{typ SRType}),var_w("m",4)],@{theory}))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'AddSub",
   close
     (tp[var_b"sub",var_w("d",4),var_w("n",4),var_w("imm12",12)],
      call
        ("DataProcessing",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
         tp[ite(var_b"sub",lw(2,4),lw(4,4)),lf,var_w("d",4),var_w("n",4),
            mop(Cast w32,var_w("imm12",12)),lx HOLogic.boolT],@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'SaturatingAddSubtract",
   close
     (tp[var_w("opc",2),var_w("d",4),var_w("m",4),var_w("n",4)],
      mn(lx w32,
         mn(lx HOLogic.boolT,
            mb(itb([(eq(var_w("opc",2),lw(0,2)),
                     mb(md(md(call
                                ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                 var_w("m",4),@{theory ARM_Monadic}),w32),HOLogic.boolT),
                        close
                          (var_w("v",32),
                           mb(mb(mb(mb(mu(mop(Cast HOLogic.intT,var_w("v",32)),
                                          @{typ "bool \<times> 32 word \<times> 'b state_scheme"}),
                                       close
                                         (var_i"v",
                                          mb(md(md(call
                                                     ("R",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                                      var_w("n",4),@{theory ARM_Monadic}),w32),HOLogic.boolT),
                                             close
                                               (var_w("v0",32),
                                                mb(mu(mop(Cast HOLogic.intT,var_w("v0",32)),
                                                      @{typ "bool \<times> 32 word \<times> 'b state_scheme"}),
                                                   close
                                                     (var_i"v0",
                                                      mu(bop(Add,var_i"v",var_i"v0"),
                                                         @{typ
                                                         "bool \<times> 32 word \<times> 'b state_scheme"}))))))),
                                    close
                                      (var_i"v",
                                       mu(tp[var_i"v",ln 32],
                                          @{typ "bool \<times> 32 word \<times> 'b state_scheme"}))),
                                 close
                                   (var("v",@{typ "int \<times> nat"}),
                                    md(md(call
                                            ("SignedSatQ",
                                             @{typ
                                             "'b state_scheme \<Rightarrow>
                                              ((32 word \<times> bool) \<times> 'b state_scheme)"},
                                             var("v",@{typ "int \<times> nat"}),@{theory}),w32),
                                       HOLogic.boolT))),
                              close
                                (var("x",@{typ "32 word \<times> bool"}),
                                 cs(var("x",@{typ "32 word \<times> bool"}),
                                    [(tp[var_w("r",32),var_b"s"],
                                      mb(mw(close
                                              (var("s",@{typ "bool \<times> 32 word \<times> 'b state_scheme"}),
                                               tp[mop(Fst,
                                                      var("s",
                                                          @{typ
                                                          "bool \<times> 32 word \<times> 'b state_scheme"})),
                                                  var_w("r",32),
                                                  mop(Snd,
                                                      mop(Snd,
                                                          var("s",
                                                              @{typ
                                                              "bool \<times> 32 word \<times> 'b state_scheme"})))])),
                                         close
                                           (var_a HOLogic.unitT,
                                            mw(close
                                                 (var("s0",
                                                      @{typ "bool \<times> 32 word \<times> 'b state_scheme"}),
                                                  tp[var_b"s",
                                                     mop(Snd,
                                                         var("s0",
                                                             @{typ
                                                             "bool \<times> 32 word \<times> 'b state_scheme"}))])))))],
                                    @{context})))))),
                    (eq(var_w("opc",2),lw(1,2)),
                     mb(md(md(call
                                ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                 var_w("m",4),@{theory ARM_Monadic}),w32),HOLogic.boolT),
                        close
                          (var_w("v",32),
                           mb(mb(mb(mb(mu(mop(Cast HOLogic.intT,var_w("v",32)),
                                          @{typ "bool \<times> 32 word \<times> 'b state_scheme"}),
                                       close
                                         (var_i"v",
                                          mb(md(md(call
                                                     ("R",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                                      var_w("n",4),@{theory ARM_Monadic}),w32),HOLogic.boolT),
                                             close
                                               (var_w("v0",32),
                                                mb(mu(mop(Cast HOLogic.intT,var_w("v0",32)),
                                                      @{typ "bool \<times> 32 word \<times> 'b state_scheme"}),
                                                   close
                                                     (var_i"v0",
                                                      mu(bop(Sub,var_i"v",var_i"v0"),
                                                         @{typ
                                                         "bool \<times> 32 word \<times> 'b state_scheme"}))))))),
                                    close
                                      (var_i"v",
                                       mu(tp[var_i"v",ln 32],
                                          @{typ "bool \<times> 32 word \<times> 'b state_scheme"}))),
                                 close
                                   (var("v",@{typ "int \<times> nat"}),
                                    md(md(call
                                            ("SignedSatQ",
                                             @{typ
                                             "'b state_scheme \<Rightarrow>
                                              ((32 word \<times> bool) \<times> 'b state_scheme)"},
                                             var("v",@{typ "int \<times> nat"}),@{theory}),w32),
                                       HOLogic.boolT))),
                              close
                                (var("x",@{typ "32 word \<times> bool"}),
                                 cs(var("x",@{typ "32 word \<times> bool"}),
                                    [(tp[var_w("r",32),var_b"s"],
                                      mb(mw(close
                                              (var("s",@{typ "bool \<times> 32 word \<times> 'b state_scheme"}),
                                               tp[mop(Fst,
                                                      var("s",
                                                          @{typ
                                                          "bool \<times> 32 word \<times> 'b state_scheme"})),
                                                  var_w("r",32),
                                                  mop(Snd,
                                                      mop(Snd,
                                                          var("s",
                                                              @{typ
                                                              "bool \<times> 32 word \<times> 'b state_scheme"})))])),
                                         close
                                           (var_a HOLogic.unitT,
                                            mw(close
                                                 (var("s0",
                                                      @{typ "bool \<times> 32 word \<times> 'b state_scheme"}),
                                                  tp[var_b"s",
                                                     mop(Snd,
                                                         var("s0",
                                                             @{typ
                                                             "bool \<times> 32 word \<times> 'b state_scheme"}))])))))],
                                    @{context})))))),
                    (eq(var_w("opc",2),lw(2,2)),
                     mb(md(md(call
                                ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                 var_w("n",4),@{theory ARM_Monadic}),w32),HOLogic.boolT),
                        close
                          (var_w("v",32),
                           mb(mb(mb(mb(mu(mop(Cast HOLogic.intT,var_w("v",32)),
                                          @{typ "bool \<times> 32 word \<times> 'b state_scheme"}),
                                       close
                                         (var_i"v",
                                          mu(bop(Mul,li 2,var_i"v"),
                                             @{typ "bool \<times> 32 word \<times> 'b state_scheme"}))),
                                    close
                                      (var_i"v",
                                       mu(tp[var_i"v",ln 32],
                                          @{typ "bool \<times> 32 word \<times> 'b state_scheme"}))),
                                 close
                                   (var("v",@{typ "int \<times> nat"}),
                                    md(md(call
                                            ("SignedSatQ",
                                             @{typ
                                             "'b state_scheme \<Rightarrow>
                                              ((32 word \<times> bool) \<times> 'b state_scheme)"},
                                             var("v",@{typ "int \<times> nat"}),@{theory}),w32),
                                       HOLogic.boolT))),
                              close
                                (var("x",@{typ "32 word \<times> bool"}),
                                 cs(var("x",@{typ "32 word \<times> bool"}),
                                    [(tp[var_w("doubled",32),var_b"sat1"],
                                      mb(md(md(call
                                                 ("R",
                                                  @{typ
                                                  "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                                  var_w("m",4),@{theory ARM_Monadic}),w32),HOLogic.boolT),
                                         close
                                           (var_w("v",32),
                                            mb(mb(mb(mb(mu(mop(Cast HOLogic.intT,var_w("v",32)),
                                                           @{typ
                                                           "bool \<times> 32 word \<times> 'b state_scheme"}),
                                                        close
                                                          (var_i"v",
                                                           mu(bop(Add,var_i"v",
                                                                  mop(Cast HOLogic.intT,
                                                                      var_w("doubled",32))),
                                                              @{typ
                                                              "bool \<times> 32 word \<times> 'b state_scheme"}))),
                                                     close
                                                       (var_i"v",
                                                        mu(tp[var_i"v",ln 32],
                                                           @{typ
                                                           "bool \<times> 32 word \<times> 'b state_scheme"}))),
                                                  close
                                                    (var("v",@{typ "int \<times> nat"}),
                                                     md(md(call
                                                             ("SignedSatQ",
                                                              @{typ
                                                              "'b state_scheme \<Rightarrow>
                                                               ((32 word \<times> bool) \<times>
                                                                'b state_scheme)"},
                                                              var("v",@{typ "int \<times> nat"}),
                                                              @{theory}),w32),HOLogic.boolT))),
                                               close
                                                 (var("x",@{typ "32 word \<times> bool"}),
                                                  cs(var("x",@{typ "32 word \<times> bool"}),
                                                     [(tp[var_w("r",32),var_b"sat2"],
                                                       mb(mw(close
                                                               (var("s",
                                                                    @{typ
                                                                    "bool \<times>
                                                                     32 word \<times> 'b state_scheme"}),
                                                                tp[mop(Fst,
                                                                       var("s",
                                                                           @{typ
                                                                           "bool \<times>
                                                                            32 word \<times> 'b state_scheme"})),
                                                                   var_w("r",32),
                                                                   mop(Snd,
                                                                       mop(Snd,
                                                                           var("s",
                                                                               @{typ
                                                                               "bool \<times>
                                                                                32 word \<times>
                                                                                'b state_scheme"})))])),
                                                          close
                                                            (var_a HOLogic.unitT,
                                                             mw(close
                                                                  (var("s",
                                                                       @{typ
                                                                       "bool \<times>
                                                                        32 word \<times> 'b state_scheme"}),
                                                                   tp[bop(Or,var_b"sat1",var_b"sat2"),
                                                                      mop(Snd,
                                                                          var("s",
                                                                              @{typ
                                                                              "bool \<times>
                                                                               32 word \<times>
                                                                               'b state_scheme"}))])))))],
                                                     @{context}))))))],@{context})))))),
                    (eq(var_w("opc",2),lw(3,2)),
                     mb(md(md(call
                                ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                 var_w("n",4),@{theory ARM_Monadic}),w32),HOLogic.boolT),
                        close
                          (var_w("v",32),
                           mb(mb(mb(mb(mu(mop(Cast HOLogic.intT,var_w("v",32)),
                                          @{typ "bool \<times> 32 word \<times> 'b state_scheme"}),
                                       close
                                         (var_i"v",
                                          mu(bop(Mul,li 2,var_i"v"),
                                             @{typ "bool \<times> 32 word \<times> 'b state_scheme"}))),
                                    close
                                      (var_i"v",
                                       mu(tp[var_i"v",ln 32],
                                          @{typ "bool \<times> 32 word \<times> 'b state_scheme"}))),
                                 close
                                   (var("v",@{typ "int \<times> nat"}),
                                    md(md(call
                                            ("SignedSatQ",
                                             @{typ
                                             "'b state_scheme \<Rightarrow>
                                              ((32 word \<times> bool) \<times> 'b state_scheme)"},
                                             var("v",@{typ "int \<times> nat"}),@{theory}),w32),
                                       HOLogic.boolT))),
                              close
                                (var("x",@{typ "32 word \<times> bool"}),
                                 cs(var("x",@{typ "32 word \<times> bool"}),
                                    [(tp[var_w("doubled",32),var_b"sat1"],
                                      mb(md(md(call
                                                 ("R",
                                                  @{typ
                                                  "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                                  var_w("m",4),@{theory ARM_Monadic}),w32),HOLogic.boolT),
                                         close
                                           (var_w("v",32),
                                            mb(mb(mb(mb(mu(mop(Cast HOLogic.intT,var_w("v",32)),
                                                           @{typ
                                                           "bool \<times> 32 word \<times> 'b state_scheme"}),
                                                        close
                                                          (var_i"v",
                                                           mu(bop(Sub,var_i"v",
                                                                  mop(Cast HOLogic.intT,
                                                                      var_w("doubled",32))),
                                                              @{typ
                                                              "bool \<times> 32 word \<times> 'b state_scheme"}))),
                                                     close
                                                       (var_i"v",
                                                        mu(tp[var_i"v",ln 32],
                                                           @{typ
                                                           "bool \<times> 32 word \<times> 'b state_scheme"}))),
                                                  close
                                                    (var("v",@{typ "int \<times> nat"}),
                                                     md(md(call
                                                             ("SignedSatQ",
                                                              @{typ
                                                              "'b state_scheme \<Rightarrow>
                                                               ((32 word \<times> bool) \<times>
                                                                'b state_scheme)"},
                                                              var("v",@{typ "int \<times> nat"}),
                                                              @{theory}),w32),HOLogic.boolT))),
                                               close
                                                 (var("x",@{typ "32 word \<times> bool"}),
                                                  cs(var("x",@{typ "32 word \<times> bool"}),
                                                     [(tp[var_w("r",32),var_b"sat2"],
                                                       mb(mw(close
                                                               (var("s",
                                                                    @{typ
                                                                    "bool \<times>
                                                                     32 word \<times> 'b state_scheme"}),
                                                                tp[mop(Fst,
                                                                       var("s",
                                                                           @{typ
                                                                           "bool \<times>
                                                                            32 word \<times> 'b state_scheme"})),
                                                                   var_w("r",32),
                                                                   mop(Snd,
                                                                       mop(Snd,
                                                                           var("s",
                                                                               @{typ
                                                                               "bool \<times>
                                                                                32 word \<times>
                                                                                'b state_scheme"})))])),
                                                          close
                                                            (var_a HOLogic.unitT,
                                                             mw(close
                                                                  (var("s",
                                                                       @{typ
                                                                       "bool \<times>
                                                                        32 word \<times> 'b state_scheme"}),
                                                                   tp[bop(Or,var_b"sat1",var_b"sat2"),
                                                                      mop(Snd,
                                                                          var("s",
                                                                              @{typ
                                                                              "bool \<times>
                                                                               32 word \<times>
                                                                               'b state_scheme"}))])))))],
                                                     @{context}))))))],@{context}))))))],
                   lx(@{typ
                      "(bool \<times> 32 word \<times> 'b state_scheme) \<Rightarrow>
                       (unit \<times> bool \<times> 32 word \<times> 'b state_scheme)"})),
               close
                 (var_a HOLogic.unitT,
                  mb(mr(close
                          (var("s",@{typ "bool \<times> 32 word \<times> 'b state_scheme"}),
                           mop(Fst,mop(Snd,var("s",@{typ "bool \<times> 32 word \<times> 'b state_scheme"}))))),
                     close
                       (var_w("v",32),
                        mb(mb(mu(tp[var_w("v",32),var_w("d",4)],
                                 @{typ "bool \<times> 32 word \<times> 'b state_scheme"}),
                              close
                                (var("v",@{typ "32 word \<times> 4 word"}),
                                 md(md(call
                                         ("write'R",
                                          @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                          var("v",@{typ "32 word \<times> 4 word"}),prev_thy ),w32),
                                    HOLogic.boolT))),
                           close
                             (var_a HOLogic.unitT,
                              mb(mr(close
                                      (var("s",@{typ "bool \<times> 32 word \<times> 'b state_scheme"}),
                                       mop(Fst,
                                           var("s",@{typ "bool \<times> 32 word \<times> 'b state_scheme"})))),
                                 close
                                   (var_b"v",
                                    mb(ite(var_b"v",
                                           mb(mr(close
                                                   (var("s",
                                                        @{typ
                                                        "bool \<times> 32 word \<times> 'b state_scheme"}),
                                                    call
                                                      ("state.CPSR",@{typ PSR},
                                                       mop(Snd,
                                                           mop(Snd,
                                                               var("s",
                                                                   @{typ
                                                                   "bool \<times>
                                                                    32 word \<times> 'b state_scheme"}))),
                                                       prev_thy ))),
                                              close
                                                (var("v",@{typ PSR}),
                                                 mb(mb(mu(tp[var("v",@{typ PSR}),lt],
                                                          @{typ
                                                          "bool \<times> 32 word \<times> 'b state_scheme"}),
                                                       close
                                                         (var("v",@{typ "PSR \<times> bool"}),
                                                          mu(rupd
                                                               ("PSR.Q",
                                                                var("v",@{typ "PSR \<times> bool"}),
                                                                prev_thy ),
                                                             @{typ
                                                             "bool \<times> 32 word \<times> 'b state_scheme"}))),
                                                    close
                                                      (var("v",@{typ PSR}),
                                                       mw(close
                                                            (var("s",
                                                                 @{typ
                                                                 "bool \<times>
                                                                  32 word \<times> 'b state_scheme"}),
                                                             tp[mop(Fst,
                                                                    var("s",
                                                                        @{typ
                                                                        "bool \<times>
                                                                         32 word \<times> 'b state_scheme"})),
                                                                let'
                                                                  (var("s",
                                                                       @{typ
                                                                       "32 word \<times> 'b state_scheme"}),
                                                                   mop(Snd,
                                                                       var("s",
                                                                           @{typ
                                                                           "bool \<times>
                                                                            32 word \<times> 'b state_scheme"})),
                                                                   tp[mop(Fst,
                                                                          var("s",
                                                                              @{typ
                                                                              "32 word \<times>
                                                                               'b state_scheme"})),
                                                                      rupd
                                                                        ("state.CPSR",
                                                                         tp[mop(Snd,
                                                                                var("s",
                                                                                    @{typ
                                                                                    "32 word \<times>
                                                                                     'b state_scheme"})),
                                                                            var("v",@{typ PSR})],
                                                                         prev_thy )])])))))),
                                           mu(lu,@{typ "bool \<times> 32 word \<times> 'b state_scheme"})),
                                       close
                                         (var_a HOLogic.unitT,
                                          md(md(call
                                                  ("IncPC",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,
                                                   prev_thy ),w32),HOLogic.boolT)))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'Multiply32",
   close
     (tp[var_b"setflags",var_w("d",4),var_w("n",4),var_w("m",4)],
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
         close
           (var_w("rn",32),
            mb(call
                 ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
               close
                 (var_w("rm",32),
                  let'
                    (var_w("result",32),bop(Mul,var_w("rn",32),var_w("rm",32)),
                     mb(call
                          ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                           tp[var_w("result",32),var_w("d",4)],prev_thy ),
                        close
                          (var_a HOLogic.unitT,
                           mb(ite(var_b"setflags",
                                  mb(mr(close
                                          (var("s",qTy),
                                           call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                                     close
                                       (var("v",@{typ PSR}),
                                        mb(mb(mb(mu(tp[var("v",@{typ PSR}),
                                                       bop(Bit,var_w("result",32),ln 31)],qTy),
                                                 close
                                                   (var("v",@{typ "PSR \<times> bool"}),
                                                    mu(rupd
                                                         ("PSR.N",
                                                          var("v",@{typ "PSR \<times> bool"}),
                                                          prev_thy ),qTy))),
                                              close
                                                (var("v",@{typ PSR}),
                                                 mw(close
                                                      (var("s",qTy),
                                                       rupd
                                                         ("state.CPSR",
                                                          tp[var("s",qTy),var("v",@{typ PSR})],
                                                          prev_thy ))))),
                                           close
                                             (var_a HOLogic.unitT,
                                              mb(mr(close
                                                      (var("s",qTy),
                                                       call
                                                         ("state.CPSR",@{typ PSR},var("s",qTy),
                                                          prev_thy ))),
                                                 close
                                                   (var("v",@{typ PSR}),
                                                    mb(mb(mb(mu(tp[var("v",@{typ PSR}),
                                                                   eq(var_w("result",32),lw(0,32))],
                                                                qTy),
                                                             close
                                                               (var("v",@{typ "PSR \<times> bool"}),
                                                                mu(rupd
                                                                     ("PSR.Z",
                                                                      var("v",
                                                                          @{typ "PSR \<times> bool"}),
                                                                      prev_thy ),qTy))),
                                                          close
                                                            (var("v",@{typ PSR}),
                                                             mw(close
                                                                  (var("s",qTy),
                                                                   rupd
                                                                     ("state.CPSR",
                                                                      tp[var("s",qTy),
                                                                         var("v",@{typ PSR})],
                                                                      prev_thy ))))),
                                                       close
                                                         (var_a HOLogic.unitT,
                                                          mb(call
                                                               ("ArchVersion",
                                                                @{typ
                                                                "'b state_scheme \<Rightarrow>
                                                                 (nat \<times> 'b state_scheme)"},lu,prev_thy ),
                                                             close
                                                               (var_n"v",
                                                                mb(mu(eq(var_n"v",ln 4),qTy),
                                                                   close
                                                                     (var_b"b",
                                                                      ite(var_b"b",
                                                                          mb(mr(close
                                                                                  (var("s",qTy),
                                                                                   call
                                                                                     ("state.CPSR",
                                                                                      @{typ PSR},
                                                                                      var("s",qTy),
                                                                                      prev_thy ))),
                                                                             close
                                                                               (var("v",@{typ PSR}),
                                                                                mb(mb(mb(mr(close
                                                                                              (var("s",
                                                                                                   qTy),
                                                                                               call
                                                                                                 ("state.CPSR",
                                                                                                  @{typ PSR},
                                                                                                  var("s",
                                                                                                      qTy),
                                                                                                  prev_thy ))),
                                                                                         close
                                                                                           (var("v0",
                                                                                                @{typ PSR}),
                                                                                            mb(mb(mb(mb(mu(call
                                                                                                             ("PSR.C",
                                                                                                              HOLogic.boolT,
                                                                                                              var("v0",
                                                                                                                  @{typ PSR}),
                                                                                                              prev_thy ),
                                                                                                           qTy),
                                                                                                        close
                                                                                                          (var_b"v",
                                                                                                           mu(tp[var_w("rm",32),
                                                                                                                 var_b"v"],
                                                                                                              qTy))),
                                                                                                     close
                                                                                                       (var("v",
                                                                                                            @{typ
                                                                                                            "32 word \<times>
                                                                                                             bool"}),
                                                                                                        mu(tp[var_w("rn",32),
                                                                                                              var("v",
                                                                                                                  @{typ
                                                                                                                  "32 word \<times>
                                                                                                                   bool"})],
                                                                                                           qTy))),
                                                                                                  close
                                                                                                    (var("v",
                                                                                                         @{typ
                                                                                                         "32 word \<times>
                                                                                                          32 word \<times>
                                                                                                          bool"}),
                                                                                                     mu(apply
                                                                                                          (lx(@{typ
                                                                                                              "(32 word \<times>
                                                                                                                32 word \<times>
                                                                                                                bool) \<Rightarrow>
                                                                                                               bool"}),
                                                                                                           var("v",
                                                                                                               @{typ
                                                                                                               "32 word \<times>
                                                                                                                32 word \<times>
                                                                                                                bool"})),
                                                                                                        qTy))),
                                                                                               close
                                                                                                 (var_b"v0",
                                                                                                  mu(tp[var("v",
                                                                                                            @{typ PSR}),
                                                                                                        var_b"v0"],
                                                                                                     qTy))))),
                                                                                      close
                                                                                        (var("v",
                                                                                             @{typ
                                                                                             "PSR \<times>
                                                                                              bool"}),
                                                                                         mu(rupd
                                                                                              ("PSR.C",
                                                                                               var("v",
                                                                                                   @{typ
                                                                                                   "PSR \<times>
                                                                                                    bool"}),
                                                                                               prev_thy ),
                                                                                            qTy))),
                                                                                   close
                                                                                     (var("v",
                                                                                          @{typ PSR}),
                                                                                      mw(close
                                                                                           (var("s",
                                                                                                qTy),
                                                                                            rupd
                                                                                              ("state.CPSR",
                                                                                               tp[var("s",
                                                                                                      qTy),
                                                                                                  var("v",
                                                                                                      @{typ PSR})],
                                                                                               prev_thy ))))))),
                                                                          mu(lu,qTy)))))))))))))),
                                  mu(lu,qTy)),
                              close
                                (var_a HOLogic.unitT,
                                 call
                                   ("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,
                                    prev_thy ))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'MultiplyAccumulate",
   close
     (tp[var_b"setflags",var_w("d",4),var_w("n",4),var_w("m",4),var_w("a",4)],
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
         close
           (var_w("rn",32),
            mb(call
                 ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
               close
                 (var_w("rm",32),
                  mb(call
                       ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("a",4),
                        @{theory ARM_Monadic}),
                     close
                       (var_w("ra",32),
                        let'
                          (var_w("result",32),
                           bop(Add,bop(Mul,var_w("rn",32),var_w("rm",32)),var_w("ra",32)),
                           mb(call
                                ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                 tp[var_w("result",32),var_w("d",4)],prev_thy ),
                              close
                                (var_a HOLogic.unitT,
                                 mb(ite(var_b"setflags",
                                        mb(mr(close
                                                (var("s",qTy),
                                                 call
                                                   ("state.CPSR",@{typ PSR},var("s",qTy),prev_thy ))),
                                           close
                                             (var("v",@{typ PSR}),
                                              mb(mb(mb(mu(tp[var("v",@{typ PSR}),
                                                             bop(Bit,var_w("result",32),ln 31)],qTy),
                                                       close
                                                         (var("v",@{typ "PSR \<times> bool"}),
                                                          mu(rupd
                                                               ("PSR.N",
                                                                var("v",@{typ "PSR \<times> bool"}),
                                                                prev_thy ),qTy))),
                                                    close
                                                      (var("v",@{typ PSR}),
                                                       mw(close
                                                            (var("s",qTy),
                                                             rupd
                                                               ("state.CPSR",
                                                                tp[var("s",qTy),var("v",@{typ PSR})],
                                                                prev_thy ))))),
                                                 close
                                                   (var_a HOLogic.unitT,
                                                    mb(mr(close
                                                            (var("s",qTy),
                                                             call
                                                               ("state.CPSR",@{typ PSR},
                                                                var("s",qTy),prev_thy ))),
                                                       close
                                                         (var("v",@{typ PSR}),
                                                          mb(mb(mb(mu(tp[var("v",@{typ PSR}),
                                                                         eq(var_w("result",32),
                                                                            lw(0,32))],qTy),
                                                                   close
                                                                     (var("v",
                                                                          @{typ "PSR \<times> bool"}),
                                                                      mu(rupd
                                                                           ("PSR.Z",
                                                                            var("v",
                                                                                @{typ
                                                                                "PSR \<times> bool"}),
                                                                            prev_thy ),qTy))),
                                                                close
                                                                  (var("v",@{typ PSR}),
                                                                   mw(close
                                                                        (var("s",qTy),
                                                                         rupd
                                                                           ("state.CPSR",
                                                                            tp[var("s",qTy),
                                                                               var("v",@{typ PSR})],
                                                                            prev_thy ))))),
                                                             close
                                                               (var_a HOLogic.unitT,
                                                                mb(call
                                                                     ("ArchVersion",
                                                                      @{typ
                                                                      "'b state_scheme \<Rightarrow>
                                                                       (nat \<times> 'b state_scheme)"},lu,
                                                                      prev_thy ),
                                                                   close
                                                                     (var_n"v",
                                                                      mb(mu(eq(var_n"v",ln 4),qTy),
                                                                         close
                                                                           (var_b"b",
                                                                            ite(var_b"b",
                                                                                mb(mr(close
                                                                                        (var("s",qTy),
                                                                                         call
                                                                                           ("state.CPSR",
                                                                                            @{typ PSR},
                                                                                            var("s",
                                                                                                qTy),
                                                                                            prev_thy ))),
                                                                                   close
                                                                                     (var("v",
                                                                                          @{typ PSR}),
                                                                                      mb(mb(mb(mr(close
                                                                                                    (var("s",
                                                                                                         qTy),
                                                                                                     call
                                                                                                       ("state.CPSR",
                                                                                                        @{typ PSR},
                                                                                                        var("s",
                                                                                                            qTy),
                                                                                                        prev_thy ))),
                                                                                               close
                                                                                                 (var("v0",
                                                                                                      @{typ PSR}),
                                                                                                  mb(mb(mb(mb(mb(mu(call
                                                                                                                      ("PSR.C",
                                                                                                                       HOLogic.boolT,
                                                                                                                       var("v0",
                                                                                                                           @{typ PSR}),
                                                                                                                       prev_thy ),
                                                                                                                    qTy),
                                                                                                                 close
                                                                                                                   (var_b"v",
                                                                                                                    mu(tp[var_w("ra",32),
                                                                                                                          var_b"v"],
                                                                                                                       qTy))),
                                                                                                              close
                                                                                                                (var("v",
                                                                                                                     @{typ
                                                                                                                     "32 word \<times>
                                                                                                                      bool"}),
                                                                                                                 mu(tp[var_w("rm",32),
                                                                                                                       var("v",
                                                                                                                           @{typ
                                                                                                                           "32 word \<times>
                                                                                                                            bool"})],
                                                                                                                    qTy))),
                                                                                                           close
                                                                                                             (var("v",
                                                                                                                  @{typ
                                                                                                                  "32 word \<times>
                                                                                                                   32 word \<times>
                                                                                                                   bool"}),
                                                                                                              mu(tp[var_w("rn",32),
                                                                                                                    var("v",
                                                                                                                        @{typ
                                                                                                                        "32 word \<times>
                                                                                                                         32 word \<times>
                                                                                                                         bool"})],
                                                                                                                 qTy))),
                                                                                                        close
                                                                                                          (var("v",
                                                                                                               @{typ
                                                                                                               "32 word \<times>
                                                                                                                32 word \<times>
                                                                                                                32 word \<times>
                                                                                                                bool"}),
                                                                                                           mu(apply
                                                                                                                (lx(@{typ
                                                                                                                    "(32 word \<times>
                                                                                                                      32 word \<times>
                                                                                                                      32 word \<times>
                                                                                                                      bool) \<Rightarrow>
                                                                                                                     bool"}),
                                                                                                                 var("v",
                                                                                                                     @{typ
                                                                                                                     "32 word \<times>
                                                                                                                      32 word \<times>
                                                                                                                      32 word \<times>
                                                                                                                      bool"})),
                                                                                                              qTy))),
                                                                                                     close
                                                                                                       (var_b"v0",
                                                                                                        mu(tp[var("v",
                                                                                                                  @{typ PSR}),
                                                                                                              var_b"v0"],
                                                                                                           qTy))))),
                                                                                            close
                                                                                              (var("v",
                                                                                                   @{typ
                                                                                                   "PSR \<times>
                                                                                                    bool"}),
                                                                                               mu(rupd
                                                                                                    ("PSR.C",
                                                                                                     var("v",
                                                                                                         @{typ
                                                                                                         "PSR \<times>
                                                                                                          bool"}),
                                                                                                     prev_thy ),
                                                                                                  qTy))),
                                                                                         close
                                                                                           (var("v",
                                                                                                @{typ PSR}),
                                                                                            mw(close
                                                                                                 (var("s",
                                                                                                      qTy),
                                                                                                  rupd
                                                                                                    ("state.CPSR",
                                                                                                     tp[var("s",
                                                                                                            qTy),
                                                                                                        var("v",
                                                                                                            @{typ PSR})],
                                                                                                     prev_thy ))))))),
                                                                                mu(lu,qTy)))))))))))))),
                                        mu(lu,qTy)),
                                    close
                                      (var_a HOLogic.unitT,
                                       call
                                         ("IncPC",
                                          @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,
                                          prev_thy ))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'MultiplyLong",
   close
     (tp[var_b"accumulate",var_b"signed",var_b"setflags",var_w("dhi",4),var_w("dlo",4),var_w("n",4),
         var_w("m",4)],
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
         close
           (var_w("rn",32),
            mb(call
                 ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
               close
                 (var_w("rm",32),
                  mb(call
                       ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("dhi",4),
                        @{theory ARM_Monadic}),
                     close
                       (var_w("rdhi",32),
                        mb(call
                             ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                              var_w("dlo",4),@{theory ARM_Monadic}),
                           close
                             (var_w("rdlo",32),
                              let'
                                (var_w("result",64),
                                 bop(Add,
                                     ite(var_b"signed",
                                         bop(Mul,mop(SE w64,var_w("rn",32)),
                                             mop(SE w64,var_w("rm",32))),
                                         bop(Mul,mop(Cast w64,var_w("rn",32)),
                                             mop(Cast w64,var_w("rm",32)))),
                                     ite(var_b"accumulate",cc[var_w("rdhi",32),var_w("rdlo",32)],
                                         lw(0,64))),
                                 mb(call
                                      ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                       tp[ex(var_w("result",64),ln 63,ln 32,w32),var_w("dhi",4)],
                                       prev_thy ),
                                    close
                                      (var_a HOLogic.unitT,
                                       mb(call
                                            ("write'R",
                                             @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                             tp[ex(var_w("result",64),ln 31,ln 0,w32),var_w("dlo",4)],
                                             prev_thy ),
                                          close
                                            (var_a HOLogic.unitT,
                                             mb(ite(var_b"setflags",
                                                    mb(mr(close
                                                            (var("s",qTy),
                                                             call
                                                               ("state.CPSR",@{typ PSR},
                                                                var("s",qTy),prev_thy ))),
                                                       close
                                                         (var("v",@{typ PSR}),
                                                          mb(mb(mb(mu(tp[var("v",@{typ PSR}),
                                                                         bop(Bit,var_w("result",64),
                                                                             ln 63)],qTy),
                                                                   close
                                                                     (var("v",
                                                                          @{typ "PSR \<times> bool"}),
                                                                      mu(rupd
                                                                           ("PSR.N",
                                                                            var("v",
                                                                                @{typ
                                                                                "PSR \<times> bool"}),
                                                                            prev_thy ),qTy))),
                                                                close
                                                                  (var("v",@{typ PSR}),
                                                                   mw(close
                                                                        (var("s",qTy),
                                                                         rupd
                                                                           ("state.CPSR",
                                                                            tp[var("s",qTy),
                                                                               var("v",@{typ PSR})],
                                                                            prev_thy ))))),
                                                             close
                                                               (var_a HOLogic.unitT,
                                                                mb(mr(close
                                                                        (var("s",qTy),
                                                                         call
                                                                           ("state.CPSR",@{typ PSR},
                                                                            var("s",qTy),prev_thy ))),
                                                                   close
                                                                     (var("v",@{typ PSR}),
                                                                      mb(mb(mb(mu(tp[var("v",
                                                                                         @{typ PSR}),
                                                                                     eq(var_w("result",64),
                                                                                        lw(0,64))],
                                                                                  qTy),
                                                                               close
                                                                                 (var("v",
                                                                                      @{typ
                                                                                      "PSR \<times>
                                                                                       bool"}),
                                                                                  mu(rupd
                                                                                       ("PSR.Z",
                                                                                        var("v",
                                                                                            @{typ
                                                                                            "PSR \<times>
                                                                                             bool"}),
                                                                                        prev_thy ),
                                                                                     qTy))),
                                                                            close
                                                                              (var("v",@{typ PSR}),
                                                                               mw(close
                                                                                    (var("s",qTy),
                                                                                     rupd
                                                                                       ("state.CPSR",
                                                                                        tp[var("s",
                                                                                               qTy),
                                                                                           var("v",
                                                                                               @{typ PSR})],
                                                                                        prev_thy ))))),
                                                                         close
                                                                           (var_a HOLogic.unitT,
                                                                            mb(call
                                                                                 ("ArchVersion",
                                                                                  @{typ
                                                                                  "'b state_scheme \<Rightarrow>
                                                                                   (nat \<times>
                                                                                    'b state_scheme)"},lu,
                                                                                  prev_thy ),
                                                                               close
                                                                                 (var_n"v",
                                                                                  mb(mu(eq(var_n"v",
                                                                                           ln 4),qTy),
                                                                                     close
                                                                                       (var_b"b",
                                                                                        ite(var_b"b",
                                                                                            mb(mr(close
                                                                                                    (var("s",
                                                                                                         qTy),
                                                                                                     call
                                                                                                       ("state.CPSR",
                                                                                                        @{typ PSR},
                                                                                                        var("s",
                                                                                                            qTy),
                                                                                                        prev_thy ))),
                                                                                               close
                                                                                                 (var("v",
                                                                                                      @{typ PSR}),
                                                                                                  mb(mb(mb(mb(mr(close
                                                                                                                   (var("s",
                                                                                                                        qTy),
                                                                                                                    call
                                                                                                                      ("state.CPSR",
                                                                                                                       @{typ PSR},
                                                                                                                       var("s",
                                                                                                                           qTy),
                                                                                                                       prev_thy ))),
                                                                                                              close
                                                                                                                (var("v0",
                                                                                                                     @{typ PSR}),
                                                                                                                 mb(mb(mb(mb(mb(mb(mu(call
                                                                                                                                        ("PSR.C",
                                                                                                                                         HOLogic.boolT,
                                                                                                                                         var("v0",
                                                                                                                                             @{typ PSR}),
                                                                                                                                         prev_thy ),
                                                                                                                                      qTy),
                                                                                                                                   close
                                                                                                                                     (var_b"v",
                                                                                                                                      mu(tp[var_w("rdlo",32),
                                                                                                                                            var_b"v"],
                                                                                                                                         qTy))),
                                                                                                                                close
                                                                                                                                  (var("v",
                                                                                                                                       @{typ
                                                                                                                                       "32 word \<times>
                                                                                                                                        bool"}),
                                                                                                                                   mu(tp[var_w("rdhi",32),
                                                                                                                                         var("v",
                                                                                                                                             @{typ
                                                                                                                                             "32 word \<times>
                                                                                                                                              bool"})],
                                                                                                                                      qTy))),
                                                                                                                             close
                                                                                                                               (var("v",
                                                                                                                                    @{typ
                                                                                                                                    "32 word \<times>
                                                                                                                                     32 word \<times>
                                                                                                                                     bool"}),
                                                                                                                                mu(tp[var_w("rm",32),
                                                                                                                                      var("v",
                                                                                                                                          @{typ
                                                                                                                                          "32 word \<times>
                                                                                                                                           32 word \<times>
                                                                                                                                           bool"})],
                                                                                                                                   qTy))),
                                                                                                                          close
                                                                                                                            (var("v",
                                                                                                                                 @{typ
                                                                                                                                 "32 word \<times>
                                                                                                                                  32 word \<times>
                                                                                                                                  32 word \<times>
                                                                                                                                  bool"}),
                                                                                                                             mu(tp[var_w("rn",32),
                                                                                                                                   var("v",
                                                                                                                                       @{typ
                                                                                                                                       "32 word \<times>
                                                                                                                                        32 word \<times>
                                                                                                                                        32 word \<times>
                                                                                                                                        bool"})],
                                                                                                                                qTy))),
                                                                                                                       close
                                                                                                                         (var("v",
                                                                                                                              @{typ
                                                                                                                              "32 word \<times>
                                                                                                                               32 word \<times>
                                                                                                                               32 word \<times>
                                                                                                                               32 word \<times>
                                                                                                                               bool"}),
                                                                                                                          mu(apply
                                                                                                                               (lx(@{typ
                                                                                                                                   "(32 word \<times>
                                                                                                                                     32 word \<times>
                                                                                                                                     32 word \<times>
                                                                                                                                     32 word \<times>
                                                                                                                                     bool) \<Rightarrow>
                                                                                                                                    bool"}),
                                                                                                                                var("v",
                                                                                                                                    @{typ
                                                                                                                                    "32 word \<times>
                                                                                                                                     32 word \<times>
                                                                                                                                     32 word \<times>
                                                                                                                                     32 word \<times>
                                                                                                                                     bool"})),
                                                                                                                             qTy))),
                                                                                                                    close
                                                                                                                      (var_b"v0",
                                                                                                                       mu(tp[var("v",
                                                                                                                                 @{typ PSR}),
                                                                                                                             var_b"v0"],
                                                                                                                          qTy))))),
                                                                                                           close
                                                                                                             (var("v",
                                                                                                                  @{typ
                                                                                                                  "PSR \<times>
                                                                                                                   bool"}),
                                                                                                              mu(rupd
                                                                                                                   ("PSR.C",
                                                                                                                    var("v",
                                                                                                                        @{typ
                                                                                                                        "PSR \<times>
                                                                                                                         bool"}),
                                                                                                                    prev_thy ),
                                                                                                                 qTy))),
                                                                                                        close
                                                                                                          (var("v",
                                                                                                               @{typ PSR}),
                                                                                                           mw(close
                                                                                                                (var("s",
                                                                                                                     qTy),
                                                                                                                 rupd
                                                                                                                   ("state.CPSR",
                                                                                                                    tp[var("s",
                                                                                                                           qTy),
                                                                                                                       var("v",
                                                                                                                           @{typ PSR})],
                                                                                                                    prev_thy ))))),
                                                                                                     close
                                                                                                       (var_a
                                                                                                          HOLogic.unitT,
                                                                                                        mb(mr(close
                                                                                                                (var("s",
                                                                                                                     qTy),
                                                                                                                 call
                                                                                                                   ("state.CPSR",
                                                                                                                    @{typ PSR},
                                                                                                                    var("s",
                                                                                                                        qTy),
                                                                                                                    prev_thy ))),
                                                                                                           close
                                                                                                             (var("v",
                                                                                                                  @{typ PSR}),
                                                                                                              mb(mb(mb(mr(close
                                                                                                                            (var("s",
                                                                                                                                 qTy),
                                                                                                                             call
                                                                                                                               ("state.CPSR",
                                                                                                                                @{typ PSR},
                                                                                                                                var("s",
                                                                                                                                    qTy),
                                                                                                                                prev_thy ))),
                                                                                                                       close
                                                                                                                         (var("v0",
                                                                                                                              @{typ PSR}),
                                                                                                                          mb(mb(mb(mb(mb(mb(mu(call
                                                                                                                                                 ("PSR.V",
                                                                                                                                                  HOLogic.boolT,
                                                                                                                                                  var("v0",
                                                                                                                                                      @{typ PSR}),
                                                                                                                                                  prev_thy ),
                                                                                                                                               qTy),
                                                                                                                                            close
                                                                                                                                              (var_b"v",
                                                                                                                                               mu(tp[var_w("rdlo",32),
                                                                                                                                                     var_b"v"],
                                                                                                                                                  qTy))),
                                                                                                                                         close
                                                                                                                                           (var("v",
                                                                                                                                                @{typ
                                                                                                                                                "32 word \<times>
                                                                                                                                                 bool"}),
                                                                                                                                            mu(tp[var_w("rdhi",32),
                                                                                                                                                  var("v",
                                                                                                                                                      @{typ
                                                                                                                                                      "32 word \<times>
                                                                                                                                                       bool"})],
                                                                                                                                               qTy))),
                                                                                                                                      close
                                                                                                                                        (var("v",
                                                                                                                                             @{typ
                                                                                                                                             "32 word \<times>
                                                                                                                                              32 word \<times>
                                                                                                                                              bool"}),
                                                                                                                                         mu(tp[var_w("rm",32),
                                                                                                                                               var("v",
                                                                                                                                                   @{typ
                                                                                                                                                   "32 word \<times>
                                                                                                                                                    32 word \<times>
                                                                                                                                                    bool"})],
                                                                                                                                            qTy))),
                                                                                                                                   close
                                                                                                                                     (var("v",
                                                                                                                                          @{typ
                                                                                                                                          "32 word \<times>
                                                                                                                                           32 word \<times>
                                                                                                                                           32 word \<times>
                                                                                                                                           bool"}),
                                                                                                                                      mu(tp[var_w("rn",32),
                                                                                                                                            var("v",
                                                                                                                                                @{typ
                                                                                                                                                "32 word \<times>
                                                                                                                                                 32 word \<times>
                                                                                                                                                 32 word \<times>
                                                                                                                                                 bool"})],
                                                                                                                                         qTy))),
                                                                                                                                close
                                                                                                                                  (var("v",
                                                                                                                                       @{typ
                                                                                                                                       "32 word \<times>
                                                                                                                                        32 word \<times>
                                                                                                                                        32 word \<times>
                                                                                                                                        32 word \<times>
                                                                                                                                        bool"}),
                                                                                                                                   mu(apply
                                                                                                                                        (lx(@{typ
                                                                                                                                            "(32 word \<times>
                                                                                                                                              32 word \<times>
                                                                                                                                              32 word \<times>
                                                                                                                                              32 word \<times>
                                                                                                                                              bool) \<Rightarrow>
                                                                                                                                             bool"}),
                                                                                                                                         var("v",
                                                                                                                                             @{typ
                                                                                                                                             "32 word \<times>
                                                                                                                                              32 word \<times>
                                                                                                                                              32 word \<times>
                                                                                                                                              32 word \<times>
                                                                                                                                              bool"})),
                                                                                                                                      qTy))),
                                                                                                                             close
                                                                                                                               (var_b"v0",
                                                                                                                                mu(tp[var("v",
                                                                                                                                          @{typ PSR}),
                                                                                                                                      var_b"v0"],
                                                                                                                                   qTy))))),
                                                                                                                    close
                                                                                                                      (var("v",
                                                                                                                           @{typ
                                                                                                                           "PSR \<times>
                                                                                                                            bool"}),
                                                                                                                       mu(rupd
                                                                                                                            ("PSR.V",
                                                                                                                             var("v",
                                                                                                                                 @{typ
                                                                                                                                 "PSR \<times>
                                                                                                                                  bool"}),
                                                                                                                             prev_thy ),
                                                                                                                          qTy))),
                                                                                                                 close
                                                                                                                   (var("v",
                                                                                                                        @{typ PSR}),
                                                                                                                    mw(close
                                                                                                                         (var("s",
                                                                                                                              qTy),
                                                                                                                          rupd
                                                                                                                            ("state.CPSR",
                                                                                                                             tp[var("s",
                                                                                                                                    qTy),
                                                                                                                                var("v",
                                                                                                                                    @{typ PSR})],
                                                                                                                             prev_thy ))))))))))),
                                                                                            mu(lu,
                                                                                               qTy)))))))))))))),
                                                    mu(lu,qTy)),
                                                close
                                                  (var_a HOLogic.unitT,
                                                   call
                                                     ("IncPC",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                      lu,prev_thy ))))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'MultiplyAccumulateAccumulate",
   close
     (tp[var_w("dhi",4),var_w("dlo",4),var_w("n",4),var_w("m",4)],
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
         close
           (var_w("v",32),
            mb(mb(mb(mb(mu(mop(Cast w64,var_w("v",32)),qTy),
                        close
                          (var_w("v",64),
                           mb(call
                                ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                 var_w("m",4),@{theory ARM_Monadic}),
                              close
                                (var_w("v0",32),
                                 mb(mu(mop(Cast w64,var_w("v0",32)),qTy),
                                    close
                                      (var_w("v0",64),mu(bop(Mul,var_w("v",64),var_w("v0",64)),qTy))))))),
                     close
                       (var_w("v",64),
                        mb(call
                             ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                              var_w("dhi",4),@{theory ARM_Monadic}),
                           close
                             (var_w("v0",32),
                              mb(mu(mop(Cast w64,var_w("v0",32)),qTy),
                                 close(var_w("v0",64),mu(bop(Add,var_w("v",64),var_w("v0",64)),qTy))))))),
                  close
                    (var_w("v",64),
                     mb(call
                          ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("dlo",4),
                           @{theory ARM_Monadic}),
                        close
                          (var_w("v0",32),
                           mb(mu(mop(Cast w64,var_w("v0",32)),qTy),
                              close(var_w("v0",64),mu(bop(Add,var_w("v",64),var_w("v0",64)),qTy))))))),
               close
                 (var_w("result",64),
                  mb(call
                       ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                        tp[ex(var_w("result",64),ln 63,ln 32,w32),var_w("dhi",4)],prev_thy ),
                     close
                       (var_a HOLogic.unitT,
                        mb(call
                             ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                              tp[ex(var_w("result",64),ln 31,ln 0,w32),var_w("dlo",4)],prev_thy ),
                           close
                             (var_a HOLogic.unitT,
                              call
                                ("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,
                                 prev_thy )))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'MultiplySubtract",
   close
     (tp[var_w("d",4),var_w("n",4),var_w("m",4),var_w("a",4)],
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("a",4),@{theory ARM_Monadic}),
         close
           (var_w("v",32),
            mb(mb(mb(mb(call
                          ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),
                           @{theory ARM_Monadic}),
                        close
                          (var_w("v0",32),
                           mb(mb(call
                                   ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                    var_w("n",4),@{theory ARM_Monadic}),
                                 close
                                   (var_w("v1",32),mu(bop(Mul,var_w("v0",32),var_w("v1",32)),qTy))),
                              close(var_w("v0",32),mu(bop(Sub,var_w("v",32),var_w("v0",32)),qTy))))),
                     close(var_w("v",32),mu(tp[var_w("v",32),var_w("d",4)],qTy))),
                  close
                    (var("v",@{typ "32 word \<times> 4 word"}),
                     call
                       ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                        var("v",@{typ "32 word \<times> 4 word"}),prev_thy ))),
               close
                 (var_a HOLogic.unitT,
                  call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'Signed16Multiply32Accumulate",
   close
     (tp[var_b"m_high",var_b"n_high",var_w("d",4),var_w("n",4),var_w("m",4),var_w("a",4)],
      mb(ite(var_b"n_high",
             mb(call
                  ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
                close(var_w("v",32),mu(ex(var_w("v",32),ln 31,ln 16,w16),qTy))),
             mb(call
                  ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
                close(var_w("v",32),mu(ex(var_w("v",32),ln 15,ln 0,w16),qTy)))),
         close
           (var_w("operand1",16),
            mb(ite(var_b"m_high",
                   mb(call
                        ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),
                         @{theory ARM_Monadic}),close(var_w("v",32),mu(ex(var_w("v",32),ln 31,ln 16,w16),qTy))),
                   mb(call
                        ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),
                         @{theory ARM_Monadic}),close(var_w("v",32),mu(ex(var_w("v",32),ln 15,ln 0,w16),qTy)))),
               close
                 (var_w("operand2",16),
                  mb(call
                       ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("a",4),
                        @{theory ARM_Monadic}),
                     close
                       (var_w("v",32),
                        mb(mb(mu(mop(Cast HOLogic.intT,var_w("v",32)),qTy),
                              close
                                (var_i"v",
                                 mu(bop(Add,
                                        bop(Mul,mop(Cast HOLogic.intT,var_w("operand1",16)),
                                            mop(Cast HOLogic.intT,var_w("operand2",16))),var_i"v"),
                                    qTy))),
                           close
                             (var_i"result",
                              let'
                                (var_w("result32",32),mop(Cast w32,var_i"result"),
                                 mb(call
                                      ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                       tp[var_w("result32",32),var_w("d",4)],prev_thy ),
                                    close
                                      (var_a HOLogic.unitT,
                                       mb(ite(mop(Not,
                                                  eq(var_i"result",
                                                     mop(Cast HOLogic.intT,var_w("result32",32)))),
                                              mb(mr(close
                                                      (var("s",qTy),
                                                       call
                                                         ("state.CPSR",@{typ PSR},var("s",qTy),
                                                          prev_thy ))),
                                                 close
                                                   (var("v",@{typ PSR}),
                                                    mb(mb(mu(tp[var("v",@{typ PSR}),lt],qTy),
                                                          close
                                                            (var("v",@{typ "PSR \<times> bool"}),
                                                             mu(rupd
                                                                  ("PSR.Q",
                                                                   var("v",
                                                                       @{typ "PSR \<times> bool"}),
                                                                   prev_thy ),qTy))),
                                                       close
                                                         (var("v",@{typ PSR}),
                                                          mw(close
                                                               (var("s",qTy),
                                                                rupd
                                                                  ("state.CPSR",
                                                                   tp[var("s",qTy),
                                                                      var("v",@{typ PSR})],prev_thy ))))))),
                                              mu(lu,qTy)),
                                          close
                                            (var_a HOLogic.unitT,
                                             call
                                               ("IncPC",
                                                @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                lu,prev_thy ))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'Signed16Multiply32Result",
   close
     (tp[var_b"m_high",var_b"n_high",var_w("d",4),var_w("n",4),var_w("m",4)],
      mb(ite(var_b"n_high",
             mb(call
                  ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
                close(var_w("v",32),mu(ex(var_w("v",32),ln 31,ln 16,w16),qTy))),
             mb(call
                  ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
                close(var_w("v",32),mu(ex(var_w("v",32),ln 15,ln 0,w16),qTy)))),
         close
           (var_w("operand1",16),
            mb(ite(var_b"m_high",
                   mb(call
                        ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),
                         @{theory ARM_Monadic}),close(var_w("v",32),mu(ex(var_w("v",32),ln 31,ln 16,w16),qTy))),
                   mb(call
                        ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),
                         @{theory ARM_Monadic}),close(var_w("v",32),mu(ex(var_w("v",32),ln 15,ln 0,w16),qTy)))),
               close
                 (var_w("operand2",16),
                  mb(call
                       ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                        tp[mop(Cast w32,
                               bop(Mul,mop(Cast HOLogic.intT,var_w("operand1",16)),
                                   mop(Cast HOLogic.intT,var_w("operand2",16)))),var_w("d",4)],
                        prev_thy ),
                     close
                       (var_a HOLogic.unitT,
                        call
                          ("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'Signed16x32Multiply32Accumulate",
   close
     (tp[var_b"m_high",var_w("d",4),var_w("n",4),var_w("m",4),var_w("a",4)],
      mb(ite(var_b"m_high",
             mb(call
                  ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
                close(var_w("v",32),mu(ex(var_w("v",32),ln 31,ln 16,w16),qTy))),
             mb(call
                  ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
                close(var_w("v",32),mu(ex(var_w("v",32),ln 15,ln 0,w16),qTy)))),
         close
           (var_w("operand2",16),
            let'
              (var_i"sh16",bop(Exp,li 2,ln 16),
               mb(call
                    ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),
                     @{theory ARM_Monadic}),
                  close
                    (var_w("v",32),
                     mb(mb(mb(mb(mu(mop(Cast HOLogic.intT,var_w("v",32)),qTy),
                                 close
                                   (var_i"v",
                                    mu(bop(Mul,var_i"v",mop(Cast HOLogic.intT,var_w("operand2",16))),
                                       qTy))),
                              close
                                (var_i"v",
                                 mb(call
                                      ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                       var_w("a",4),@{theory ARM_Monadic}),
                                    close
                                      (var_w("v0",32),
                                       mb(mb(mu(mop(Cast HOLogic.intT,var_w("v0",32)),qTy),
                                             close(var_i"v",mu(bop(Mul,var_i"v",var_i"sh16"),qTy))),
                                          close(var_i"v0",mu(bop(Add,var_i"v",var_i"v0"),qTy))))))),
                           close(var_i"v",mu(bop(Div,var_i"v",var_i"sh16"),qTy))),
                        close
                          (var_i"result",
                           let'
                             (var_w("result32",32),mop(Cast w32,var_i"result"),
                              mb(call
                                   ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                    tp[var_w("result32",32),var_w("d",4)],prev_thy ),
                                 close
                                   (var_a HOLogic.unitT,
                                    mb(ite(mop(Not,
                                               eq(var_i"result",
                                                  mop(Cast HOLogic.intT,var_w("result32",32)))),
                                           mb(mr(close
                                                   (var("s",qTy),
                                                    call
                                                      ("state.CPSR",@{typ PSR},var("s",qTy),
                                                       prev_thy ))),
                                              close
                                                (var("v",@{typ PSR}),
                                                 mb(mb(mu(tp[var("v",@{typ PSR}),lt],qTy),
                                                       close
                                                         (var("v",@{typ "PSR \<times> bool"}),
                                                          mu(rupd
                                                               ("PSR.Q",
                                                                var("v",@{typ "PSR \<times> bool"}),
                                                                prev_thy ),qTy))),
                                                    close
                                                      (var("v",@{typ PSR}),
                                                       mw(close
                                                            (var("s",qTy),
                                                             rupd
                                                               ("state.CPSR",
                                                                tp[var("s",qTy),var("v",@{typ PSR})],
                                                                prev_thy ))))))),mu(lu,qTy)),
                                       close
                                         (var_a HOLogic.unitT,
                                          call
                                            ("IncPC",
                                             @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,
                                             prev_thy )))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'Signed16x32Multiply32Result",
   close
     (tp[var_b"m_high",var_w("d",4),var_w("n",4),var_w("m",4)],
      mb(ite(var_b"m_high",
             mb(call
                  ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
                close(var_w("v",32),mu(ex(var_w("v",32),ln 31,ln 16,w16),qTy))),
             mb(call
                  ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
                close(var_w("v",32),mu(ex(var_w("v",32),ln 15,ln 0,w16),qTy)))),
         close
           (var_w("operand2",16),
            mb(call
                 ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
               close
                 (var_w("v",32),
                  mb(mb(mb(mu(mop(Cast HOLogic.intT,var_w("v",32)),qTy),
                           close
                             (var_i"v",
                              mu(bop(Mul,var_i"v",mop(Cast HOLogic.intT,var_w("operand2",16))),qTy))),
                        close(var_i"v",mu(bop(Div,var_i"v",bop(Exp,li 2,ln 16)),qTy))),
                     close
                       (var_i"result",
                        mb(call
                             ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                              tp[mop(Cast w32,var_i"result"),var_w("d",4)],prev_thy ),
                           close
                             (var_a HOLogic.unitT,
                              call
                                ("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,
                                 prev_thy )))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'Signed16Multiply64Accumulate",
   close
     (tp[var_b"m_high",var_b"n_high",var_w("dhi",4),var_w("dlo",4),var_w("n",4),var_w("m",4)],
      mb(ite(var_b"n_high",
             mb(call
                  ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
                close(var_w("v",32),mu(ex(var_w("v",32),ln 31,ln 16,w16),qTy))),
             mb(call
                  ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
                close(var_w("v",32),mu(ex(var_w("v",32),ln 15,ln 0,w16),qTy)))),
         close
           (var_w("operand1",16),
            mb(ite(var_b"m_high",
                   mb(call
                        ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),
                         @{theory ARM_Monadic}),close(var_w("v",32),mu(ex(var_w("v",32),ln 31,ln 16,w16),qTy))),
                   mb(call
                        ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),
                         @{theory ARM_Monadic}),close(var_w("v",32),mu(ex(var_w("v",32),ln 15,ln 0,w16),qTy)))),
               close
                 (var_w("operand2",16),
                  mb(call
                       ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("dhi",4),
                        @{theory ARM_Monadic}),
                     close
                       (var_w("v",32),
                        mb(mb(mb(mb(call
                                      ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                       var_w("dlo",4),@{theory ARM_Monadic}),
                                    close(var_w("v0",32),mu(cc[var_w("v",32),var_w("v0",32)],qTy))),
                                 close(var_w("v",64),mu(mop(Cast HOLogic.intT,var_w("v",64)),qTy))),
                              close
                                (var_i"v",
                                 mu(bop(Add,
                                        bop(Mul,mop(Cast HOLogic.intT,var_w("operand1",16)),
                                            mop(Cast HOLogic.intT,var_w("operand2",16))),var_i"v"),
                                    qTy))),
                           close
                             (var_i"result",
                              let'
                                (var_w("result64",64),mop(Cast w64,var_i"result"),
                                 mb(call
                                      ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                       tp[ex(var_w("result64",64),ln 63,ln 32,w32),var_w("dhi",4)],
                                       prev_thy ),
                                    close
                                      (var_a HOLogic.unitT,
                                       mb(call
                                            ("write'R",
                                             @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                             tp[ex(var_w("result64",64),ln 31,ln 0,w32),
                                                var_w("dlo",4)],prev_thy ),
                                          close
                                            (var_a HOLogic.unitT,
                                             call
                                               ("IncPC",
                                                @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                lu,prev_thy ))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'SignedMultiplyDual",
   close
     (tp[var_b"sub",var_b"m_swap",var_w("d",4),var_w("n",4),var_w("m",4),var_w("a",4)],
      mb(ite(var_b"m_swap",
             mb(call
                  ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
                close
                  (var_w("v",32),
                   mb(mu(tp[var_w("v",32),ln 16],qTy),
                      close
                        (var("v",@{typ "32 word \<times> nat"}),
                         call
                           ("ROR",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                            var("v",@{typ "32 word \<times> nat"}),@{theory}))))),
             call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic})),
         close
           (var_w("operand2",32),
            mb(call
                 ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
               close
                 (var_w("v",32),
                  mb(mb(mb(mu(ex(var_w("v",32),ln 15,ln 0,w16),qTy),
                           close(var_w("v",16),mu(mop(Cast HOLogic.intT,var_w("v",16)),qTy))),
                        close
                          (var_i"v",
                           mu(bop(Mul,var_i"v",
                                  mop(Cast HOLogic.intT,ex(var_w("operand2",32),ln 15,ln 0,w16))),
                              qTy))),
                     close
                       (var_i"product1",
                        mb(call
                             ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                              var_w("n",4),@{theory ARM_Monadic}),
                           close
                             (var_w("v",32),
                              mb(mb(mb(mu(ex(var_w("v",32),ln 31,ln 16,w16),qTy),
                                       close
                                         (var_w("v",16),mu(mop(Cast HOLogic.intT,var_w("v",16)),qTy))),
                                    close
                                      (var_i"v",
                                       mu(bop(Mul,var_i"v",
                                              mop(Cast HOLogic.intT,
                                                  ex(var_w("operand2",32),ln 31,ln 16,w16))),qTy))),
                                 close
                                   (var_i"product2",
                                    mb(ite(eq(var_w("a",4),lw(15,4)),mu(lw(0,32),qTy),
                                           call
                                             ("R",
                                              @{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                              var_w("a",4),@{theory ARM_Monadic})),
                                       close
                                         (var_w("acc",32),
                                          let'
                                            (var_i"result",
                                             ite(var_b"sub",
                                                 bop(Add,bop(Sub,var_i"product1",var_i"product2"),
                                                     mop(Cast HOLogic.intT,var_w("acc",32))),
                                                 bop(Add,bop(Add,var_i"product1",var_i"product2"),
                                                     mop(Cast HOLogic.intT,var_w("acc",32)))),
                                             let'
                                               (var_w("result32",32),mop(Cast w32,var_i"result"),
                                                mb(call
                                                     ("write'R",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                      tp[var_w("result32",32),var_w("d",4)],
                                                      prev_thy ),
                                                   close
                                                     (var_a HOLogic.unitT,
                                                      mb(ite(mop(Not,
                                                                 eq(var_i"result",
                                                                    mop(Cast HOLogic.intT,
                                                                        var_w("result32",32)))),
                                                             mb(mr(close
                                                                     (var("s",qTy),
                                                                      call
                                                                        ("state.CPSR",@{typ PSR},
                                                                         var("s",qTy),prev_thy ))),
                                                                close
                                                                  (var("v",@{typ PSR}),
                                                                   mb(mb(mu(tp[var("v",@{typ PSR}),
                                                                               lt],qTy),
                                                                         close
                                                                           (var("v",
                                                                                @{typ
                                                                                "PSR \<times> bool"}),
                                                                            mu(rupd
                                                                                 ("PSR.Q",
                                                                                  var("v",
                                                                                      @{typ
                                                                                      "PSR \<times>
                                                                                       bool"}),
                                                                                  prev_thy ),qTy))),
                                                                      close
                                                                        (var("v",@{typ PSR}),
                                                                         mw(close
                                                                              (var("s",qTy),
                                                                               rupd
                                                                                 ("state.CPSR",
                                                                                  tp[var("s",qTy),
                                                                                     var("v",
                                                                                         @{typ PSR})],
                                                                                  prev_thy ))))))),
                                                             mu(lu,qTy)),
                                                         close
                                                           (var_a HOLogic.unitT,
                                                            call
                                                              ("IncPC",
                                                               @{typ
                                                               "'b state_scheme \<Rightarrow>
                                                                (unit \<times> 'b state_scheme)"},lu,prev_thy )))))))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'SignedMultiplyLongDual",
   close
     (tp[var_b"sub",var_b"m_swap",var_w("dhi",4),var_w("dlo",4),var_w("n",4),var_w("m",4)],
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
         close
           (var_w("Rn",32),
            mb(ite(var_b"m_swap",
                   mb(call
                        ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),
                         @{theory ARM_Monadic}),
                      close
                        (var_w("v",32),
                         mb(mu(tp[var_w("v",32),ln 16],qTy),
                            close
                              (var("v",@{typ "32 word \<times> nat"}),
                               call
                                 ("ROR",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                  var("v",@{typ "32 word \<times> nat"}),@{theory}))))),
                   call
                     ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),
                      @{theory ARM_Monadic})),
               close
                 (var_w("operand2",32),
                  let'
                    (var_i"product1",
                     bop(Mul,mop(Cast HOLogic.intT,ex(var_w("Rn",32),ln 15,ln 0,w16)),
                         mop(Cast HOLogic.intT,ex(var_w("operand2",32),ln 15,ln 0,w16))),
                     let'
                       (var_i"product2",
                        bop(Mul,mop(Cast HOLogic.intT,ex(var_w("Rn",32),ln 31,ln 16,w16)),
                            mop(Cast HOLogic.intT,ex(var_w("operand2",32),ln 31,ln 16,w16))),
                        mb(call
                             ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                              var_w("dhi",4),@{theory ARM_Monadic}),
                           close
                             (var_w("v",32),
                              mb(mb(call
                                      ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                       var_w("dlo",4),@{theory ARM_Monadic}),
                                    close(var_w("v0",32),mu(cc[var_w("v",32),var_w("v0",32)],qTy))),
                                 close
                                   (var_w("acc",64),
                                    let'
                                      (var_w("result64",64),
                                       mop(Cast w64,
                                           ite(var_b"sub",
                                               bop(Add,bop(Sub,var_i"product1",var_i"product2"),
                                                   mop(Cast HOLogic.intT,var_w("acc",64))),
                                               bop(Add,bop(Add,var_i"product1",var_i"product2"),
                                                   mop(Cast HOLogic.intT,var_w("acc",64))))),
                                       mb(call
                                            ("write'R",
                                             @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                             tp[ex(var_w("result64",64),ln 63,ln 32,w32),
                                                var_w("dhi",4)],prev_thy ),
                                          close
                                            (var_a HOLogic.unitT,
                                             mb(call
                                                  ("write'R",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                   tp[ex(var_w("result64",64),ln 31,ln 0,w32),
                                                      var_w("dlo",4)],prev_thy ),
                                                close
                                                  (var_a HOLogic.unitT,
                                                   call
                                                     ("IncPC",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                      lu,prev_thy ))))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'SignedMostSignificantMultiply",
   close
     (tp[var_b"round",var_w("d",4),var_w("n",4),var_w("m",4),var_w("a",4)],
      mb(ite(eq(var_w("a",4),lw(15,4)),mu(lw(0,32),qTy),
             call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("a",4),@{theory ARM_Monadic})),
         close
           (var_w("acc",32),
            mb(call
                 ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
               close
                 (var_w("v",32),
                  mb(mb(mb(mu(mop(Cast HOLogic.intT,var_w("v",32)),qTy),
                           close
                             (var_i"v",
                              mb(call
                                   ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                    var_w("m",4),@{theory ARM_Monadic}),
                                 close
                                   (var_w("v0",32),
                                    mb(mu(mop(Cast HOLogic.intT,var_w("v0",32)),qTy),
                                       close(var_i"v0",mu(bop(Mul,var_i"v",var_i"v0"),qTy))))))),
                        close
                          (var_i"v",
                           mu(bop(Add,
                                  mop(Cast HOLogic.intT,bop(Lsl,mop(Cast w64,var_w("acc",32)),ln 32)),
                                  var_i"v"),qTy))),
                     close
                       (var_i"result",
                        mb(call
                             ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                              tp[ex(mop(Cast w64,
                                        ite(var_b"round",bop(Add,var_i"result",li 2147483648),
                                            var_i"result")),ln 63,ln 32,w32),var_w("d",4)],prev_thy ),
                           close
                             (var_a HOLogic.unitT,
                              call
                                ("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,
                                 prev_thy )))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'SignedMostSignificantMultiplySubtract",
   close
     (tp[var_b"round",var_w("d",4),var_w("n",4),var_w("m",4),var_w("a",4)],
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("a",4),@{theory ARM_Monadic}),
         close
           (var_w("v",32),
            mb(mb(mb(mb(mu(mop(Cast w64,var_w("v",32)),qTy),
                        close(var_w("v",64),mu(bop(Lsl,var_w("v",64),ln 32),qTy))),
                     close(var_w("v",64),mu(mop(Cast HOLogic.intT,var_w("v",64)),qTy))),
                  close
                    (var_i"v",
                     mb(call
                          ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),
                           @{theory ARM_Monadic}),
                        close
                          (var_w("v0",32),
                           mb(mb(mu(mop(Cast HOLogic.intT,var_w("v0",32)),qTy),
                                 close
                                   (var_i"v",
                                    mb(call
                                         ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                          var_w("m",4),@{theory ARM_Monadic}),
                                       close
                                         (var_w("v0",32),
                                          mb(mu(mop(Cast HOLogic.intT,var_w("v0",32)),qTy),
                                             close(var_i"v0",mu(bop(Mul,var_i"v",var_i"v0"),qTy))))))),
                              close(var_i"v0",mu(bop(Sub,var_i"v",var_i"v0"),qTy))))))),
               close
                 (var_i"result",
                  mb(call
                       ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                        tp[ex(mop(Cast w64,
                                  ite(var_b"round",bop(Add,var_i"result",li 2147483648),
                                      var_i"result")),ln 63,ln 32,w32),var_w("d",4)],prev_thy ),
                     close
                       (var_a HOLogic.unitT,
                        call
                          ("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("SignedParallelAddSub16",
   close
     (tp[var_w("op",2),var_w("n",4),var_w("m",4)],
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
         close
           (var_w("Rn",32),
            mb(call
                 ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
               close
                 (var_w("Rm",32),
                  mu(itb([(eq(var_w("op",2),lw(0,2)),
                           tp[bop(Add,mop(Cast HOLogic.intT,ex(var_w("Rn",32),ln 15,ln 0,w16)),
                                  mop(Cast HOLogic.intT,ex(var_w("Rm",32),ln 15,ln 0,w16))),
                              bop(Add,mop(Cast HOLogic.intT,ex(var_w("Rn",32),ln 31,ln 16,w16)),
                                  mop(Cast HOLogic.intT,ex(var_w("Rm",32),ln 31,ln 16,w16)))]),
                          (eq(var_w("op",2),lw(1,2)),
                           tp[bop(Sub,mop(Cast HOLogic.intT,ex(var_w("Rn",32),ln 15,ln 0,w16)),
                                  mop(Cast HOLogic.intT,ex(var_w("Rm",32),ln 31,ln 16,w16))),
                              bop(Add,mop(Cast HOLogic.intT,ex(var_w("Rn",32),ln 31,ln 16,w16)),
                                  mop(Cast HOLogic.intT,ex(var_w("Rm",32),ln 15,ln 0,w16)))]),
                          (eq(var_w("op",2),lw(2,2)),
                           tp[bop(Add,mop(Cast HOLogic.intT,ex(var_w("Rn",32),ln 15,ln 0,w16)),
                                  mop(Cast HOLogic.intT,ex(var_w("Rm",32),ln 31,ln 16,w16))),
                              bop(Sub,mop(Cast HOLogic.intT,ex(var_w("Rn",32),ln 31,ln 16,w16)),
                                  mop(Cast HOLogic.intT,ex(var_w("Rm",32),ln 15,ln 0,w16)))]),
                          (eq(var_w("op",2),lw(3,2)),
                           tp[bop(Sub,mop(Cast HOLogic.intT,ex(var_w("Rn",32),ln 15,ln 0,w16)),
                                  mop(Cast HOLogic.intT,ex(var_w("Rm",32),ln 15,ln 0,w16))),
                              bop(Sub,mop(Cast HOLogic.intT,ex(var_w("Rn",32),ln 31,ln 16,w16)),
                                  mop(Cast HOLogic.intT,ex(var_w("Rm",32),ln 31,ln 16,w16)))])],
                         lx(@{typ "int \<times> int"})),qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'SignedAddSub16",
   close
     (tp[var_w("op",2),var_w("d",4),var_w("n",4),var_w("m",4)],
      mb(call
           ("SignedParallelAddSub16",
            @{typ "'b state_scheme \<Rightarrow> ((int \<times> int) \<times> 'b state_scheme)"},
            tp[var_w("op",2),var_w("n",4),var_w("m",4)],@{theory}),
         close
           (var("x",@{typ "int \<times> int"}),
            cs(var("x",@{typ "int \<times> int"}),
               [(tp[var_i"res1",var_i"res2"],
                 mb(call
                      ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                       tp[cc[mop(Cast w16,var_i"res2"),mop(Cast w16,var_i"res1")],var_w("d",4)],
                       prev_thy ),
                    close
                      (var_a HOLogic.unitT,
                       mb(mr(close
                               (var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                          close
                            (var("v",@{typ PSR}),
                             mb(mb(mu(call("PSR.GE",w4,var("v",@{typ PSR}),prev_thy ),qTy),
                                   close
                                     (var_w("w",4),
                                      mb(mr(close
                                              (var("s",qTy),
                                               call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                                         close
                                           (var("v",@{typ PSR}),
                                            mb(mb(mu(tp[var("v",@{typ PSR}),
                                                        bfi(ln 1,ln 0,
                                                            ite(bop(Ge,var_i"res1",li 0),lw(3,2),
                                                                lw(0,2)),var_w("w",4))],qTy),
                                                  close
                                                    (var("v",@{typ "PSR \<times> 4 word"}),
                                                     mu(rupd
                                                          ("PSR.GE",
                                                           var("v",@{typ "PSR \<times> 4 word"}),
                                                           prev_thy ),qTy))),
                                               close
                                                 (var("v",@{typ PSR}),
                                                  mw(close
                                                       (var("s",qTy),
                                                        rupd
                                                          ("state.CPSR",
                                                           tp[var("s",qTy),var("v",@{typ PSR})],
                                                           prev_thy ))))))))),
                                close
                                  (var_a HOLogic.unitT,
                                   mb(mr(close
                                           (var("s",qTy),
                                            call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                                      close
                                        (var("v",@{typ PSR}),
                                         mb(mb(mu(call("PSR.GE",w4,var("v",@{typ PSR}),prev_thy ),
                                                  qTy),
                                               close
                                                 (var_w("w",4),
                                                  mb(mr(close
                                                          (var("s",qTy),
                                                           call
                                                             ("state.CPSR",@{typ PSR},var("s",qTy),
                                                              prev_thy ))),
                                                     close
                                                       (var("v",@{typ PSR}),
                                                        mb(mb(mu(tp[var("v",@{typ PSR}),
                                                                    bfi(ln 3,ln 2,
                                                                        ite(bop(Ge,var_i"res2",li 0),
                                                                            lw(3,2),lw(0,2)),
                                                                        var_w("w",4))],qTy),
                                                              close
                                                                (var("v",
                                                                     @{typ "PSR \<times> 4 word"}),
                                                                 mu(rupd
                                                                      ("PSR.GE",
                                                                       var("v",
                                                                           @{typ
                                                                           "PSR \<times> 4 word"}),
                                                                       prev_thy ),qTy))),
                                                           close
                                                             (var("v",@{typ PSR}),
                                                              mw(close
                                                                   (var("s",qTy),
                                                                    rupd
                                                                      ("state.CPSR",
                                                                       tp[var("s",qTy),
                                                                          var("v",@{typ PSR})],
                                                                       prev_thy ))))))))),
                                            close
                                              (var_a HOLogic.unitT,
                                               call
                                                 ("IncPC",
                                                  @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                  lu,prev_thy ))))))))))))],@{context})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'SignedSaturatingAddSub16",
   close
     (tp[var_w("op",2),var_w("d",4),var_w("n",4),var_w("m",4)],
      mb(call
           ("SignedParallelAddSub16",
            @{typ "'b state_scheme \<Rightarrow> ((int \<times> int) \<times> 'b state_scheme)"},
            tp[var_w("op",2),var_w("n",4),var_w("m",4)],@{theory}),
         close
           (var("x",@{typ "int \<times> int"}),
            cs(var("x",@{typ "int \<times> int"}),
               [(tp[var_i"res1",var_i"res2"],
                 mb(call
                      ("SignedSat",@{typ "'b state_scheme \<Rightarrow> (16 word \<times> 'b state_scheme)"},
                       tp[var_i"res2",ln 16],@{theory}),
                    close
                      (var_w("v",16),
                       mb(mb(mb(mb(call
                                     ("SignedSat",
                                      @{typ "'b state_scheme \<Rightarrow> (16 word \<times> 'b state_scheme)"},
                                      tp[var_i"res1",ln 16],@{theory}),
                                   close(var_w("v0",16),mu(cc[var_w("v",16),var_w("v0",16)],qTy))),
                                close(var_w("v",32),mu(tp[var_w("v",32),var_w("d",4)],qTy))),
                             close
                               (var("v",@{typ "32 word \<times> 4 word"}),
                                call
                                  ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                   var("v",@{typ "32 word \<times> 4 word"}),prev_thy ))),
                          close
                            (var_a HOLogic.unitT,
                             call
                               ("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,
                                prev_thy ))))))],@{context})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'SignedHalvingAddSub16",
   close
     (tp[var_w("op",2),var_w("d",4),var_w("n",4),var_w("m",4)],
      mb(call
           ("SignedParallelAddSub16",
            @{typ "'b state_scheme \<Rightarrow> ((int \<times> int) \<times> 'b state_scheme)"},
            tp[var_w("op",2),var_w("n",4),var_w("m",4)],@{theory}),
         close
           (var("x",@{typ "int \<times> int"}),
            cs(var("x",@{typ "int \<times> int"}),
               [(tp[var_i"res1",var_i"res2"],
                 mb(call
                      ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                       tp[cc[mop(Cast w16,bop(Div,var_i"res2",li 2)),
                             mop(Cast w16,bop(Div,var_i"res1",li 2))],var_w("d",4)],prev_thy ),
                    close
                      (var_a HOLogic.unitT,
                       call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy ))))],
               @{context})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("SignedParallelAddSub8",
   close
     (tp[var_b"sub",var_w("n",4),var_w("m",4)],
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
         close
           (var_w("Rn",32),
            mb(call
                 ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
               close
                 (var_w("Rm",32),
                  mu(ite(var_b"sub",
                         tp[bop(Sub,mop(Cast HOLogic.intT,ex(var_w("Rn",32),ln 7,ln 0,w8)),
                                mop(Cast HOLogic.intT,ex(var_w("Rm",32),ln 7,ln 0,w8))),
                            bop(Sub,mop(Cast HOLogic.intT,ex(var_w("Rn",32),ln 15,ln 8,w8)),
                                mop(Cast HOLogic.intT,ex(var_w("Rm",32),ln 15,ln 8,w8))),
                            bop(Sub,mop(Cast HOLogic.intT,ex(var_w("Rn",32),ln 23,ln 16,w8)),
                                mop(Cast HOLogic.intT,ex(var_w("Rm",32),ln 23,ln 16,w8))),
                            bop(Sub,mop(Cast HOLogic.intT,ex(var_w("Rn",32),ln 31,ln 24,w8)),
                                mop(Cast HOLogic.intT,ex(var_w("Rm",32),ln 31,ln 24,w8)))],
                         tp[bop(Add,mop(Cast HOLogic.intT,ex(var_w("Rn",32),ln 7,ln 0,w8)),
                                mop(Cast HOLogic.intT,ex(var_w("Rm",32),ln 7,ln 0,w8))),
                            bop(Add,mop(Cast HOLogic.intT,ex(var_w("Rn",32),ln 15,ln 8,w8)),
                                mop(Cast HOLogic.intT,ex(var_w("Rm",32),ln 15,ln 8,w8))),
                            bop(Add,mop(Cast HOLogic.intT,ex(var_w("Rn",32),ln 23,ln 16,w8)),
                                mop(Cast HOLogic.intT,ex(var_w("Rm",32),ln 23,ln 16,w8))),
                            bop(Add,mop(Cast HOLogic.intT,ex(var_w("Rn",32),ln 31,ln 24,w8)),
                                mop(Cast HOLogic.intT,ex(var_w("Rm",32),ln 31,ln 24,w8)))]),qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'SignedAddSub8",
   close
     (tp[var_b"sub",var_w("d",4),var_w("n",4),var_w("m",4)],
      mb(call
           ("SignedParallelAddSub8",
            @{typ
            "'b state_scheme \<Rightarrow> ((int \<times> int \<times> int \<times> int) \<times> 'b state_scheme)"},
            tp[var_b"sub",var_w("n",4),var_w("m",4)],@{theory}),
         close
           (var("x",@{typ "int \<times> int \<times> int \<times> int"}),
            cs(var("x",@{typ "int \<times> int \<times> int \<times> int"}),
               [(tp[var_i"res1",var_i"res2",var_i"res3",var_i"res4"],
                 mb(call
                      ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                       tp[cc[mop(Cast w8,var_i"res4"),mop(Cast w8,var_i"res3"),
                             mop(Cast w8,var_i"res2"),mop(Cast w8,var_i"res1")],var_w("d",4)],
                       prev_thy ),
                    close
                      (var_a HOLogic.unitT,
                       mb(mr(close
                               (var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                          close
                            (var("v",@{typ PSR}),
                             mb(mb(mu(call("PSR.GE",w4,var("v",@{typ PSR}),prev_thy ),qTy),
                                   close
                                     (var_w("w",4),
                                      mb(mr(close
                                              (var("s",qTy),
                                               call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                                         close
                                           (var("v",@{typ PSR}),
                                            mb(mb(mu(tp[var("v",@{typ PSR}),
                                                        bfi(ln 0,ln 0,
                                                            mop(Cast w1,bop(Ge,var_i"res1",li 0)),
                                                            var_w("w",4))],qTy),
                                                  close
                                                    (var("v",@{typ "PSR \<times> 4 word"}),
                                                     mu(rupd
                                                          ("PSR.GE",
                                                           var("v",@{typ "PSR \<times> 4 word"}),
                                                           prev_thy ),qTy))),
                                               close
                                                 (var("v",@{typ PSR}),
                                                  mw(close
                                                       (var("s",qTy),
                                                        rupd
                                                          ("state.CPSR",
                                                           tp[var("s",qTy),var("v",@{typ PSR})],
                                                           prev_thy ))))))))),
                                close
                                  (var_a HOLogic.unitT,
                                   mb(mr(close
                                           (var("s",qTy),
                                            call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                                      close
                                        (var("v",@{typ PSR}),
                                         mb(mb(mu(call("PSR.GE",w4,var("v",@{typ PSR}),prev_thy ),
                                                  qTy),
                                               close
                                                 (var_w("w",4),
                                                  mb(mr(close
                                                          (var("s",qTy),
                                                           call
                                                             ("state.CPSR",@{typ PSR},var("s",qTy),
                                                              prev_thy ))),
                                                     close
                                                       (var("v",@{typ PSR}),
                                                        mb(mb(mu(tp[var("v",@{typ PSR}),
                                                                    bfi(ln 1,ln 1,
                                                                        mop(Cast w1,
                                                                            bop(Ge,var_i"res2",li 0)),
                                                                        var_w("w",4))],qTy),
                                                              close
                                                                (var("v",
                                                                     @{typ "PSR \<times> 4 word"}),
                                                                 mu(rupd
                                                                      ("PSR.GE",
                                                                       var("v",
                                                                           @{typ
                                                                           "PSR \<times> 4 word"}),
                                                                       prev_thy ),qTy))),
                                                           close
                                                             (var("v",@{typ PSR}),
                                                              mw(close
                                                                   (var("s",qTy),
                                                                    rupd
                                                                      ("state.CPSR",
                                                                       tp[var("s",qTy),
                                                                          var("v",@{typ PSR})],
                                                                       prev_thy ))))))))),
                                            close
                                              (var_a HOLogic.unitT,
                                               mb(mr(close
                                                       (var("s",qTy),
                                                        call
                                                          ("state.CPSR",@{typ PSR},var("s",qTy),
                                                           prev_thy ))),
                                                  close
                                                    (var("v",@{typ PSR}),
                                                     mb(mb(mu(call
                                                                ("PSR.GE",w4,var("v",@{typ PSR}),
                                                                 prev_thy ),qTy),
                                                           close
                                                             (var_w("w",4),
                                                              mb(mr(close
                                                                      (var("s",qTy),
                                                                       call
                                                                         ("state.CPSR",@{typ PSR},
                                                                          var("s",qTy),prev_thy ))),
                                                                 close
                                                                   (var("v",@{typ PSR}),
                                                                    mb(mb(mu(tp[var("v",@{typ PSR}),
                                                                                bfi(ln 2,ln 2,
                                                                                    mop(Cast w1,
                                                                                        bop(Ge,
                                                                                            var_i"res3",
                                                                                            li 0)),
                                                                                    var_w("w",4))],
                                                                             qTy),
                                                                          close
                                                                            (var("v",
                                                                                 @{typ
                                                                                 "PSR \<times>
                                                                                  4 word"}),
                                                                             mu(rupd
                                                                                  ("PSR.GE",
                                                                                   var("v",
                                                                                       @{typ
                                                                                       "PSR \<times>
                                                                                        4 word"}),
                                                                                   prev_thy ),qTy))),
                                                                       close
                                                                         (var("v",@{typ PSR}),
                                                                          mw(close
                                                                               (var("s",qTy),
                                                                                rupd
                                                                                  ("state.CPSR",
                                                                                   tp[var("s",qTy),
                                                                                      var("v",
                                                                                          @{typ PSR})],
                                                                                   prev_thy ))))))))),
                                                        close
                                                          (var_a HOLogic.unitT,
                                                           mb(mr(close
                                                                   (var("s",qTy),
                                                                    call
                                                                      ("state.CPSR",@{typ PSR},
                                                                       var("s",qTy),prev_thy ))),
                                                              close
                                                                (var("v",@{typ PSR}),
                                                                 mb(mb(mu(call
                                                                            ("PSR.GE",w4,
                                                                             var("v",@{typ PSR}),
                                                                             prev_thy ),qTy),
                                                                       close
                                                                         (var_w("w",4),
                                                                          mb(mr(close
                                                                                  (var("s",qTy),
                                                                                   call
                                                                                     ("state.CPSR",
                                                                                      @{typ PSR},
                                                                                      var("s",qTy),
                                                                                      prev_thy ))),
                                                                             close
                                                                               (var("v",@{typ PSR}),
                                                                                mb(mb(mu(tp[var("v",
                                                                                                @{typ PSR}),
                                                                                            bfi(ln 3,
                                                                                                ln 3,
                                                                                                mop(Cast
                                                                                                      w1,
                                                                                                    bop(Ge,
                                                                                                        var_i"res4",
                                                                                                        li
                                                                                                         0)),
                                                                                                var_w("w",4))],
                                                                                         qTy),
                                                                                      close
                                                                                        (var("v",
                                                                                             @{typ
                                                                                             "PSR \<times>
                                                                                              4 word"}),
                                                                                         mu(rupd
                                                                                              ("PSR.GE",
                                                                                               var("v",
                                                                                                   @{typ
                                                                                                   "PSR \<times>
                                                                                                    4 word"}),
                                                                                               prev_thy ),
                                                                                            qTy))),
                                                                                   close
                                                                                     (var("v",
                                                                                          @{typ PSR}),
                                                                                      mw(close
                                                                                           (var("s",
                                                                                                qTy),
                                                                                            rupd
                                                                                              ("state.CPSR",
                                                                                               tp[var("s",
                                                                                                      qTy),
                                                                                                  var("v",
                                                                                                      @{typ PSR})],
                                                                                               prev_thy ))))))))),
                                                                    close
                                                                      (var_a HOLogic.unitT,
                                                                       call
                                                                         ("IncPC",
                                                                          @{typ
                                                                          "'b state_scheme \<Rightarrow>
                                                                           (unit \<times> 'b state_scheme)"},
                                                                          lu,prev_thy ))))))))))))))))))))],
               @{context})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'SignedSaturatingAddSub8",
   close
     (tp[var_b"sub",var_w("d",4),var_w("n",4),var_w("m",4)],
      mb(call
           ("SignedParallelAddSub8",
            @{typ
            "'b state_scheme \<Rightarrow> ((int \<times> int \<times> int \<times> int) \<times> 'b state_scheme)"},
            tp[var_b"sub",var_w("n",4),var_w("m",4)],@{theory}),
         close
           (var("x",@{typ "int \<times> int \<times> int \<times> int"}),
            cs(var("x",@{typ "int \<times> int \<times> int \<times> int"}),
               [(tp[var_i"res1",var_i"res2",var_i"res3",var_i"res4"],
                 mb(call
                      ("SignedSat",@{typ "'b state_scheme \<Rightarrow> (8 word \<times> 'b state_scheme)"},
                       tp[var_i"res4",ln 8],@{theory}),
                    close
                      (var_w("v",8),
                       mb(mb(mb(mb(call
                                     ("SignedSat",
                                      @{typ "'b state_scheme \<Rightarrow> (8 word \<times> 'b state_scheme)"},
                                      tp[var_i"res3",ln 8],@{theory}),
                                   close
                                     (var_w("v0",8),
                                      mb(mb(call
                                              ("SignedSat",
                                               @{typ "'b state_scheme \<Rightarrow> (8 word \<times> 'b state_scheme)"},
                                               tp[var_i"res2",ln 8],@{theory}),
                                            close
                                              (var_w("v1",8),
                                               mb(mb(call
                                                       ("SignedSat",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow> (8 word \<times> 'b state_scheme)"},
                                                        tp[var_i"res1",ln 8],@{theory}),
                                                     close
                                                       (var_w("v2",8),
                                                        mu(cc[var_w("v1",8),var_w("v2",8)],qTy))),
                                                  close
                                                    (var_w("v1",16),
                                                     mu(cc[var_w("v0",8),var_w("v1",16)],qTy))))),
                                         close
                                           (var_w("v0",24),mu(cc[var_w("v",8),var_w("v0",24)],qTy))))),
                                close(var_w("v",32),mu(tp[var_w("v",32),var_w("d",4)],qTy))),
                             close
                               (var("v",@{typ "32 word \<times> 4 word"}),
                                call
                                  ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                   var("v",@{typ "32 word \<times> 4 word"}),prev_thy ))),
                          close
                            (var_a HOLogic.unitT,
                             call
                               ("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,
                                prev_thy ))))))],@{context})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'SignedHalvingAddSub8",
   close
     (tp[var_b"sub",var_w("d",4),var_w("n",4),var_w("m",4)],
      mb(call
           ("SignedParallelAddSub8",
            @{typ
            "'b state_scheme \<Rightarrow> ((int \<times> int \<times> int \<times> int) \<times> 'b state_scheme)"},
            tp[var_b"sub",var_w("n",4),var_w("m",4)],@{theory}),
         close
           (var("x",@{typ "int \<times> int \<times> int \<times> int"}),
            cs(var("x",@{typ "int \<times> int \<times> int \<times> int"}),
               [(tp[var_i"res1",var_i"res2",var_i"res3",var_i"res4"],
                 mb(call
                      ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                       tp[cc[mop(Cast w8,bop(Div,var_i"res4",li 2)),
                             mop(Cast w8,bop(Div,var_i"res3",li 2)),
                             mop(Cast w8,bop(Div,var_i"res2",li 2)),
                             mop(Cast w8,bop(Div,var_i"res1",li 2))],var_w("d",4)],prev_thy ),
                    close
                      (var_a HOLogic.unitT,
                       call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy ))))],
               @{context})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("UnsignedParallelAddSub16",
   close
     (tp[var_w("op",2),var_w("n",4),var_w("m",4)],
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
         close
           (var_w("Rn",32),
            mb(call
                 ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
               close
                 (var_w("Rm",32),
                  mu(itb([(eq(var_w("op",2),lw(0,2)),
                           tp[bop(Add,
                                  call
                                    ("UInt",HOLogic.intT,ex(var_w("Rn",32),ln 15,ln 0,w16),@{theory}),
                                  call
                                    ("UInt",HOLogic.intT,ex(var_w("Rm",32),ln 15,ln 0,w16),@{theory})),
                              bop(Add,
                                  call
                                    ("UInt",HOLogic.intT,ex(var_w("Rn",32),ln 31,ln 16,w16),
                                     @{theory}),
                                  call
                                    ("UInt",HOLogic.intT,ex(var_w("Rm",32),ln 31,ln 16,w16),
                                     @{theory}))]),
                          (eq(var_w("op",2),lw(1,2)),
                           tp[bop(Sub,
                                  call
                                    ("UInt",HOLogic.intT,ex(var_w("Rn",32),ln 15,ln 0,w16),@{theory}),
                                  call
                                    ("UInt",HOLogic.intT,ex(var_w("Rm",32),ln 31,ln 16,w16),
                                     @{theory})),
                              bop(Add,
                                  call
                                    ("UInt",HOLogic.intT,ex(var_w("Rn",32),ln 31,ln 16,w16),
                                     @{theory}),
                                  call
                                    ("UInt",HOLogic.intT,ex(var_w("Rm",32),ln 15,ln 0,w16),@{theory}))]),
                          (eq(var_w("op",2),lw(2,2)),
                           tp[bop(Add,
                                  call
                                    ("UInt",HOLogic.intT,ex(var_w("Rn",32),ln 15,ln 0,w16),@{theory}),
                                  call
                                    ("UInt",HOLogic.intT,ex(var_w("Rm",32),ln 31,ln 16,w16),
                                     @{theory})),
                              bop(Sub,
                                  call
                                    ("UInt",HOLogic.intT,ex(var_w("Rn",32),ln 31,ln 16,w16),
                                     @{theory}),
                                  call
                                    ("UInt",HOLogic.intT,ex(var_w("Rm",32),ln 15,ln 0,w16),@{theory}))]),
                          (eq(var_w("op",2),lw(3,2)),
                           tp[bop(Sub,
                                  call
                                    ("UInt",HOLogic.intT,ex(var_w("Rn",32),ln 15,ln 0,w16),@{theory}),
                                  call
                                    ("UInt",HOLogic.intT,ex(var_w("Rm",32),ln 15,ln 0,w16),@{theory})),
                              bop(Sub,
                                  call
                                    ("UInt",HOLogic.intT,ex(var_w("Rn",32),ln 31,ln 16,w16),
                                     @{theory}),
                                  call
                                    ("UInt",HOLogic.intT,ex(var_w("Rm",32),ln 31,ln 16,w16),
                                     @{theory}))])],lx(@{typ "int \<times> int"})),qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'UnsignedAddSub16",
   close
     (tp[var_w("op",2),var_w("d",4),var_w("n",4),var_w("m",4)],
      mb(call
           ("UnsignedParallelAddSub16",
            @{typ "'b state_scheme \<Rightarrow> ((int \<times> int) \<times> 'b state_scheme)"},
            tp[var_w("op",2),var_w("n",4),var_w("m",4)],@{theory}),
         close
           (var("x",@{typ "int \<times> int"}),
            cs(var("x",@{typ "int \<times> int"}),
               [(tp[var_i"res1",var_i"res2"],
                 mb(call
                      ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                       tp[cc[mop(Cast w16,var_i"res2"),mop(Cast w16,var_i"res1")],var_w("d",4)],
                       prev_thy ),
                    close
                      (var_a HOLogic.unitT,
                       mb(mr(close
                               (var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                          close
                            (var("v",@{typ PSR}),
                             mb(mb(mu(call("PSR.GE",w4,var("v",@{typ PSR}),prev_thy ),qTy),
                                   close
                                     (var_w("w",4),
                                      mb(mr(close
                                              (var("s",qTy),
                                               call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                                         close
                                           (var("v",@{typ PSR}),
                                            mb(mb(mu(tp[var("v",@{typ PSR}),
                                                        bfi(ln 1,ln 0,
                                                            ite(bop(Ge,var_i"res1",
                                                                    ite(bop(In,var_w("op",2),
                                                                            sl[lw(1,2),lw(3,2)]),
                                                                        li 0,li 65536)),lw(3,2),
                                                                lw(0,2)),var_w("w",4))],qTy),
                                                  close
                                                    (var("v",@{typ "PSR \<times> 4 word"}),
                                                     mu(rupd
                                                          ("PSR.GE",
                                                           var("v",@{typ "PSR \<times> 4 word"}),
                                                           prev_thy ),qTy))),
                                               close
                                                 (var("v",@{typ PSR}),
                                                  mw(close
                                                       (var("s",qTy),
                                                        rupd
                                                          ("state.CPSR",
                                                           tp[var("s",qTy),var("v",@{typ PSR})],
                                                           prev_thy ))))))))),
                                close
                                  (var_a HOLogic.unitT,
                                   mb(mr(close
                                           (var("s",qTy),
                                            call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                                      close
                                        (var("v",@{typ PSR}),
                                         mb(mb(mu(call("PSR.GE",w4,var("v",@{typ PSR}),prev_thy ),
                                                  qTy),
                                               close
                                                 (var_w("w",4),
                                                  mb(mr(close
                                                          (var("s",qTy),
                                                           call
                                                             ("state.CPSR",@{typ PSR},var("s",qTy),
                                                              prev_thy ))),
                                                     close
                                                       (var("v",@{typ PSR}),
                                                        mb(mb(mu(tp[var("v",@{typ PSR}),
                                                                    bfi(ln 3,ln 2,
                                                                        ite(bop(Ge,var_i"res2",
                                                                                ite(bop(In,
                                                                                        var_w("op",2),
                                                                                        sl[lw(2,2),
                                                                                           lw(3,2)]),
                                                                                    li 0,li 65536)),
                                                                            lw(3,2),lw(0,2)),
                                                                        var_w("w",4))],qTy),
                                                              close
                                                                (var("v",
                                                                     @{typ "PSR \<times> 4 word"}),
                                                                 mu(rupd
                                                                      ("PSR.GE",
                                                                       var("v",
                                                                           @{typ
                                                                           "PSR \<times> 4 word"}),
                                                                       prev_thy ),qTy))),
                                                           close
                                                             (var("v",@{typ PSR}),
                                                              mw(close
                                                                   (var("s",qTy),
                                                                    rupd
                                                                      ("state.CPSR",
                                                                       tp[var("s",qTy),
                                                                          var("v",@{typ PSR})],
                                                                       prev_thy ))))))))),
                                            close
                                              (var_a HOLogic.unitT,
                                               call
                                                 ("IncPC",
                                                  @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                  lu,prev_thy ))))))))))))],@{context})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'UnsignedSaturatingAddSub16",
   close
     (tp[var_w("op",2),var_w("d",4),var_w("n",4),var_w("m",4)],
      mb(call
           ("UnsignedParallelAddSub16",
            @{typ "'b state_scheme \<Rightarrow> ((int \<times> int) \<times> 'b state_scheme)"},
            tp[var_w("op",2),var_w("n",4),var_w("m",4)],@{theory}),
         close
           (var("x",@{typ "int \<times> int"}),
            cs(var("x",@{typ "int \<times> int"}),
               [(tp[var_i"res1",var_i"res2"],
                 mb(call
                      ("UnsignedSat",@{typ "'b state_scheme \<Rightarrow> (16 word \<times> 'b state_scheme)"},
                       tp[var_i"res2",ln 16],@{theory}),
                    close
                      (var_w("v",16),
                       mb(mb(mb(mb(call
                                     ("UnsignedSat",
                                      @{typ "'b state_scheme \<Rightarrow> (16 word \<times> 'b state_scheme)"},
                                      tp[var_i"res1",ln 16],@{theory}),
                                   close(var_w("v0",16),mu(cc[var_w("v",16),var_w("v0",16)],qTy))),
                                close(var_w("v",32),mu(tp[var_w("v",32),var_w("d",4)],qTy))),
                             close
                               (var("v",@{typ "32 word \<times> 4 word"}),
                                call
                                  ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                   var("v",@{typ "32 word \<times> 4 word"}),prev_thy ))),
                          close
                            (var_a HOLogic.unitT,
                             call
                               ("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,
                                prev_thy ))))))],@{context})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'UnsignedHalvingAddSub16",
   close
     (tp[var_w("op",2),var_w("d",4),var_w("n",4),var_w("m",4)],
      mb(call
           ("UnsignedParallelAddSub16",
            @{typ "'b state_scheme \<Rightarrow> ((int \<times> int) \<times> 'b state_scheme)"},
            tp[var_w("op",2),var_w("n",4),var_w("m",4)],@{theory}),
         close
           (var("x",@{typ "int \<times> int"}),
            cs(var("x",@{typ "int \<times> int"}),
               [(tp[var_i"res1",var_i"res2"],
                 mb(call
                      ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                       tp[cc[mop(Cast w16,bop(Div,var_i"res2",li 2)),
                             mop(Cast w16,bop(Div,var_i"res1",li 2))],var_w("d",4)],prev_thy ),
                    close
                      (var_a HOLogic.unitT,
                       call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy ))))],
               @{context})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("UnsignedParallelAddSub8",
   close
     (tp[var_b"sub",var_w("n",4),var_w("m",4)],
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
         close
           (var_w("Rn",32),
            mb(call
                 ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
               close
                 (var_w("Rm",32),
                  mu(ite(var_b"sub",
                         tp[bop(Sub,
                                call("UInt",HOLogic.intT,ex(var_w("Rn",32),ln 7,ln 0,w8),@{theory}),
                                call("UInt",HOLogic.intT,ex(var_w("Rm",32),ln 7,ln 0,w8),@{theory})),
                            bop(Sub,
                                call("UInt",HOLogic.intT,ex(var_w("Rn",32),ln 15,ln 8,w8),@{theory}),
                                call("UInt",HOLogic.intT,ex(var_w("Rm",32),ln 15,ln 8,w8),@{theory})),
                            bop(Sub,
                                call
                                  ("UInt",HOLogic.intT,ex(var_w("Rn",32),ln 23,ln 16,w8),@{theory}),
                                call
                                  ("UInt",HOLogic.intT,ex(var_w("Rm",32),ln 23,ln 16,w8),@{theory})),
                            bop(Sub,
                                call
                                  ("UInt",HOLogic.intT,ex(var_w("Rn",32),ln 31,ln 24,w8),@{theory}),
                                call
                                  ("UInt",HOLogic.intT,ex(var_w("Rm",32),ln 31,ln 24,w8),@{theory}))],
                         tp[bop(Add,
                                call("UInt",HOLogic.intT,ex(var_w("Rn",32),ln 7,ln 0,w8),@{theory}),
                                call("UInt",HOLogic.intT,ex(var_w("Rm",32),ln 7,ln 0,w8),@{theory})),
                            bop(Add,
                                call("UInt",HOLogic.intT,ex(var_w("Rn",32),ln 15,ln 8,w8),@{theory}),
                                call("UInt",HOLogic.intT,ex(var_w("Rm",32),ln 15,ln 8,w8),@{theory})),
                            bop(Add,
                                call
                                  ("UInt",HOLogic.intT,ex(var_w("Rn",32),ln 23,ln 16,w8),@{theory}),
                                call
                                  ("UInt",HOLogic.intT,ex(var_w("Rm",32),ln 23,ln 16,w8),@{theory})),
                            bop(Add,
                                call
                                  ("UInt",HOLogic.intT,ex(var_w("Rn",32),ln 31,ln 24,w8),@{theory}),
                                call
                                  ("UInt",HOLogic.intT,ex(var_w("Rm",32),ln 31,ln 24,w8),@{theory}))]),
                     qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'UnsignedAddSub8",
   close
     (tp[var_b"sub",var_w("d",4),var_w("n",4),var_w("m",4)],
      mb(call
           ("UnsignedParallelAddSub8",
            @{typ
            "'b state_scheme \<Rightarrow> ((int \<times> int \<times> int \<times> int) \<times> 'b state_scheme)"},
            tp[var_b"sub",var_w("n",4),var_w("m",4)],@{theory}),
         close
           (var("x",@{typ "int \<times> int \<times> int \<times> int"}),
            cs(var("x",@{typ "int \<times> int \<times> int \<times> int"}),
               [(tp[var_i"res1",var_i"res2",var_i"res3",var_i"res4"],
                 mb(call
                      ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                       tp[cc[mop(Cast w8,var_i"res4"),mop(Cast w8,var_i"res3"),
                             mop(Cast w8,var_i"res2"),mop(Cast w8,var_i"res1")],var_w("d",4)],
                       prev_thy ),
                    close
                      (var_a HOLogic.unitT,
                       let'
                         (var_i"ge_lim",ite(var_b"sub",li 0,li 256),
                          mb(mr(close
                                  (var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                             close
                               (var("v",@{typ PSR}),
                                mb(mb(mu(call("PSR.GE",w4,var("v",@{typ PSR}),prev_thy ),qTy),
                                      close
                                        (var_w("w",4),
                                         mb(mr(close
                                                 (var("s",qTy),
                                                  call
                                                    ("state.CPSR",@{typ PSR},var("s",qTy),prev_thy ))),
                                            close
                                              (var("v",@{typ PSR}),
                                               mb(mb(mu(tp[var("v",@{typ PSR}),
                                                           bfi(ln 0,ln 0,
                                                               mop(Cast w1,
                                                                   bop(Ge,var_i"res1",var_i"ge_lim")),
                                                               var_w("w",4))],qTy),
                                                     close
                                                       (var("v",@{typ "PSR \<times> 4 word"}),
                                                        mu(rupd
                                                             ("PSR.GE",
                                                              var("v",@{typ "PSR \<times> 4 word"}),
                                                              prev_thy ),qTy))),
                                                  close
                                                    (var("v",@{typ PSR}),
                                                     mw(close
                                                          (var("s",qTy),
                                                           rupd
                                                             ("state.CPSR",
                                                              tp[var("s",qTy),var("v",@{typ PSR})],
                                                              prev_thy ))))))))),
                                   close
                                     (var_a HOLogic.unitT,
                                      mb(mr(close
                                              (var("s",qTy),
                                               call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                                         close
                                           (var("v",@{typ PSR}),
                                            mb(mb(mu(call("PSR.GE",w4,var("v",@{typ PSR}),prev_thy ),
                                                     qTy),
                                                  close
                                                    (var_w("w",4),
                                                     mb(mr(close
                                                             (var("s",qTy),
                                                              call
                                                                ("state.CPSR",@{typ PSR},
                                                                 var("s",qTy),prev_thy ))),
                                                        close
                                                          (var("v",@{typ PSR}),
                                                           mb(mb(mu(tp[var("v",@{typ PSR}),
                                                                       bfi(ln 1,ln 1,
                                                                           mop(Cast w1,
                                                                               bop(Ge,var_i"res2",
                                                                                   var_i"ge_lim")),
                                                                           var_w("w",4))],qTy),
                                                                 close
                                                                   (var("v",
                                                                        @{typ "PSR \<times> 4 word"}),
                                                                    mu(rupd
                                                                         ("PSR.GE",
                                                                          var("v",
                                                                              @{typ
                                                                              "PSR \<times> 4 word"}),
                                                                          prev_thy ),qTy))),
                                                              close
                                                                (var("v",@{typ PSR}),
                                                                 mw(close
                                                                      (var("s",qTy),
                                                                       rupd
                                                                         ("state.CPSR",
                                                                          tp[var("s",qTy),
                                                                             var("v",@{typ PSR})],
                                                                          prev_thy ))))))))),
                                               close
                                                 (var_a HOLogic.unitT,
                                                  mb(mr(close
                                                          (var("s",qTy),
                                                           call
                                                             ("state.CPSR",@{typ PSR},var("s",qTy),
                                                              prev_thy ))),
                                                     close
                                                       (var("v",@{typ PSR}),
                                                        mb(mb(mu(call
                                                                   ("PSR.GE",w4,var("v",@{typ PSR}),
                                                                    prev_thy ),qTy),
                                                              close
                                                                (var_w("w",4),
                                                                 mb(mr(close
                                                                         (var("s",qTy),
                                                                          call
                                                                            ("state.CPSR",
                                                                             @{typ PSR},
                                                                             var("s",qTy),prev_thy ))),
                                                                    close
                                                                      (var("v",@{typ PSR}),
                                                                       mb(mb(mu(tp[var("v",
                                                                                       @{typ PSR}),
                                                                                   bfi(ln 2,ln 2,
                                                                                       mop(Cast w1,
                                                                                           bop(Ge,
                                                                                               var_i"res3",
                                                                                               var_i"ge_lim")),
                                                                                       var_w("w",4))],
                                                                                qTy),
                                                                             close
                                                                               (var("v",
                                                                                    @{typ
                                                                                    "PSR \<times>
                                                                                     4 word"}),
                                                                                mu(rupd
                                                                                     ("PSR.GE",
                                                                                      var("v",
                                                                                          @{typ
                                                                                          "PSR \<times>
                                                                                           4 word"}),
                                                                                      prev_thy ),qTy))),
                                                                          close
                                                                            (var("v",@{typ PSR}),
                                                                             mw(close
                                                                                  (var("s",qTy),
                                                                                   rupd
                                                                                     ("state.CPSR",
                                                                                      tp[var("s",qTy),
                                                                                         var("v",
                                                                                             @{typ PSR})],
                                                                                      prev_thy ))))))))),
                                                           close
                                                             (var_a HOLogic.unitT,
                                                              mb(mr(close
                                                                      (var("s",qTy),
                                                                       call
                                                                         ("state.CPSR",@{typ PSR},
                                                                          var("s",qTy),prev_thy ))),
                                                                 close
                                                                   (var("v",@{typ PSR}),
                                                                    mb(mb(mu(call
                                                                               ("PSR.GE",w4,
                                                                                var("v",@{typ PSR}),
                                                                                prev_thy ),qTy),
                                                                          close
                                                                            (var_w("w",4),
                                                                             mb(mr(close
                                                                                     (var("s",qTy),
                                                                                      call
                                                                                        ("state.CPSR",
                                                                                         @{typ PSR},
                                                                                         var("s",qTy),
                                                                                         prev_thy ))),
                                                                                close
                                                                                  (var("v",
                                                                                       @{typ PSR}),
                                                                                   mb(mb(mu(tp[var("v",
                                                                                                   @{typ PSR}),
                                                                                               bfi(ln
                                                                                                    3,
                                                                                                   ln
                                                                                                    3,
                                                                                                   mop(Cast
                                                                                                         w1,
                                                                                                       bop(Ge,
                                                                                                           var_i"res4",
                                                                                                           var_i"ge_lim")),
                                                                                                   var_w("w",4))],
                                                                                            qTy),
                                                                                         close
                                                                                           (var("v",
                                                                                                @{typ
                                                                                                "PSR \<times>
                                                                                                 4 word"}),
                                                                                            mu(rupd
                                                                                                 ("PSR.GE",
                                                                                                  var("v",
                                                                                                      @{typ
                                                                                                      "PSR \<times>
                                                                                                       4 word"}),
                                                                                                  prev_thy ),
                                                                                               qTy))),
                                                                                      close
                                                                                        (var("v",
                                                                                             @{typ PSR}),
                                                                                         mw(close
                                                                                              (var("s",
                                                                                                   qTy),
                                                                                               rupd
                                                                                                 ("state.CPSR",
                                                                                                  tp[var("s",
                                                                                                         qTy),
                                                                                                     var("v",
                                                                                                         @{typ PSR})],
                                                                                                  prev_thy ))))))))),
                                                                       close
                                                                         (var_a HOLogic.unitT,
                                                                          call
                                                                            ("IncPC",
                                                                             @{typ
                                                                             "'b state_scheme \<Rightarrow>
                                                                              (unit \<times> 'b state_scheme)"},
                                                                             lu,prev_thy )))))))))))))))))))))],
               @{context})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'UnsignedSaturatingAddSub8",
   close
     (tp[var_b"sub",var_w("d",4),var_w("n",4),var_w("m",4)],
      mb(call
           ("UnsignedParallelAddSub8",
            @{typ
            "'b state_scheme \<Rightarrow> ((int \<times> int \<times> int \<times> int) \<times> 'b state_scheme)"},
            tp[var_b"sub",var_w("n",4),var_w("m",4)],@{theory}),
         close
           (var("x",@{typ "int \<times> int \<times> int \<times> int"}),
            cs(var("x",@{typ "int \<times> int \<times> int \<times> int"}),
               [(tp[var_i"res1",var_i"res2",var_i"res3",var_i"res4"],
                 mb(call
                      ("UnsignedSat",@{typ "'b state_scheme \<Rightarrow> (8 word \<times> 'b state_scheme)"},
                       tp[var_i"res4",ln 8],@{theory}),
                    close
                      (var_w("v",8),
                       mb(mb(mb(mb(call
                                     ("UnsignedSat",
                                      @{typ "'b state_scheme \<Rightarrow> (8 word \<times> 'b state_scheme)"},
                                      tp[var_i"res3",ln 8],@{theory}),
                                   close
                                     (var_w("v0",8),
                                      mb(mb(call
                                              ("UnsignedSat",
                                               @{typ "'b state_scheme \<Rightarrow> (8 word \<times> 'b state_scheme)"},
                                               tp[var_i"res2",ln 8],@{theory}),
                                            close
                                              (var_w("v1",8),
                                               mb(mb(call
                                                       ("UnsignedSat",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow> (8 word \<times> 'b state_scheme)"},
                                                        tp[var_i"res1",ln 8],@{theory}),
                                                     close
                                                       (var_w("v2",8),
                                                        mu(cc[var_w("v1",8),var_w("v2",8)],qTy))),
                                                  close
                                                    (var_w("v1",16),
                                                     mu(cc[var_w("v0",8),var_w("v1",16)],qTy))))),
                                         close
                                           (var_w("v0",24),mu(cc[var_w("v",8),var_w("v0",24)],qTy))))),
                                close(var_w("v",32),mu(tp[var_w("v",32),var_w("d",4)],qTy))),
                             close
                               (var("v",@{typ "32 word \<times> 4 word"}),
                                call
                                  ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                   var("v",@{typ "32 word \<times> 4 word"}),prev_thy ))),
                          close
                            (var_a HOLogic.unitT,
                             call
                               ("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,
                                prev_thy ))))))],@{context})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'UnsignedHalvingAddSub8",
   close
     (tp[var_b"sub",var_w("d",4),var_w("n",4),var_w("m",4)],
      mb(call
           ("UnsignedParallelAddSub8",
            @{typ
            "'b state_scheme \<Rightarrow> ((int \<times> int \<times> int \<times> int) \<times> 'b state_scheme)"},
            tp[var_b"sub",var_w("n",4),var_w("m",4)],@{theory}),
         close
           (var("x",@{typ "int \<times> int \<times> int \<times> int"}),
            cs(var("x",@{typ "int \<times> int \<times> int \<times> int"}),
               [(tp[var_i"res1",var_i"res2",var_i"res3",var_i"res4"],
                 mb(call
                      ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                       tp[cc[mop(Cast w8,bop(Div,var_i"res4",li 2)),
                             mop(Cast w8,bop(Div,var_i"res3",li 2)),
                             mop(Cast w8,bop(Div,var_i"res2",li 2)),
                             mop(Cast w8,bop(Div,var_i"res1",li 2))],var_w("d",4)],prev_thy ),
                    close
                      (var_a HOLogic.unitT,
                       call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy ))))],
               @{context})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'UnsignedSumAbsoluteDifferences",
   close
     (tp[var_w("d",4),var_w("n",4),var_w("m",4),var_w("a",4)],
      mb(ite(eq(var_w("a",4),lw(15,4)),mu(lw(0,32),qTy),
             call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("a",4),@{theory ARM_Monadic})),
         close
           (var_w("acc",32),
            mb(call
                 ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
               close
                 (var_w("Rn",32),
                  mb(call
                       ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),
                        @{theory ARM_Monadic}),
                     close
                       (var_w("Rm",32),
                        mb(call
                             ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                              tp[mop(Cast w32,
                                     bop(Add,
                                         bop(Add,
                                             bop(Add,
                                                 bop(Add,
                                                     call
                                                       ("UInt",HOLogic.intT,var_w("acc",32),
                                                        @{theory}),
                                                     mop(Abs,
                                                         bop(Sub,
                                                             call
                                                               ("UInt",HOLogic.intT,
                                                                ex(var_w("Rn",32),ln 7,ln 0,w8),
                                                                @{theory}),
                                                             call
                                                               ("UInt",HOLogic.intT,
                                                                ex(var_w("Rm",32),ln 7,ln 0,w8),
                                                                @{theory})))),
                                                 mop(Abs,
                                                     bop(Sub,
                                                         call
                                                           ("UInt",HOLogic.intT,
                                                            ex(var_w("Rn",32),ln 15,ln 8,w8),
                                                            @{theory}),
                                                         call
                                                           ("UInt",HOLogic.intT,
                                                            ex(var_w("Rm",32),ln 15,ln 8,w8),
                                                            @{theory})))),
                                             mop(Abs,
                                                 bop(Sub,
                                                     call
                                                       ("UInt",HOLogic.intT,
                                                        ex(var_w("Rn",32),ln 23,ln 16,w8),@{theory}),
                                                     call
                                                       ("UInt",HOLogic.intT,
                                                        ex(var_w("Rm",32),ln 23,ln 16,w8),@{theory})))),
                                         mop(Abs,
                                             bop(Sub,
                                                 call
                                                   ("UInt",HOLogic.intT,
                                                    ex(var_w("Rn",32),ln 31,ln 24,w8),@{theory}),
                                                 call
                                                   ("UInt",HOLogic.intT,
                                                    ex(var_w("Rm",32),ln 31,ln 24,w8),@{theory}))))),
                                 var_w("d",4)],prev_thy ),
                           close
                             (var_a HOLogic.unitT,
                              call
                                ("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,
                                 prev_thy )))))))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("GenerateIntegerZeroDivide",
   close
     (var_a HOLogic.unitT,
      call
        ("TakeUndefInstrException",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,@{theory})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'Divide",
   close
     (tp[var_b"unsigned",var_w("d",4),var_w("n",4),var_w("m",4)],
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
         close
           (var_w("v",32),
            mb(mu(eq(var_w("v",32),lw(0,32)),qTy),
               close
                 (var_b"b",
                  ite(var_b"b",
                      mb(call
                           ("IntegerZeroDivideTrappingEnabled",
                            @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,prev_thy ),
                         close
                           (var_b"b",
                            ite(var_b"b",
                                call
                                  ("GenerateIntegerZeroDivide",
                                   @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,@{theory}),
                                mb(call
                                     ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                      tp[lw(0,32),var_w("d",4)],prev_thy ),
                                   close
                                     (var_a HOLogic.unitT,
                                      call
                                        ("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                         lu,prev_thy )))))),
                      mb(ite(var_b"unsigned",
                             mb(call
                                  ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                   var_w("n",4),@{theory ARM_Monadic}),
                                close
                                  (var_w("v",32),
                                   mb(call
                                        ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                         var_w("m",4),@{theory ARM_Monadic}),
                                      close
                                        (var_w("v0",32),
                                         mu(bop(Div,var_w("v",32),var_w("v0",32)),qTy))))),
                             mb(call
                                  ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                   var_w("n",4),@{theory ARM_Monadic}),
                                close
                                  (var_w("v",32),
                                   mb(call
                                        ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                         var_w("m",4),@{theory ARM_Monadic}),
                                      close
                                        (var_w("v0",32),
                                         mu(bop(Quot,var_w("v",32),var_w("v0",32)),qTy)))))),
                         close
                           (var_w("v",32),
                            mb(mb(mu(tp[var_w("v",32),var_w("d",4)],qTy),
                                  close
                                    (var("v",@{typ "32 word \<times> 4 word"}),
                                     call
                                       ("write'R",
                                        @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                        var("v",@{typ "32 word \<times> 4 word"}),prev_thy ))),
                               close
                                 (var_a HOLogic.unitT,
                                  call
                                    ("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,
                                     prev_thy ))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'PackHalfword",
   close
     (tp[var("shift_t",@{typ SRType}),var_n"shift_n",var_b"tbform",var_w("d",4),var_w("n",4),
         var_w("m",4)],
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
         close
           (var_w("v",32),
            mb(mb(mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                     close
                       (var("v0",@{typ PSR}),
                        mb(mb(mb(mu(call("PSR.C",HOLogic.boolT,var("v0",@{typ PSR}),prev_thy ),qTy),
                                 close(var_b"v",mu(tp[var_n"shift_n",var_b"v"],qTy))),
                              close
                                (var("v",@{typ "nat \<times> bool"}),
                                 mu(tp[var("shift_t",@{typ SRType}),
                                       var("v",@{typ "nat \<times> bool"})],qTy))),
                           close
                             (var("v0",@{typ "SRType \<times> nat \<times> bool"}),
                              mu(tp[var_w("v",32),
                                    var("v0",@{typ "SRType \<times> nat \<times> bool"})],qTy))))),
                  close
                    (var("v",@{typ "32 word \<times> SRType \<times> nat \<times> bool"}),
                     call
                       ("Shift",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                        var("v",@{typ "32 word \<times> SRType \<times> nat \<times> bool"}),
                        @{theory}))),
               close
                 (var_w("operand2",32),
                  mb(ite(var_b"tbform",mu(ex(var_w("operand2",32),ln 15,ln 0,w16),qTy),
                         mb(call
                              ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                               var_w("n",4),@{theory ARM_Monadic}),
                            close(var_w("v",32),mu(ex(var_w("v",32),ln 15,ln 0,w16),qTy)))),
                     close
                       (var_w("bot",16),
                        mb(ite(var_b"tbform",
                               mb(call
                                    ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                     var_w("n",4),@{theory ARM_Monadic}),
                                  close(var_w("v",32),mu(ex(var_w("v",32),ln 31,ln 16,w16),qTy))),
                               mu(ex(var_w("operand2",32),ln 31,ln 16,w16),qTy)),
                           close
                             (var_w("top",16),
                              mb(call
                                   ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                    tp[cc[var_w("top",16),var_w("bot",16)],var_w("d",4)],prev_thy ),
                                 close
                                   (var_a HOLogic.unitT,
                                    call
                                      ("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                       lu,prev_thy )))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'Saturate",
   close
     (tp[var("shift_t",@{typ SRType}),var_n"shift_n",var_n"saturate_to",var_b"unsigned",
         var_w("d",4),var_w("n",4)],
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
         close
           (var_w("v",32),
            mb(mb(mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                     close
                       (var("v0",@{typ PSR}),
                        mb(mb(mb(mu(call("PSR.C",HOLogic.boolT,var("v0",@{typ PSR}),prev_thy ),qTy),
                                 close(var_b"v",mu(tp[var_n"shift_n",var_b"v"],qTy))),
                              close
                                (var("v",@{typ "nat \<times> bool"}),
                                 mu(tp[var("shift_t",@{typ SRType}),
                                       var("v",@{typ "nat \<times> bool"})],qTy))),
                           close
                             (var("v0",@{typ "SRType \<times> nat \<times> bool"}),
                              mu(tp[var_w("v",32),
                                    var("v0",@{typ "SRType \<times> nat \<times> bool"})],qTy))))),
                  close
                    (var("v",@{typ "32 word \<times> SRType \<times> nat \<times> bool"}),
                     call
                       ("Shift",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                        var("v",@{typ "32 word \<times> SRType \<times> nat \<times> bool"}),
                        @{theory}))),
               close
                 (var_w("operand",32),
                  mb(ite(var_b"unsigned",
                         call
                           ("UnsignedSatQ",
                            @{typ "'b state_scheme \<Rightarrow> ((32 word \<times> bool) \<times> 'b state_scheme)"},
                            tp[mop(Cast HOLogic.intT,var_w("operand",32)),var_n"saturate_to"],
                            @{theory}),
                         call
                           ("SignedSatQ",
                            @{typ "'b state_scheme \<Rightarrow> ((32 word \<times> bool) \<times> 'b state_scheme)"},
                            tp[mop(Cast HOLogic.intT,var_w("operand",32)),var_n"saturate_to"],
                            @{theory})),
                     close
                       (var("x",@{typ "32 word \<times> bool"}),
                        cs(var("x",@{typ "32 word \<times> bool"}),
                           [(tp[var_w("result",32),var_b"sat"],
                             mb(call
                                  ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                   tp[ite(var_b"unsigned",var_w("result",32),
                                          call
                                            ("SignExtendFrom",w32,
                                             tp[var_w("result",32),var_n"saturate_to"],@{theory})),
                                      var_w("d",4)],prev_thy ),
                                close
                                  (var_a HOLogic.unitT,
                                   mb(ite(var_b"sat",
                                          mb(mr(close
                                                  (var("s",qTy),
                                                   call
                                                     ("state.CPSR",@{typ PSR},var("s",qTy),prev_thy ))),
                                             close
                                               (var("v",@{typ PSR}),
                                                mb(mb(mu(tp[var("v",@{typ PSR}),lt],qTy),
                                                      close
                                                        (var("v",@{typ "PSR \<times> bool"}),
                                                         mu(rupd
                                                              ("PSR.Q",
                                                               var("v",@{typ "PSR \<times> bool"}),
                                                               prev_thy ),qTy))),
                                                   close
                                                     (var("v",@{typ PSR}),
                                                      mw(close
                                                           (var("s",qTy),
                                                            rupd
                                                              ("state.CPSR",
                                                               tp[var("s",qTy),var("v",@{typ PSR})],
                                                               prev_thy ))))))),mu(lu,qTy)),
                                      close
                                        (var_a HOLogic.unitT,
                                         call
                                           ("IncPC",
                                            @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,
                                            prev_thy ))))))],@{context})))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'Saturate16",
   close
     (tp[var_n"saturate_to",var_b"unsigned",var_w("d",4),var_w("n",4)],
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
         close
           (var_w("Rn",32),
            mb(ite(var_b"unsigned",
                   mb(call
                        ("UnsignedSatQ",
                         @{typ "'b state_scheme \<Rightarrow> ((16 word \<times> bool) \<times> 'b state_scheme)"},
                         tp[mop(Cast HOLogic.intT,ex(var_w("Rn",32),ln 15,ln 0,w16)),
                            var_n"saturate_to"],@{theory}),
                      close
                        (var("v",@{typ "16 word \<times> bool"}),
                         mb(call
                              ("UnsignedSatQ",
                               @{typ "'b state_scheme \<Rightarrow> ((16 word \<times> bool) \<times> 'b state_scheme)"},
                               tp[mop(Cast HOLogic.intT,ex(var_w("Rn",32),ln 31,ln 16,w16)),
                                  var_n"saturate_to"],@{theory}),
                            close
                              (var("v0",@{typ "16 word \<times> bool"}),
                               mu(tp[var("v",@{typ "16 word \<times> bool"}),
                                     var("v0",@{typ "16 word \<times> bool"})],qTy))))),
                   mb(call
                        ("SignedSatQ",
                         @{typ "'b state_scheme \<Rightarrow> ((16 word \<times> bool) \<times> 'b state_scheme)"},
                         tp[mop(Cast HOLogic.intT,ex(var_w("Rn",32),ln 15,ln 0,w16)),
                            var_n"saturate_to"],@{theory}),
                      close
                        (var("v",@{typ "16 word \<times> bool"}),
                         mb(call
                              ("SignedSatQ",
                               @{typ "'b state_scheme \<Rightarrow> ((16 word \<times> bool) \<times> 'b state_scheme)"},
                               tp[mop(Cast HOLogic.intT,ex(var_w("Rn",32),ln 31,ln 16,w16)),
                                  var_n"saturate_to"],@{theory}),
                            close
                              (var("v0",@{typ "16 word \<times> bool"}),
                               mu(tp[var("v",@{typ "16 word \<times> bool"}),
                                     var("v0",@{typ "16 word \<times> bool"})],qTy)))))),
               close
                 (var("x",@{typ "(16 word \<times> bool) \<times> 16 word \<times> bool"}),
                  cs(var("x",@{typ "(16 word \<times> bool) \<times> 16 word \<times> bool"}),
                     [(tp[tp[var_w("result1",16),var_b"sat1"],var_w("result2",16),var_b"sat2"],
                       mb(call
                            ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                             tp[ite(var_b"unsigned",cc[var_w("result2",16),var_w("result1",16)],
                                    cc[call
                                         ("SignExtendFrom",w16,
                                          tp[var_w("result2",16),var_n"saturate_to"],@{theory}),
                                       call
                                         ("SignExtendFrom",w16,
                                          tp[var_w("result1",16),var_n"saturate_to"],@{theory})]),
                                var_w("d",4)],prev_thy ),
                          close
                            (var_a HOLogic.unitT,
                             mb(ite(bop(Or,var_b"sat1",var_b"sat2"),
                                    mb(mr(close
                                            (var("s",qTy),
                                             call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                                       close
                                         (var("v",@{typ PSR}),
                                          mb(mb(mu(tp[var("v",@{typ PSR}),lt],qTy),
                                                close
                                                  (var("v",@{typ "PSR \<times> bool"}),
                                                   mu(rupd
                                                        ("PSR.Q",
                                                         var("v",@{typ "PSR \<times> bool"}),
                                                         prev_thy ),qTy))),
                                             close
                                               (var("v",@{typ PSR}),
                                                mw(close
                                                     (var("s",qTy),
                                                      rupd
                                                        ("state.CPSR",
                                                         tp[var("s",qTy),var("v",@{typ PSR})],
                                                         prev_thy ))))))),mu(lu,qTy)),
                                close
                                  (var_a HOLogic.unitT,
                                   call
                                     ("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,
                                      prev_thy ))))))],@{context})))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'ExtendByte",
   close
     (tp[var_b"unsigned",var_w("d",4),var_w("n",4),var_w("m",4),var_n"rotation"],
      mb(ite(eq(var_w("n",4),lw(15,4)),mu(lw(0,32),qTy),
             call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic})),
         close
           (var_w("acc",32),
            mb(call
                 ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
               close
                 (var_w("v",32),
                  mb(mb(mu(tp[var_w("v",32),var_n"rotation"],qTy),
                        close
                          (var("v",@{typ "32 word \<times> nat"}),
                           call
                             ("ROR",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                              var("v",@{typ "32 word \<times> nat"}),@{theory}))),
                     close
                       (var_w("rotated",32),
                        mb(call
                             ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                              tp[bop(Add,var_w("acc",32),
                                     call
                                       ("Extend",w32,
                                        tp[var_b"unsigned",ex(var_w("rotated",32),ln 7,ln 0,w8)],
                                        @{theory})),var_w("d",4)],prev_thy ),
                           close
                             (var_a HOLogic.unitT,
                              call
                                ("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,
                                 prev_thy )))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'ExtendByte16",
   close
     (tp[var_b"unsigned",var_w("d",4),var_w("n",4),var_w("m",4),var_n"rotation"],
      mb(ite(eq(var_w("n",4),lw(15,4)),mu(lw(0,32),qTy),
             call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic})),
         close
           (var_w("acc",32),
            mb(call
                 ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
               close
                 (var_w("v",32),
                  mb(mb(mu(tp[var_w("v",32),var_n"rotation"],qTy),
                        close
                          (var("v",@{typ "32 word \<times> nat"}),
                           call
                             ("ROR",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                              var("v",@{typ "32 word \<times> nat"}),@{theory}))),
                     close
                       (var_w("rotated",32),
                        mb(call
                             ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                              tp[cc[bop(Add,ex(var_w("acc",32),ln 31,ln 16,w16),
                                        call
                                          ("Extend",w16,
                                           tp[var_b"unsigned",ex(var_w("rotated",32),ln 23,ln 16,w8)],
                                           @{theory})),
                                    bop(Add,ex(var_w("acc",32),ln 15,ln 0,w16),
                                        call
                                          ("Extend",w16,
                                           tp[var_b"unsigned",ex(var_w("rotated",32),ln 7,ln 0,w8)],
                                           @{theory}))],var_w("d",4)],prev_thy ),
                           close
                             (var_a HOLogic.unitT,
                              call
                                ("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,
                                 prev_thy )))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'ExtendHalfword",
   close
     (tp[var_b"unsigned",var_w("d",4),var_w("n",4),var_w("m",4),var_n"rotation"],
      mb(ite(eq(var_w("n",4),lw(15,4)),mu(lw(0,32),qTy),
             call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic})),
         close
           (var_w("acc",32),
            mb(call
                 ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
               close
                 (var_w("v",32),
                  mb(mb(mu(tp[var_w("v",32),var_n"rotation"],qTy),
                        close
                          (var("v",@{typ "32 word \<times> nat"}),
                           call
                             ("ROR",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                              var("v",@{typ "32 word \<times> nat"}),@{theory}))),
                     close
                       (var_w("rotated",32),
                        mb(call
                             ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                              tp[bop(Add,var_w("acc",32),
                                     call
                                       ("Extend",w32,
                                        tp[var_b"unsigned",ex(var_w("rotated",32),ln 15,ln 0,w16)],
                                        @{theory})),var_w("d",4)],prev_thy ),
                           close
                             (var_a HOLogic.unitT,
                              call
                                ("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,
                                 prev_thy )))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'SelectBytes",
   close
     (tp[var_w("d",4),var_w("n",4),var_w("m",4)],
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
         close
           (var_w("Rn",32),
            mb(call
                 ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
               close
                 (var_w("Rm",32),
                  mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                     close
                       (var("v",@{typ PSR}),
                        mb(mb(mb(mu(call("PSR.GE",w4,var("v",@{typ PSR}),prev_thy ),qTy),
                                 close(var_w("v",4),mu(bop(Bit,var_w("v",4),ln 0),qTy))),
                              close
                                (var_b"b",
                                 mu(ite(var_b"b",ex(var_w("Rn",32),ln 7,ln 0,w8),
                                        ex(var_w("Rm",32),ln 7,ln 0,w8)),qTy))),
                           close
                             (var_w("r1",8),
                              mb(mr(close
                                      (var("s",qTy),
                                       call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                                 close
                                   (var("v",@{typ PSR}),
                                    mb(mb(mb(mu(call("PSR.GE",w4,var("v",@{typ PSR}),prev_thy ),qTy),
                                             close(var_w("v",4),mu(bop(Bit,var_w("v",4),ln 1),qTy))),
                                          close
                                            (var_b"b",
                                             mu(ite(var_b"b",ex(var_w("Rn",32),ln 15,ln 8,w8),
                                                    ex(var_w("Rm",32),ln 15,ln 8,w8)),qTy))),
                                       close
                                         (var_w("r2",8),
                                          mb(mr(close
                                                  (var("s",qTy),
                                                   call
                                                     ("state.CPSR",@{typ PSR},var("s",qTy),prev_thy ))),
                                             close
                                               (var("v",@{typ PSR}),
                                                mb(mb(mb(mu(call
                                                              ("PSR.GE",w4,var("v",@{typ PSR}),
                                                               prev_thy ),qTy),
                                                         close
                                                           (var_w("v",4),
                                                            mu(bop(Bit,var_w("v",4),ln 2),qTy))),
                                                      close
                                                        (var_b"b",
                                                         mu(ite(var_b"b",
                                                                ex(var_w("Rn",32),ln 23,ln 16,w8),
                                                                ex(var_w("Rm",32),ln 23,ln 16,w8)),
                                                            qTy))),
                                                   close
                                                     (var_w("r3",8),
                                                      mb(mr(close
                                                              (var("s",qTy),
                                                               call
                                                                 ("state.CPSR",@{typ PSR},
                                                                  var("s",qTy),prev_thy ))),
                                                         close
                                                           (var("v",@{typ PSR}),
                                                            mb(mb(mb(mu(call
                                                                          ("PSR.GE",w4,
                                                                           var("v",@{typ PSR}),
                                                                           prev_thy ),qTy),
                                                                     close
                                                                       (var_w("v",4),
                                                                        mu(bop(Bit,var_w("v",4),ln 3),
                                                                           qTy))),
                                                                  close
                                                                    (var_b"b",
                                                                     mu(ite(var_b"b",
                                                                            ex(var_w("Rn",32),ln 31,
                                                                               ln 24,w8),
                                                                            ex(var_w("Rm",32),ln 31,
                                                                               ln 24,w8)),qTy))),
                                                               close
                                                                 (var_w("r4",8),
                                                                  mb(call
                                                                       ("write'R",
                                                                        @{typ
                                                                        "'b state_scheme \<Rightarrow>
                                                                         (unit \<times> 'b state_scheme)"},
                                                                        tp[cc[var_w("r4",8),
                                                                              var_w("r3",8),
                                                                              var_w("r2",8),
                                                                              var_w("r1",8)],
                                                                           var_w("d",4)],prev_thy ),
                                                                     close
                                                                       (var_a HOLogic.unitT,
                                                                        call
                                                                          ("IncPC",
                                                                           @{typ
                                                                           "'b state_scheme \<Rightarrow>
                                                                            (unit \<times> 'b state_scheme)"},
                                                                           lu,prev_thy )))))))))))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'ByteReverse",
   close
     (tp[var_w("d",4),var_w("m",4)],
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
         close
           (var_w("Rm",32),
            mb(call
                 ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                  tp[cc[ex(var_w("Rm",32),ln 7,ln 0,w8),ex(var_w("Rm",32),ln 15,ln 8,w8),
                        ex(var_w("Rm",32),ln 23,ln 16,w8),ex(var_w("Rm",32),ln 31,ln 24,w8)],
                     var_w("d",4)],prev_thy ),
               close
                 (var_a HOLogic.unitT,
                  call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'ByteReversePackedHalfword",
   close
     (tp[var_w("d",4),var_w("m",4)],
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
         close
           (var_w("Rm",32),
            mb(call
                 ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                  tp[cc[ex(var_w("Rm",32),ln 23,ln 16,w8),ex(var_w("Rm",32),ln 31,ln 24,w8),
                        ex(var_w("Rm",32),ln 7,ln 0,w8),ex(var_w("Rm",32),ln 15,ln 8,w8)],
                     var_w("d",4)],prev_thy ),
               close
                 (var_a HOLogic.unitT,
                  call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'ByteReverseSignedHalfword",
   close
     (tp[var_w("d",4),var_w("m",4)],
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
         close
           (var_w("Rm",32),
            mb(call
                 ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                  tp[cc[mop(SE (Word_Lib.mk_wordT 24),ex(var_w("Rm",32),ln 7,ln 0,w8)),
                        ex(var_w("Rm",32),ln 15,ln 8,w8)],var_w("d",4)],prev_thy ),
               close
                 (var_a HOLogic.unitT,
                  call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'ReverseBits",
   close
     (tp[var_w("d",4),var_w("m",4)],
      mb(call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("m",4),@{theory ARM_Monadic}),
         close
           (var_w("v",32),
            mb(mb(mb(mu(mop(Rev,var_w("v",32)),qTy),
                     close(var_w("v",32),mu(tp[var_w("v",32),var_w("d",4)],qTy))),
                  close
                    (var("v",@{typ "32 word \<times> 4 word"}),
                     call
                       ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                        var("v",@{typ "32 word \<times> 4 word"}),prev_thy ))),
               close
                 (var_a HOLogic.unitT,
                  call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'BitFieldExtract",
   close
     (tp[var_b"unsigned",var_w("d",4),var_w("n",4),var_n"lsbit",var_n"widthminus1"],
      let'
        (var_n"msbit",bop(Add,var_n"lsbit",var_n"widthminus1"),
         mb(ite(var_b"unsigned",
                mb(call
                     ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),
                      @{theory ARM_Monadic}),
                   close(var_w("v",32),mu(ex(var_w("v",32),var_n"msbit",var_n"lsbit",w32),qTy))),
                mb(call
                     ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),
                      @{theory ARM_Monadic}),
                   close
                     (var_w("v",32),
                      mb(mb(mu(ex(var_w("v",32),var_n"msbit",var_n"lsbit",w32),qTy),
                            close(var_w("v",32),mu(tp[var_w("v",32),var_n"widthminus1"],qTy))),
                         close
                           (var("v",@{typ "32 word \<times> nat"}),
                            mu(call
                                 ("SignExtendFrom",w32,var("v",@{typ "32 word \<times> nat"}),
                                  @{theory}),qTy)))))),
            close
              (var_w("v",32),
               mb(mb(mu(tp[var_w("v",32),var_w("d",4)],qTy),
                     close
                       (var("v",@{typ "32 word \<times> 4 word"}),
                        call
                          ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                           var("v",@{typ "32 word \<times> 4 word"}),prev_thy ))),
                  close
                    (var_a HOLogic.unitT,
                     call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy ))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'BitFieldClearOrInsert",
   close
     (tp[var_w("d",4),var_w("n",4),var_n"lsbit",var_n"msbit"],
      mb(ite(eq(var_w("n",4),lw(15,4)),mu(lw(0,32),qTy),
             call("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic})),
         close
           (var_w("v",32),
            mb(mu(mop(Cast(@{typ "bool list"}),var_w("v",32)),qTy),
               close
                 (var_v"field",
                  mb(call
                       ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("d",4),
                        @{theory ARM_Monadic}),
                     close
                       (var_w("v",32),
                        mb(mu(mop(Cast(@{typ "bool list"}),var_w("v",32)),qTy),
                           close
                             (var_v"v",
                              mn(var_v"v",
                                 mb(mr(close
                                         (var("s",@{typ "bool list \<times> 'b state_scheme"}),
                                          mop(Fst,var("s",@{typ "bool list \<times> 'b state_scheme"})))),
                                    close
                                      (var_v"v",
                                       mb(mb(mu(bfi(var_n"msbit",var_n"lsbit",
                                                    ex(var_v"field",
                                                       bop(Sub,var_n"msbit",var_n"lsbit"),ln 0,
                                                       @{typ "bool list"}),var_v"v"),
                                                @{typ "bool list \<times> 'b state_scheme"}),
                                             close
                                               (var_v"v",
                                                mw(close
                                                     (var("s",@{typ "bool list \<times> 'b state_scheme"}),
                                                      tp[var_v"v",
                                                         mop(Snd,
                                                             var("s",
                                                                 @{typ "bool list \<times> 'b state_scheme"}))])))),
                                          close
                                            (var_a HOLogic.unitT,
                                             mb(mr(close
                                                     (var("s",@{typ "bool list \<times> 'b state_scheme"}),
                                                      mop(Fst,
                                                          var("s",@{typ "bool list \<times> 'b state_scheme"})))),
                                                close
                                                  (var_v"v",
                                                   mb(mb(mb(mu(mop(Cast w32,var_v"v"),
                                                               @{typ "bool list \<times> 'b state_scheme"}),
                                                            close
                                                              (var_w("v",32),
                                                               mu(tp[var_w("v",32),var_w("d",4)],
                                                                  @{typ "bool list \<times> 'b state_scheme"}))),
                                                         close
                                                           (var("v",@{typ "32 word \<times> 4 word"}),
                                                            md(call
                                                                 ("write'R",
                                                                  @{typ
                                                                  "'b state_scheme \<Rightarrow>
                                                                   (unit \<times> 'b state_scheme)"},
                                                                  var("v",
                                                                      @{typ
                                                                      "32 word \<times> 4 word"}),
                                                                  prev_thy ),@{typ "bool list"}))),
                                                      close
                                                        (var_a HOLogic.unitT,
                                                         md(call
                                                              ("IncPC",
                                                               @{typ
                                                               "'b state_scheme \<Rightarrow>
                                                                (unit \<times> 'b state_scheme)"},lu,prev_thy ),
                                                            @{typ "bool list"}))))))))))))))))))))
end
\<close>


definition
  dfn'LoadWord :: "bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1 \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
  "dfn'LoadWord \<equiv>
\<lambda>(add, index, wback, t, n, m). do {
     b \<leftarrow> NullCheckIfThumbEE n;
     if b then do {
                 Rn \<leftarrow> R n;
                 offset \<leftarrow> case m of immediate_form1 imm32 \<Rightarrow> return imm32 | register_form1 (m, shift_t, shift_n) \<Rightarrow> do {
                                                                                 v \<leftarrow> R m;
                                                                                 do {
                                                                                   v0 \<leftarrow> read_state CPSR;
                                                                                   v0 \<leftarrow> do {
                                                                                       v \<leftarrow> do {
                                                                                           v \<leftarrow> return (PSR.C v0);
 return (shift_n, v)
                                                                                         };
                                                                                       return (shift_t, v)
                                                                                     };
                                                                                   return (v, v0)
                                                                                 } \<bind> Shift
                                                                               };
                 let offset_addr = (if add then Rn + offset else Rn - offset);
                 let address = (if index then offset_addr else Rn);
                 data \<leftarrow> MemU ((Addr address), 4);
                 _ \<leftarrow> if wback then write'R (offset_addr, n) else return ();
                 if t = 15 then if Aligned1 ((Addr address), 4) then LoadWritePC data else raise'exception (UNPREDICTABLE ''Load'')
                 else do {
                        v \<leftarrow> UnalignedSupport ();
                        _ \<leftarrow> do {
                                v \<leftarrow> do {
                                    b \<leftarrow> return (v \<or> Aligned (address, 4));
                                    if b then return data else do {
                                                                 v \<leftarrow> read_state Encoding;
                                                                 b \<leftarrow> return (v = Encoding_ARM);
                                                                 if b then ROR (data, 8 * nat (uint ((word_extract 1 0 address)::2 word))) else return HOL.undefined
                                                               }
                                  };
                                return (v, t)
                              } \<bind> write'R;
                        IncPC ()
                      }
               }
     else return ()
   }"



definition
"dfn'LoadLiteral"
  :: "bool \<times> 4 word \<times> 32 word \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'LoadLiteral \<equiv>
\<lambda>(add, t, imm32). do {
     b \<leftarrow> NullCheckIfThumbEE 15;
     if b then do {
                 v \<leftarrow> PC;
                 base \<leftarrow> do {
                     v \<leftarrow> return ((Addr v), 4);
                     return (Align1 v)
                   };
                 let address = (if add then ((addr_val base)::32 word) + imm32 else ((addr_val base)::32 word) - imm32);
                 data \<leftarrow> MemU ((Addr address), 4);
                 if t = 15 then if Aligned1 ((Addr address), 4) then LoadWritePC data else raise'exception (UNPREDICTABLE ''LoadLiteral'')
                 else do {
                        v \<leftarrow> UnalignedSupport ();
                        _ \<leftarrow> do {
                               v \<leftarrow> do {
                                   b \<leftarrow> return (v \<or> Aligned1 ((Addr address), 4));
                                   if b then return data else do {
                                                                v \<leftarrow> read_state Encoding;
                                                                b \<leftarrow> return (v = Encoding_ARM);
                                                                if b then ROR (data, 8 * nat (uint ((word_extract 1 0 address)::2 word))) else return HOL.undefined
                                                              }
                                 };
                               return (v, t)
                             } \<bind> write'R;
                        IncPC ()
                      }
               }
     else return ()
   }"


definition
  "dfn'LoadUnprivileged"
  :: "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1 \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
  "dfn'LoadUnprivileged \<equiv>
\<lambda>(add, postindex, t, n, m). do {
     b \<leftarrow> NullCheckIfThumbEE n;
     if b then do {
                 Rn \<leftarrow> R n;
                 offset \<leftarrow> case m of immediate_form1 imm32 \<Rightarrow> return imm32 | register_form1 (m, shift_t, shift_n) \<Rightarrow> do {
                                                                                 v \<leftarrow> R m;
                                                                                 do {
                                                                                   v0 \<leftarrow> read_state CPSR;
                                                                                   v0 \<leftarrow> do {
                                                                                       v \<leftarrow> do {
                                                                                           v \<leftarrow> return (PSR.C v0);
 return (shift_n, v)
                                                                                         };
                                                                                       return (shift_t, v)
                                                                                     };
                                                                                   return (v, v0)
                                                                                 } \<bind> Shift
                                                                               };
                 let offset_addr = (if add then Rn + offset else Rn - offset);
                 let address = (if postindex then Rn else offset_addr);
                 data \<leftarrow> MemU_unpriv (Addr address, 4);
                 _ \<leftarrow> if postindex then write'R (offset_addr, n) else return ();
                 v \<leftarrow> UnalignedSupport ();
                 _ \<leftarrow> do {
                         v \<leftarrow> do {
                             b \<leftarrow> return (v \<or> Aligned (address, 4));
                             if b then return data else do {
                                                          v \<leftarrow> read_state Encoding;
                                                          b \<leftarrow> return (v = Encoding_ARM);
                                                          if b then ROR (data, 8 * nat (uint ((word_extract 1 0 address)::2 word))) else return HOL.undefined
                                                        }
                           };
                         return (v, t)
                       } \<bind> write'R;
                 IncPC ()
               }
     else return ()
   }"


definition
 "dfn'LoadByte"
  :: "bool \<times> bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1 \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'LoadByte \<equiv> \<lambda>(unsigned, add, index, wback, t, n, m). do {
                     b \<leftarrow> NullCheckIfThumbEE n;
                     if b then do {
                                 Rn \<leftarrow> R n;
                                 offset \<leftarrow> case m of immediate_form1 imm32 \<Rightarrow> return imm32 | register_form1 (m, shift_t, shift_n) \<Rightarrow> do {
       v \<leftarrow> R m;
       do {
         v0 \<leftarrow> read_state CPSR;
         v0 \<leftarrow> do {
             v \<leftarrow> do {
                 v \<leftarrow> return (PSR.C v0);
                 return (shift_n, v)
               };
             return (shift_t, v)
           };
         return (v, v0)
       } \<bind> Shift
     };
                                 let offset_addr = (if add then Rn + offset else Rn - offset);
                                 v \<leftarrow> MemU (if index then Addr offset_addr else Addr Rn, 1);
                                 _ \<leftarrow> do {
                                        v \<leftarrow> do {
                                            v::bool \<times> 8 word \<leftarrow> return (unsigned, v);
                                            return ((Extend v)::32 word)
                                          };
                                        return (v, t)
                                      } \<bind> write'R;
                                 _ \<leftarrow> if wback then write'R (offset_addr, n) else return ();
                                 IncPC ()
                               }
                     else return ()
                   }"



definition
  "dfn'LoadByteLiteral"
  :: "bool \<times> bool \<times> 4 word \<times> 32 word \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'LoadByteLiteral \<equiv> \<lambda>(unsigned::bool, add::bool, t::4 word, imm32::32 word). do {
                            b::bool \<leftarrow> NullCheckIfThumbEE (15::4 word);
                            if b then do {
                                        v::32 word \<leftarrow> PC;
                                        base::32 word \<leftarrow> do {
                                            v::32 word \<times> nat \<leftarrow> return (v, 4::nat);
                                            return (Align v)
                                          };
                                        v::8 word \<leftarrow> MemU (if add then Addr (base + imm32) else Addr (base - imm32), 1::nat);
                                        _::unit \<leftarrow> do {
                                                     v::32 word \<leftarrow> do {
                                                         v::bool \<times> 8 word \<leftarrow> return (unsigned, v);
                                                         return (Extend v)
                                                       };
                                                     return (v, t)
                                                   } \<bind> write'R;
                                        IncPC ()
                                      }
                            else return ()
                          }"



definition
  "dfn'LoadByteUnprivileged"
  :: "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1 \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
  "dfn'LoadByteUnprivileged \<equiv>
\<lambda>(add::bool, postindex::bool, t::4 word, n::4 word, m::offset1). do {
     b::bool \<leftarrow> NullCheckIfThumbEE n;
     if b then do {
                 Rn::32 word \<leftarrow> R n;
                 offset::32 word \<leftarrow> case m of immediate_form1 (imm32::32 word) \<Rightarrow> return imm32 | register_form1 (m::4 word, shift_t::SRType, shift_n::nat) \<Rightarrow> do {
           v::32 word \<leftarrow> R m;
           do {
             v0::PSR \<leftarrow> read_state CPSR;
             v0::SRType \<times> nat \<times> bool \<leftarrow> do {
                 v::nat \<times> bool \<leftarrow> do {
                     v::bool \<leftarrow> return (PSR.C v0);
                     return (shift_n, v)
                   };
                 return (shift_t, v)
               };
             return (v, v0)
           } \<bind> Shift
         };
                 let (offset_addr::32 word) = (if add then Rn + offset else Rn - offset);
                 v::8 word \<leftarrow> MemU_unpriv (if postindex then (Addr Rn) else Addr (offset_addr), 1::nat);
                 _::unit \<leftarrow> do {
                              v::32 word \<leftarrow> return (word_of_int (uint v));
                              return (v, t)
                            } \<bind> write'R;
                 _::unit \<leftarrow> if postindex then write'R (offset_addr, n) else return ();
                 IncPC ()
               }
     else return ()
   }"



definition
  "dfn'LoadSignedByteUnprivileged"
  :: "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset2 \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
  "dfn'LoadSignedByteUnprivileged \<equiv> \<lambda>(add::bool, postindex::bool, t::4 word, n::4 word, m::offset2). do {
                                       b::bool \<leftarrow> NullCheckIfThumbEE n;
                                       if b then do {
                                                   Rn::32 word \<leftarrow> R n;
                                                   offset::32 word \<leftarrow> case m of immediate_form2 (imm32::32 word) \<Rightarrow> return imm32 | register_form2 (m::4 word) \<Rightarrow> R m;
                                                   let (offset_addr::32 word) = (if add then Rn + offset else Rn - offset);
                                                   v::8 word \<leftarrow> MemU_unpriv (if postindex then Addr Rn else Addr offset_addr, 1::nat);
                                                   _::unit \<leftarrow> do {
                                                                v::32 word \<leftarrow> return (scast v);
                                                                return (v, t)
                                                              } \<bind> write'R;
                                                   _::unit \<leftarrow> if postindex then write'R (offset_addr, n) else return ();
                                                   IncPC ()
                                                 }
                                       else return ()
                                     }"

definition
 "dfn'LoadHalf"
  :: "bool \<times> bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1 \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'LoadHalf \<equiv>
\<lambda>(unsigned::bool, add::bool, index::bool, wback::bool, t::4 word, n::4 word, m::offset1). do {
     b::bool \<leftarrow> NullCheckIfThumbEE n;
     if b then do {
                 Rn::32 word \<leftarrow> R n;
                 offset::32 word \<leftarrow> case m of immediate_form1 (imm32::32 word) \<Rightarrow> return imm32 | register_form1 (m::4 word, shift_t::SRType, shift_n::nat) \<Rightarrow> do {
           v::32 word \<leftarrow> R m;
           do {
             v0::PSR \<leftarrow> read_state CPSR;
             v0::SRType \<times> nat \<times> bool \<leftarrow> do {
                 v::nat \<times> bool \<leftarrow> do {
                     v::bool \<leftarrow> return (PSR.C v0);
                     return (shift_n, v)
                   };
                 return (shift_t, v)
               };
             return (v, v0)
           } \<bind> Shift
         };
                 let (offset_addr::32 word) = (if add then Rn + offset else Rn - offset);
                 let (address::32 word) = (if index then offset_addr else Rn);
                 data::16 word \<leftarrow> MemU (Addr address, 2::nat);
                 _::unit \<leftarrow> if wback then write'R (offset_addr, n) else return ();
                 v::bool \<leftarrow> UnalignedSupport ();
                 _::unit \<leftarrow> do {
                               v::32 word \<leftarrow> do {
                                   b::bool \<leftarrow> return (v \<or> Aligned (address, 2::nat));
                                   return (if b then Extend (unsigned, data) else HOL.undefined)
                                 };
                               return (v, t)
                             } \<bind> write'R;
                 IncPC ()
               }
     else return ()
   }"





definition
  "dfn'LoadHalfLiteral"
  :: "bool \<times> bool \<times> 4 word \<times> 32 word \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'LoadHalfLiteral \<equiv> \<lambda>(unsigned::bool, add::bool, t::4 word, imm32::32 word). do {
                            b::bool \<leftarrow> NullCheckIfThumbEE (15::4 word);
                            if b then do {
                                        v::32 word \<leftarrow> PC;
                                        base::32 word \<leftarrow> do {
                                            v::32 word \<times> nat \<leftarrow> return (v, 4::nat);
                                            return (Align v)
                                          };
                                        let (address::32 word) = (if add then base + imm32 else base - imm32);
                                        data::16 word \<leftarrow> MemU (Addr address, 2::nat);
                                        v::bool \<leftarrow> UnalignedSupport ();
                                        _::unit \<leftarrow> do {
                                                     v::32 word \<leftarrow> do {
                                                         b::bool \<leftarrow> return (v \<or> Aligned (address, 2::nat));
                                                         return (if b then Extend (unsigned, data) else HOL.undefined)
                                                       };
                                                     return (v, t)
                                                   } \<bind> write'R;
                                        IncPC ()
                                      }
                            else return ()
                          }"



definition
  "dfn'LoadHalfUnprivileged"
  :: "bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset2 \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'LoadHalfUnprivileged \<equiv> \<lambda>(unsigned::bool, add::bool, postindex::bool, t::4 word, n::4 word, m::offset2). do {
                                 b::bool \<leftarrow> NullCheckIfThumbEE n;
                                 if b then do {
                                             Rn::32 word \<leftarrow> R n;
                                             offset::32 word \<leftarrow> case m of immediate_form2 (imm32::32 word) \<Rightarrow> return imm32 | register_form2 (m::4 word) \<Rightarrow> R m;
                                             let (offset_addr::32 word) = (if add then Rn + offset else Rn - offset);
                                             let (address::32 word) = (if postindex then Rn else offset_addr);
                                             data::16 word \<leftarrow> MemU_unpriv (Addr address, 2::nat);
                                             _::unit \<leftarrow> if postindex then write'R (offset_addr, n) else return ();
                                             v::bool \<leftarrow> UnalignedSupport ();
                                             _::unit \<leftarrow> do {
                                                           v::32 word \<leftarrow> do {
                                                               b::bool \<leftarrow> return (v \<or> Aligned (address, 2::nat));
                                                               return (if b then Extend (unsigned, data) else HOL.undefined)
                                                             };
                                                           return (v, t)
                                                         } \<bind> write'R;
                                             IncPC ()
                                           }
                                 else return ()
                               }"


definition
  "dfn'LoadMultiple"
  :: "bool \<times> bool \<times> bool \<times> 4 word \<times> 16 word \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'LoadMultiple \<equiv>
\<lambda>(increment::bool, index::bool, wback::bool, n::4 word, registers::16 word). do {
     b::bool \<leftarrow> NullCheckIfThumbEE n;
     if b then do {
                 Rn::32 word \<leftarrow> R n;
                 v::nat \<leftarrow> BitCount registers;
                 length::32 word \<leftarrow> do {
                     v::32 word \<leftarrow> return (word_of_int (int v));
                     return ((4::32 word) * v)
                   };
                 extend_state (if increment then Rn else Rn - length)
                  (do {
                     _::unit \<leftarrow> if index = increment then do {
                                                            v::32 word \<leftarrow> read_state fst;
                                                            v::32 word \<leftarrow> return (v + (4::32 word));
                                                            update_state (\<lambda>s::32 word \<times> 'b state_scheme. (v, snd s))
                                                          }
                                else return ();
                     _::unit \<leftarrow> for_loop (0::nat, 14::nat, \<lambda>i::nat. if registers !! i then do {
    _::unit \<leftarrow> do {
        v::32 word \<leftarrow> read_state fst;
        v::32 word \<times> 4 word \<leftarrow> do {
            v::32 word \<leftarrow> do {
                v\<leftarrow> return (Addr v, 4::nat);
                trim_state (MemA v)
              };
            return (v, word_of_int (int i))
          };
        trim_state (write'R v)
      };
    v::32 word \<leftarrow> read_state fst;
    v::32 word \<leftarrow> return (v + (4::32 word));
    update_state (\<lambda>s::32 word \<times> 'b state_scheme. (v, snd s))
  }
                                                                     else return ());
                     _::unit \<leftarrow> if registers !! (15::nat) then do {
                                                                  v::32 word \<leftarrow> read_state fst;
                                                                  v::32 word \<leftarrow> do {
                                                                      v \<leftarrow> return (Addr v, 4::nat);
                                                                      trim_state (MemA v)
                                                                    };
                                                                  trim_state (LoadWritePC v)
                                                                }
                                 else trim_state (IncPC ());
                     if wback then if registers !! nat (uint n) then trim_state (write'R (HOL.undefined, n))
                                   else trim_state (write'R (if increment then Rn + length else Rn - length, n))
                     else return ()
                   })
               }
     else return ()
   }"


definition
 "dfn'LoadMultipleExceptionReturn"
  :: "bool \<times> bool \<times> bool \<times> 4 word \<times> 15 word \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'LoadMultipleExceptionReturn \<equiv>
\<lambda>(increment::bool, wordhigher::bool, wback::bool, n::4 word, registers::15 word). do {
     v::bool \<leftarrow> CurrentModeIsHyp ();
     _::unit \<leftarrow> if v then TakeUndefInstrException () else return ();
     v::bool \<leftarrow> CurrentModeIsUserOrSystem ();
     _::unit \<leftarrow> if v then raise'exception (UNPREDICTABLE ''LoadMultipleExceptionReturn'') else return ();
     Rn::32 word \<leftarrow> R n;
     v::nat \<leftarrow> BitCount registers;
     length::32 word \<leftarrow> do {
         v::32 word \<leftarrow> do {
             v::32 word \<leftarrow> return (word_of_int (int v));
             return ((4::32 word) * v)
           };
         return (v + (4::32 word))
       };
     extend_state (if increment then Rn else Rn - length)
      (do {
         _::unit \<leftarrow> if wordhigher then do {
                                          v::32 word \<leftarrow> read_state fst;
                                          v::32 word \<leftarrow> return (v + (4::32 word));
                                          update_state (\<lambda>s::32 word \<times> 'b state_scheme. (v, snd s))
                                        }
                     else return ();
         _::unit \<leftarrow> for_loop (0::nat, 14::nat, \<lambda>i::nat. if registers !! i then do {
                                                                                  _::unit \<leftarrow> do {
                                                                                      v::32 word \<leftarrow> read_state fst;
                                                                                      v::32 word \<times> 4 word \<leftarrow> do {
                                                                                          v::32 word \<leftarrow> do {
    v \<leftarrow> return (Addr v, 4::nat);
    trim_state (MemA v)
  };
return (v, word_of_int (int i))
                                                                                        };
                                                                                      trim_state (write'R v)
                                                                                    };
                                                                                  v::32 word \<leftarrow> read_state fst;
                                                                                  v::32 word \<leftarrow> return (v + (4::32 word));
                                                                                  update_state (\<lambda>s::32 word \<times> 'b state_scheme. (v, snd s))
                                                                                }
                                                         else return ());
         v::32 word \<leftarrow> read_state fst;
         new_pc_value::32 word \<leftarrow> do {
             v \<leftarrow> return (Addr v, 4::nat);
             trim_state (MemA v)
           };
         _::unit \<leftarrow>
           if wback then if registers !! nat (uint n) then trim_state (write'R (HOL.undefined, n)) else trim_state (write'R (if increment then Rn + length else Rn - length, n))
           else return ();
         v::PSR \<leftarrow> trim_state SPSR;
         _::unit \<leftarrow> do {
             v::32 word \<times> 4 word \<times> bool \<leftarrow> do {
                 v::32 word \<leftarrow> return (reg'PSR v);
                 return (v, 15::4 word, True)
               };
             trim_state (CPSRWriteByInstr v)
           };
         trim_state (BranchWritePC new_pc_value)
       })
   }"



definition
 "dfn'LoadMultipleUserRegisters"
  :: "bool \<times> bool \<times> 4 word \<times> 15 word \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'LoadMultipleUserRegisters \<equiv>
\<lambda>(increment::bool, wordhigher::bool, n::4 word, registers::15 word). do {
     v::bool \<leftarrow> CurrentModeIsHyp ();
     _::unit \<leftarrow> if v then TakeUndefInstrException () else return ();
     v::bool \<leftarrow> CurrentModeIsUserOrSystem ();
     _::unit \<leftarrow> if v then raise'exception (UNPREDICTABLE ''LoadMultipleUserRegisters'') else return ();
     v::nat \<leftarrow> BitCount registers;
     length::32 word \<leftarrow> do {
         v::32 word \<leftarrow> return (word_of_int (int v));
         return ((4::32 word) * v)
       };
     v::32 word \<leftarrow> if increment then R n else do {
                                                v::32 word \<leftarrow> R n;
                                                return (v - length)
                                              };
     extend_state v (do {
                       _::unit \<leftarrow> if wordhigher then do {
                                                        v::32 word \<leftarrow> read_state fst;
                                                        v::32 word \<leftarrow> return (v + (4::32 word));
                                                        update_state (\<lambda>s::32 word \<times> 'b state_scheme. (v, snd s))
                                                      }
                                   else return ();
                       _::unit \<leftarrow> for_loop (0::nat, 14::nat, \<lambda>i::nat. if registers !! i then do {
      _::unit \<leftarrow> do {
          v::32 word \<leftarrow> read_state fst;
          v::32 word \<times> 4 word \<times> 5 word \<leftarrow> do {
              v::32 word \<leftarrow> do {
                  v \<leftarrow> return (Addr v, 4::nat);
                  trim_state (MemA v)
                };
              return (v, word_of_int (int i), 16::5 word)
            };
          trim_state (write'Rmode v)
        };
      v::32 word \<leftarrow> read_state fst;
      v::32 word \<leftarrow> return (v + (4::32 word));
      update_state (\<lambda>s::32 word \<times> 'b state_scheme. (v, snd s))
    }
                                                                       else return ());
                       trim_state (IncPC ())
                     })
   }"



definition
"dfn'LoadDual"
  :: "bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> offset2 \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'LoadDual \<equiv> \<lambda>(add::bool, index::bool, wback::bool, t::4 word, t2::4 word, n::4 word, m::offset2). do {
                     b::bool \<leftarrow> NullCheckIfThumbEE n;
                     if b then do {
                                 Rn::32 word \<leftarrow> R n;
                                 offset::32 word \<leftarrow> case m of immediate_form2 (imm32::32 word) \<Rightarrow> return imm32 | register_form2 (m::4 word) \<Rightarrow> R m;
                                 let (offset_addr::32 word) = (if add then Rn + offset else Rn - offset);
                                 let (address::32 word) = (if index then offset_addr else Rn);
                                 v::32 word \<leftarrow> MemA (Addr address, 4::nat);
                                 _::unit \<leftarrow> return (v, t) \<bind> write'R;
                                 v::32 word \<leftarrow> MemA (Addr (address + (4::32 word)), 4::nat);
                                 _::unit \<leftarrow> return (v, t2) \<bind> write'R;
                                 _::unit \<leftarrow> if wback then write'R (offset_addr, n) else return ();
                                 IncPC ()
                               }
                     else return ()
                   }"



definition
  "dfn'LoadDualLiteral"
  :: "bool \<times> 4 word \<times> 4 word \<times> 32 word \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'LoadDualLiteral \<equiv> \<lambda>(add, t, t2, imm32). do {
                            b \<leftarrow> NullCheckIfThumbEE 15;
                            if b then do {
                                        address \<leftarrow> if add then do {
                                                                 v \<leftarrow> PC;
                                                                 v \<leftarrow> do {
                                                                     v \<leftarrow> return (Addr v, 4);
                                                                     return (Align1 v)
                                                                   };
                                                                 return (v r+ imm32)
                                                               }
                                                   else do {
                                                          v \<leftarrow> PC;
                                                          v \<leftarrow> do {
                                                              v \<leftarrow> return (Addr v, 4);
                                                              return (Align1 v)
                                                            };
                                                          return (v r- imm32)
                                                        };
                                        v \<leftarrow> MemA (address, 4);
                                        _ \<leftarrow> return (v, t) \<bind> write'R;
                                        v \<leftarrow> MemA (address r+ 4, 4);
                                        _ \<leftarrow> return (v, t2) \<bind> write'R;
                                        IncPC ()
                                      }
                            else return ()
                          }"


definition
  "dfn'LoadExclusive"
  :: "4 word \<times> 4 word \<times> 32 word \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'LoadExclusive \<equiv> \<lambda>(t::4 word, n::4 word, imm32::32 word). do {
                          b::bool \<leftarrow> NullCheckIfThumbEE n;
                          if b then do {
                                      v::32 word \<leftarrow> R n;
                                      address::32 word \<leftarrow> return (v + imm32);
                                      v::32 word \<leftarrow> MemA (Addr address, 4::nat);
                                      _::unit \<leftarrow> return (v, t) \<bind> write'R;
                                      IncPC ()
                                    }
                          else return ()
                        }"


definition
"dfn'LoadExclusiveByte"
  :: "4 word \<times> 4 word \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'LoadExclusiveByte \<equiv> \<lambda>(t::4 word, n::4 word). do {
                              b::bool \<leftarrow> NullCheckIfThumbEE n;
                              if b then do {
                                          address::32 word \<leftarrow> R n;
                                          v::8 word \<leftarrow> MemA (Addr address, 1::nat);
                                          _::unit \<leftarrow> do {
                                                       v::32 word \<leftarrow> return (word_of_int (uint v));
                                                       return (v, t)
                                                     } \<bind> write'R;
                                          IncPC ()
                                        }
                              else return ()
                            }"


definition
  "dfn'LoadExclusiveHalf"
  :: "4 word \<times> 4 word \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'LoadExclusiveHalf \<equiv> \<lambda>(t::4 word, n::4 word). do {
                              b::bool \<leftarrow> NullCheckIfThumbEE n;
                              if b then do {
                                          address::32 word \<leftarrow> R n;
                                          v::16 word \<leftarrow> MemA (Addr address, 2::nat);
                                          _::unit \<leftarrow> do {
                                                       v::32 word \<leftarrow> return (word_of_int (uint v));
                                                       return (v, t)
                                                     } \<bind> write'R;
                                          IncPC ()
                                        }
                              else return ()
                            }"



definition
  "dfn'LoadExclusiveDoubleword"
  :: "4 word \<times> 4 word \<times> 4 word \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'LoadExclusiveDoubleword \<equiv>
\<lambda>(t::4 word, t2::4 word, n::4 word). do {
     b::bool \<leftarrow> NullCheckIfThumbEE n;
     if b then do {
                 address::32 word \<leftarrow> R n;
                 value::64 word \<leftarrow> MemA (Addr address, 8::nat);
                 v::bool \<leftarrow> BigEndian ();
                 _::unit \<leftarrow> do {
                              v::32 word \<leftarrow> return (if v then word_extract (63::nat) (32::nat) value else word_extract (31::nat) (0::nat) value);
                              return (v, t)
                            } \<bind> write'R;
                 v::bool \<leftarrow> BigEndian ();
                 _::unit \<leftarrow> do {
                               v::32 word \<leftarrow> return (if v then word_extract (31::nat) (0::nat) value else word_extract (63::nat) (32::nat) value);
                               return (v, t2)
                             } \<bind> write'R;
                 IncPC ()
               }
     else return ()
   }"



definition
 "dfn'StoreWord"
  :: "bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1 \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'StoreWord \<equiv> \<lambda>(add, index, wback, t, n, m). do {
                      b \<leftarrow> NullCheckIfThumbEE n;
                      if b then do {
                                  Rn \<leftarrow> R n;
                                  offset \<leftarrow> case m of immediate_form1 imm32 \<Rightarrow> return imm32 | register_form1 (m, shift_t, shift_n) \<Rightarrow> do {
        v \<leftarrow> R m;
        do {
          v0 \<leftarrow> read_state CPSR;
          v0 \<leftarrow> do {
              v \<leftarrow> do {
                  v \<leftarrow> return (PSR.C v0);
                  return (shift_n, v)
                };
              return (shift_t, v)
            };
          return (v, v0)
        } \<bind> Shift
      };
                                  let offset_addr = (if add then Rn + offset else Rn - offset);
                                  let address = (if index then offset_addr else Rn);
                                  data \<leftarrow> if t = 15 then PCStoreValue () else R t;
                                  v \<leftarrow> UnalignedSupport ();
                                  _ \<leftarrow> do {
                                      b \<leftarrow> if v then return True else do {
                                                                        v \<leftarrow> CurrentInstrSet ();
                                                                        v \<leftarrow> return (v = InstrSet_ARM);
                                                                        return (Aligned (address, 4) \<or> v)
                                                                      };
                                      if b then write'MemU (data, Addr address, 4) else write'MemU (HOL.undefined::32 word, Addr address, 4)
                                    };
                                  _ \<leftarrow> if wback then write'R (offset_addr, n) else return ();
                                  IncPC ()
                                }
                      else return ()
                    }"


definition
  "dfn'StoreUnprivileged"
  :: "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1 \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'StoreUnprivileged \<equiv> \<lambda>(add, postindex, t, n, m). do {
                              b \<leftarrow> NullCheckIfThumbEE n;
                              if b then do {
                                          Rn \<leftarrow> R n;
                                          offset \<leftarrow> case m of immediate_form1 imm32 \<Rightarrow> return imm32 | register_form1 (m, shift_t, shift_n) \<Rightarrow> do {
                v \<leftarrow> R m;
                do {
                  v0 \<leftarrow> read_state CPSR;
                  v0 \<leftarrow> do {
                      v \<leftarrow> do {
                          v \<leftarrow> return (PSR.C v0);
                          return (shift_n, v)
                        };
                      return (shift_t, v)
                    };
                  return (v, v0)
                } \<bind> Shift
              };
                                          let offset_addr = (if add then Rn + offset else Rn - offset);
                                          let address = (if postindex then Rn else offset_addr);
                                          data \<leftarrow> if t = 15 then PCStoreValue () else R t;
                                          v \<leftarrow> UnalignedSupport ();
                                          _ \<leftarrow> do {
                                              b \<leftarrow> if v then return True else do {
                                                                                v \<leftarrow> CurrentInstrSet ();
                                                                                v \<leftarrow> return (v = InstrSet_ARM);
                                                                                return (Aligned1 (Addr address, 4) \<or> v)
                                                                              };
                                              if b then write'MemU_unpriv (data, Addr address, 4) else write'MemU_unpriv (HOL.undefined::32 word, Addr address, 4)
                                            };
                                          _ \<leftarrow> if postindex then write'R (offset_addr, n) else return ();
                                          IncPC ()
                                        }
                              else return ()
                            }"


definition
 "dfn'StoreByte"
  :: "bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1 \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'StoreByte \<equiv> \<lambda>(add, index, wback, t, n, m). do {
                      b \<leftarrow> NullCheckIfThumbEE n;
                      if b then do {
                                  Rn \<leftarrow> R n;
                                  offset \<leftarrow> case m of immediate_form1 imm32 \<Rightarrow> return imm32 | register_form1 (m, shift_t, shift_n) \<Rightarrow> do {
        v \<leftarrow> R m;
        do {
          v0 \<leftarrow> read_state CPSR;
          v0 \<leftarrow> do {
              v \<leftarrow> do {
                  v \<leftarrow> return (PSR.C v0);
                  return (shift_n, v)
                };
              return (shift_t, v)
            };
          return (v, v0)
        } \<bind> Shift
      };
                                  let offset_addr = (if add then Rn + offset else Rn - offset);
                                  _ \<leftarrow> do {
                                      v \<leftarrow> R t;
                                      do {
                                        v \<leftarrow> return (word_extract 7 0 v);
                                        return (v::8 word, if index then Addr offset_addr else Addr Rn, 1)
                                      } \<bind> write'MemU
                                    };
                                  _ \<leftarrow> if wback then write'R (offset_addr, n) else return ();
                                  IncPC ()
                                }
                      else return ()
                    }"




definition
 "dfn'StoreByteUnprivileged"
  :: "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1 \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'StoreByteUnprivileged \<equiv> \<lambda>(add, postindex, t, n, m). do {
                                  b \<leftarrow> NullCheckIfThumbEE n;
                                  if b then do {
                                              Rn \<leftarrow> R n;
                                              offset \<leftarrow> case m of immediate_form1 imm32 \<Rightarrow> return imm32 | register_form1 (m, shift_t, shift_n) \<Rightarrow> do {
                    v \<leftarrow> R m;
                    do {
                      v0 \<leftarrow> read_state CPSR;
                      v0 \<leftarrow> do {
                          v \<leftarrow> do {
                              v \<leftarrow> return (PSR.C v0);
                              return (shift_n, v)
                            };
                          return (shift_t, v)
                        };
                      return (v, v0)
                    } \<bind> Shift
                  };
                                              let offset_addr = (if add then Rn + offset else Rn - offset);
                                              _ \<leftarrow> do {
                                                  v \<leftarrow> R t;
                                                  do {
                                                    v \<leftarrow> return (word_extract 7 0 v);
                                                    return (v::8 word, if postindex then Addr Rn else Addr offset_addr, 1)
                                                  } \<bind> write'MemU_unpriv
                                                };
                                              _ \<leftarrow> if postindex then write'R (offset_addr, n) else return ();
                                              IncPC ()
                                            }
                                  else return ()
                                }"



definition
  "dfn'StoreHalf"
  :: "bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1 \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'StoreHalf \<equiv> \<lambda>(add, index, wback, t, n, m). do {
                      b \<leftarrow> NullCheckIfThumbEE n;
                      if b then do {
                                  Rn \<leftarrow> R n;
                                  offset \<leftarrow> case m of immediate_form1 imm32 \<Rightarrow> return imm32 | register_form1 (m, shift_t, shift_n) \<Rightarrow> do {
        v \<leftarrow> R m;
        do {
          v0 \<leftarrow> read_state CPSR;
          v0 \<leftarrow> do {
              v \<leftarrow> do {
                  v \<leftarrow> return (PSR.C v0);
                  return (shift_n, v)
                };
              return (shift_t, v)
            };
          return (v, v0)
        } \<bind> Shift
      };
                                  let offset_addr = (if add then Rn + offset else Rn - offset);
                                  let address = (if index then offset_addr else Rn);
                                  v \<leftarrow> UnalignedSupport ();
                                  _ \<leftarrow> do {
                                      b \<leftarrow> return (v \<or> Aligned (address, 2));
                                      if b then do {
                                                  v \<leftarrow> R t;
                                                  do {
                                                    v \<leftarrow> return (word_extract 15 0 v);
                                                    return (v::16 word, Addr address, 2)
                                                  } \<bind> write'MemU
                                                }
                                      else write'MemU (HOL.undefined::16 word, Addr address, 2)
                                    };
                                  _ \<leftarrow> if wback then write'R (offset_addr, n) else return ();
                                  IncPC ()
                                }
                      else return ()
                    }"


definition
  "dfn'StoreHalfUnprivileged"
  :: "bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset2 \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'StoreHalfUnprivileged \<equiv> \<lambda>(add, postindex, t, n, m). do {
                                  b \<leftarrow> NullCheckIfThumbEE n;
                                  if b then do {
                                              Rn \<leftarrow> R n;
                                              offset \<leftarrow> case m of immediate_form2 imm32 \<Rightarrow> return imm32 | register_form2 m \<Rightarrow> R m;
                                              let offset_addr = (if add then Rn + offset else Rn - offset);
                                              let address = (if postindex then Rn else offset_addr);
                                              v \<leftarrow> UnalignedSupport ();
                                              _ \<leftarrow> do {
                                                  b \<leftarrow> return (v \<or> Aligned1 (Addr address, 2));
                                                  if b then do {
                                                              v \<leftarrow> R t;
                                                              do {
                                                                v::16 word \<leftarrow> return (word_extract 15 0 v);
                                                                return (v, Addr address, 2)
                                                              } \<bind> write'MemU_unpriv
                                                            }
                                                  else write'MemU_unpriv (HOL.undefined::16 word, Addr address, 2)
                                                };
                                              _ \<leftarrow> if postindex then write'R (offset_addr, n) else return ();
                                              IncPC ()
                                            }
                                  else return ()
                                }"


definition
 "dfn'StoreMultiple"
  :: "bool \<times> bool \<times> bool \<times> 4 word \<times> 16 word \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'StoreMultiple \<equiv>
\<lambda>(increment, index, wback, n, registers). do {
     b \<leftarrow> NullCheckIfThumbEE n;
     if b then do {
                 Rn \<leftarrow> R n;
                 v \<leftarrow> BitCount registers;
                 length \<leftarrow> do {
                     v \<leftarrow> return (word_of_int (int v));
                     return (4 * v)
                   };
                 extend_state (if increment then Rn else Rn - length)
                  (do {
                     _ \<leftarrow> if index = increment then do {
                                                      v \<leftarrow> read_state fst;
                                                      v \<leftarrow> return (v + 4);
                                                      update_state (\<lambda>s. (v, snd s))
                                                    }
                          else return ();
                     _ \<leftarrow> for_loop (0, 14, \<lambda>i. if registers !! i
                                                then do {
                                                       _ \<leftarrow> if word_of_int (int i) = n \<and> wback \<and> i \<noteq> LowestSetBit registers then do {
                                           v \<leftarrow> read_state fst;
                                           x \<leftarrow> return (Addr v, 4);
                                           trim_state (write'MemA (HOL.undefined::32 word, x))
                                         }
                                                             else do {
                                                                    v \<leftarrow> read_state fst;
                                                                    x \<leftarrow> return (Addr v, 4);
                                                                    v \<leftarrow> trim_state (R (word_of_int (int i)));
                                                                    v \<leftarrow> return (v, x);
                                                                    trim_state (write'MemA v)
                                                                  };
                                                       v \<leftarrow> read_state fst;
                                                       v \<leftarrow> return (v + 4);
                                                       update_state (\<lambda>s. (v, snd s))
                                                     }
                                                else return ());
                     _ \<leftarrow> if registers !! 15 then do {
                                                     v \<leftarrow> read_state fst;
                                                     x \<leftarrow> return (Addr v, 4);
                                                     v \<leftarrow> trim_state (PCStoreValue ());
                                                     v \<leftarrow> return (v, x);
                                                     trim_state (write'MemA v)
                                                   }
                           else return ();
                     _ \<leftarrow> if wback then trim_state (write'R (if increment then Rn + length else Rn - length, n)) else return ();
                     trim_state (IncPC ())
                   })
               }
     else return ()
   }"



definition
"dfn'StoreMultipleUserRegisters"
  :: "bool \<times> bool \<times> 4 word \<times> 16 word \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'StoreMultipleUserRegisters \<equiv> \<lambda>(increment, wordhigher, n, registers). do {
                                       v \<leftarrow> CurrentModeIsHyp ();
                                       _ \<leftarrow> if v then TakeUndefInstrException () else return ();
                                       v \<leftarrow> CurrentModeIsUserOrSystem ();
                                       _ \<leftarrow> if v then raise'exception (UNPREDICTABLE ''StoreMultipleUserRegisters'') else return ();
                                       v \<leftarrow> BitCount registers;
                                       length \<leftarrow> do {
                                           v \<leftarrow> return (word_of_int (int v));
                                           return (4 * v)
                                         };
                                       v \<leftarrow> if increment then R n else do {
                                                                         v \<leftarrow> R n;
                                                                         return (v - length)
                                                                       };
                                       extend_state v
                                        (do {
                                           _ \<leftarrow> if wordhigher then do {
                                                                      v \<leftarrow> read_state fst;
                                                                      v \<leftarrow> return (v + 4);
                                                                      update_state (\<lambda>s. (v, snd s))
                                                                    }
                                                 else return ();
                                           _ \<leftarrow> for_loop (0, 14, \<lambda>i. if registers !! i then do {
     v \<leftarrow> read_state fst;
     _ \<leftarrow> do {
         x \<leftarrow> return (Addr v, 4);
         v \<leftarrow> trim_state (Rmode (word_of_int (int i), 16));
         v \<leftarrow> return (v, x);
         trim_state (write'MemA v)
       };
     v \<leftarrow> read_state fst;
     v \<leftarrow> return (v + 4);
     update_state (\<lambda>s. (v, snd s))
   }
                                                                      else return ());
                                           _ \<leftarrow> if registers !! 15 then do {
                                                                           v \<leftarrow> read_state fst;
                                                                           x \<leftarrow> return (Addr v, 4);
                                                                           v \<leftarrow> trim_state (PCStoreValue ());
                                                                           v \<leftarrow> return (v, x);
                                                                           trim_state (write'MemA v)
                                                                         }
                                                 else return ();
                                           trim_state (IncPC ())
                                         })
                                     }"



definition
 "dfn'StoreDual"
  :: "bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> offset2 \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"

where
"dfn'StoreDual \<equiv> \<lambda>(add, index, wback, t, t2, n, m). do {
                      b \<leftarrow> NullCheckIfThumbEE n;
                      if b then do {
                                  Rn \<leftarrow> R n;
                                  offset \<leftarrow> case m of immediate_form2 imm32 \<Rightarrow> return imm32 | register_form2 m \<Rightarrow> R m;
                                  let offset_addr = (if add then Rn + offset else Rn - offset);
                                  let address = (if index then offset_addr else Rn);
                                  _ \<leftarrow> do {
                                      v \<leftarrow> R t;
                                      return (v, Addr address, 4) \<bind> write'MemA
                                    };
                                  _ \<leftarrow> do {
                                      v \<leftarrow> R t2;
                                      return (v, Addr (address + 4), 4) \<bind> write'MemA
                                    };
                                  _ \<leftarrow> if wback then write'R (offset_addr, n) else return ();
                                  IncPC ()
                                }
                      else return ()
                    }"




definition
"dfn'StoreExclusive"
  :: "4 word \<times> 4 word \<times> 4 word \<times> 32 word \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'StoreExclusive \<equiv> \<lambda>(d, t, n, imm32). do {
                           b \<leftarrow> NullCheckIfThumbEE n;
                           if b then do {
                                       v \<leftarrow> R n;
                                       address \<leftarrow> return (v + imm32);
                                       _ \<leftarrow> if ExclusiveMonitorsPass (address, 4) then do {
                                                                                          _ \<leftarrow> do {
    v \<leftarrow> R t;
    return (v, Addr address, 4) \<bind> write'MemA
  };
write'R (0, d)
                                                                                        }
                                             else write'R (1, d);
                                       IncPC ()
                                     }
                           else return ()
                         }"




definition
"dfn'StoreExclusiveByte"
  :: "4 word \<times> 4 word \<times> 4 word \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'StoreExclusiveByte \<equiv> \<lambda>(d, t, n). do {
                               b \<leftarrow> NullCheckIfThumbEE n;
                               if b then do {
                                           address \<leftarrow> R n;
                                           _ \<leftarrow> if ExclusiveMonitorsPass (address, 1) then do {
    _ \<leftarrow> do {
        v \<leftarrow> R t;
        do {
          v::8 word \<leftarrow> return (word_extract 7 0 v);
          return (v, Addr address, 1)
        } \<bind> write'MemA
      };
    write'R (0, d)
  }
                                                 else write'R (1, d);
                                           IncPC ()
                                         }
                               else return ()
                             }"


definition
"dfn'StoreExclusiveHalf"
  :: "4 word \<times> 4 word \<times> 4 word \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'StoreExclusiveHalf \<equiv> \<lambda>(d, t, n). do {
                               b \<leftarrow> NullCheckIfThumbEE n;
                               if b then do {
                                           address \<leftarrow> R n;
                                           _ \<leftarrow> if ExclusiveMonitorsPass (address, 2) then do {
    _ \<leftarrow> do {
        v \<leftarrow> R t;
        do {
          v::16 word \<leftarrow> return (word_extract 15 0 v);
          return (v, Addr address, 2)
        } \<bind> write'MemA
      };
    write'R (0, d)
  }
                                                 else write'R (1, d);
                                           IncPC ()
                                         }
                               else return ()
                             }"




definition
"dfn'StoreExclusiveDoubleword"
  :: "4 word \<times> 4 word \<times> 4 word \<times> 4 word \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'StoreExclusiveDoubleword \<equiv> \<lambda>(d, t, t2, n). do {
                                     b \<leftarrow> NullCheckIfThumbEE n;
                                     if b then do {
                                                 address \<leftarrow> R n;
                                                 v \<leftarrow> BigEndian ();
                                                 value \<leftarrow> if v then do {
                                                                      v \<leftarrow> R t;
                                                                      v0 \<leftarrow> R t2;
                                                                      return ((word_cat (v::32 word) (v0::32 word))::64 word)
                                                                    }
                                                          else do {
                                                                 v \<leftarrow> R t2;
                                                                 v0 \<leftarrow> R t;
                                                                 return (word_cat v v0)
                                                               };
                                                 _ \<leftarrow> if ExclusiveMonitorsPass (address, 8) then do {
          _ \<leftarrow> write'MemA (value, Addr address, 8);
          write'R (0, d)
        }
                                                       else write'R (1, d);
                                                 IncPC ()
                                               }
                                     else return ()
                                   }"



ML \<open>
local 
open L3 
in
val () = def
  ("dfn'ClearExclusive",
   call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic}))
end
\<close>




definition
"dfn'Swap"
  :: "bool \<times> 4 word \<times> 4 word \<times> 4 word \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'Swap \<equiv> \<lambda>(b, t, t2, n). do {
                 Rn \<leftarrow> R n;
                 _ \<leftarrow> if b then do {
                                   data::8 word \<leftarrow> MemA (Addr Rn, 1);
                                   _ \<leftarrow> do {
                                       v \<leftarrow> R t2;
                                       do {
                                         v ::8 word\<leftarrow> return (word_extract 7 0 v);
                                         return (v, Addr Rn, 1)
                                       } \<bind> write'MemA
                                     };
                                   write'R ((word_of_int (uint data)::32 word), t)
                                 }
                       else do {
                              data \<leftarrow> MemA (Addr Rn, 4);
                              _ \<leftarrow> do {
                                  v \<leftarrow> R t2;
                                  return (v, Addr Rn, 4) \<bind> write'MemA
                                };
                              v \<leftarrow> ROR (data, 8 * nat (uint ((word_extract 1 0 Rn)::2 word)));
                              return (v, t) \<bind> write'R
                            };
                 IncPC ()
               }"


ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'ChangeProcessorState",
   close
     (tp[var_b"enable",var_b"disable",var_b"affectA",var_b"affectI",var_b"affectF",
         var("changemode",@{typ "5 word option"})],
      mb(call
           ("CurrentModeIsNotUser",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,prev_thy ),
         close
           (var_b"v",
            mb(ite(var_b"v",
                   mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                      close
                        (var("v",@{typ PSR}),
                         mn(var("v",@{typ PSR}),
                            mb(ite(var_b"enable",
                                   mb(ite(var_b"affectA",
                                          mb(mr(close
                                                  (var("s",@{typ "PSR \<times> 'b state_scheme"}),
                                                   mop(Fst,var("s",@{typ "PSR \<times> 'b state_scheme"})))),
                                             close
                                               (var("v",@{typ PSR}),
                                                mb(mb(mu(tp[var("v",@{typ PSR}),lf],
                                                         @{typ "PSR \<times> 'b state_scheme"}),
                                                      close
                                                        (var("v",@{typ "PSR \<times> bool"}),
                                                         mu(rupd
                                                              ("PSR.A",
                                                               var("v",@{typ "PSR \<times> bool"}),
                                                               @{theory ARM_Monadic}),
                                                            @{typ "PSR \<times> 'b state_scheme"}))),
                                                   close
                                                     (var("v",@{typ PSR}),
                                                      mw(close
                                                           (var("s",@{typ "PSR \<times> 'b state_scheme"}),
                                                            tp[var("v",@{typ PSR}),
                                                               mop(Snd,
                                                                   var("s",
                                                                       @{typ "PSR \<times> 'b state_scheme"}))])))))),
                                          mu(lu,@{typ "PSR \<times> 'b state_scheme"})),
                                      close
                                        (var_a HOLogic.unitT,
                                         mb(ite(var_b"affectI",
                                                mb(mr(close
                                                        (var("s",@{typ "PSR \<times> 'b state_scheme"}),
                                                         mop(Fst,
                                                             var("s",@{typ "PSR \<times> 'b state_scheme"})))),
                                                   close
                                                     (var("v",@{typ PSR}),
                                                      mb(mb(mu(tp[var("v",@{typ PSR}),lf],
                                                               @{typ "PSR \<times> 'b state_scheme"}),
                                                            close
                                                              (var("v",@{typ "PSR \<times> bool"}),
                                                               mu(rupd
                                                                    ("PSR.I",
                                                                     var("v",
                                                                         @{typ "PSR \<times> bool"}),
                                                                     @{theory ARM_Monadic}),
                                                                  @{typ "PSR \<times> 'b state_scheme"}))),
                                                         close
                                                           (var("v",@{typ PSR}),
                                                            mw(close
                                                                 (var("s",
                                                                      @{typ "PSR \<times> 'b state_scheme"}),
                                                                  tp[var("v",@{typ PSR}),
                                                                     mop(Snd,
                                                                         var("s",
                                                                             @{typ
                                                                             "PSR \<times> 'b state_scheme"}))])))))),
                                                mu(lu,@{typ "PSR \<times> 'b state_scheme"})),
                                            close
                                              (var_a HOLogic.unitT,
                                               ite(var_b"affectF",
                                                   mb(mr(close
                                                           (var("s",@{typ "PSR \<times> 'b state_scheme"}),
                                                            mop(Fst,
                                                                var("s",@{typ "PSR \<times> 'b state_scheme"})))),
                                                      close
                                                        (var("v",@{typ PSR}),
                                                         mb(mb(mu(tp[var("v",@{typ PSR}),lf],
                                                                  @{typ "PSR \<times> 'b state_scheme"}),
                                                               close
                                                                 (var("v",@{typ "PSR \<times> bool"}),
                                                                  mu(rupd
                                                                       ("PSR.F",
                                                                        var("v",
                                                                            @{typ
                                                                            "PSR \<times> bool"}),
                                                                        @{theory ARM_Monadic}),
                                                                     @{typ "PSR \<times> 'b state_scheme"}))),
                                                            close
                                                              (var("v",@{typ PSR}),
                                                               mw(close
                                                                    (var("s",
                                                                         @{typ "PSR \<times> 'b state_scheme"}),
                                                                     tp[var("v",@{typ PSR}),
                                                                        mop(Snd,
                                                                            var("s",
                                                                                @{typ
                                                                                "PSR \<times> 'b state_scheme"}))])))))),
                                                   mu(lu,@{typ "PSR \<times> 'b state_scheme"})))))),
                                   mu(lu,@{typ "PSR \<times> 'b state_scheme"})),
                               close
                                 (var_a HOLogic.unitT,
                                  mb(ite(var_b"disable",
                                         mb(ite(var_b"affectA",
                                                mb(mr(close
                                                        (var("s",@{typ "PSR \<times> 'b state_scheme"}),
                                                         mop(Fst,
                                                             var("s",@{typ "PSR \<times> 'b state_scheme"})))),
                                                   close
                                                     (var("v",@{typ PSR}),
                                                      mb(mb(mu(tp[var("v",@{typ PSR}),lt],
                                                               @{typ "PSR \<times> 'b state_scheme"}),
                                                            close
                                                              (var("v",@{typ "PSR \<times> bool"}),
                                                               mu(rupd
                                                                    ("PSR.A",
                                                                     var("v",
                                                                         @{typ "PSR \<times> bool"}),
                                                                     @{theory ARM_Monadic}),
                                                                  @{typ "PSR \<times> 'b state_scheme"}))),
                                                         close
                                                           (var("v",@{typ PSR}),
                                                            mw(close
                                                                 (var("s",
                                                                      @{typ "PSR \<times> 'b state_scheme"}),
                                                                  tp[var("v",@{typ PSR}),
                                                                     mop(Snd,
                                                                         var("s",
                                                                             @{typ
                                                                             "PSR \<times> 'b state_scheme"}))])))))),
                                                mu(lu,@{typ "PSR \<times> 'b state_scheme"})),
                                            close
                                              (var_a HOLogic.unitT,
                                               mb(ite(var_b"affectI",
                                                      mb(mr(close
                                                              (var("s",@{typ "PSR \<times> 'b state_scheme"}),
                                                               mop(Fst,
                                                                   var("s",
                                                                       @{typ "PSR \<times> 'b state_scheme"})))),
                                                         close
                                                           (var("v",@{typ PSR}),
                                                            mb(mb(mu(tp[var("v",@{typ PSR}),lt],
                                                                     @{typ "PSR \<times> 'b state_scheme"}),
                                                                  close
                                                                    (var("v",
                                                                         @{typ "PSR \<times> bool"}),
                                                                     mu(rupd
                                                                          ("PSR.I",
                                                                           var("v",
                                                                               @{typ
                                                                               "PSR \<times> bool"}),
                                                                           @{theory ARM_Monadic}),
                                                                        @{typ "PSR \<times> 'b state_scheme"}))),
                                                               close
                                                                 (var("v",@{typ PSR}),
                                                                  mw(close
                                                                       (var("s",
                                                                            @{typ
                                                                            "PSR \<times> 'b state_scheme"}),
                                                                        tp[var("v",@{typ PSR}),
                                                                           mop(Snd,
                                                                               var("s",
                                                                                   @{typ
                                                                                   "PSR \<times>
                                                                                    'b state_scheme"}))])))))),
                                                      mu(lu,@{typ "PSR \<times> 'b state_scheme"})),
                                                  close
                                                    (var_a HOLogic.unitT,
                                                     ite(var_b"affectF",
                                                         mb(mr(close
                                                                 (var("s",
                                                                      @{typ "PSR \<times> 'b state_scheme"}),
                                                                  mop(Fst,
                                                                      var("s",
                                                                          @{typ
                                                                          "PSR \<times> 'b state_scheme"})))),
                                                            close
                                                              (var("v",@{typ PSR}),
                                                               mb(mb(mu(tp[var("v",@{typ PSR}),lt],
                                                                        @{typ "PSR \<times> 'b state_scheme"}),
                                                                     close
                                                                       (var("v",
                                                                            @{typ
                                                                            "PSR \<times> bool"}),
                                                                        mu(rupd
                                                                             ("PSR.F",
                                                                              var("v",
                                                                                  @{typ
                                                                                  "PSR \<times> bool"}),
                                                                              @{theory ARM_Monadic}),
                                                                           @{typ
                                                                           "PSR \<times> 'b state_scheme"}))),
                                                                  close
                                                                    (var("v",@{typ PSR}),
                                                                     mw(close
                                                                          (var("s",
                                                                               @{typ
                                                                               "PSR \<times> 'b state_scheme"}),
                                                                           tp[var("v",@{typ PSR}),
                                                                              mop(Snd,
                                                                                  var("s",
                                                                                      @{typ
                                                                                      "PSR \<times>
                                                                                       'b state_scheme"}))])))))),
                                                         mu(lu,@{typ "PSR \<times> 'b state_scheme"})))))),
                                         mu(lu,@{typ "PSR \<times> 'b state_scheme"})),
                                     close
                                       (var_a HOLogic.unitT,
                                        mb(cs(var("changemode",@{typ "5 word option"}),
                                              [(mop(Some,var_w("mode",5)),
                                                mb(mr(close
                                                        (var("s",@{typ "PSR \<times> 'b state_scheme"}),
                                                         mop(Fst,
                                                             var("s",@{typ "PSR \<times> 'b state_scheme"})))),
                                                   close
                                                     (var("v",@{typ PSR}),
                                                      mb(mb(mu(tp[var("v",@{typ PSR}),
                                                                  var_w("mode",5)],
                                                               @{typ "PSR \<times> 'b state_scheme"}),
                                                            close
                                                              (var("v",@{typ "PSR \<times> 5 word"}),
                                                               mu(rupd
                                                                    ("PSR.M",
                                                                     var("v",
                                                                         @{typ
                                                                         "PSR \<times> 5 word"}),
                                                                     prev_thy ),
                                                                  @{typ "PSR \<times> 'b state_scheme"}))),
                                                         close
                                                           (var("v",@{typ PSR}),
                                                            mw(close
                                                                 (var("s",
                                                                      @{typ "PSR \<times> 'b state_scheme"}),
                                                                  tp[var("v",@{typ PSR}),
                                                                     mop(Snd,
                                                                         var("s",
                                                                             @{typ
                                                                             "PSR \<times> 'b state_scheme"}))]))))))),
                                               (lo (Word_Lib.mk_wordT 5),
                                                mu(lu,@{typ "PSR \<times> 'b state_scheme"}))],@{context}),
                                           close
                                             (var_a HOLogic.unitT,
                                              mb(mr(close
                                                      (var("s",@{typ "PSR \<times> 'b state_scheme"}),
                                                       mop(Fst,var("s",@{typ "PSR \<times> 'b state_scheme"})))),
                                                 close
                                                   (var("v",@{typ PSR}),
                                                    mb(mb(mb(mu(call
                                                                  ("reg'PSR",w32,
                                                                   var("v",@{typ PSR}),prev_thy ),
                                                                @{typ "PSR \<times> 'b state_scheme"}),
                                                             close
                                                               (var_w("v",32),
                                                                mu(tp[var_w("v",32),lw(15,4),lf],
                                                                   @{typ "PSR \<times> 'b state_scheme"}))),
                                                          close
                                                            (var("v",
                                                                 @{typ
                                                                 "32 word \<times>
                                                                  4 word \<times> bool"}),
                                                             md(call
                                                                  ("CPSRWriteByInstr",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (unit \<times> 'b state_scheme)"},
                                                                   var("v",
                                                                       @{typ
                                                                       "32 word \<times>
                                                                        4 word \<times> bool"}),
                                                                   prev_thy ),@{typ PSR}))),
                                                       close
                                                         (var_a HOLogic.unitT,
                                                          mb(mr(close
                                                                  (var("s",
                                                                       @{typ "PSR \<times> 'b state_scheme"}),
                                                                   call
                                                                     ("state.CPSR",@{typ PSR},
                                                                      mop(Snd,
                                                                          var("s",
                                                                              @{typ
                                                                              "PSR \<times> 'b state_scheme"})),
                                                                      prev_thy ))),
                                                             close
                                                               (var("v",@{typ PSR}),
                                                                mb(mb(mb(mu(call
                                                                              ("PSR.M",
                                                                               (Word_Lib.mk_wordT 5),
                                                                               var("v",@{typ PSR}),
                                                                               prev_thy ),
                                                                            @{typ
                                                                            "PSR \<times> 'b state_scheme"}),
                                                                         close
                                                                           (var_w("v",5),
                                                                            mu(eq(var_w("v",5),
                                                                                  lw(26,5)),
                                                                               @{typ
                                                                               "PSR \<times> 'b state_scheme"}))),
                                                                      close
                                                                        (var_b"b",
                                                                         ite(var_b"b",
                                                                             mb(md(call
                                                                                     ("CurrentInstrSet",
                                                                                      @{typ
                                                                                      "'b state_scheme \<Rightarrow>
                                                                                       (InstrSet \<times>
                                                                                        'b state_scheme)"},lu,
                                                                                      @{theory ARM_Monadic}),
                                                                                   @{typ PSR}),
                                                                                close
                                                                                  (var("v",
                                                                                       @{typ InstrSet}),
                                                                                   mu(eq(var("v",
                                                                                             @{typ InstrSet}),
                                                                                         lc("InstrSet_ThumbEE",
                                                                                            "InstrSet",
                                                                                            prev_thy )),
                                                                                      @{typ
                                                                                      "PSR \<times>
                                                                                       'b state_scheme"}))),
                                                                             mu(lf,
                                                                                @{typ
                                                                                "PSR \<times> 'b state_scheme"})))),
                                                                   close
                                                                     (var_b"b",
                                                                      ite(var_b"b",
                                                                          md(call
                                                                               ("raise'exception",
                                                                                @{typ
                                                                                "'b state_scheme \<Rightarrow>
                                                                                 (unit \<times>
                                                                                  'b state_scheme)"},
                                                                                call
                                                                                  ("exception.UNPREDICTABLE",
                                                                                   @{typ exception},
                                                                                   ls
                                                                                    "ChangeProcessorState",
                                                                                   @{theory ARM_Monadic}),
                                                                                @{theory ARM_Monadic}),
                                                                             @{typ PSR}),
                                                                          mu(lu,
                                                                             @{typ
                                                                             "PSR \<times> 'b state_scheme"}))))))))))))))))))),
                   mu(lu,qTy)),
               close
                 (var_a HOLogic.unitT,
                  call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'ExceptionReturn",
   mb(call
        ("CurrentModeIsUserOrSystem",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,prev_thy ),
      close
        (var_b"v",
         mb(ite(var_b"v",mu(lt,qTy),
                mb(call
                     ("CurrentInstrSet",@{typ "'b state_scheme \<Rightarrow> (InstrSet \<times> 'b state_scheme)"},lu,
                      @{theory ARM_Monadic}),
                   close
                     (var("v",@{typ InstrSet}),
                      mu(eq(var("v",@{typ InstrSet}),lc("InstrSet_ThumbEE","InstrSet",prev_thy )),
                         qTy)))),
            close
              (var_b"b",
               ite(var_b"b",
                   call
                     ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                      call("exception.UNPREDICTABLE",@{typ exception},ls"ExceptionReturn",@{theory ARM_Monadic}),
                      @{theory ARM_Monadic}),
                   mb(call
                        ("CurrentModeIsHyp",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                         prev_thy ),
                      close
                        (var_b"v",
                         mb(ite(var_b"v",
                                mr(close
                                     (var("s",qTy),call("state.ELR_hyp",w32,var("s",qTy),prev_thy ))),
                                call
                                  ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},
                                   lw(14,4),@{theory ARM_Monadic})),
                            close
                              (var_w("new_pc_value",32),
                               mb(const
                                    ("SPSR",@{typ "'b state_scheme \<Rightarrow> (PSR \<times> 'b state_scheme)"},
                                    prev_thy ),
                                  close
                                    (var("v",@{typ PSR}),
                                     mb(mb(mb(mu(call("reg'PSR",w32,var("v",@{typ PSR}),prev_thy ),
                                                 qTy),
                                              close
                                                (var_w("v",32),mu(tp[var_w("v",32),lw(15,4),lt],qTy))),
                                           close
                                             (var("v",@{typ "32 word \<times> 4 word \<times> bool"}),
                                              call
                                                ("CPSRWriteByInstr",
                                                 @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                 var("v",
                                                     @{typ "32 word \<times> 4 word \<times> bool"}),
                                                 prev_thy ))),
                                        close
                                          (var_a HOLogic.unitT,
                                           mb(mr(close
                                                   (var("s",qTy),
                                                    call
                                                      ("state.CPSR",@{typ PSR},var("s",qTy),
                                                       prev_thy ))),
                                              close
                                                (var("v",@{typ PSR}),
                                                 mb(mb(mb(mu(call
                                                               ("PSR.M",(Word_Lib.mk_wordT 5),
                                                                var("v",@{typ PSR}),prev_thy ),qTy),
                                                          close
                                                            (var_w("v",5),
                                                             mu(eq(var_w("v",5),lw(26,5)),qTy))),
                                                       close
                                                         (var_b"b",
                                                          ite(var_b"b",
                                                              mb(call
                                                                   ("CurrentInstrSet",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (InstrSet \<times> 'b state_scheme)"},lu,
                                                                    @{theory ARM_Monadic}),
                                                                 close
                                                                   (var("v",@{typ InstrSet}),
                                                                    mu(eq(var("v",@{typ InstrSet}),
                                                                          lc("InstrSet_ThumbEE",
                                                                             "InstrSet",prev_thy)),
                                                                       qTy))),mu(lf,qTy)))),
                                                    close
                                                      (var_b"b",
                                                       ite(var_b"b",
                                                           call
                                                             ("raise'exception",
                                                              @{typ
                                                              "'b state_scheme \<Rightarrow>
                                                               (unit \<times> 'b state_scheme)"},
                                                              call
                                                                ("exception.UNPREDICTABLE",
                                                                 @{typ exception},
                                                                 ls"ExceptionReturn",@{theory ARM_Monadic}),
                                                              @{theory ARM_Monadic}),
                                                           call
                                                             ("BranchWritePC",
                                                              @{typ
                                                              "'b state_scheme \<Rightarrow>
                                                               (unit \<times> 'b state_scheme)"},
                                                              var_w("new_pc_value",32),@{theory  ARM_Monadic}))))))))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'HypervisorCall",
   close
     (var_w("imm16",16),
      mb(call("HaveVirtExt",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,prev_thy ),
         close
           (var_b"v",
            mb(mb(mu(mop(Not,var_b"v"),qTy),
                  close
                    (var_b"b",
                     ite(var_b"b",mu(lt,qTy),
                         mb(call
                              ("IsSecure",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                               prev_thy ),
                            close
                              (var_b"b",
                               ite(var_b"b",mu(lt,qTy),
                                   mb(call
                                        ("CurrentModeIsNotUser",
                                         @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                         prev_thy),close(var_b"v",mu(mop(Not,var_b"v"),qTy))))))))),
               close
                 (var_b"b",
                  ite(var_b"b",
                      call
                        ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                         call
                           ("exception.UNPREDICTABLE",@{typ exception},ls"HypervisorCall",@{theory ARM_Monadic}),
                         @{theory ARM_Monadic}),
                      mb(mr(close
                              (var("s",qTy),call("state.CP15",@{typ CP15},var("s",qTy),@{theory ARM_Monadic}))),
                         close
                           (var("v",@{typ CP15}),
                            mb(mb(mb(mu(call("CP15.SCR",@{typ SCR},var("v",@{typ CP15}),@{theory ARM_Monadic}),
                                        qTy),
                                     close
                                       (var("v",@{typ SCR}),
                                        mu(call
                                             ("SCR.HCE",HOLogic.boolT,var("v",@{typ SCR}),prev_thy ),
                                           qTy))),close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                               close
                                 (var_b"b",
                                  ite(var_b"b",
                                      mb(call
                                           ("CurrentModeIsHyp",
                                            @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                            prev_thy ),
                                         close
                                           (var_b"b",
                                            ite(var_b"b",
                                                call
                                                  ("raise'exception",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                   call
                                                     ("exception.UNPREDICTABLE",@{typ exception},
                                                      ls"HypervisorCall",@{theory ARM_Monadic}),@{theory ARM_Monadic}),
                                                call
                                                  ("TakeUndefInstrException",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,
                                                   @{theory})))),
                                      call
                                        ("CallHypervisor",
                                         @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                         var_w("imm16",16),@{theory})))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'MoveToRegisterFromSpecial",
   close
     (tp[var_b"read_spsr",var_w("d",4)],
      mb(ite(var_b"read_spsr",
             mb(call
                  ("CurrentModeIsUserOrSystem",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                   lu,prev_thy ),
                close
                  (var_b"b",
                   ite(var_b"b",
                       call
                         ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                          call
                            ("exception.UNPREDICTABLE",@{typ exception},
                             ls"MoveToRegisterFromSpecial",@{theory ARM_Monadic}),@{theory ARM_Monadic}),
                       mb(const("SPSR",@{typ "'b state_scheme \<Rightarrow> (PSR \<times> 'b state_scheme)"},prev_thy ),
                          close
                            (var("v",@{typ PSR}),
                             mb(mb(mu(call("reg'PSR",w32,var("v",@{typ PSR}),prev_thy ),qTy),
                                   close(var_w("v",32),mu(tp[var_w("v",32),var_w("d",4)],qTy))),
                                close
                                  (var("v",@{typ "32 word \<times> 4 word"}),
                                   call
                                     ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                      var("v",@{typ "32 word \<times> 4 word"}),prev_thy )))))))),
             mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                close
                  (var("v",@{typ PSR}),
                   mb(mb(mb(mu(call("reg'PSR",w32,var("v",@{typ PSR}),prev_thy ),qTy),
                            close(var_w("v",32),mu(bop(BAnd,var_w("v",32),lw(4177462239,32)),qTy))),
                         close(var_w("v",32),mu(tp[var_w("v",32),var_w("d",4)],qTy))),
                      close
                        (var("v",@{typ "32 word \<times> 4 word"}),
                         call
                           ("write'R",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "32 word \<times> 4 word"}),prev_thy )))))),
         close
           (var_a HOLogic.unitT,
            call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'MoveToRegisterFromBankedOrSpecial",
   close
     (tp[var_b"read_spsr",var_w("SYSm",5),var_w("d",4)],
      mb(call
           ("CurrentModeIsNotUser",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,prev_thy ),
         close
           (var_b"v",
            mb(mu(mop(Not,var_b"v"),qTy),
               close
                 (var_b"b",
                  ite(var_b"b",
                      call
                        ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                         call
                           ("exception.UNPREDICTABLE",@{typ exception},
                            ls"MoveToRegisterFromBankedOrSpecial",@{theory ARM_Monadic}),@{theory ARM_Monadic}),
                      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                         close
                           (var("v",@{typ PSR}),
                            mb(mu(call("PSR.M",(Word_Lib.mk_wordT 5),var("v",@{typ PSR}),prev_thy ),
                                  qTy),
                               close
                                 (var_w("mode",5),
                                  mb(ite(var_b"read_spsr",
                                         mb(call
                                              ("SPSRAccessValid",
                                               @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                               tp[var_w("SYSm",5),var_w("mode",5)],@{theory}),
                                            close
                                              (var_u"_0",
                                               itb([(eq(var_w("SYSm",5),lw(14,5)),
                                                     mb(mr(close
                                                             (var("s",qTy),
                                                              call
                                                                ("state.SPSR_fiq",@{typ PSR},
                                                                 var("s",qTy),prev_thy ))),
                                                        close
                                                          (var("v",@{typ PSR}),
                                                           mb(mb(mu(call
                                                                      ("reg'PSR",w32,
                                                                       var("v",@{typ PSR}),prev_thy ),
                                                                    qTy),
                                                                 close
                                                                   (var_w("v",32),
                                                                    mu(tp[var_w("v",32),var_w("d",4)],
                                                                       qTy))),
                                                              close
                                                                (var("v",
                                                                     @{typ
                                                                     "32 word \<times> 4 word"}),
                                                                 call
                                                                   ("write'R",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (unit \<times> 'b state_scheme)"},
                                                                    var("v",
                                                                        @{typ
                                                                        "32 word \<times> 4 word"}),
                                                                    prev_thy )))))),
                                                    (eq(var_w("SYSm",5),lw(16,5)),
                                                     mb(mr(close
                                                             (var("s",qTy),
                                                              call
                                                                ("state.SPSR_irq",@{typ PSR},
                                                                 var("s",qTy),prev_thy ))),
                                                        close
                                                          (var("v",@{typ PSR}),
                                                           mb(mb(mu(call
                                                                      ("reg'PSR",w32,
                                                                       var("v",@{typ PSR}),prev_thy ),
                                                                    qTy),
                                                                 close
                                                                   (var_w("v",32),
                                                                    mu(tp[var_w("v",32),var_w("d",4)],
                                                                       qTy))),
                                                              close
                                                                (var("v",
                                                                     @{typ
                                                                     "32 word \<times> 4 word"}),
                                                                 call
                                                                   ("write'R",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (unit \<times> 'b state_scheme)"},
                                                                    var("v",
                                                                        @{typ
                                                                        "32 word \<times> 4 word"}),
                                                                    prev_thy )))))),
                                                    (eq(var_w("SYSm",5),lw(18,5)),
                                                     mb(mr(close
                                                             (var("s",qTy),
                                                              call
                                                                ("state.SPSR_svc",@{typ PSR},
                                                                 var("s",qTy),prev_thy ))),
                                                        close
                                                          (var("v",@{typ PSR}),
                                                           mb(mb(mu(call
                                                                      ("reg'PSR",w32,
                                                                       var("v",@{typ PSR}),prev_thy ),
                                                                    qTy),
                                                                 close
                                                                   (var_w("v",32),
                                                                    mu(tp[var_w("v",32),var_w("d",4)],
                                                                       qTy))),
                                                              close
                                                                (var("v",
                                                                     @{typ
                                                                     "32 word \<times> 4 word"}),
                                                                 call
                                                                   ("write'R",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (unit \<times> 'b state_scheme)"},
                                                                    var("v",
                                                                        @{typ
                                                                        "32 word \<times> 4 word"}),
                                                                    prev_thy )))))),
                                                    (eq(var_w("SYSm",5),lw(20,5)),
                                                     mb(mr(close
                                                             (var("s",qTy),
                                                              call
                                                                ("state.SPSR_abt",@{typ PSR},
                                                                 var("s",qTy),prev_thy ))),
                                                        close
                                                          (var("v",@{typ PSR}),
                                                           mb(mb(mu(call
                                                                      ("reg'PSR",w32,
                                                                       var("v",@{typ PSR}),prev_thy ),
                                                                    qTy),
                                                                 close
                                                                   (var_w("v",32),
                                                                    mu(tp[var_w("v",32),var_w("d",4)],
                                                                       qTy))),
                                                              close
                                                                (var("v",
                                                                     @{typ
                                                                     "32 word \<times> 4 word"}),
                                                                 call
                                                                   ("write'R",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (unit \<times> 'b state_scheme)"},
                                                                    var("v",
                                                                        @{typ
                                                                        "32 word \<times> 4 word"}),
                                                                    prev_thy )))))),
                                                    (eq(var_w("SYSm",5),lw(22,5)),
                                                     mb(mr(close
                                                             (var("s",qTy),
                                                              call
                                                                ("state.SPSR_und",@{typ PSR},
                                                                 var("s",qTy),prev_thy ))),
                                                        close
                                                          (var("v",@{typ PSR}),
                                                           mb(mb(mu(call
                                                                      ("reg'PSR",w32,
                                                                       var("v",@{typ PSR}),prev_thy ),
                                                                    qTy),
                                                                 close
                                                                   (var_w("v",32),
                                                                    mu(tp[var_w("v",32),var_w("d",4)],
                                                                       qTy))),
                                                              close
                                                                (var("v",
                                                                     @{typ
                                                                     "32 word \<times> 4 word"}),
                                                                 call
                                                                   ("write'R",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (unit \<times> 'b state_scheme)"},
                                                                    var("v",
                                                                        @{typ
                                                                        "32 word \<times> 4 word"}),
                                                                    prev_thy )))))),
                                                    (eq(var_w("SYSm",5),lw(28,5)),
                                                     mb(mr(close
                                                             (var("s",qTy),
                                                              call
                                                                ("state.SPSR_mon",@{typ PSR},
                                                                 var("s",qTy),prev_thy ))),
                                                        close
                                                          (var("v",@{typ PSR}),
                                                           mb(mb(mu(call
                                                                      ("reg'PSR",w32,
                                                                       var("v",@{typ PSR}),prev_thy ),
                                                                    qTy),
                                                                 close
                                                                   (var_w("v",32),
                                                                    mu(tp[var_w("v",32),var_w("d",4)],
                                                                       qTy))),
                                                              close
                                                                (var("v",
                                                                     @{typ
                                                                     "32 word \<times> 4 word"}),
                                                                 call
                                                                   ("write'R",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (unit \<times> 'b state_scheme)"},
                                                                    var("v",
                                                                        @{typ
                                                                        "32 word \<times> 4 word"}),
                                                                    prev_thy )))))),
                                                    (eq(var_w("SYSm",5),lw(30,5)),
                                                     mb(mr(close
                                                             (var("s",qTy),
                                                              call
                                                                ("state.SPSR_hyp",@{typ PSR},
                                                                 var("s",qTy),prev_thy ))),
                                                        close
                                                          (var("v",@{typ PSR}),
                                                           mb(mb(mu(call
                                                                      ("reg'PSR",w32,
                                                                       var("v",@{typ PSR}),prev_thy ),
                                                                    qTy),
                                                                 close
                                                                   (var_w("v",32),
                                                                    mu(tp[var_w("v",32),var_w("d",4)],
                                                                       qTy))),
                                                              close
                                                                (var("v",
                                                                     @{typ
                                                                     "32 word \<times> 4 word"}),
                                                                 call
                                                                   ("write'R",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (unit \<times> 'b state_scheme)"},
                                                                    var("v",
                                                                        @{typ
                                                                        "32 word \<times> 4 word"}),
                                                                    prev_thy ))))))],mu(lu,qTy)))),
                                         mb(call
                                              ("BankedRegisterAccessValid",
                                               @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                               tp[var_w("SYSm",5),var_w("mode",5)],@{theory}),
                                            close
                                              (var_a HOLogic.unitT,
                                               itb([(eq(ex(var_w("SYSm",5),ln 4,ln 3,
                                                           (Word_Lib.mk_wordT 2)),lw(0,2)),
                                                     mb(call
                                                          ("Rmode",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (32 word \<times> 'b state_scheme)"},
                                                           tp[bop(Add,
                                                                  mop(Cast w4,
                                                                      ex(var_w("SYSm",5),ln 2,ln 0,
                                                                         (Word_Lib.mk_wordT 3))),
                                                                  lw(8,4)),lw(16,5)],prev_thy ),
                                                        close
                                                          (var_w("v",32),
                                                           mb(mu(tp[var_w("v",32),var_w("d",4)],qTy),
                                                              close
                                                                (var("v",
                                                                     @{typ
                                                                     "32 word \<times> 4 word"}),
                                                                 call
                                                                   ("write'R",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (unit \<times> 'b state_scheme)"},
                                                                    var("v",
                                                                        @{typ
                                                                        "32 word \<times> 4 word"}),
                                                                    prev_thy )))))),
                                                    (eq(ex(var_w("SYSm",5),ln 4,ln 3,
                                                           (Word_Lib.mk_wordT 2)),lw(1,2)),
                                                     mb(call
                                                          ("Rmode",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (32 word \<times> 'b state_scheme)"},
                                                           tp[bop(Add,
                                                                  mop(Cast w4,
                                                                      ex(var_w("SYSm",5),ln 2,ln 0,
                                                                         (Word_Lib.mk_wordT 3))),
                                                                  lw(8,4)),lw(17,5)],prev_thy ),
                                                        close
                                                          (var_w("v",32),
                                                           mb(mu(tp[var_w("v",32),var_w("d",4)],qTy),
                                                              close
                                                                (var("v",
                                                                     @{typ
                                                                     "32 word \<times> 4 word"}),
                                                                 call
                                                                   ("write'R",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (unit \<times> 'b state_scheme)"},
                                                                    var("v",
                                                                        @{typ
                                                                        "32 word \<times> 4 word"}),
                                                                    prev_thy )))))),
                                                    (eq(ex(var_w("SYSm",5),ln 4,ln 3,
                                                           (Word_Lib.mk_wordT 2)),lw(3,2)),
                                                     itb([(mop(Not,bop(Bit,var_w("SYSm",5),ln 1)),
                                                           mb(call
                                                                ("Rmode",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (32 word \<times> 'b state_scheme)"},
                                                                 tp[bop(Sub,lw(14,4),
                                                                        mop(Cast w4,
                                                                            bop(Bit,var_w("SYSm",5),
                                                                                ln 0))),lw(22,5)],
                                                                 prev_thy ),
                                                              close
                                                                (var_w("v",32),
                                                                 mb(mu(tp[var_w("v",32),var_w("d",4)],
                                                                       qTy),
                                                                    close
                                                                      (var("v",
                                                                           @{typ
                                                                           "32 word \<times> 4 word"}),
                                                                       call
                                                                         ("write'R",
                                                                          @{typ
                                                                          "'b state_scheme \<Rightarrow>
                                                                           (unit \<times> 'b state_scheme)"},
                                                                          var("v",
                                                                              @{typ
                                                                              "32 word \<times>
                                                                               4 word"}),prev_thy )))))),
                                                          (bop(Bit,var_w("SYSm",5),ln 0),
                                                           mb(call
                                                                ("Rmode",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (32 word \<times> 'b state_scheme)"},
                                                                 tp[lw(13,4),lw(26,5)],prev_thy ),
                                                              close
                                                                (var_w("v",32),
                                                                 mb(mu(tp[var_w("v",32),var_w("d",4)],
                                                                       qTy),
                                                                    close
                                                                      (var("v",
                                                                           @{typ
                                                                           "32 word \<times> 4 word"}),
                                                                       call
                                                                         ("write'R",
                                                                          @{typ
                                                                          "'b state_scheme \<Rightarrow>
                                                                           (unit \<times> 'b state_scheme)"},
                                                                          var("v",
                                                                              @{typ
                                                                              "32 word \<times>
                                                                               4 word"}),prev_thy ))))))],
                                                         mb(mr(close
                                                                 (var("s",qTy),
                                                                  call
                                                                    ("state.ELR_hyp",w32,
                                                                     var("s",qTy),prev_thy ))),
                                                            close
                                                              (var_w("v",32),
                                                               mb(mu(tp[var_w("v",32),var_w("d",4)],
                                                                     qTy),
                                                                  close
                                                                    (var("v",
                                                                         @{typ
                                                                         "32 word \<times> 4 word"}),
                                                                     call
                                                                       ("write'R",
                                                                        @{typ
                                                                        "'b state_scheme \<Rightarrow>
                                                                         (unit \<times> 'b state_scheme)"},
                                                                        var("v",
                                                                            @{typ
                                                                            "32 word \<times> 4 word"}),
                                                                        prev_thy )))))))],
                                                   mn(lx (Word_Lib.mk_wordT 5),
                                                      mb(mr(close
                                                              (var("s",
                                                                   @{typ "5 word \<times> 'b state_scheme"}),
                                                               mop(Fst,
                                                                   var("s",
                                                                       @{typ
                                                                       "5 word \<times> 'b state_scheme"})))),
                                                         close
                                                           (var_w("v",5),
                                                            mb(mb(mu(bfi(ln 0,ln 0,
                                                                         mop(Cast w1,
                                                                             bop(Or,
                                                                                 bop(Bit,
                                                                                     var_w("SYSm",5),
                                                                                     ln 2),
                                                                                 bop(Bit,
                                                                                     var_w("SYSm",5),
                                                                                     ln 1))),
                                                                         var_w("v",5)),
                                                                     @{typ "5 word \<times> 'b state_scheme"}),
                                                                  close
                                                                    (var_w("v",5),
                                                                     mw(close
                                                                          (var("s",
                                                                               @{typ
                                                                               "5 word \<times>
                                                                                'b state_scheme"}),
                                                                           tp[var_w("v",5),
                                                                              mop(Snd,
                                                                                  var("s",
                                                                                      @{typ
                                                                                      "5 word \<times>
                                                                                       'b state_scheme"}))])))),
                                                               close
                                                                 (var_a HOLogic.unitT,
                                                                  mb(mr(close
                                                                          (var("s",
                                                                               @{typ
                                                                               "5 word \<times>
                                                                                'b state_scheme"}),
                                                                           mop(Fst,
                                                                               var("s",
                                                                                   @{typ
                                                                                   "5 word \<times>
                                                                                    'b state_scheme"})))),
                                                                     close
                                                                       (var_w("v",5),
                                                                        mb(mb(mu(bfi(ln 1,ln 1,
                                                                                     mop(Cast w1,lt),
                                                                                     var_w("v",5)),
                                                                                 @{typ
                                                                                 "5 word \<times>
                                                                                  'b state_scheme"}),
                                                                              close
                                                                                (var_w("v",5),
                                                                                 mw(close
                                                                                      (var("s",
                                                                                           @{typ
                                                                                           "5 word \<times>
                                                                                            'b state_scheme"}),
                                                                                       tp[var_w("v",5),
                                                                                          mop(Snd,
                                                                                              var("s",
                                                                                                  @{typ
                                                                                                  "5 word \<times>
                                                                                                   'b state_scheme"}))])))),
                                                                           close
                                                                             (var_a HOLogic.unitT,
                                                                              mb(mr(close
                                                                                      (var("s",
                                                                                           @{typ
                                                                                           "5 word \<times>
                                                                                            'b state_scheme"}),
                                                                                       mop(Fst,
                                                                                           var("s",
                                                                                               @{typ
                                                                                               "5 word \<times>
                                                                                                'b state_scheme"})))),
                                                                                 close
                                                                                   (var_w("v",5),
                                                                                    mb(mb(mu(bfi(ln
                                                                                                  2,
                                                                                                 ln
                                                                                                  2,
                                                                                                 mop(Cast
                                                                                                       w1,
                                                                                                     bop(And,
                                                                                                         bop(Bit,
                                                                                                             var_w("SYSm",5),
                                                                                                             ln
                                                                                                              2),
                                                                                                         mop(Not,
                                                                                                             bop(Bit,
                                                                                                                 var_w("SYSm",5),
                                                                                                                 ln
                                                                                                                  1)))),
                                                                                                 var_w("v",5)),
                                                                                             @{typ
                                                                                             "5 word \<times>
                                                                                              'b state_scheme"}),
                                                                                          close
                                                                                            (var_w("v",5),
                                                                                             mw(close
                                                                                                  (var("s",
                                                                                                       @{typ
                                                                                                       "5 word \<times>
                                                                                                        'b state_scheme"}),
                                                                                                   tp[var_w("v",5),
                                                                                                      mop(Snd,
                                                                                                          var("s",
                                                                                                              @{typ
                                                                                                              "5 word \<times>
                                                                                                               'b state_scheme"}))])))),
                                                                                       close
                                                                                         (var_a
                                                                                            HOLogic.unitT,
                                                                                          mb(mr(close
                                                                                                  (var("s",
                                                                                                       @{typ
                                                                                                       "5 word \<times>
                                                                                                        'b state_scheme"}),
                                                                                                   mop(Fst,
                                                                                                       var("s",
                                                                                                           @{typ
                                                                                                           "5 word \<times>
                                                                                                            'b state_scheme"})))),
                                                                                             close
                                                                                               (var_w("v",5),
                                                                                                mb(mb(mu(bfi(ln
                                                                                                              3,
                                                                                                             ln
                                                                                                              3,
                                                                                                             mop(Cast
                                                                                                                   w1,
                                                                                                                 bop(And,
                                                                                                                     bop(Bit,
                                                                                                                         var_w("SYSm",5),
                                                                                                                         ln
                                                                                                                          2),
                                                                                                                     bop(Bit,
                                                                                                                         var_w("SYSm",5),
                                                                                                                         ln
                                                                                                                          1))),
                                                                                                             var_w("v",5)),
                                                                                                         @{typ
                                                                                                         "5 word \<times>
                                                                                                          'b state_scheme"}),
                                                                                                      close
                                                                                                        (var_w("v",5),
                                                                                                         mw(close
                                                                                                              (var("s",
                                                                                                                   @{typ
                                                                                                                   "5 word \<times>
                                                                                                                    'b state_scheme"}),
                                                                                                               tp[var_w("v",5),
                                                                                                                  mop(Snd,
                                                                                                                      var("s",
                                                                                                                          @{typ
                                                                                                                          "5 word \<times>
                                                                                                                           'b state_scheme"}))])))),
                                                                                                   close
                                                                                                     (var_a
                                                                                                        HOLogic.unitT,
                                                                                                      mb(mr(close
                                                                                                              (var("s",
                                                                                                                   @{typ
                                                                                                                   "5 word \<times>
                                                                                                                    'b state_scheme"}),
                                                                                                               mop(Fst,
                                                                                                                   var("s",
                                                                                                                       @{typ
                                                                                                                       "5 word \<times>
                                                                                                                        'b state_scheme"})))),
                                                                                                         close
                                                                                                           (var_w("v",5),
                                                                                                            mb(mb(mu(bfi(ln
                                                                                                                          4,
                                                                                                                         ln
                                                                                                                          4,
                                                                                                                         mop(Cast
                                                                                                                               w1,
                                                                                                                             lt),
                                                                                                                         var_w("v",5)),
                                                                                                                     @{typ
                                                                                                                     "5 word \<times>
                                                                                                                      'b state_scheme"}),
                                                                                                                  close
                                                                                                                    (var_w("v",5),
                                                                                                                     mw(close
                                                                                                                          (var("s",
                                                                                                                               @{typ
                                                                                                                               "5 word \<times>
                                                                                                                                'b state_scheme"}),
                                                                                                                           tp[var_w("v",5),
                                                                                                                              mop(Snd,
                                                                                                                                  var("s",
                                                                                                                                      @{typ
                                                                                                                                      "5 word \<times>
                                                                                                                                       'b state_scheme"}))])))),
                                                                                                               close
                                                                                                                 (var_a
                                                                                                                    HOLogic.unitT,
                                                                                                                  mb(mr(close
                                                                                                                          (var("s",
                                                                                                                               @{typ
                                                                                                                               "5 word \<times>
                                                                                                                                'b state_scheme"}),
                                                                                                                           mop(Fst,
                                                                                                                               var("s",
                                                                                                                                   @{typ
                                                                                                                                   "5 word \<times>
                                                                                                                                    'b state_scheme"})))),
                                                                                                                     close
                                                                                                                       (var_w("v",5),
                                                                                                                        mb(mu(eq(var_w("mode",5),
                                                                                                                                 var_w("v",5)),
                                                                                                                              @{typ
                                                                                                                              "5 word \<times>
                                                                                                                               'b state_scheme"}),
                                                                                                                           close
                                                                                                                             (var_b"b",
                                                                                                                              ite(var_b"b",
                                                                                                                                  md(call
                                                                                                                                       ("raise'exception",
                                                                                                                                        @{typ
                                                                                                                                        "'b state_scheme \<Rightarrow>
                                                                                                                                         (unit \<times>
                                                                                                                                          'b state_scheme)"},
                                                                                                                                        call
                                                                                                                                          ("exception.UNPREDICTABLE",
                                                                                                                                           @{typ exception},
                                                                                                                                           ls
                                                                                                                                            "MoveToRegisterFromBankedOrSpecial",
                                                                                                                                           @{theory ARM_Monadic}),
                                                                                                                                        @{theory ARM_Monadic}),
                                                                                                                                     (Word_Lib.mk_wordT 5)),
                                                                                                                                  mb(mr(close
                                                                                                                                          (var("s",
                                                                                                                                               @{typ
                                                                                                                                               "5 word \<times>
                                                                                                                                                'b state_scheme"}),
                                                                                                                                           mop(Fst,
                                                                                                                                               var("s",
                                                                                                                                                   @{typ
                                                                                                                                                   "5 word \<times>
                                                                                                                                                    'b state_scheme"})))),
                                                                                                                                     close
                                                                                                                                       (var_w("v",5),
                                                                                                                                        mb(mb(mb(mu(tp[bop(Sub,
                                                                                                                                                           lw(14,
                                                                                                                                                              4),
                                                                                                                                                           mop(Cast
                                                                                                                                                                 w4,
                                                                                                                                                               bop(Bit,
                                                                                                                                                                   var_w("SYSm",5),
                                                                                                                                                                   ln
                                                                                                                                                                    0))),
                                                                                                                                                       var_w("v",5)],
                                                                                                                                                    @{typ
                                                                                                                                                    "5 word \<times>
                                                                                                                                                     'b state_scheme"}),
                                                                                                                                                 close
                                                                                                                                                   (var("v",
                                                                                                                                                        @{typ
                                                                                                                                                        "4 word \<times>
                                                                                                                                                         5 word"}),
                                                                                                                                                    md(call
                                                                                                                                                         ("Rmode",
                                                                                                                                                          @{typ
                                                                                                                                                          "'b state_scheme \<Rightarrow>
                                                                                                                                                           (32 word \<times>
                                                                                                                                                            'b state_scheme)"},
                                                                                                                                                          var("v",
                                                                                                                                                              @{typ
                                                                                                                                                              "4 word \<times>
                                                                                                                                                               5 word"}),
                                                                                                                                                          prev_thy ),
                                                                                                                                                       (Word_Lib.mk_wordT 5)))),
                                                                                                                                              close
                                                                                                                                                (var_w("v",32),
                                                                                                                                                 mu(tp[var_w("v",32),
                                                                                                                                                       var_w("d",4)],
                                                                                                                                                    @{typ
                                                                                                                                                    "5 word \<times>
                                                                                                                                                     'b state_scheme"}))),
                                                                                                                                           close
                                                                                                                                             (var("v",
                                                                                                                                                  @{typ
                                                                                                                                                  "32 word \<times>
                                                                                                                                                   4 word"}),
                                                                                                                                              md(call
                                                                                                                                                   ("write'R",
                                                                                                                                                    @{typ
                                                                                                                                                    "'b state_scheme \<Rightarrow>
                                                                                                                                                     (unit \<times>
                                                                                                                                                      'b state_scheme)"},
                                                                                                                                                    var("v",
                                                                                                                                                        @{typ
                                                                                                                                                        "32 word \<times>
                                                                                                                                                         4 word"}),
                                                                                                                                                    prev_thy ),
                                                                                                                                                 (Word_Lib.mk_wordT 5)))))))))))))))))))))))))))))))))))),
                                     close
                                       (var_a HOLogic.unitT,
                                        call
                                          ("IncPC",
                                           @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,
                                           prev_thy ))))))))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'MoveToSpecialFromImmediate",
   close
     (tp[var_b"write_spsr",var_w("imm32",32),var_w("mask",4)],
      mb(ite(var_b"write_spsr",
             call
               ("SPSRWriteByInstr",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                tp[var_w("imm32",32),var_w("mask",4)],prev_thy ),
             mb(call
                  ("CPSRWriteByInstr",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                   tp[var_w("imm32",32),var_w("mask",4),lf],prev_thy ),
                close
                  (var_a HOLogic.unitT,
                   mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                      close
                        (var("v",@{typ PSR}),
                         mb(mb(mb(mu(call
                                       ("PSR.M",(Word_Lib.mk_wordT 5),var("v",@{typ PSR}),prev_thy ),
                                     qTy),close(var_w("v",5),mu(eq(var_w("v",5),lw(26,5)),qTy))),
                               close
                                 (var_b"b",
                                  ite(var_b"b",
                                      mb(call
                                           ("CurrentInstrSet",
                                            @{typ "'b state_scheme \<Rightarrow> (InstrSet \<times> 'b state_scheme)"},
                                            lu,@{theory ARM_Monadic}),
                                         close
                                           (var("v",@{typ InstrSet}),
                                            mu(eq(var("v",@{typ InstrSet}),
                                                  lc("InstrSet_ThumbEE","InstrSet",prev_thy)),qTy))),
                                      mu(lf,qTy)))),
                            close
                              (var_b"b",
                               ite(var_b"b",
                                   call
                                     ("raise'exception",
                                      @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                      call
                                        ("exception.UNPREDICTABLE",@{typ exception},
                                         ls"MoveToSpecialFromImmediate",@{theory ARM_Monadic}),@{theory ARM_Monadic}),
                                   mu(lu,qTy))))))))),
         close
           (var_a HOLogic.unitT,
            call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'MoveToSpecialFromRegister",
   close
     (tp[var_b"write_spsr",var_w("n",4),var_w("mask",4)],
      mb(ite(var_b"write_spsr",
             mb(call
                  ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
                close
                  (var_w("v",32),
                   mb(mu(tp[var_w("v",32),var_w("mask",4)],qTy),
                      close
                        (var("v",@{typ "32 word \<times> 4 word"}),
                         call
                           ("SPSRWriteByInstr",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                            var("v",@{typ "32 word \<times> 4 word"}),prev_thy ))))),
             mb(call
                  ("R",@{typ "'b state_scheme \<Rightarrow> (32 word \<times> 'b state_scheme)"},var_w("n",4),@{theory ARM_Monadic}),
                close
                  (var_w("v",32),
                   mb(mb(mu(tp[var_w("v",32),var_w("mask",4),lf],qTy),
                         close
                           (var("v",@{typ "32 word \<times> 4 word \<times> bool"}),
                            call
                              ("CPSRWriteByInstr",
                               @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                               var("v",@{typ "32 word \<times> 4 word \<times> bool"}),prev_thy ))),
                      close
                        (var_a HOLogic.unitT,
                         mb(mr(close
                                 (var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                            close
                              (var("v",@{typ PSR}),
                               mb(mb(mb(mu(call
                                             ("PSR.M",(Word_Lib.mk_wordT 5),var("v",@{typ PSR}),
                                              prev_thy ),qTy),
                                        close(var_w("v",5),mu(eq(var_w("v",5),lw(26,5)),qTy))),
                                     close
                                       (var_b"b",
                                        ite(var_b"b",
                                            mb(call
                                                 ("CurrentInstrSet",
                                                  @{typ
                                                  "'b state_scheme \<Rightarrow> (InstrSet \<times> 'b state_scheme)"},
                                                  lu,@{theory ARM_Monadic}),
                                               close
                                                 (var("v",@{typ InstrSet}),
                                                  mu(eq(var("v",@{typ InstrSet}),
                                                        lc("InstrSet_ThumbEE","InstrSet",prev_thy)),
                                                     qTy))),mu(lf,qTy)))),
                                  close
                                    (var_b"b",
                                     ite(var_b"b",
                                         call
                                           ("raise'exception",
                                            @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                            call
                                              ("exception.UNPREDICTABLE",@{typ exception},
                                               ls"MoveToSpecialFromRegister",@{theory ARM_Monadic}),@{theory ARM_Monadic}),
                                         mu(lu,qTy))))))))))),
         close
           (var_a HOLogic.unitT,
            call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'MoveToBankedOrSpecialRegister",
   close
     (tp[var_b"write_spsr",var_w("SYSm",5),var_w("n",4)],
      mb(call
           ("CurrentModeIsNotUser",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,prev_thy ),
         close
           (var_b"v",
            mb(mu(mop(Not,var_b"v"),qTy),
               close
                 (var_b"b",
                  ite(var_b"b",
                      call
                        ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                         call
                           ("exception.UNPREDICTABLE",@{typ exception},
                            ls"MoveToBankedOrSpecialRegister",@{theory ARM_Monadic}),@{theory ARM_Monadic}),
                      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
                         close
                           (var("v",@{typ PSR}),
                            mb(mu(call("PSR.M",(Word_Lib.mk_wordT 5),var("v",@{typ PSR}),prev_thy ),
                                  qTy),
                               close
                                 (var_w("mode",5),
                                  mb(ite(var_b"write_spsr",
                                         mb(call
                                              ("SPSRAccessValid",
                                               @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                               tp[var_w("SYSm",5),var_w("mode",5)],@{theory}),
                                            close
                                              (var_u"_0",
                                               itb([(eq(var_w("SYSm",5),lw(14,5)),
                                                     mb(mr(close
                                                             (var("s",qTy),
                                                              call
                                                                ("state.SPSR_fiq",@{typ PSR},
                                                                 var("s",qTy),prev_thy ))),
                                                        close
                                                          (var("v",@{typ PSR}),
                                                           mb(mb(mb(call
                                                                      ("R",
                                                                       @{typ
                                                                       "'b state_scheme \<Rightarrow>
                                                                        (32 word \<times> 'b state_scheme)"},
                                                                       var_w("n",4),@{theory ARM_Monadic}),
                                                                    close
                                                                      (var_w("v0",32),
                                                                       mu(tp[var("v",@{typ PSR}),
                                                                             var_w("v0",32)],qTy))),
                                                                 close
                                                                   (var("v",
                                                                        @{typ
                                                                        "PSR \<times> 32 word"}),
                                                                    mu(call
                                                                         ("write'reg'PSR",
                                                                          @{typ PSR},
                                                                          var("v",
                                                                              @{typ
                                                                              "PSR \<times> 32 word"}),
                                                                          prev_thy ),qTy))),
                                                              close
                                                                (var("v",@{typ PSR}),
                                                                 mw(close
                                                                      (var("s",qTy),
                                                                       rupd
                                                                         ("state.SPSR_fiq",
                                                                          tp[var("s",qTy),
                                                                             var("v",@{typ PSR})],
                                                                          prev_thy )))))))),
                                                    (eq(var_w("SYSm",5),lw(16,5)),
                                                     mb(mr(close
                                                             (var("s",qTy),
                                                              call
                                                                ("state.SPSR_irq",@{typ PSR},
                                                                 var("s",qTy),prev_thy ))),
                                                        close
                                                          (var("v",@{typ PSR}),
                                                           mb(mb(mb(call
                                                                      ("R",
                                                                       @{typ
                                                                       "'b state_scheme \<Rightarrow>
                                                                        (32 word \<times> 'b state_scheme)"},
                                                                       var_w("n",4),@{theory ARM_Monadic}),
                                                                    close
                                                                      (var_w("v0",32),
                                                                       mu(tp[var("v",@{typ PSR}),
                                                                             var_w("v0",32)],qTy))),
                                                                 close
                                                                   (var("v",
                                                                        @{typ
                                                                        "PSR \<times> 32 word"}),
                                                                    mu(call
                                                                         ("write'reg'PSR",
                                                                          @{typ PSR},
                                                                          var("v",
                                                                              @{typ
                                                                              "PSR \<times> 32 word"}),
                                                                          prev_thy ),qTy))),
                                                              close
                                                                (var("v",@{typ PSR}),
                                                                 mw(close
                                                                      (var("s",qTy),
                                                                       rupd
                                                                         ("state.SPSR_irq",
                                                                          tp[var("s",qTy),
                                                                             var("v",@{typ PSR})],
                                                                          prev_thy )))))))),
                                                    (eq(var_w("SYSm",5),lw(18,5)),
                                                     mb(mr(close
                                                             (var("s",qTy),
                                                              call
                                                                ("state.SPSR_svc",@{typ PSR},
                                                                 var("s",qTy),prev_thy ))),
                                                        close
                                                          (var("v",@{typ PSR}),
                                                           mb(mb(mb(call
                                                                      ("R",
                                                                       @{typ
                                                                       "'b state_scheme \<Rightarrow>
                                                                        (32 word \<times> 'b state_scheme)"},
                                                                       var_w("n",4),@{theory ARM_Monadic}),
                                                                    close
                                                                      (var_w("v0",32),
                                                                       mu(tp[var("v",@{typ PSR}),
                                                                             var_w("v0",32)],qTy))),
                                                                 close
                                                                   (var("v",
                                                                        @{typ
                                                                        "PSR \<times> 32 word"}),
                                                                    mu(call
                                                                         ("write'reg'PSR",
                                                                          @{typ PSR},
                                                                          var("v",
                                                                              @{typ
                                                                              "PSR \<times> 32 word"}),
                                                                          prev_thy ),qTy))),
                                                              close
                                                                (var("v",@{typ PSR}),
                                                                 mw(close
                                                                      (var("s",qTy),
                                                                       rupd
                                                                         ("state.SPSR_svc",
                                                                          tp[var("s",qTy),
                                                                             var("v",@{typ PSR})],
                                                                          prev_thy )))))))),
                                                    (eq(var_w("SYSm",5),lw(20,5)),
                                                     mb(mr(close
                                                             (var("s",qTy),
                                                              call
                                                                ("state.SPSR_abt",@{typ PSR},
                                                                 var("s",qTy),prev_thy ))),
                                                        close
                                                          (var("v",@{typ PSR}),
                                                           mb(mb(mb(call
                                                                      ("R",
                                                                       @{typ
                                                                       "'b state_scheme \<Rightarrow>
                                                                        (32 word \<times> 'b state_scheme)"},
                                                                       var_w("n",4),@{theory ARM_Monadic}),
                                                                    close
                                                                      (var_w("v0",32),
                                                                       mu(tp[var("v",@{typ PSR}),
                                                                             var_w("v0",32)],qTy))),
                                                                 close
                                                                   (var("v",
                                                                        @{typ
                                                                        "PSR \<times> 32 word"}),
                                                                    mu(call
                                                                         ("write'reg'PSR",
                                                                          @{typ PSR},
                                                                          var("v",
                                                                              @{typ
                                                                              "PSR \<times> 32 word"}),
                                                                          prev_thy ),qTy))),
                                                              close
                                                                (var("v",@{typ PSR}),
                                                                 mw(close
                                                                      (var("s",qTy),
                                                                       rupd
                                                                         ("state.SPSR_abt",
                                                                          tp[var("s",qTy),
                                                                             var("v",@{typ PSR})],
                                                                          prev_thy )))))))),
                                                    (eq(var_w("SYSm",5),lw(22,5)),
                                                     mb(mr(close
                                                             (var("s",qTy),
                                                              call
                                                                ("state.SPSR_und",@{typ PSR},
                                                                 var("s",qTy),prev_thy ))),
                                                        close
                                                          (var("v",@{typ PSR}),
                                                           mb(mb(mb(call
                                                                      ("R",
                                                                       @{typ
                                                                       "'b state_scheme \<Rightarrow>
                                                                        (32 word \<times> 'b state_scheme)"},
                                                                       var_w("n",4),@{theory ARM_Monadic}),
                                                                    close
                                                                      (var_w("v0",32),
                                                                       mu(tp[var("v",@{typ PSR}),
                                                                             var_w("v0",32)],qTy))),
                                                                 close
                                                                   (var("v",
                                                                        @{typ
                                                                        "PSR \<times> 32 word"}),
                                                                    mu(call
                                                                         ("write'reg'PSR",
                                                                          @{typ PSR},
                                                                          var("v",
                                                                              @{typ
                                                                              "PSR \<times> 32 word"}),
                                                                          prev_thy ),qTy))),
                                                              close
                                                                (var("v",@{typ PSR}),
                                                                 mw(close
                                                                      (var("s",qTy),
                                                                       rupd
                                                                         ("state.SPSR_und",
                                                                          tp[var("s",qTy),
                                                                             var("v",@{typ PSR})],
                                                                          prev_thy )))))))),
                                                    (eq(var_w("SYSm",5),lw(28,5)),
                                                     mb(mr(close
                                                             (var("s",qTy),
                                                              call
                                                                ("state.SPSR_mon",@{typ PSR},
                                                                 var("s",qTy),prev_thy ))),
                                                        close
                                                          (var("v",@{typ PSR}),
                                                           mb(mb(mb(call
                                                                      ("R",
                                                                       @{typ
                                                                       "'b state_scheme \<Rightarrow>
                                                                        (32 word \<times> 'b state_scheme)"},
                                                                       var_w("n",4),@{theory ARM_Monadic}),
                                                                    close
                                                                      (var_w("v0",32),
                                                                       mu(tp[var("v",@{typ PSR}),
                                                                             var_w("v0",32)],qTy))),
                                                                 close
                                                                   (var("v",
                                                                        @{typ
                                                                        "PSR \<times> 32 word"}),
                                                                    mu(call
                                                                         ("write'reg'PSR",
                                                                          @{typ PSR},
                                                                          var("v",
                                                                              @{typ
                                                                              "PSR \<times> 32 word"}),
                                                                          prev_thy ),qTy))),
                                                              close
                                                                (var("v",@{typ PSR}),
                                                                 mw(close
                                                                      (var("s",qTy),
                                                                       rupd
                                                                         ("state.SPSR_mon",
                                                                          tp[var("s",qTy),
                                                                             var("v",@{typ PSR})],
                                                                          prev_thy )))))))),
                                                    (eq(var_w("SYSm",5),lw(30,5)),
                                                     mb(mr(close
                                                             (var("s",qTy),
                                                              call
                                                                ("state.SPSR_hyp",@{typ PSR},
                                                                 var("s",qTy),prev_thy ))),
                                                        close
                                                          (var("v",@{typ PSR}),
                                                           mb(mb(mb(call
                                                                      ("R",
                                                                       @{typ
                                                                       "'b state_scheme \<Rightarrow>
                                                                        (32 word \<times> 'b state_scheme)"},
                                                                       var_w("n",4),@{theory ARM_Monadic}),
                                                                    close
                                                                      (var_w("v0",32),
                                                                       mu(tp[var("v",@{typ PSR}),
                                                                             var_w("v0",32)],qTy))),
                                                                 close
                                                                   (var("v",
                                                                        @{typ
                                                                        "PSR \<times> 32 word"}),
                                                                    mu(call
                                                                         ("write'reg'PSR",
                                                                          @{typ PSR},
                                                                          var("v",
                                                                              @{typ
                                                                              "PSR \<times> 32 word"}),
                                                                          prev_thy ),qTy))),
                                                              close
                                                                (var("v",@{typ PSR}),
                                                                 mw(close
                                                                      (var("s",qTy),
                                                                       rupd
                                                                         ("state.SPSR_hyp",
                                                                          tp[var("s",qTy),
                                                                             var("v",@{typ PSR})],
                                                                          prev_thy ))))))))],
                                                   mu(lu,qTy)))),
                                         mb(call
                                              ("BankedRegisterAccessValid",
                                               @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                               tp[var_w("SYSm",5),var_w("mode",5)],@{theory}),
                                            close
                                              (var_a HOLogic.unitT,
                                               itb([(eq(ex(var_w("SYSm",5),ln 4,ln 3,
                                                           (Word_Lib.mk_wordT 2)),lw(0,2)),
                                                     mb(call
                                                          ("R",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (32 word \<times> 'b state_scheme)"},var_w("n",4),
                                                           @{theory ARM_Monadic}),
                                                        close
                                                          (var_w("v",32),
                                                           mb(mu(tp[var_w("v",32),
                                                                    bop(Add,
                                                                        mop(Cast w4,
                                                                            ex(var_w("SYSm",5),ln 2,
                                                                               ln 0,
                                                                               (Word_Lib.mk_wordT 3))),
                                                                        lw(8,4)),lw(16,5)],qTy),
                                                              close
                                                                (var("v",
                                                                     @{typ
                                                                     "32 word \<times>
                                                                      4 word \<times> 5 word"}),
                                                                 call
                                                                   ("write'Rmode",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (unit \<times> 'b state_scheme)"},
                                                                    var("v",
                                                                        @{typ
                                                                        "32 word \<times>
                                                                         4 word \<times> 5 word"}),
                                                                    prev_thy )))))),
                                                    (eq(ex(var_w("SYSm",5),ln 4,ln 3,
                                                           (Word_Lib.mk_wordT 2)),lw(1,2)),
                                                     mb(call
                                                          ("R",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (32 word \<times> 'b state_scheme)"},var_w("n",4),
                                                           @{theory ARM_Monadic}),
                                                        close
                                                          (var_w("v",32),
                                                           mb(mu(tp[var_w("v",32),
                                                                    bop(Add,
                                                                        mop(Cast w4,
                                                                            ex(var_w("SYSm",5),ln 2,
                                                                               ln 0,
                                                                               (Word_Lib.mk_wordT 3))),
                                                                        lw(8,4)),lw(17,5)],qTy),
                                                              close
                                                                (var("v",
                                                                     @{typ
                                                                     "32 word \<times>
                                                                      4 word \<times> 5 word"}),
                                                                 call
                                                                   ("write'Rmode",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (unit \<times> 'b state_scheme)"},
                                                                    var("v",
                                                                        @{typ
                                                                        "32 word \<times>
                                                                         4 word \<times> 5 word"}),
                                                                    prev_thy )))))),
                                                    (eq(ex(var_w("SYSm",5),ln 4,ln 3,
                                                           (Word_Lib.mk_wordT 2)),lw(3,2)),
                                                     itb([(mop(Not,bop(Bit,var_w("SYSm",5),ln 1)),
                                                           mb(call
                                                                ("R",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (32 word \<times> 'b state_scheme)"},
                                                                 var_w("n",4),@{theory ARM_Monadic}),
                                                              close
                                                                (var_w("v",32),
                                                                 mb(mu(tp[var_w("v",32),
                                                                          bop(Sub,lw(14,4),
                                                                              mop(Cast w4,
                                                                                  bop(Bit,
                                                                                      var_w("SYSm",5),
                                                                                      ln 0))),
                                                                          lw(22,5)],qTy),
                                                                    close
                                                                      (var("v",
                                                                           @{typ
                                                                           "32 word \<times>
                                                                            4 word \<times> 5 word"}),
                                                                       call
                                                                         ("write'Rmode",
                                                                          @{typ
                                                                          "'b state_scheme \<Rightarrow>
                                                                           (unit \<times> 'b state_scheme)"},
                                                                          var("v",
                                                                              @{typ
                                                                              "32 word \<times>
                                                                               4 word \<times>
                                                                               5 word"}),prev_thy )))))),
                                                          (bop(Bit,var_w("SYSm",5),ln 0),
                                                           mb(call
                                                                ("R",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (32 word \<times> 'b state_scheme)"},
                                                                 var_w("n",4),@{theory ARM_Monadic}),
                                                              close
                                                                (var_w("v",32),
                                                                 mb(mu(tp[var_w("v",32),lw(13,4),
                                                                          lw(26,5)],qTy),
                                                                    close
                                                                      (var("v",
                                                                           @{typ
                                                                           "32 word \<times>
                                                                            4 word \<times> 5 word"}),
                                                                       call
                                                                         ("write'Rmode",
                                                                          @{typ
                                                                          "'b state_scheme \<Rightarrow>
                                                                           (unit \<times> 'b state_scheme)"},
                                                                          var("v",
                                                                              @{typ
                                                                              "32 word \<times>
                                                                               4 word \<times>
                                                                               5 word"}),prev_thy ))))))],
                                                         mb(call
                                                              ("R",
                                                               @{typ
                                                               "'b state_scheme \<Rightarrow>
                                                                (32 word \<times> 'b state_scheme)"},
                                                               var_w("n",4),@{theory ARM_Monadic}),
                                                            close
                                                              (var_w("v",32),
                                                               mw(close
                                                                    (var("s",qTy),
                                                                     rupd
                                                                       ("state.ELR_hyp",
                                                                        tp[var("s",qTy),
                                                                           var_w("v",32)],prev_thy )))))))],
                                                   mn(lx (Word_Lib.mk_wordT 5),
                                                      mb(mr(close
                                                              (var("s",
                                                                   @{typ "5 word \<times> 'b state_scheme"}),
                                                               mop(Fst,
                                                                   var("s",
                                                                       @{typ
                                                                       "5 word \<times> 'b state_scheme"})))),
                                                         close
                                                           (var_w("v",5),
                                                            mb(mb(mu(bfi(ln 0,ln 0,
                                                                         mop(Cast w1,
                                                                             bop(Or,
                                                                                 bop(Bit,
                                                                                     var_w("SYSm",5),
                                                                                     ln 2),
                                                                                 bop(Bit,
                                                                                     var_w("SYSm",5),
                                                                                     ln 1))),
                                                                         var_w("v",5)),
                                                                     @{typ "5 word \<times> 'b state_scheme"}),
                                                                  close
                                                                    (var_w("v",5),
                                                                     mw(close
                                                                          (var("s",
                                                                               @{typ
                                                                               "5 word \<times>
                                                                                'b state_scheme"}),
                                                                           tp[var_w("v",5),
                                                                              mop(Snd,
                                                                                  var("s",
                                                                                      @{typ
                                                                                      "5 word \<times>
                                                                                       'b state_scheme"}))])))),
                                                               close
                                                                 (var_a HOLogic.unitT,
                                                                  mb(mr(close
                                                                          (var("s",
                                                                               @{typ
                                                                               "5 word \<times>
                                                                                'b state_scheme"}),
                                                                           mop(Fst,
                                                                               var("s",
                                                                                   @{typ
                                                                                   "5 word \<times>
                                                                                    'b state_scheme"})))),
                                                                     close
                                                                       (var_w("v",5),
                                                                        mb(mb(mu(bfi(ln 1,ln 1,
                                                                                     mop(Cast w1,lt),
                                                                                     var_w("v",5)),
                                                                                 @{typ
                                                                                 "5 word \<times>
                                                                                  'b state_scheme"}),
                                                                              close
                                                                                (var_w("v",5),
                                                                                 mw(close
                                                                                      (var("s",
                                                                                           @{typ
                                                                                           "5 word \<times>
                                                                                            'b state_scheme"}),
                                                                                       tp[var_w("v",5),
                                                                                          mop(Snd,
                                                                                              var("s",
                                                                                                  @{typ
                                                                                                  "5 word \<times>
                                                                                                   'b state_scheme"}))])))),
                                                                           close
                                                                             (var_a HOLogic.unitT,
                                                                              mb(mr(close
                                                                                      (var("s",
                                                                                           @{typ
                                                                                           "5 word \<times>
                                                                                            'b state_scheme"}),
                                                                                       mop(Fst,
                                                                                           var("s",
                                                                                               @{typ
                                                                                               "5 word \<times>
                                                                                                'b state_scheme"})))),
                                                                                 close
                                                                                   (var_w("v",5),
                                                                                    mb(mb(mu(bfi(ln
                                                                                                  2,
                                                                                                 ln
                                                                                                  2,
                                                                                                 mop(Cast
                                                                                                       w1,
                                                                                                     bop(And,
                                                                                                         bop(Bit,
                                                                                                             var_w("SYSm",5),
                                                                                                             ln
                                                                                                              2),
                                                                                                         mop(Not,
                                                                                                             bop(Bit,
                                                                                                                 var_w("SYSm",5),
                                                                                                                 ln
                                                                                                                  1)))),
                                                                                                 var_w("v",5)),
                                                                                             @{typ
                                                                                             "5 word \<times>
                                                                                              'b state_scheme"}),
                                                                                          close
                                                                                            (var_w("v",5),
                                                                                             mw(close
                                                                                                  (var("s",
                                                                                                       @{typ
                                                                                                       "5 word \<times>
                                                                                                        'b state_scheme"}),
                                                                                                   tp[var_w("v",5),
                                                                                                      mop(Snd,
                                                                                                          var("s",
                                                                                                              @{typ
                                                                                                              "5 word \<times>
                                                                                                               'b state_scheme"}))])))),
                                                                                       close
                                                                                         (var_a
                                                                                            HOLogic.unitT,
                                                                                          mb(mr(close
                                                                                                  (var("s",
                                                                                                       @{typ
                                                                                                       "5 word \<times>
                                                                                                        'b state_scheme"}),
                                                                                                   mop(Fst,
                                                                                                       var("s",
                                                                                                           @{typ
                                                                                                           "5 word \<times>
                                                                                                            'b state_scheme"})))),
                                                                                             close
                                                                                               (var_w("v",5),
                                                                                                mb(mb(mu(bfi(ln
                                                                                                              3,
                                                                                                             ln
                                                                                                              3,
                                                                                                             mop(Cast
                                                                                                                   w1,
                                                                                                                 bop(And,
                                                                                                                     bop(Bit,
                                                                                                                         var_w("SYSm",5),
                                                                                                                         ln
                                                                                                                          2),
                                                                                                                     bop(Bit,
                                                                                                                         var_w("SYSm",5),
                                                                                                                         ln
                                                                                                                          1))),
                                                                                                             var_w("v",5)),
                                                                                                         @{typ
                                                                                                         "5 word \<times>
                                                                                                          'b state_scheme"}),
                                                                                                      close
                                                                                                        (var_w("v",5),
                                                                                                         mw(close
                                                                                                              (var("s",
                                                                                                                   @{typ
                                                                                                                   "5 word \<times>
                                                                                                                    'b state_scheme"}),
                                                                                                               tp[var_w("v",5),
                                                                                                                  mop(Snd,
                                                                                                                      var("s",
                                                                                                                          @{typ
                                                                                                                          "5 word \<times>
                                                                                                                           'b state_scheme"}))])))),
                                                                                                   close
                                                                                                     (var_a
                                                                                                        HOLogic.unitT,
                                                                                                      mb(mr(close
                                                                                                              (var("s",
                                                                                                                   @{typ
                                                                                                                   "5 word \<times>
                                                                                                                    'b state_scheme"}),
                                                                                                               mop(Fst,
                                                                                                                   var("s",
                                                                                                                       @{typ
                                                                                                                       "5 word \<times>
                                                                                                                        'b state_scheme"})))),
                                                                                                         close
                                                                                                           (var_w("v",5),
                                                                                                            mb(mb(mu(bfi(ln
                                                                                                                          4,
                                                                                                                         ln
                                                                                                                          4,
                                                                                                                         mop(Cast
                                                                                                                               w1,
                                                                                                                             lt),
                                                                                                                         var_w("v",5)),
                                                                                                                     @{typ
                                                                                                                     "5 word \<times>
                                                                                                                      'b state_scheme"}),
                                                                                                                  close
                                                                                                                    (var_w("v",5),
                                                                                                                     mw(close
                                                                                                                          (var("s",
                                                                                                                               @{typ
                                                                                                                               "5 word \<times>
                                                                                                                                'b state_scheme"}),
                                                                                                                           tp[var_w("v",5),
                                                                                                                              mop(Snd,
                                                                                                                                  var("s",
                                                                                                                                      @{typ
                                                                                                                                      "5 word \<times>
                                                                                                                                       'b state_scheme"}))])))),
                                                                                                               close
                                                                                                                 (var_a
                                                                                                                    HOLogic.unitT,
                                                                                                                  mb(mr(close
                                                                                                                          (var("s",
                                                                                                                               @{typ
                                                                                                                               "5 word \<times>
                                                                                                                                'b state_scheme"}),
                                                                                                                           mop(Fst,
                                                                                                                               var("s",
                                                                                                                                   @{typ
                                                                                                                                   "5 word \<times>
                                                                                                                                    'b state_scheme"})))),
                                                                                                                     close
                                                                                                                       (var_w("v",5),
                                                                                                                        mb(mu(eq(var_w("mode",5),
                                                                                                                                 var_w("v",5)),
                                                                                                                              @{typ
                                                                                                                              "5 word \<times>
                                                                                                                               'b state_scheme"}),
                                                                                                                           close
                                                                                                                             (var_b"b",
                                                                                                                              ite(var_b"b",
                                                                                                                                  md(call
                                                                                                                                       ("raise'exception",
                                                                                                                                        @{typ
                                                                                                                                        "'b state_scheme \<Rightarrow>
                                                                                                                                         (unit \<times>
                                                                                                                                          'b state_scheme)"},
                                                                                                                                        call
                                                                                                                                          ("exception.UNPREDICTABLE",
                                                                                                                                           @{typ exception},
                                                                                                                                           ls
                                                                                                                                            "MoveToBankedOrSpecialRegister",
                                                                                                                                           @{theory ARM_Monadic}),
                                                                                                                                        @{theory ARM_Monadic}),
                                                                                                                                     (Word_Lib.mk_wordT 5)),
                                                                                                                                  mb(mr(close
                                                                                                                                          (var("s",
                                                                                                                                               @{typ
                                                                                                                                               "5 word \<times>
                                                                                                                                                'b state_scheme"}),
                                                                                                                                           mop(Fst,
                                                                                                                                               var("s",
                                                                                                                                                   @{typ
                                                                                                                                                   "5 word \<times>
                                                                                                                                                    'b state_scheme"})))),
                                                                                                                                     close
                                                                                                                                       (var_w("v",5),
                                                                                                                                        mb(mu(tp[bop(Sub,
                                                                                                                                                     lw(14,
                                                                                                                                                        4),
                                                                                                                                                     mop(Cast
                                                                                                                                                           w4,
                                                                                                                                                         bop(Bit,
                                                                                                                                                             var_w("SYSm",5),
                                                                                                                                                             ln
                                                                                                                                                              0))),
                                                                                                                                                 var_w("v",5)],
                                                                                                                                              @{typ
                                                                                                                                              "5 word \<times>
                                                                                                                                               'b state_scheme"}),
                                                                                                                                           close
                                                                                                                                             (var("x",
                                                                                                                                                  @{typ
                                                                                                                                                  "4 word \<times>
                                                                                                                                                   5 word"}),
                                                                                                                                              mb(md(call
                                                                                                                                                      ("R",
                                                                                                                                                       @{typ
                                                                                                                                                       "'b state_scheme \<Rightarrow>
                                                                                                                                                        (32 word \<times>
                                                                                                                                                         'b state_scheme)"},
                                                                                                                                                       var_w("n",4),
                                                                                                                                                       @{theory ARM_Monadic}),
                                                                                                                                                    (Word_Lib.mk_wordT 5)),
                                                                                                                                                 close
                                                                                                                                                   (var_w("v",32),
                                                                                                                                                    mb(mu(tp[var_w("v",32),
                                                                                                                                                             var("x",
                                                                                                                                                                 @{typ
                                                                                                                                                                 "4 word \<times>
                                                                                                                                                                  5 word"})],
                                                                                                                                                          @{typ
                                                                                                                                                          "5 word \<times>
                                                                                                                                                           'b state_scheme"}),
                                                                                                                                                       close
                                                                                                                                                         (var("v",
                                                                                                                                                              @{typ
                                                                                                                                                              "32 word \<times>
                                                                                                                                                               4 word \<times>
                                                                                                                                                               5 word"}),
                                                                                                                                                          md(call
                                                                                                                                                               ("write'Rmode",
                                                                                                                                                                @{typ
                                                                                                                                                                "'b state_scheme \<Rightarrow>
                                                                                                                                                                 (unit \<times>
                                                                                                                                                                  'b state_scheme)"},
                                                                                                                                                                var("v",
                                                                                                                                                                    @{typ
                                                                                                                                                                    "32 word \<times>
                                                                                                                                                                     4 word \<times>
                                                                                                                                                                     5 word"}),
                                                                                                                                                                prev_thy ),
                                                                                                                                                             (Word_Lib.mk_wordT 5)))))))))))))))))))))))))))))))))))))))),
                                     close
                                       (var_a HOLogic.unitT,
                                        call
                                          ("IncPC",
                                           @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,
                                           prev_thy ))))))))))))))
end
\<close>


definition
"dfn'ReturnFromException"
  :: "bool \<times> bool \<times> bool \<times> 4 word \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'ReturnFromException \<equiv>
\<lambda>(increment, wordhigher, wback, n). do {
     b \<leftarrow> CurrentModeIsHyp ();
     if b then TakeUndefInstrException ()
     else do {
            v \<leftarrow> CurrentModeIsNotUser ();
            b \<leftarrow> do {
                b \<leftarrow> return (\<not> v);
                if b then return True else do {
                                             v \<leftarrow> CurrentInstrSet ();
                                             return (v = InstrSet_ThumbEE)
                                           }
              };
            if b then raise'exception (UNPREDICTABLE ''ReturnFromException'')
            else do {
                   Rn \<leftarrow> R n;
                   let address = (if increment then Rn else Rn - 8);
                   let address = (if wordhigher then address + 4 else address);
                   _ \<leftarrow> if wback then write'R (if increment then Rn + 8 else Rn - 8, n) else return ();
                   new_pc_value \<leftarrow> MemA (Addr address, 4);
                   v \<leftarrow> MemA (Addr (address + 4), 4);
                   _ \<leftarrow> return (v, 15, True) \<bind> CPSRWriteByInstr;
                   v \<leftarrow> read_state CPSR;
                   b \<leftarrow> do {
                       b \<leftarrow> do {
                           v \<leftarrow> return (PSR.M v);
                           return (v = 26)
                         };
                       if b then do {
                                   v \<leftarrow> read_state CPSR;
                                   b \<leftarrow> return (J v);
                                   if b then do {
                                               v \<leftarrow> read_state CPSR;
                                               return (T v)
                                             }
                                   else return False
                                 }
                       else return False
                     };
                   if b then raise'exception (UNPREDICTABLE ''ReturnFromException'') else BranchWritePC new_pc_value
                 }
          }
   }"


ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'SecureMonitorCall",
   close
     (var_w("imm4",4),
      mb(call("HaveSecurityExt",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic}),
         close
           (var_b"v",
            mb(ite(var_b"v",
                   call
                     ("CurrentModeIsNotUser",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                      prev_thy ),mu(lf,qTy)),
               close
                 (var_b"b",
                  ite(var_b"b",
                      mb(call
                           ("HaveVirtExt",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                            prev_thy ),
                         close
                           (var_b"v",
                            mb(ite(var_b"v",
                                   mb(call
                                        ("IsSecure",
                                         @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                         prev_thy ),
                                      close
                                        (var_b"v",
                                         mb(mu(mop(Not,var_b"v"),qTy),
                                            close
                                              (var_b"b",
                                               ite(var_b"b",
                                                   mb(call
                                                        ("CurrentModeIsHyp",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                         lu,prev_thy ),
                                                      close
                                                        (var_b"v",
                                                         mb(mu(mop(Not,var_b"v"),qTy),
                                                            close
                                                              (var_b"b",
                                                               ite(var_b"b",
                                                                   mb(mr(close
                                                                           (var("s",qTy),
                                                                            call
                                                                              ("state.CP15",
                                                                               @{typ CP15},
                                                                               var("s",qTy),
                                                                               @{theory ARM_Monadic}))),
                                                                      close
                                                                        (var("v",@{typ CP15}),
                                                                         mb(mu(call
                                                                                 ("CP15.HCR",
                                                                                  @{typ HCR},
                                                                                  var("v",
                                                                                      @{typ CP15}),
                                                                                  prev_thy ),qTy),
                                                                            close
                                                                              (var("v",@{typ HCR}),
                                                                               mu(call
                                                                                    ("HCR.TSC",
                                                                                     HOLogic.boolT,
                                                                                     var("v",
                                                                                         @{typ HCR}),
                                                                                     prev_thy ),qTy))))),
                                                                   mu(lf,qTy)))))),mu(lf,qTy)))))),
                                   mu(lf,qTy)),
                               close
                                 (var_b"b",
                                  ite(var_b"b",
                                      mb(call
                                           ("WriteHSR",
                                            @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                            tp[lw(19,6),lw(0,25)],@{theory}),
                                         close
                                           (var_a HOLogic.unitT,
                                            call
                                              ("TakeHypTrapException",
                                               @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                               lu,@{theory}))),
                                      mb(mr(close
                                              (var("s",qTy),
                                               call("state.CP15",@{typ CP15},var("s",qTy),@{theory ARM_Monadic}))),
                                         close
                                           (var("v",@{typ CP15}),
                                            mb(mb(mu(call
                                                       ("CP15.SCR",@{typ SCR},var("v",@{typ CP15}),
                                                        @{theory ARM_Monadic}),qTy),
                                                  close
                                                    (var("v",@{typ SCR}),
                                                     mu(call
                                                          ("SCR.SCD",HOLogic.boolT,
                                                           var("v",@{typ SCR}),prev_thy ),qTy))),
                                               close
                                                 (var_b"b",
                                                  ite(var_b"b",
                                                      mb(call
                                                           ("IsSecure",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (bool \<times> 'b state_scheme)"},lu,prev_thy ),
                                                         close
                                                           (var_b"b",
                                                            ite(var_b"b",
                                                                call
                                                                  ("raise'exception",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (unit \<times> 'b state_scheme)"},
                                                                   call
                                                                     ("exception.UNPREDICTABLE",
                                                                      @{typ exception},
                                                                      ls"SecureMonitorCall",
                                                                      @{theory ARM_Monadic}),@{theory ARM_Monadic}),
                                                                call
                                                                  ("TakeUndefInstrException",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (unit \<times> 'b state_scheme)"},lu,
                                                                   @{theory})))),
                                                      call
                                                        ("TakeSMCException",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                         lu,@{theory}))))))))))),
                      call
                        ("TakeUndefInstrException",
                         @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,@{theory}))))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'SupervisorCall",
   close
     (var_w("imm32",32),
      call
        ("CallSupervisor",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
         ex(var_w("imm32",32),ln 15,ln 0,w16),@{theory})))
end
\<close>


definition
"dfn'StoreReturnState"
  :: "bool \<times> bool \<times> bool \<times> 5 word \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where
"dfn'StoreReturnState \<equiv>
\<lambda>(increment, wordhigher, wback, mode). do {
     b \<leftarrow> CurrentModeIsHyp ();
     if b then TakeUndefInstrException ()
     else do {
            v \<leftarrow> CurrentModeIsUserOrSystem ();
            b \<leftarrow> if v then return True else do {
                                              v \<leftarrow> CurrentInstrSet ();
                                              return (v = InstrSet_ThumbEE)
                                            };
            if b then raise'exception (UNPREDICTABLE ''StoreReturnState'')
            else if mode = 26 then raise'exception (UNPREDICTABLE ''StoreReturnState'')
                 else do {
                        v \<leftarrow> IsSecure ();
                        _ \<leftarrow> do {
                            b \<leftarrow> return (\<not> v);
                            if b then do {
                                        v \<leftarrow> read_state CP15;
                                        b \<leftarrow> do {
                                            v \<leftarrow> do {
                                                v \<leftarrow> do {
                                                    v \<leftarrow> return (NSACR v);
                                                    return (RFR v)
                                                  };
                                                return (mode = 17 \<and> v)
                                              };
                                            return (mode = 22 \<or> v)
                                          };
                                        if b then raise'exception (UNPREDICTABLE ''StoreReturnState'') else return ()
                                      }
                            else return ()
                          };
                        base \<leftarrow> Rmode (13, mode);
                        let address = (if increment then base else base - 8);
                        let address = (if wordhigher then address + 4 else address);
                        _ \<leftarrow> do {
                            v \<leftarrow> LR;
                            return (v, Addr address, 4) \<bind> write'MemA
                          };
                        _ \<leftarrow> do {
                            v \<leftarrow> SPSR;
                            do {
                              v \<leftarrow> return (reg'PSR v);
                              return (v, Addr (address + 4), 4)
                            } \<bind> write'MemA
                          };
                        _ \<leftarrow> if wback then write'Rmode (if increment then base + 8 else base - 8, 13, mode) else return ();
                        IncPC ()
                      }
          }
   }"



ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("dfn'Setend",
   close
     (var_b"set_bigend",
      mb(mr(close(var("s",qTy),call("state.CPSR",@{typ PSR},var("s",qTy),@{theory ARM_Monadic}))),
         close
           (var("v",@{typ PSR}),
            mb(mb(mb(mu(tp[var("v",@{typ PSR}),var_b"set_bigend"],qTy),
                     close
                       (var("v",@{typ "PSR \<times> bool"}),
                        mu(rupd("PSR.E",var("v",@{typ "PSR \<times> bool"}),@{theory ARM_Monadic}),qTy))),
                  close
                    (var("v",@{typ PSR}),
                     mw(close
                          (var("s",qTy),
                           rupd("state.CPSR",tp[var("s",qTy),var("v",@{typ PSR})],prev_thy ))))),
               close
                 (var_a HOLogic.unitT,
                  call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'Undefined",
   close
     (var_w("imm32",32),
      call
        ("TakeUndefInstrException",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,@{theory})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'NoOperation",call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy ))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'Breakpoint",
   close
     (var_w("imm32",32),
      call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'Debug",
   close
     (var_w("option",4),
      call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'DataMemoryBarrier",
   close
     (var_w("option",4),
      call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'DataSynchronizationBarrier",
   close
     (var_w("option",4),
      call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'InstructionSynchronizationBarrier",
   close
     (var_w("option",4),
      call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'PreloadData",
   close
     (tp[var_b"add",var_b"is_pldw",var_w("n",4),var("m",@{typ offset1})],
      call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'PreloadDataLiteral",
   close
     (tp[var_b"add",var_w("imm32",32)],
      call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'PreloadInstruction",
   close
     (tp[var_b"add",var_w("n",4),var("m",@{typ offset1})],
      call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy )))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'SendEvent",call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy ))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'WaitForEvent",call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy ))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'WaitForInterrupt",
   call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy ))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("dfn'Yield",call("IncPC",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,prev_thy ))
end
\<close>




definition
"Run"
  :: "instruction \<Rightarrow> 'b::mem_op state_scheme \<Rightarrow> unit \<times> 'b state_scheme"
where  
"Run \<equiv> \<lambda>v0::instruction.
          case v0 of Branch (BranchExchange (v2::4 word)) \<Rightarrow> dfn'BranchExchange v2
          | Branch (BranchLinkExchangeImmediate (v3::InstrSet \<times> 32 word)) \<Rightarrow> dfn'BranchLinkExchangeImmediate v3
          | Branch (BranchLinkExchangeRegister (v4::4 word)) \<Rightarrow> dfn'BranchLinkExchangeRegister v4 | Branch (BranchTarget (v5::32 word)) \<Rightarrow> dfn'BranchTarget v5
          | Branch (CheckArray (v6::4 word \<times> 4 word)) \<Rightarrow> dfn'CheckArray v6 | Branch (CompareBranch (v7::bool \<times> 4 word \<times> 32 word)) \<Rightarrow> dfn'CompareBranch v7
          | Branch (HandlerBranchLink (v8::bool \<times> 32 word)) \<Rightarrow> dfn'HandlerBranchLink v8
          | Branch (HandlerBranchLinkParameter (v9::32 word \<times> 32 word)) \<Rightarrow> dfn'HandlerBranchLinkParameter v9
          | Branch (HandlerBranchParameter (v10::32 word \<times> 32 word)) \<Rightarrow> dfn'HandlerBranchParameter v10
          | Branch (TableBranchByte (v11::bool \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'TableBranchByte v11 | ClearExclusive \<Rightarrow> dfn'ClearExclusive
          | Data (AddSub (v13::bool \<times> 4 word \<times> 4 word \<times> 12 word)) \<Rightarrow> dfn'AddSub v13
          | Data (ArithLogicImmediate (v14::4 word \<times> bool \<times> 4 word \<times> 4 word \<times> 12 word)) \<Rightarrow> dfn'ArithLogicImmediate v14
          | Data (CountLeadingZeroes (v15::4 word \<times> 4 word)) \<Rightarrow> dfn'CountLeadingZeroes v15 | Data (Move (v16::bool \<times> bool \<times> 4 word \<times> 12 word)) \<Rightarrow> dfn'Move v16
          | Data (MoveHalfword (v17::bool \<times> 4 word \<times> 16 word)) \<Rightarrow> dfn'MoveHalfword v17
          | Data (Register (v18::4 word \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> SRType \<times> nat)) \<Rightarrow> dfn'Register v18
          | Data (RegisterShiftedRegister (v19::4 word \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> SRType \<times> 4 word)) \<Rightarrow> dfn'RegisterShiftedRegister v19
          | Data (ShiftImmediate (v20::bool \<times> bool \<times> 4 word \<times> 4 word \<times> SRType \<times> nat)) \<Rightarrow> dfn'ShiftImmediate v20
          | Data (ShiftRegister (v21::bool \<times> bool \<times> 4 word \<times> 4 word \<times> SRType \<times> 4 word)) \<Rightarrow> dfn'ShiftRegister v21
          | Data (TestCompareImmediate (v22::2 word \<times> 4 word \<times> 12 word)) \<Rightarrow> dfn'TestCompareImmediate v22
          | Data (TestCompareRegister (v23::2 word \<times> 4 word \<times> 4 word \<times> SRType \<times> nat)) \<Rightarrow> dfn'TestCompareRegister v23
          | Divide (v152::bool \<times> 4 word \<times> 4 word \<times> 4 word) \<Rightarrow> dfn'Divide v152 | Hint (Breakpoint (v25::32 word)) \<Rightarrow> dfn'Breakpoint v25
          | Hint (DataMemoryBarrier (v26::4 word)) \<Rightarrow> dfn'DataMemoryBarrier v26 | Hint (DataSynchronizationBarrier (v27::4 word)) \<Rightarrow> dfn'DataSynchronizationBarrier v27
          | Hint (Debug (v28::4 word)) \<Rightarrow> dfn'Debug v28 | Hint (InstructionSynchronizationBarrier (v29::4 word)) \<Rightarrow> dfn'InstructionSynchronizationBarrier v29
          | Hint (PreloadData (v30::bool \<times> bool \<times> 4 word \<times> offset1)) \<Rightarrow> dfn'PreloadData v30 | Hint (PreloadDataLiteral (v31::bool \<times> 32 word)) \<Rightarrow> dfn'PreloadDataLiteral v31
          | Hint (PreloadInstruction (v32::bool \<times> 4 word \<times> offset1)) \<Rightarrow> dfn'PreloadInstruction v32 | Hint SendEvent \<Rightarrow> dfn'SendEvent | Hint WaitForEvent \<Rightarrow> dfn'WaitForEvent
          | Hint WaitForInterrupt \<Rightarrow> dfn'WaitForInterrupt | Hint Yield \<Rightarrow> dfn'Yield | IfThen (v153::4 word \<times> 4 word) \<Rightarrow> dfn'IfThen v153
          | Load (LoadByte (v34::bool \<times> bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1)) \<Rightarrow> dfn'LoadByte v34
          | Load (LoadByteLiteral (v35::bool \<times> bool \<times> 4 word \<times> 32 word)) \<Rightarrow> dfn'LoadByteLiteral v35
          | Load (LoadByteUnprivileged (v36::bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1)) \<Rightarrow> dfn'LoadByteUnprivileged v36
          | Load (LoadDual (v37::bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> offset2)) \<Rightarrow> dfn'LoadDual v37
          | Load (LoadDualLiteral (v38::bool \<times> 4 word \<times> 4 word \<times> 32 word)) \<Rightarrow> dfn'LoadDualLiteral v38
          | Load (LoadExclusive (v39::4 word \<times> 4 word \<times> 32 word)) \<Rightarrow> dfn'LoadExclusive v39 | Load (LoadExclusiveByte (v40::4 word \<times> 4 word)) \<Rightarrow> dfn'LoadExclusiveByte v40
          | Load (LoadExclusiveDoubleword (v41::4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'LoadExclusiveDoubleword v41
          | Load (LoadExclusiveHalf (v42::4 word \<times> 4 word)) \<Rightarrow> dfn'LoadExclusiveHalf v42
          | Load (LoadHalf (v43::bool \<times> bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1)) \<Rightarrow> dfn'LoadHalf v43
          | Load (LoadHalfLiteral (v44::bool \<times> bool \<times> 4 word \<times> 32 word)) \<Rightarrow> dfn'LoadHalfLiteral v44
          | Load (LoadHalfUnprivileged (v45::bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset2)) \<Rightarrow> dfn'LoadHalfUnprivileged v45
          | Load (LoadLiteral (v46::bool \<times> 4 word \<times> 32 word)) \<Rightarrow> dfn'LoadLiteral v46 | Load (LoadMultiple (v47::bool \<times> bool \<times> bool \<times> 4 word \<times> 16 word)) \<Rightarrow> dfn'LoadMultiple v47
       (*   | Load (LoadMultipleExceptionReturn (v48::bool \<times> bool \<times> bool \<times> 4 word \<times> 15 word)) \<Rightarrow> dfn'LoadMultipleExceptionReturn v48
          | Load (LoadMultipleUserRegisters (v49::bool \<times> bool \<times> 4 word \<times> 15 word)) \<Rightarrow> dfn'LoadMultipleUserRegisters v49*)
          | Load (LoadSignedByteUnprivileged (v50::bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset2)) \<Rightarrow> dfn'LoadSignedByteUnprivileged v50
          | Load (LoadUnprivileged (v51::bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1)) \<Rightarrow> dfn'LoadUnprivileged v51
          | Load (LoadWord (v52::bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1)) \<Rightarrow> dfn'LoadWord v52
          | Media (BitFieldClearOrInsert (v54::4 word \<times> 4 word \<times> nat \<times> nat)) \<Rightarrow> dfn'BitFieldClearOrInsert v54
          | Media (BitFieldExtract (v55::bool \<times> 4 word \<times> 4 word \<times> nat \<times> nat)) \<Rightarrow> dfn'BitFieldExtract v55 | Media (ByteReverse (v56::4 word \<times> 4 word)) \<Rightarrow> dfn'ByteReverse v56
          | Media (ByteReversePackedHalfword (v57::4 word \<times> 4 word)) \<Rightarrow> dfn'ByteReversePackedHalfword v57
          | Media (ByteReverseSignedHalfword (v58::4 word \<times> 4 word)) \<Rightarrow> dfn'ByteReverseSignedHalfword v58
          | Media (ExtendByte (v59::bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> nat)) \<Rightarrow> dfn'ExtendByte v59
          | Media (ExtendByte16 (v60::bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> nat)) \<Rightarrow> dfn'ExtendByte16 v60
          | Media (ExtendHalfword (v61::bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> nat)) \<Rightarrow> dfn'ExtendHalfword v61
          | Media (PackHalfword (v62::SRType \<times> nat \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'PackHalfword v62 | Media (ReverseBits (v63::4 word \<times> 4 word)) \<Rightarrow> dfn'ReverseBits v63
          | Media (Saturate (v64::SRType \<times> nat \<times> nat \<times> bool \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'Saturate v64 | Media (Saturate16 (v65::nat \<times> bool \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'Saturate16 v65
          | Media (SaturatingAddSubtract (v66::2 word \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'SaturatingAddSubtract v66
          | Media (SelectBytes (v67::4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'SelectBytes v67 | Multiply (Multiply32 (v69::bool \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'Multiply32 v69
          | Multiply (MultiplyAccumulate (v70::bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'MultiplyAccumulate v70
          | Multiply (MultiplyAccumulateAccumulate (v71::4 word \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'MultiplyAccumulateAccumulate v71
          | Multiply (MultiplyLong (v72::bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'MultiplyLong v72
          | Multiply (MultiplySubtract (v73::4 word \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'MultiplySubtract v73
          | Multiply (Signed16Multiply32Accumulate (v74::bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'Signed16Multiply32Accumulate v74
          | Multiply (Signed16Multiply32Result (v75::bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'Signed16Multiply32Result v75
          | Multiply (Signed16Multiply64Accumulate (v76::bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'Signed16Multiply64Accumulate v76
          | Multiply (Signed16x32Multiply32Accumulate (v77::bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'Signed16x32Multiply32Accumulate v77
          | Multiply (Signed16x32Multiply32Result (v78::bool \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'Signed16x32Multiply32Result v78
          | Multiply (SignedMostSignificantMultiply (v79::bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'SignedMostSignificantMultiply v79
          | Multiply (SignedMostSignificantMultiplySubtract (v80::bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'SignedMostSignificantMultiplySubtract v80
          | Multiply (SignedMultiplyDual (v81::bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'SignedMultiplyDual v81
          | Multiply (SignedMultiplyLongDual (v82::bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'SignedMultiplyLongDual v82 | NoOperation \<Rightarrow> dfn'NoOperation
          | SIMD (SignedAddSub16 (v84::2 word \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'SignedAddSub16 v84
          | SIMD (SignedAddSub8 (v85::bool \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'SignedAddSub8 v85
          | SIMD (SignedHalvingAddSub16 (v86::2 word \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'SignedHalvingAddSub16 v86
          | SIMD (SignedHalvingAddSub8 (v87::bool \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'SignedHalvingAddSub8 v87
          | SIMD (SignedSaturatingAddSub16 (v88::2 word \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'SignedSaturatingAddSub16 v88
          | SIMD (SignedSaturatingAddSub8 (v89::bool \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'SignedSaturatingAddSub8 v89
          | SIMD (UnsignedAddSub16 (v90::2 word \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'UnsignedAddSub16 v90
          | SIMD (UnsignedAddSub8 (v91::bool \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'UnsignedAddSub8 v91
          | SIMD (UnsignedHalvingAddSub16 (v92::2 word \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'UnsignedHalvingAddSub16 v92
          | SIMD (UnsignedHalvingAddSub8 (v93::bool \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'UnsignedHalvingAddSub8 v93
          | SIMD (UnsignedSaturatingAddSub16 (v94::2 word \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'UnsignedSaturatingAddSub16 v94
          | SIMD (UnsignedSaturatingAddSub8 (v95::bool \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'UnsignedSaturatingAddSub8 v95
          | SIMD (UnsignedSumAbsoluteDifferences (v96::4 word \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'UnsignedSumAbsoluteDifferences v96
          | Store (StoreByte (v98::bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1)) \<Rightarrow> dfn'StoreByte v98
          | Store (StoreByteUnprivileged (v99::bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1)) \<Rightarrow> dfn'StoreByteUnprivileged v99
          | Store (StoreDual (v100::bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> 4 word \<times> offset2)) \<Rightarrow> dfn'StoreDual v100
          | Store (StoreExclusive (v101::4 word \<times> 4 word \<times> 4 word \<times> 32 word)) \<Rightarrow> dfn'StoreExclusive v101
          | Store (StoreExclusiveByte (v102::4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'StoreExclusiveByte v102
          | Store (StoreExclusiveDoubleword (v103::4 word \<times> 4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'StoreExclusiveDoubleword v103
          | Store (StoreExclusiveHalf (v104::4 word \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'StoreExclusiveHalf v104
          | Store (StoreHalf (v105::bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1)) \<Rightarrow> dfn'StoreHalf v105
          | Store (StoreHalfUnprivileged (v106::bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset2)) \<Rightarrow> dfn'StoreHalfUnprivileged v106
         (* | Store (StoreMultiple (v107::bool \<times> bool \<times> bool \<times> 4 word \<times> 16 word)) \<Rightarrow> dfn'StoreMultiple v107
          | Store (StoreMultipleUserRegisters (v108::bool \<times> bool \<times> 4 word \<times> 16 word)) \<Rightarrow> dfn'StoreMultipleUserRegisters v108 *)
          | Store (StoreUnprivileged (v109::bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1)) \<Rightarrow> dfn'StoreUnprivileged v109
          | Store (StoreWord (v110::bool \<times> bool \<times> bool \<times> 4 word \<times> 4 word \<times> offset1)) \<Rightarrow> dfn'StoreWord v110 | Swap (v154::bool \<times> 4 word \<times> 4 word \<times> 4 word) \<Rightarrow> dfn'Swap v154
          | System (ChangeProcessorState (v112::bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> 5 word option)) \<Rightarrow> dfn'ChangeProcessorState v112
          | System (EnterxLeavex (v113::bool)) \<Rightarrow> dfn'EnterxLeavex v113 | System ExceptionReturn \<Rightarrow> dfn'ExceptionReturn
          | System (HypervisorCall (v114::16 word)) \<Rightarrow> dfn'HypervisorCall v114
          | System (MoveToBankedOrSpecialRegister (v115::bool \<times> 5 word \<times> 4 word)) \<Rightarrow> dfn'MoveToBankedOrSpecialRegister v115
          | System (MoveToRegisterFromBankedOrSpecial (v116::bool \<times> 5 word \<times> 4 word)) \<Rightarrow> dfn'MoveToRegisterFromBankedOrSpecial v116
          | System (MoveToRegisterFromSpecial (v117::bool \<times> 4 word)) \<Rightarrow> dfn'MoveToRegisterFromSpecial v117
          | System (MoveToSpecialFromImmediate (v118::bool \<times> 32 word \<times> 4 word)) \<Rightarrow> dfn'MoveToSpecialFromImmediate v118
          | System (MoveToSpecialFromRegister (v119::bool \<times> 4 word \<times> 4 word)) \<Rightarrow> dfn'MoveToSpecialFromRegister v119
          | System (ReturnFromException (v120::bool \<times> bool \<times> bool \<times> 4 word)) \<Rightarrow> dfn'ReturnFromException v120 | System (SecureMonitorCall (v121::4 word)) \<Rightarrow> dfn'SecureMonitorCall v121
          | System (Setend (v122::bool)) \<Rightarrow> dfn'Setend v122 | System (StoreReturnState (v123::bool \<times> bool \<times> bool \<times> 5 word)) \<Rightarrow> dfn'StoreReturnState v123
          | System (SupervisorCall (v124::32 word)) \<Rightarrow> dfn'SupervisorCall v124 | Undefined (v155::32 word) \<Rightarrow> dfn'Undefined v155
          | VFP (vadd (v127::bool \<times> 5 word \<times> 5 word \<times> 5 word)) \<Rightarrow> dfn'vadd v127 | VFP (vcmp (v128::bool \<times> 5 word \<times> 5 word option)) \<Rightarrow> dfn'vcmp v128
          | VFP (vcvt_float (v129::bool \<times> 5 word \<times> 5 word)) \<Rightarrow> dfn'vcvt_float v129 | VFP (vcvt_from_integer (v130::bool \<times> bool \<times> 5 word \<times> 5 word)) \<Rightarrow> dfn'vcvt_from_integer v130
          | VFP (vcvt_to_integer (v131::bool \<times> bool \<times> bool \<times> 5 word \<times> 5 word)) \<Rightarrow> dfn'vcvt_to_integer v131 | VFP (vdiv (v132::bool \<times> 5 word \<times> 5 word \<times> 5 word)) \<Rightarrow> dfn'vdiv v132
       (*   | VFP (vldm (v135::bool \<times> bool \<times> bool \<times> 5 word \<times> 4 word \<times> 8 word)) \<Rightarrow> dfn'vldm v135 | VFP (vldr (v136::bool \<times> bool \<times> 5 word \<times> 4 word \<times> 32 word)) \<Rightarrow> dfn'vldr v136*)
          | VFP (vmov (v138::bool \<times> 5 word \<times> 5 word)) \<Rightarrow> dfn'vmov v138 | VFP (vmov_double (v139::bool \<times> 4 word \<times> 4 word \<times> 5 word)) \<Rightarrow> dfn'vmov_double v139
          | VFP (vmov_imm (v140::bool \<times> 5 word \<times> 64 word)) \<Rightarrow> dfn'vmov_imm v140 | VFP (vmov_single (v141::bool \<times> 4 word \<times> 5 word)) \<Rightarrow> dfn'vmov_single v141
          | VFP (vmov_two_singles (v142::bool \<times> 4 word \<times> 4 word \<times> 5 word)) \<Rightarrow> dfn'vmov_two_singles v142 | VFP (vmrs (v143::4 word)) \<Rightarrow> dfn'vmrs v143
          | VFP (vmsr (v144::4 word)) \<Rightarrow> dfn'vmsr v144 | VFP (vmul (v145::bool \<times> 5 word \<times> 5 word \<times> 5 word)) \<Rightarrow> dfn'vmul v145
         (* | VFP (vsqrt (v148::bool \<times> 5 word \<times> 5 word)) \<Rightarrow> dfn'vsqrt v148 | VFP (vstm (v149::bool \<times> bool \<times> bool \<times> 5 word \<times> 4 word \<times> 8 word)) \<Rightarrow> dfn'vstm v149 *)
          | VFP (vstr (v150::bool \<times> bool \<times> 5 word \<times> 4 word \<times> 32 word)) \<Rightarrow> dfn'vstr v150 | VFP (vsub (v151::bool \<times> 5 word \<times> 5 word \<times> 5 word)) \<Rightarrow> dfn'vsub v151"


definition
"Fetch"
  :: "'b::mem_op state_scheme \<Rightarrow> MachineCode \<times> 'b state_scheme"
  where
"
Fetch \<equiv> bind (CurrentInstrSet ())
          (\<lambda>iset. bind (if iset = InstrSet_ARM then return True else bind (read_state Architecture) (\<lambda>v. return (v = ARMv4)))
                   (\<lambda>b. if b then bind (update_state (Encoding_update (\<lambda>_. Encoding_ARM)))
                                   (\<lambda>_. bind (read_state state.REG) (\<lambda>v. bind (bind (bind (return (v RName_PC)) (\<lambda>v. return (Addr v, 4))) MemA) (\<lambda>v. return (ARM v))))
                        else if iset = InstrSet_Jazelle then return (BadCode ''Fetch'')
                             else bind (read_state state.REG)
                                   (\<lambda>v. bind (return (v RName_PC))
                                         (\<lambda>fpc. bind (MemA (Addr fpc, 2))
                                                 (\<lambda>ireg. if word_extract 15 13 ireg = 7 \<and> word_extract 12 11 ireg \<noteq> 0
                                                         then bind (update_state (Encoding_update (\<lambda>_. Encoding_Thumb2)))
                                                               (\<lambda>_. bind (MemA (Addr (fpc + 2), 2)) (\<lambda>v. bind (return (ireg, v)) (\<lambda>v. return (Thumb2 v))))
                                                         else bind (update_state (Encoding_update (\<lambda>_. Encoding_Thumb)))
                                                               (\<lambda>_. bind (if iset = InstrSet_Thumb then return True else bind (HaveThumbEE ()) (\<lambda>v. return (\<not> v)))
                                                                      (\<lambda>b. return (if b then Thumb ireg else ThumbEE ireg))))))))"


ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("Do",
   close
     (tp[var_w("cond",4),var_b"defined"],
      mb(mw(close
              (var("s",qTy),
               rupd("state.CurrentCondition",tp[var("s",qTy),var_w("cond",4)],prev_thy))),
         close
           (var_a HOLogic.unitT,
            mb(call
                 ("ConditionPassed",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,prev_thy),
               close
                 (var_b"pass",
                  mb(mw(close
                          (var("s",qTy),
                           rupd
                             ("state.undefined",
                              tp[var("s",qTy),bop(And,var_b"pass",mop(Not,var_b"defined"))],
                              prev_thy))),
                     close(var_a HOLogic.unitT,mu(bop(And,var_b"pass",var_b"defined"),qTy)))))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("Skip",
   close
     (var_a HOLogic.unitT,
      mb(mr(close(var("s",qTy),call("state.undefined",HOLogic.boolT,var("s",qTy),prev_thy))),
         close
           (var_b"b",
            mu(ite(var_b"b",call("instruction.Undefined",@{typ instruction},lw(0,32),prev_thy),
                   Term.Const(@{const_name "NoOperation"},@{typ instruction})),qTy)))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("UndefinedARM",
   close
     (var_w("cond",4),
      mb(mw(close
              (var("s",qTy),
               rupd("state.CurrentCondition",tp[var("s",qTy),var_w("cond",4)],prev_thy ))),
         close
           (var_a HOLogic.unitT,
            mb(call
                 ("ConditionPassed",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,prev_thy ),
               close
                 (var_b"b",
                  mu(ite(var_b"b",
                         call("instruction.Undefined",@{typ instruction},lw(0,32),prev_thy ),
                         Term.Const(@{const_name "NoOperation"},@{typ instruction})),qTy)))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("UndefinedThumb",
   close
     (var_a HOLogic.unitT,
      mb(call("ThumbCondition",@{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,prev_thy ),
         close
           (var_w("v",4),
            call
              ("UndefinedARM",@{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
               var_w("v",4),@{theory})))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("DECODE_UNPREDICTABLE",
   close
     (tp[var("mc",@{typ MachineCode}),var_s"s"],
      call
        ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
         call
           ("exception.UNPREDICTABLE",@{typ exception},
            cc[ls"Decode ",
               cs(var("mc",@{typ MachineCode}),
                  [(call("MachineCode.ARM",@{typ MachineCode},var_w("opc",32),prev_thy ),
                    cc[mop(Cast(@{typ string}),mop(Cast(@{typ "bool list"}),var_w("opc",32))),
                       ls"; ARM; "]),
                   (call("MachineCode.Thumb",@{typ MachineCode},var_w("opc",16),prev_thy ),
                    cc[mop(Cast(@{typ string}),mop(Cast(@{typ "bool list"}),var_w("opc",16))),
                       ls"; Thumb; "]),
                   (call("MachineCode.ThumbEE",@{typ MachineCode},var_w("opc",16),prev_thy ),
                    cc[mop(Cast(@{typ string}),mop(Cast(@{typ "bool list"}),var_w("opc",16))),
                       ls"; ThumbEE; "]),
                   (call
                      ("MachineCode.Thumb2",@{typ MachineCode},
                       tp[var_w("opc1",16),var_w("opc2",16)],prev_thy ),
                    cc[mop(Cast(@{typ string}),mop(Cast(@{typ "bool list"}),var_w("opc1",16))),
                       ls", ",
                       mop(Cast(@{typ string}),mop(Cast(@{typ "bool list"}),var_w("opc2",16))),
                       ls"; Thumb2; "]),
                   (call("MachineCode.BadCode",@{typ MachineCode},var_s"x",prev_thy ),var_s"x")],
                  @{context}),var_s"s"],@{theory ARM_Monadic}),@{theory ARM_Monadic})))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("DecodeHint",
   close
     (tp[var_w("cond",4),var_w("op",8)],
      mb(mr(close
              (var("s",qTy),call("state.Architecture",@{typ Architecture},var("s",qTy),prev_thy ))),
         close
           (var("v",@{typ Architecture}),
            mb(mb(mu(eq(var("v",@{typ Architecture}),lc("ARMv6T2","Architecture",prev_thy )),qTy),
                  close
                    (var_b"b",
                     itb([(var_b"b",mu(lt,qTy)),
                          (eq(ex(var_w("op",8),ln 7,ln 4,w4),lw(15,4)),
                           mb(mr(close
                                   (var("s",qTy),
                                    call("state.Encoding",@{typ Encoding},var("s",qTy),prev_thy ))),
                              close
                                (var("v",@{typ Encoding}),
                                 mb(mu(eq(var("v",@{typ Encoding}),
                                          lc("Encoding_ARM","Encoding",prev_thy )),qTy),
                                    close
                                      (var_b"b",
                                       ite(var_b"b",
                                           mb(mr(close
                                                   (var("s",qTy),
                                                    call
                                                      ("state.Architecture",@{typ Architecture},
                                                       var("s",qTy),prev_thy ))),
                                              close
                                                (var("v",@{typ Architecture}),
                                                 mu(eq(var("v",@{typ Architecture}),
                                                       lc("ARMv6K","Architecture",prev_thy )),qTy))),
                                           mu(lf,qTy)))))))],mu(lf,qTy)))),
               close
                 (var_b"b",
                  ite(var_b"b",mu(Term.Const(@{const_name "NoOperation"},@{typ instruction}),qTy),
                      mb(call
                           ("ArchVersion",@{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                            prev_thy ),
                         close
                           (var_n"v",
                            mb(mb(mb(mb(mu(bop(Ge,var_n"v",ln 7),qTy),
                                        close
                                          (var_b"b",
                                           ite(var_b"b",mu(lt,qTy),
                                               mb(mr(close
                                                       (var("s",qTy),
                                                        call
                                                          ("state.Encoding",@{typ Encoding},
                                                           var("s",qTy),prev_thy ))),
                                                  close
                                                    (var("v",@{typ Encoding}),
                                                     mb(mu(eq(var("v",@{typ Encoding}),
                                                              lc("Encoding_ARM","Encoding",prev_thy )),
                                                           qTy),
                                                        close
                                                          (var_b"b",
                                                           ite(var_b"b",
                                                               mb(mr(close
                                                                       (var("s",qTy),
                                                                        call
                                                                          ("state.Architecture",
                                                                           @{typ Architecture},
                                                                           var("s",qTy),prev_thy ))),
                                                                  close
                                                                    (var("v",@{typ Architecture}),
                                                                     mu(eq(var("v",
                                                                               @{typ Architecture}),
                                                                           lc("ARMv6K",
                                                                              "Architecture",
                                                                              prev_thy )),qTy))),
                                                               mu(lf,qTy))))))))),
                                     close(var_b"v",mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                  close
                                    (var("v",@{typ "4 word \<times> bool"}),
                                     call
                                       ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                        var("v",@{typ "4 word \<times> bool"}),@{theory}))),
                               close
                                 (var_b"b",
                                  ite(var_b"b",
                                      mu(let'
                                           (tp[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                               var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
                                            call
                                              ("boolify'8",
                                               @{typ
                                               "bool \<times>
                                                bool \<times>
                                                bool \<times>
                                                bool \<times>
                                                bool \<times> bool \<times> bool \<times> bool"},
                                               var_w("op",8),prev_thy ),
                                            itb([(bop(And,mop(Not,var_b"b'7"),
                                                      bop(And,mop(Not,var_b"b'6"),
                                                          bop(And,mop(Not,var_b"b'5"),
                                                              bop(And,mop(Not,var_b"b'4"),
                                                                  bop(And,mop(Not,var_b"b'3"),
                                                                      bop(And,mop(Not,var_b"b'2"),
                                                                          bop(And,
                                                                              mop(Not,var_b"b'1"),
                                                                              var_b"b'0"))))))),
                                                  call
                                                    ("instruction.Hint",@{typ instruction},
                                                     Term.Const(@{const_name "Yield"},@{typ Hint}),
                                                     prev_thy )),
                                                 (bop(And,mop(Not,var_b"b'7"),
                                                      bop(And,mop(Not,var_b"b'6"),
                                                          bop(And,mop(Not,var_b"b'5"),
                                                              bop(And,mop(Not,var_b"b'4"),
                                                                  bop(And,mop(Not,var_b"b'3"),
                                                                      bop(And,mop(Not,var_b"b'2"),
                                                                          bop(And,var_b"b'1",
                                                                              mop(Not,var_b"b'0")))))))),
                                                  call
                                                    ("instruction.Hint",@{typ instruction},
                                                     Term.Const
                                                       (@{const_name "WaitForEvent"},@{typ Hint}),
                                                     prev_thy )),
                                                 (bop(And,mop(Not,var_b"b'7"),
                                                      bop(And,mop(Not,var_b"b'6"),
                                                          bop(And,mop(Not,var_b"b'5"),
                                                              bop(And,mop(Not,var_b"b'4"),
                                                                  bop(And,mop(Not,var_b"b'3"),
                                                                      bop(And,mop(Not,var_b"b'2"),
                                                                          bop(And,var_b"b'1",
                                                                              var_b"b'0"))))))),
                                                  call
                                                    ("instruction.Hint",@{typ instruction},
                                                     Term.Const
                                                       (@{const_name "WaitForInterrupt"},@{typ Hint}),
                                                     prev_thy )),
                                                 (bop(And,mop(Not,var_b"b'7"),
                                                      bop(And,mop(Not,var_b"b'6"),
                                                          bop(And,mop(Not,var_b"b'5"),
                                                              bop(And,mop(Not,var_b"b'4"),
                                                                  bop(And,mop(Not,var_b"b'3"),
                                                                      bop(And,var_b"b'2",
                                                                          bop(And,
                                                                              mop(Not,var_b"b'1"),
                                                                              mop(Not,var_b"b'0")))))))),
                                                  call
                                                    ("instruction.Hint",@{typ instruction},
                                                     Term.Const
                                                       (@{const_name "SendEvent"},@{typ Hint}),
                                                     prev_thy )),
                                                 (bop(And,var_b"b'7",
                                                      bop(And,var_b"b'6",
                                                          bop(And,var_b"b'5",var_b"b'4"))),
                                                  call
                                                    ("instruction.Hint",@{typ instruction},
                                                     call
                                                       ("Hint.Debug",@{typ Hint},
                                                        mop(Cast w4,
                                                            ll[var_b"b'3",var_b"b'2",var_b"b'1",
                                                               var_b"b'0"]),prev_thy ),prev_thy ))],
                                                Term.Const
                                                  (@{const_name "NoOperation"},@{typ instruction}))),
                                         qTy),
                                      call
                                        ("Skip",
                                         @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                         lu,@{theory})))))))))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("DecodeParallelAdditionSubtraction",
   close
     (tp[var_w("op1",2),var_w("op2",3),var_w("U",1),var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],
      ite(eq(var_w("U",1),lw(1,1)),
          let'
            (tp[var_w("v#0",2),var_b"v#1",var_b"v#2",var_b"v#3"],
             tp[var_w("op1",2),
                call("boolify'3",@{typ "bool \<times> bool \<times> bool"},var_w("op2",3),prev_thy )],
             cs(tp[var_w("v#0",2),var_b"v#1",var_b"v#2",var_b"v#3"],
                [(tp[var_w("v",2),lf,var_b"x'1",var_b"x'0"],
                  itb([(eq(var_w("v",2),lw(1,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.UnsignedAddSub16",@{typ SIMD},
                              tp[mop(Cast (Word_Lib.mk_wordT 2),ll[var_b"x'1",var_b"x'0"]),
                                 var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],prev_thy ),prev_thy )),
                       (eq(var_w("v",2),lw(2,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.UnsignedSaturatingAddSub16",@{typ SIMD},
                              tp[mop(Cast (Word_Lib.mk_wordT 2),ll[var_b"x'1",var_b"x'0"]),
                                 var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],prev_thy ),prev_thy )),
                       (eq(var_w("v",2),lw(3,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.UnsignedHalvingAddSub16",@{typ SIMD},
                              tp[mop(Cast (Word_Lib.mk_wordT 2),ll[var_b"x'1",var_b"x'0"]),
                                 var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],prev_thy ),prev_thy ))],
                      call("instruction.Undefined",@{typ instruction},lw(0,32),prev_thy ))),
                 (tp[var_w("v",2),lt,lt,lt],
                  itb([(eq(var_w("v",2),lw(1,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.UnsignedAddSub8",@{typ SIMD},
                              tp[lt,var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],prev_thy ),prev_thy )),
                       (eq(var_w("v",2),lw(2,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.UnsignedSaturatingAddSub8",@{typ SIMD},
                              tp[lt,var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],prev_thy ),prev_thy )),
                       (eq(var_w("v",2),lw(3,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.UnsignedHalvingAddSub8",@{typ SIMD},
                              tp[lt,var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],prev_thy ),prev_thy ))],
                      call("instruction.Undefined",@{typ instruction},lw(0,32),prev_thy ))),
                 (tp[var_w("v",2),lt,lf,lf],
                  itb([(eq(var_w("v",2),lw(1,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.UnsignedAddSub8",@{typ SIMD},
                              tp[lf,var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],prev_thy ),prev_thy )),
                       (eq(var_w("v",2),lw(2,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.UnsignedSaturatingAddSub8",@{typ SIMD},
                              tp[lf,var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],prev_thy ),prev_thy )),
                       (eq(var_w("v",2),lw(3,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.UnsignedHalvingAddSub8",@{typ SIMD},
                              tp[lf,var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],prev_thy ),prev_thy ))],
                      call("instruction.Undefined",@{typ instruction},lw(0,32),prev_thy ))),
                 (tp[var_w("v",2),var_b"v0",var_b"v1",var_b"v2"],
                  call("instruction.Undefined",@{typ instruction},lw(0,32),prev_thy ))],@{context})),
          let'
            (tp[var_w("v#4",2),var_b"v#5",var_b"v#6",var_b"v#7"],
             tp[var_w("op1",2),
                call("boolify'3",@{typ "bool \<times> bool \<times> bool"},var_w("op2",3),prev_thy )],
             cs(tp[var_w("v#4",2),var_b"v#5",var_b"v#6",var_b"v#7"],
                [(tp[var_w("v",2),lf,var_b"x'1",var_b"x'0"],
                  itb([(eq(var_w("v",2),lw(1,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.SignedAddSub16",@{typ SIMD},
                              tp[mop(Cast (Word_Lib.mk_wordT 2),ll[var_b"x'1",var_b"x'0"]),
                                 var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],prev_thy ),prev_thy )),
                       (eq(var_w("v",2),lw(2,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.SignedSaturatingAddSub16",@{typ SIMD},
                              tp[mop(Cast (Word_Lib.mk_wordT 2),ll[var_b"x'1",var_b"x'0"]),
                                 var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],prev_thy ),prev_thy )),
                       (eq(var_w("v",2),lw(3,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.SignedHalvingAddSub16",@{typ SIMD},
                              tp[mop(Cast (Word_Lib.mk_wordT 2),ll[var_b"x'1",var_b"x'0"]),
                                 var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],prev_thy ),prev_thy ))],
                      call("instruction.Undefined",@{typ instruction},lw(0,32),prev_thy ))),
                 (tp[var_w("v",2),lt,lt,lt],
                  itb([(eq(var_w("v",2),lw(1,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.SignedAddSub8",@{typ SIMD},
                              tp[lt,var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],prev_thy ),prev_thy )),
                       (eq(var_w("v",2),lw(2,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.SignedSaturatingAddSub8",@{typ SIMD},
                              tp[lt,var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],prev_thy ),prev_thy )),
                       (eq(var_w("v",2),lw(3,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.SignedHalvingAddSub8",@{typ SIMD},
                              tp[lt,var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],prev_thy ),prev_thy ))],
                      call("instruction.Undefined",@{typ instruction},lw(0,32),prev_thy ))),
                 (tp[var_w("v",2),lt,lf,lf],
                  itb([(eq(var_w("v",2),lw(1,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.SignedAddSub8",@{typ SIMD},
                              tp[lf,var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],prev_thy ),prev_thy )),
                       (eq(var_w("v",2),lw(2,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.SignedSaturatingAddSub8",@{typ SIMD},
                              tp[lf,var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],prev_thy ),prev_thy )),
                       (eq(var_w("v",2),lw(3,2)),
                        call
                          ("instruction.SIMD",@{typ instruction},
                           call
                             ("SIMD.SignedHalvingAddSub8",@{typ SIMD},
                              tp[lf,var_w("Rd",4),var_w("Rn",4),var_w("Rm",4)],prev_thy ),prev_thy ))],
                      call("instruction.Undefined",@{typ instruction},lw(0,32),prev_thy ))),
                 (tp[var_w("v",2),var_b"v0",var_b"v1",var_b"v2"],
                  call("instruction.Undefined",@{typ instruction},lw(0,32),prev_thy ))],@{context})))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("DecodeVFP",
   close
     (var_w("w",32),
      let'
        (tp[var_b"b'27",var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",
            var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",var_b"b'15",var_b"b'14",
            var_b"b'13",var_b"b'12",var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
            var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
         call
           ("boolify'28",
            @{typ
            "bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times>
             bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
            ex(var_w("w",32),ln 27,ln 0,(Word_Lib.mk_wordT 28)),prev_thy ),
         itb([(var_b"b'25",
               ite(bop(And,var_b"b'27",
                       bop(And,var_b"b'26",
                           bop(And,mop(Not,var_b"b'24"),
                               bop(And,var_b"b'11",bop(And,mop(Not,var_b"b'10"),var_b"b'9"))))),
                   itb([(bop(And,mop(Not,var_b"b'23"),mop(Not,var_b"b'4")),
                         let'
                           (var_w("Vm",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("M",1),mop(Cast w1,ll[var_b"b'5"]),
                               let'
                                 (var_w("op2",1),mop(Cast w1,ll[var_b"b'6"]),
                                  let'
                                    (var_w("N",1),mop(Cast w1,ll[var_b"b'7"]),
                                     let'
                                       (var_w("Vd",4),
                                        mop(Cast w4,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                        let'
                                          (var_w("Vn",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                              let'
                                                (var_b"dp_operation",
                                                 eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                                 let'
                                                   (tp[var_w("d",5),var_w("n",5),var_w("m",5)],
                                                    ite(var_b"dp_operation",
                                                        tp[cc[var_w("D",1),var_w("Vd",4)],
                                                           cc[var_w("N",1),var_w("Vn",4)],
                                                           cc[var_w("M",1),var_w("Vm",4)]],
                                                        tp[cc[var_w("Vd",4),var_w("D",1)],
                                                           cc[var_w("Vn",4),var_w("N",1)],
                                                           cc[var_w("Vm",4),var_w("M",1)]]),
                                                    mb(mr(close
                                                            (var("s",qTy),
                                                             call
                                                               ("state.VFPExtension",
                                                                @{typ VFPExtension},var("s",qTy),
                                                                prev_thy ))),
                                                       close
                                                         (var("v",@{typ VFPExtension}),
                                                          mb(mb(mu(eq(var("v",@{typ VFPExtension}),
                                                                      lc("NoVFP","VFPExtension",
                                                                         prev_thy )),qTy),
                                                                close
                                                                  (var_b"v",
                                                                   mu(mop(Not,var_b"v"),qTy))),
                                                             close
                                                               (var_b"v",
                                                                mu(tp[var_b"v",
                                                                      call
                                                                        ("instruction.VFP",
                                                                         @{typ instruction},
                                                                         cs(mop(Cast
                                                                                  (Word_Lib.mk_wordT 2),
                                                                                ll[var_b"b'21",
                                                                                   var_b"b'20"]),
                                                                            [(var_w("v",2),
                                                                              itb([(eq(var_w("v",2),
                                                                                       lw(0,2)),
                                                                                    call
                                                                                      ("VFP.vmla_vmls",
                                                                                       @{typ VFP},
                                                                                       tp[var_b"dp_operation",
                                                                                          eq(var_w("op2",1),
                                                                                             lw(0,1)),
                                                                                          var_w("d",5),
                                                                                          var_w("n",5),
                                                                                          var_w("m",5)],
                                                                                       prev_thy )),
                                                                                   (eq(var_w("v",2),
                                                                                       lw(1,2)),
                                                                                    call
                                                                                      ("VFP.vneg_mul",
                                                                                       @{typ VFP},
                                                                                       tp[var_b"dp_operation",
                                                                                          ite(eq(var_w("op2",1),
                                                                                                 lw(1,
                                                                                                    1)),
                                                                                              lc("VFPNegMul_VNMLA",
                                                                                                 "VFPNegMul",
                                                                                                 prev_thy ),
                                                                                              lc("VFPNegMul_VNMLS",
                                                                                                 "VFPNegMul",
                                                                                                 prev_thy )),
                                                                                          var_w("d",5),
                                                                                          var_w("n",5),
                                                                                          var_w("m",5)],
                                                                                       prev_thy )),
                                                                                   (eq(var_w("v",2),
                                                                                       lw(2,2)),
                                                                                    ite(eq(var_w("op2",1),
                                                                                           lw(1,1)),
                                                                                        call
                                                                                          ("VFP.vneg_mul",
                                                                                           @{typ VFP},
                                                                                           tp[var_b"dp_operation",
                                                                                              lc("VFPNegMul_VNMUL",
                                                                                                 "VFPNegMul",
                                                                                                 prev_thy ),
                                                                                              var_w("d",5),
                                                                                              var_w("n",5),
                                                                                              var_w("m",5)],
                                                                                           prev_thy ),
                                                                                        call
                                                                                          ("VFP.vmul",
                                                                                           @{typ VFP},
                                                                                           tp[var_b"dp_operation",
                                                                                              var_w("d",5),
                                                                                              var_w("n",5),
                                                                                              var_w("m",5)],
                                                                                           prev_thy ))),
                                                                                   (eq(var_w("v",2),
                                                                                       lw(3,2)),
                                                                                    ite(eq(var_w("op2",1),
                                                                                           lw(1,1)),
                                                                                        call
                                                                                          ("VFP.vsub",
                                                                                           @{typ VFP},
                                                                                           tp[var_b"dp_operation",
                                                                                              var_w("d",5),
                                                                                              var_w("n",5),
                                                                                              var_w("m",5)],
                                                                                           prev_thy ),
                                                                                        call
                                                                                          ("VFP.vadd",
                                                                                           @{typ VFP},
                                                                                           tp[var_b"dp_operation",
                                                                                              var_w("d",5),
                                                                                              var_w("n",5),
                                                                                              var_w("m",5)],
                                                                                           prev_thy )))],
                                                                                  lx @{typ VFP}))],
                                                                            @{context}),prev_thy )],
                                                                   qTy))))))))))))))),
                        (bop(And,var_b"b'23",
                             bop(And,mop(Not,var_b"b'21"),
                                 bop(And,mop(Not,var_b"b'20"),
                                     bop(And,mop(Not,var_b"b'6"),mop(Not,var_b"b'4"))))),
                         let'
                           (var_w("Vm",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("M",1),mop(Cast w1,ll[var_b"b'5"]),
                               let'
                                 (var_w("N",1),mop(Cast w1,ll[var_b"b'7"]),
                                  let'
                                    (var_w("Vd",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("Vn",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        let'
                                          (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                           let'
                                             (var_b"dp_operation",
                                              eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                              let'
                                                (tp[var_w("d",5),var_w("n",5),var_w("m",5)],
                                                 ite(var_b"dp_operation",
                                                     tp[cc[var_w("D",1),var_w("Vd",4)],
                                                        cc[var_w("N",1),var_w("Vn",4)],
                                                        cc[var_w("M",1),var_w("Vm",4)]],
                                                     tp[cc[var_w("Vd",4),var_w("D",1)],
                                                        cc[var_w("Vn",4),var_w("N",1)],
                                                        cc[var_w("Vm",4),var_w("M",1)]]),
                                                 mb(mr(close
                                                         (var("s",qTy),
                                                          call
                                                            ("state.VFPExtension",
                                                             @{typ VFPExtension},var("s",qTy),
                                                             prev_thy ))),
                                                    close
                                                      (var("v",@{typ VFPExtension}),
                                                       mb(mb(mu(eq(var("v",@{typ VFPExtension}),
                                                                   lc("NoVFP","VFPExtension",
                                                                      prev_thy )),qTy),
                                                             close
                                                               (var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                                          close
                                                            (var_b"v",
                                                             mu(tp[var_b"v",
                                                                   call
                                                                     ("instruction.VFP",
                                                                      @{typ instruction},
                                                                      call
                                                                        ("VFP.vdiv",@{typ VFP},
                                                                         tp[var_b"dp_operation",
                                                                            var_w("d",5),
                                                                            var_w("n",5),
                                                                            var_w("m",5)],prev_thy ),
                                                                      prev_thy )],qTy)))))))))))))),
                        (bop(And,var_b"b'23",
                             bop(And,mop(Not,var_b"b'21"),bop(And,var_b"b'20",mop(Not,var_b"b'4")))),
                         let'
                           (var_w("Vm",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("M",1),mop(Cast w1,ll[var_b"b'5"]),
                               let'
                                 (var_w("N",1),mop(Cast w1,ll[var_b"b'7"]),
                                  let'
                                    (var_w("Vd",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("Vn",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        let'
                                          (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                           let'
                                             (var_b"dp_operation",
                                              eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                              let'
                                                (tp[var_w("d",5),var_w("n",5),var_w("m",5)],
                                                 ite(var_b"dp_operation",
                                                     tp[cc[var_w("D",1),var_w("Vd",4)],
                                                        cc[var_w("N",1),var_w("Vn",4)],
                                                        cc[var_w("M",1),var_w("Vm",4)]],
                                                     tp[cc[var_w("Vd",4),var_w("D",1)],
                                                        cc[var_w("Vn",4),var_w("N",1)],
                                                        cc[var_w("Vm",4),var_w("M",1)]]),
                                                 mb(mr(close
                                                         (var("s",qTy),
                                                          call
                                                            ("state.VFPExtension",
                                                             @{typ VFPExtension},var("s",qTy),
                                                             prev_thy ))),
                                                    close
                                                      (var("v",@{typ VFPExtension}),
                                                       mb(mu(eq(var("v",@{typ VFPExtension}),
                                                                lc("VFPv4","VFPExtension",prev_thy )),
                                                             qTy),
                                                          close
                                                            (var_b"v",
                                                             mu(tp[var_b"v",
                                                                   call
                                                                     ("instruction.VFP",
                                                                      @{typ instruction},
                                                                      call
                                                                        ("VFP.vfnma_vfnms",
                                                                         @{typ VFP},
                                                                         tp[var_b"dp_operation",
                                                                            eq(mop(Cast w1,
                                                                                   ll[var_b"b'6"]),
                                                                               lw(0,1)),
                                                                            var_w("d",5),
                                                                            var_w("n",5),
                                                                            var_w("m",5)],prev_thy ),
                                                                      prev_thy )],qTy)))))))))))))),
                        (bop(And,var_b"b'23",
                             bop(And,var_b"b'21",bop(And,mop(Not,var_b"b'20"),mop(Not,var_b"b'4")))),
                         let'
                           (var_w("Vm",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("M",1),mop(Cast w1,ll[var_b"b'5"]),
                               let'
                                 (var_w("N",1),mop(Cast w1,ll[var_b"b'7"]),
                                  let'
                                    (var_w("Vd",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("Vn",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        let'
                                          (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                           let'
                                             (var_b"dp_operation",
                                              eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                              let'
                                                (tp[var_w("d",5),var_w("n",5),var_w("m",5)],
                                                 ite(var_b"dp_operation",
                                                     tp[cc[var_w("D",1),var_w("Vd",4)],
                                                        cc[var_w("N",1),var_w("Vn",4)],
                                                        cc[var_w("M",1),var_w("Vm",4)]],
                                                     tp[cc[var_w("Vd",4),var_w("D",1)],
                                                        cc[var_w("Vn",4),var_w("N",1)],
                                                        cc[var_w("Vm",4),var_w("M",1)]]),
                                                 mb(mr(close
                                                         (var("s",qTy),
                                                          call
                                                            ("state.VFPExtension",
                                                             @{typ VFPExtension},var("s",qTy),
                                                             prev_thy ))),
                                                    close
                                                      (var("v",@{typ VFPExtension}),
                                                       mb(mu(eq(var("v",@{typ VFPExtension}),
                                                                lc("VFPv4","VFPExtension",prev_thy )),
                                                             qTy),
                                                          close
                                                            (var_b"v",
                                                             mu(tp[var_b"v",
                                                                   call
                                                                     ("instruction.VFP",
                                                                      @{typ instruction},
                                                                      call
                                                                        ("VFP.vfma_vfms",@{typ VFP},
                                                                         tp[var_b"dp_operation",
                                                                            eq(mop(Cast w1,
                                                                                   ll[var_b"b'6"]),
                                                                               lw(0,1)),
                                                                            var_w("d",5),
                                                                            var_w("n",5),
                                                                            var_w("m",5)],prev_thy ),
                                                                      prev_thy )],qTy)))))))))))))),
                        (bop(And,var_b"b'23",
                             bop(And,var_b"b'21",
                                 bop(And,var_b"b'20",
                                     bop(And,mop(Not,var_b"b'19"),
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,mop(Not,var_b"b'17"),
                                                 bop(And,mop(Not,var_b"b'16"),
                                                     bop(And,mop(Not,var_b"b'7"),
                                                         bop(And,var_b"b'6",mop(Not,var_b"b'4")))))))))),
                         let'
                           (var_w("Vm",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("M",1),mop(Cast w1,ll[var_b"b'5"]),
                               let'
                                 (var_w("Vd",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                     let'
                                       (var_b"single_register",
                                        eq(mop(Cast w1,ll[var_b"b'8"]),lw(0,1)),
                                        let'
                                          (tp[var_w("d",5),var_w("m",5)],
                                           ite(var_b"single_register",
                                               tp[cc[var_w("Vd",4),var_w("D",1)],
                                                  cc[var_w("Vm",4),var_w("M",1)]],
                                               tp[cc[var_w("D",1),var_w("Vd",4)],
                                                  cc[var_w("M",1),var_w("Vm",4)]]),
                                           mb(mr(close
                                                   (var("s",qTy),
                                                    call
                                                      ("state.VFPExtension",@{typ VFPExtension},
                                                       var("s",qTy),prev_thy ))),
                                              close
                                                (var("v",@{typ VFPExtension}),
                                                 mb(mb(mu(eq(var("v",@{typ VFPExtension}),
                                                             lc("NoVFP","VFPExtension",prev_thy )),
                                                          qTy),
                                                       close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                                    close
                                                      (var_b"v",
                                                       mu(tp[var_b"v",
                                                             call
                                                               ("instruction.VFP",
                                                                @{typ instruction},
                                                                call
                                                                  ("VFP.vmov",@{typ VFP},
                                                                   tp[var_b"single_register",
                                                                      var_w("d",5),var_w("m",5)],
                                                                   prev_thy ),prev_thy )],qTy)))))))))))),
                        (bop(And,var_b"b'23",
                             bop(And,var_b"b'21",
                                 bop(And,var_b"b'20",
                                     bop(And,mop(Not,var_b"b'19"),
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,mop(Not,var_b"b'17"),
                                                 bop(And,mop(Not,var_b"b'16"),
                                                     bop(And,var_b"b'7",
                                                         bop(And,var_b"b'6",mop(Not,var_b"b'4")))))))))),
                         let'
                           (var_w("Vm",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("M",1),mop(Cast w1,ll[var_b"b'5"]),
                               let'
                                 (var_w("Vd",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                     let'
                                       (var_b"dp_operation",eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                        let'
                                          (tp[var_w("d",5),var_w("m",5)],
                                           ite(var_b"dp_operation",
                                               tp[cc[var_w("D",1),var_w("Vd",4)],
                                                  cc[var_w("M",1),var_w("Vm",4)]],
                                               tp[cc[var_w("Vd",4),var_w("D",1)],
                                                  cc[var_w("Vm",4),var_w("M",1)]]),
                                           mb(mr(close
                                                   (var("s",qTy),
                                                    call
                                                      ("state.VFPExtension",@{typ VFPExtension},
                                                       var("s",qTy),prev_thy ))),
                                              close
                                                (var("v",@{typ VFPExtension}),
                                                 mb(mb(mu(eq(var("v",@{typ VFPExtension}),
                                                             lc("NoVFP","VFPExtension",prev_thy )),
                                                          qTy),
                                                       close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                                    close
                                                      (var_b"v",
                                                       mu(tp[var_b"v",
                                                             call
                                                               ("instruction.VFP",
                                                                @{typ instruction},
                                                                call
                                                                  ("VFP.vabs",@{typ VFP},
                                                                   tp[var_b"dp_operation",
                                                                      var_w("d",5),var_w("m",5)],
                                                                   prev_thy ),prev_thy )],qTy)))))))))))),
                        (bop(And,var_b"b'23",
                             bop(And,var_b"b'21",
                                 bop(And,var_b"b'20",
                                     bop(And,mop(Not,var_b"b'19"),
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,mop(Not,var_b"b'17"),
                                                 bop(And,var_b"b'16",
                                                     bop(And,mop(Not,var_b"b'7"),
                                                         bop(And,var_b"b'6",mop(Not,var_b"b'4")))))))))),
                         let'
                           (var_w("Vm",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("M",1),mop(Cast w1,ll[var_b"b'5"]),
                               let'
                                 (var_w("Vd",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                     let'
                                       (var_b"dp_operation",eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                        let'
                                          (tp[var_w("d",5),var_w("m",5)],
                                           ite(var_b"dp_operation",
                                               tp[cc[var_w("D",1),var_w("Vd",4)],
                                                  cc[var_w("M",1),var_w("Vm",4)]],
                                               tp[cc[var_w("Vd",4),var_w("D",1)],
                                                  cc[var_w("Vm",4),var_w("M",1)]]),
                                           mb(mr(close
                                                   (var("s",qTy),
                                                    call
                                                      ("state.VFPExtension",@{typ VFPExtension},
                                                       var("s",qTy),prev_thy ))),
                                              close
                                                (var("v",@{typ VFPExtension}),
                                                 mb(mb(mu(eq(var("v",@{typ VFPExtension}),
                                                             lc("NoVFP","VFPExtension",prev_thy )),
                                                          qTy),
                                                       close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                                    close
                                                      (var_b"v",
                                                       mu(tp[var_b"v",
                                                             call
                                                               ("instruction.VFP",
                                                                @{typ instruction},
                                                                call
                                                                  ("VFP.vneg",@{typ VFP},
                                                                   tp[var_b"dp_operation",
                                                                      var_w("d",5),var_w("m",5)],
                                                                   prev_thy ),prev_thy )],qTy)))))))))))),
                        (bop(And,var_b"b'23",
                             bop(And,var_b"b'21",
                                 bop(And,var_b"b'20",
                                     bop(And,mop(Not,var_b"b'19"),
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,mop(Not,var_b"b'17"),
                                                 bop(And,var_b"b'16",
                                                     bop(And,var_b"b'7",
                                                         bop(And,var_b"b'6",mop(Not,var_b"b'4")))))))))),
                         let'
                           (var_w("Vm",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("M",1),mop(Cast w1,ll[var_b"b'5"]),
                               let'
                                 (var_w("Vd",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                     let'
                                       (var_b"dp_operation",eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                        let'
                                          (tp[var_w("d",5),var_w("m",5)],
                                           ite(var_b"dp_operation",
                                               tp[cc[var_w("D",1),var_w("Vd",4)],
                                                  cc[var_w("M",1),var_w("Vm",4)]],
                                               tp[cc[var_w("Vd",4),var_w("D",1)],
                                                  cc[var_w("Vm",4),var_w("M",1)]]),
                                           mb(mr(close
                                                   (var("s",qTy),
                                                    call
                                                      ("state.VFPExtension",@{typ VFPExtension},
                                                       var("s",qTy),prev_thy ))),
                                              close
                                                (var("v",@{typ VFPExtension}),
                                                 mb(mb(mu(eq(var("v",@{typ VFPExtension}),
                                                             lc("NoVFP","VFPExtension",prev_thy )),
                                                          qTy),
                                                       close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                                    close
                                                      (var_b"v",
                                                       mu(tp[var_b"v",
                                                             call
                                                               ("instruction.VFP",
                                                                @{typ instruction},
                                                                call
                                                                  ("VFP.vsqrt",@{typ VFP},
                                                                   tp[var_b"dp_operation",
                                                                      var_w("d",5),var_w("m",5)],
                                                                   prev_thy ),prev_thy )],qTy)))))))))))),
                        (bop(And,var_b"b'23",
                             bop(And,var_b"b'21",
                                 bop(And,var_b"b'20",
                                     bop(And,mop(Not,var_b"b'19"),
                                         bop(And,var_b"b'18",
                                             bop(And,mop(Not,var_b"b'17"),
                                                 bop(And,mop(Not,var_b"b'16"),
                                                     bop(And,var_b"b'6",mop(Not,var_b"b'4"))))))))),
                         let'
                           (var_w("Vm",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("M",1),mop(Cast w1,ll[var_b"b'5"]),
                               let'
                                 (var_w("Vd",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                     ite(eq(mop(Cast w1,ll[var_b"b'7"]),lw(1,1)),
                                         let'
                                           (var_b"dp_operation",
                                            eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                            let'
                                              (tp[var_w("d",5),var_w("m",5)],
                                               ite(var_b"dp_operation",
                                                   tp[cc[var_w("D",1),var_w("Vd",4)],
                                                      cc[var_w("M",1),var_w("Vm",4)]],
                                                   tp[cc[var_w("Vd",4),var_w("D",1)],
                                                      cc[var_w("Vm",4),var_w("M",1)]]),
                                               mb(mr(close
                                                       (var("s",qTy),
                                                        call
                                                          ("state.VFPExtension",@{typ VFPExtension},
                                                           var("s",qTy),prev_thy ))),
                                                  close
                                                    (var("v",@{typ VFPExtension}),
                                                     mb(mb(mu(eq(var("v",@{typ VFPExtension}),
                                                                 lc("NoVFP","VFPExtension",prev_thy )),
                                                              qTy),
                                                           close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                                        close
                                                          (var_b"v",
                                                           mu(tp[var_b"v",
                                                                 call
                                                                   ("instruction.VFP",
                                                                    @{typ instruction},
                                                                    call
                                                                      ("VFP.vcmp",@{typ VFP},
                                                                       tp[var_b"dp_operation",
                                                                          var_w("d",5),
                                                                          mop(Some,var_w("m",5))],
                                                                       prev_thy ),prev_thy )],qTy))))))),
                                         mu(tp[lf,
                                               call
                                                 ("instruction.Undefined",@{typ instruction},
                                                  lw(0,32),prev_thy )],qTy))))))),
                        (bop(And,var_b"b'23",
                             bop(And,var_b"b'21",
                                 bop(And,var_b"b'20",
                                     bop(And,mop(Not,var_b"b'19"),
                                         bop(And,var_b"b'18",
                                             bop(And,mop(Not,var_b"b'17"),
                                                 bop(And,var_b"b'16",
                                                     bop(And,var_b"b'6",mop(Not,var_b"b'4"))))))))),
                         let'
                           (var_w("Vd",4),
                            mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                            let'
                              (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                               ite(eq(mop(Cast w1,ll[var_b"b'7"]),lw(1,1)),
                                   let'
                                     (var_b"dp_operation",eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                      mb(mr(close
                                              (var("s",qTy),
                                               call
                                                 ("state.VFPExtension",@{typ VFPExtension},
                                                  var("s",qTy),prev_thy ))),
                                         close
                                           (var("v",@{typ VFPExtension}),
                                            mb(mb(mu(eq(var("v",@{typ VFPExtension}),
                                                        lc("NoVFP","VFPExtension",prev_thy )),qTy),
                                                  close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                               close
                                                 (var_b"v",
                                                  mu(tp[var_b"v",
                                                        call
                                                          ("instruction.VFP",@{typ instruction},
                                                           call
                                                             ("VFP.vcmp",@{typ VFP},
                                                              tp[var_b"dp_operation",
                                                                 ite(var_b"dp_operation",
                                                                     cc[var_w("D",1),var_w("Vd",4)],
                                                                     cc[var_w("Vd",4),var_w("D",1)]),
                                                                 lo (Word_Lib.mk_wordT 5)],prev_thy ),
                                                           prev_thy )],qTy)))))),
                                   mu(tp[lf,
                                         call
                                           ("instruction.Undefined",@{typ instruction},lw(0,32),
                                            prev_thy )],qTy))))),
                        (bop(And,var_b"b'23",
                             bop(And,var_b"b'21",
                                 bop(And,var_b"b'20",
                                     bop(And,mop(Not,var_b"b'19"),
                                         bop(And,var_b"b'18",
                                             bop(And,var_b"b'17",
                                                 bop(And,var_b"b'16",
                                                     bop(And,var_b"b'7",
                                                         bop(And,var_b"b'6",mop(Not,var_b"b'4")))))))))),
                         let'
                           (var_w("Vm",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("M",1),mop(Cast w1,ll[var_b"b'5"]),
                               let'
                                 (var_w("Vd",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                     let'
                                       (var_b"double_to_single",
                                        eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                        let'
                                          (tp[var_w("d",5),var_w("m",5)],
                                           ite(var_b"double_to_single",
                                               tp[cc[var_w("Vd",4),var_w("D",1)],
                                                  cc[var_w("M",1),var_w("Vm",4)]],
                                               tp[cc[var_w("D",1),var_w("Vd",4)],
                                                  cc[var_w("Vm",4),var_w("M",1)]]),
                                           mb(mr(close
                                                   (var("s",qTy),
                                                    call
                                                      ("state.VFPExtension",@{typ VFPExtension},
                                                       var("s",qTy),prev_thy ))),
                                              close
                                                (var("v",@{typ VFPExtension}),
                                                 mb(mb(mu(eq(var("v",@{typ VFPExtension}),
                                                             lc("NoVFP","VFPExtension",prev_thy )),
                                                          qTy),
                                                       close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                                    close
                                                      (var_b"v",
                                                       mu(tp[var_b"v",
                                                             call
                                                               ("instruction.VFP",
                                                                @{typ instruction},
                                                                call
                                                                  ("VFP.vcvt_float",@{typ VFP},
                                                                   tp[var_b"double_to_single",
                                                                      var_w("d",5),var_w("m",5)],
                                                                   prev_thy ),prev_thy )],qTy)))))))))))),
                        (bop(And,var_b"b'23",
                             bop(And,var_b"b'21",
                                 bop(And,var_b"b'20",
                                     bop(And,var_b"b'19",
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,mop(Not,var_b"b'17"),
                                                 bop(And,mop(Not,var_b"b'16"),
                                                     bop(And,var_b"b'6",mop(Not,var_b"b'4"))))))))),
                         let'
                           (var_w("Vd",4),
                            mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                            let'
                              (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                               let'
                                 (var_b"dp_operation",eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                  mb(mr(close
                                          (var("s",qTy),
                                           call
                                             ("state.VFPExtension",@{typ VFPExtension},var("s",qTy),
                                              prev_thy ))),
                                     close
                                       (var("v",@{typ VFPExtension}),
                                        mb(mb(mu(eq(var("v",@{typ VFPExtension}),
                                                    lc("NoVFP","VFPExtension",prev_thy )),qTy),
                                              close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                           close
                                             (var_b"v",
                                              mu(tp[var_b"v",
                                                    call
                                                      ("instruction.VFP",@{typ instruction},
                                                       call
                                                         ("VFP.vcvt_from_integer",@{typ VFP},
                                                          tp[var_b"dp_operation",
                                                             eq(mop(Cast w1,ll[var_b"b'7"]),lw(0,1)),
                                                             ite(var_b"dp_operation",
                                                                 cc[var_w("D",1),var_w("Vd",4)],
                                                                 cc[var_w("Vd",4),var_w("D",1)]),
                                                             cc[mop(Cast w4,
                                                                    ll[var_b"b'3",var_b"b'2",
                                                                       var_b"b'1",var_b"b'0"]),
                                                                mop(Cast w1,ll[var_b"b'5"])]],
                                                          prev_thy ),prev_thy )],qTy))))))))),
                        (bop(And,var_b"b'23",
                             bop(And,var_b"b'21",
                                 bop(And,var_b"b'20",
                                     bop(And,var_b"b'19",
                                         bop(And,var_b"b'18",
                                             bop(And,mop(Not,var_b"b'17"),
                                                 bop(And,var_b"b'6",mop(Not,var_b"b'4")))))))),
                         let'
                           (var_w("Vm",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("M",1),mop(Cast w1,ll[var_b"b'5"]),
                               let'
                                 (var_b"dp_operation",eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                  mb(mr(close
                                          (var("s",qTy),
                                           call
                                             ("state.VFPExtension",@{typ VFPExtension},var("s",qTy),
                                              prev_thy ))),
                                     close
                                       (var("v",@{typ VFPExtension}),
                                        mb(mb(mu(eq(var("v",@{typ VFPExtension}),
                                                    lc("NoVFP","VFPExtension",prev_thy )),qTy),
                                              close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                           close
                                             (var_b"v",
                                              mu(tp[var_b"v",
                                                    call
                                                      ("instruction.VFP",@{typ instruction},
                                                       call
                                                         ("VFP.vcvt_to_integer",@{typ VFP},
                                                          tp[var_b"dp_operation",
                                                             eq(mop(Cast w1,ll[var_b"b'16"]),lw(0,1)),
                                                             eq(mop(Cast w1,ll[var_b"b'7"]),lw(1,1)),
                                                             cc[mop(Cast w4,
                                                                    ll[var_b"b'15",var_b"b'14",
                                                                       var_b"b'13",var_b"b'12"]),
                                                                mop(Cast w1,ll[var_b"b'22"])],
                                                             ite(var_b"dp_operation",
                                                                 cc[var_w("M",1),var_w("Vm",4)],
                                                                 cc[var_w("Vm",4),var_w("M",1)])],
                                                          prev_thy ),prev_thy )],qTy))))))))),
                        (bop(And,var_b"b'23",
                             bop(And,var_b"b'21",
                                 bop(And,var_b"b'20",
                                     bop(And,mop(Not,var_b"b'6"),mop(Not,var_b"b'4"))))),
                         let'
                           (var_w("Vd",4),
                            mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                            let'
                              (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                               let'
                                 (var_b"single_register",eq(mop(Cast w1,ll[var_b"b'8"]),lw(0,1)),
                                  mb(mr(close
                                          (var("s",qTy),
                                           call
                                             ("state.VFPExtension",@{typ VFPExtension},var("s",qTy),
                                              prev_thy ))),
                                     close
                                       (var("v",@{typ VFPExtension}),
                                        mb(mu(bop(In,var("v",@{typ VFPExtension}),
                                                  sl[lc("VFPv3","VFPExtension",prev_thy ),
                                                     lc("VFPv4","VFPExtension",prev_thy )]),qTy),
                                           close
                                             (var_b"v",
                                              mu(tp[var_b"v",
                                                    call
                                                      ("instruction.VFP",@{typ instruction},
                                                       call
                                                         ("VFP.vmov_imm",@{typ VFP},
                                                          tp[var_b"single_register",
                                                             ite(var_b"single_register",
                                                                 cc[var_w("Vd",4),var_w("D",1)],
                                                                 cc[var_w("D",1),var_w("Vd",4)]),
                                                             call
                                                               ("VFPExpandImm",w64,
                                                                tp[cc[mop(Cast w4,
                                                                          ll[var_b"b'19",
                                                                             var_b"b'18",
                                                                             var_b"b'17",var_b"b'16"]),
                                                                      mop(Cast w4,
                                                                          ll[var_b"b'3",var_b"b'2",
                                                                             var_b"b'1",var_b"b'0"])],
                                                                   var_b"single_register"],@{theory} )],
                                                          prev_thy ),prev_thy )],qTy))))))))),
                        (bop(And,mop(Not,var_b"b'23"),
                             bop(And,mop(Not,var_b"b'22"),
                                 bop(And,mop(Not,var_b"b'21"),
                                     bop(And,mop(Not,var_b"b'8"),var_b"b'4")))),
                         let'
                           (var_w("Rt",4),
                            mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                            ite(eq(var_w("Rt",4),lw(15,4)),
                                call
                                  ("raise'exception",
                                   @{typ
                                   "'b state_scheme \<Rightarrow> ((bool \<times> instruction) \<times> 'b state_scheme)"},
                                   call
                                     ("exception.UNPREDICTABLE",@{typ exception},
                                      ls"DecodeVFP: vmov_single",@{theory ARM_Monadic}),@{theory ARM_Monadic}),
                                mb(mr(close
                                        (var("s",qTy),
                                         call
                                           ("state.VFPExtension",@{typ VFPExtension},var("s",qTy),
                                            prev_thy ))),
                                   close
                                     (var("v",@{typ VFPExtension}),
                                      mb(mb(mu(eq(var("v",@{typ VFPExtension}),
                                                  lc("NoVFP","VFPExtension",prev_thy )),qTy),
                                            close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                         close
                                           (var_b"v",
                                            mu(tp[var_b"v",
                                                  call
                                                    ("instruction.VFP",@{typ instruction},
                                                     call
                                                       ("VFP.vmov_single",@{typ VFP},
                                                        tp[eq(mop(Cast w1,ll[var_b"b'20"]),lw(1,1)),
                                                           var_w("Rt",4),
                                                           cc[mop(Cast w4,
                                                                  ll[var_b"b'19",var_b"b'18",
                                                                     var_b"b'17",var_b"b'16"]),
                                                              mop(Cast w1,ll[var_b"b'7"])]],
                                                        prev_thy ),prev_thy )],qTy)))))))),
                        (bop(And,var_b"b'23",
                             bop(And,var_b"b'22",
                                 bop(And,var_b"b'21",
                                     bop(And,mop(Not,var_b"b'19"),
                                         bop(And,mop(Not,var_b"b'18"),
                                             bop(And,mop(Not,var_b"b'17"),
                                                 bop(And,var_b"b'16",
                                                     bop(And,mop(Not,var_b"b'8"),var_b"b'4")))))))),
                         let'
                           (var_w("Rt",4),
                            mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                            itb([(eq(mop(Cast w1,ll[var_b"b'20"]),lw(1,1)),
                                  mb(mr(close
                                          (var("s",qTy),
                                           call
                                             ("state.VFPExtension",@{typ VFPExtension},var("s",qTy),
                                              prev_thy ))),
                                     close
                                       (var("v",@{typ VFPExtension}),
                                        mb(mb(mu(eq(var("v",@{typ VFPExtension}),
                                                    lc("NoVFP","VFPExtension",prev_thy )),qTy),
                                              close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                           close
                                             (var_b"v",
                                              mu(tp[var_b"v",
                                                    call
                                                      ("instruction.VFP",@{typ instruction},
                                                       call
                                                         ("VFP.vmrs",@{typ VFP},var_w("Rt",4),
                                                          prev_thy ),prev_thy )],qTy)))))),
                                 (eq(var_w("Rt",4),lw(15,4)),
                                  call
                                    ("raise'exception",
                                     @{typ
                                     "'b state_scheme \<Rightarrow>
                                      ((bool \<times> instruction) \<times> 'b state_scheme)"},
                                     call
                                       ("exception.UNPREDICTABLE",@{typ exception},
                                        ls"DecodeVFP: msr",@{theory ARM_Monadic}),@{theory ARM_Monadic}))],
                                mb(mr(close
                                        (var("s",qTy),
                                         call
                                           ("state.VFPExtension",@{typ VFPExtension},var("s",qTy),
                                            prev_thy ))),
                                   close
                                     (var("v",@{typ VFPExtension}),
                                      mb(mb(mu(eq(var("v",@{typ VFPExtension}),
                                                  lc("NoVFP","VFPExtension",prev_thy )),qTy),
                                            close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                         close
                                           (var_b"v",
                                            mu(tp[var_b"v",
                                                  call
                                                    ("instruction.VFP",@{typ instruction},
                                                     call
                                                       ("VFP.vmsr",@{typ VFP},var_w("Rt",4),
                                                        prev_thy ),prev_thy )],qTy))))))))],
                       mu(tp[lf,call("instruction.Undefined",@{typ instruction},lw(0,32),prev_thy )],
                          qTy)),
                   mu(tp[lf,call("instruction.Undefined",@{typ instruction},lw(0,32),prev_thy )],qTy))),
              (bop(And,var_b"b'27",
                   bop(And,var_b"b'26",bop(And,var_b"b'11",bop(And,mop(Not,var_b"b'10"),var_b"b'9")))),
               itb([(bop(And,mop(Not,var_b"b'24"),var_b"b'23"),
                     let'
                       (var_w("imm8",8),
                        mop(Cast w8,
                            ll[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                               var_b"b'1",var_b"b'0"]),
                        let'
                          (var_w("Vd",4),
                           mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                           let'
                             (var_w("Rn",4),
                              mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              let'
                                (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                 let'
                                   (var_b"single_regs",eq(mop(Cast w1,ll[var_b"b'8"]),lw(0,1)),
                                    let'
                                      (var_b"wback",eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1)),
                                       let'
                                         (tp[var_w("d",5),var_n"regs"],
                                          ite(var_b"single_regs",
                                              tp[cc[var_w("Vd",4),var_w("D",1)],
                                                 mop(Cast HOLogic.natT,var_w("imm8",8))],
                                              tp[cc[var_w("D",1),var_w("Vd",4)],
                                                 bop(Div,mop(Cast HOLogic.natT,var_w("imm8",8)),ln 2)]),
                                          itb([(bop(Or,eq(var_n"regs",ln 0),
                                                    bop(Or,
                                                        bop(Gt,
                                                            bop(Add,
                                                                mop(Cast HOLogic.natT,var_w("d",5)),
                                                                var_n"regs"),ln 32),
                                                        bop(Or,
                                                            bop(And,var_b"wback",
                                                                eq(var_w("Rn",4),lw(15,4))),
                                                            bop(And,mop(Not,var_b"single_regs"),
                                                                bop(Or,bop(Gt,var_n"regs",ln 16),
                                                                    bop(Bit,var_w("imm8",8),ln 0)))))),
                                                call
                                                  ("raise'exception",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow>
                                                    ((bool \<times> instruction) \<times> 'b state_scheme)"},
                                                   call
                                                     ("exception.UNPREDICTABLE",@{typ exception},
                                                      ls"DecodeVFP: vpop",@{theory ARM_Monadic}),@{theory ARM_Monadic})),
                                               (eq(mop(Cast w1,ll[var_b"b'20"]),lw(1,1)),
                                                mb(mr(close
                                                        (var("s",qTy),
                                                         call
                                                           ("state.VFPExtension",
                                                            @{typ VFPExtension},var("s",qTy),
                                                            prev_thy ))),
                                                   close
                                                     (var("v",@{typ VFPExtension}),
                                                      mb(mb(mu(eq(var("v",@{typ VFPExtension}),
                                                                  lc("NoVFP","VFPExtension",
                                                                     prev_thy )),qTy),
                                                            close
                                                              (var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                                         close
                                                           (var_b"v",
                                                            mu(tp[var_b"v",
                                                                  call
                                                                    ("instruction.VFP",
                                                                     @{typ instruction},
                                                                     call
                                                                       ("VFP.vldm",@{typ VFP},
                                                                        tp[var_b"single_regs",lt,
                                                                           var_b"wback",
                                                                           var_w("d",5),
                                                                           var_w("Rn",4),
                                                                           var_w("imm8",8)],
                                                                        prev_thy ),prev_thy )],qTy))))))],
                                              mb(mr(close
                                                      (var("s",qTy),
                                                       call
                                                         ("state.VFPExtension",@{typ VFPExtension},
                                                          var("s",qTy),prev_thy ))),
                                                 close
                                                   (var("v",@{typ VFPExtension}),
                                                    mb(mb(mu(eq(var("v",@{typ VFPExtension}),
                                                                lc("NoVFP","VFPExtension",prev_thy )),
                                                             qTy),
                                                          close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                                       close
                                                         (var_b"v",
                                                          mu(tp[var_b"v",
                                                                call
                                                                  ("instruction.VFP",
                                                                   @{typ instruction},
                                                                   call
                                                                     ("VFP.vstm",@{typ VFP},
                                                                      tp[var_b"single_regs",lt,
                                                                         var_b"wback",var_w("d",5),
                                                                         var_w("Rn",4),
                                                                         var_w("imm8",8)],prev_thy ),
                                                                   prev_thy )],qTy)))))))))))))),
                    (bop(And,var_b"b'24",bop(And,mop(Not,var_b"b'23"),var_b"b'21")),
                     let'
                       (var_w("imm8",8),
                        mop(Cast w8,
                            ll[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                               var_b"b'1",var_b"b'0"]),
                        let'
                          (var_w("Vd",4),
                           mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                           let'
                             (var_w("Rn",4),
                              mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                              let'
                                (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                                 let'
                                   (var_b"single_regs",eq(mop(Cast w1,ll[var_b"b'8"]),lw(0,1)),
                                    let'
                                      (tp[var_w("d",5),var_n"regs"],
                                       ite(var_b"single_regs",
                                           tp[cc[var_w("Vd",4),var_w("D",1)],
                                              mop(Cast HOLogic.natT,var_w("imm8",8))],
                                           tp[cc[var_w("D",1),var_w("Vd",4)],
                                              bop(Div,mop(Cast HOLogic.natT,var_w("imm8",8)),ln 2)]),
                                       itb([(bop(Or,eq(var_n"regs",ln 0),
                                                 bop(Or,
                                                     bop(Gt,
                                                         bop(Add,
                                                             mop(Cast HOLogic.natT,var_w("d",5)),
                                                             var_n"regs"),ln 32),
                                                     bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                         bop(And,mop(Not,var_b"single_regs"),
                                                             bop(Or,bop(Gt,var_n"regs",ln 16),
                                                                 bop(Bit,var_w("imm8",8),ln 0)))))),
                                             call
                                               ("raise'exception",
                                                @{typ
                                                "'b state_scheme \<Rightarrow>
                                                 ((bool \<times> instruction) \<times> 'b state_scheme)"},
                                                call
                                                  ("exception.UNPREDICTABLE",@{typ exception},
                                                   ls"DecodeVFP: vpop",@{theory ARM_Monadic}),@{theory ARM_Monadic})),
                                            (eq(mop(Cast w1,ll[var_b"b'20"]),lw(1,1)),
                                             mb(mr(close
                                                     (var("s",qTy),
                                                      call
                                                        ("state.VFPExtension",@{typ VFPExtension},
                                                         var("s",qTy),prev_thy ))),
                                                close
                                                  (var("v",@{typ VFPExtension}),
                                                   mb(mb(mu(eq(var("v",@{typ VFPExtension}),
                                                               lc("NoVFP","VFPExtension",prev_thy )),
                                                            qTy),
                                                         close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                                      close
                                                        (var_b"v",
                                                         mu(tp[var_b"v",
                                                               call
                                                                 ("instruction.VFP",
                                                                  @{typ instruction},
                                                                  call
                                                                    ("VFP.vldm",@{typ VFP},
                                                                     tp[var_b"single_regs",lf,lt,
                                                                        var_w("d",5),var_w("Rn",4),
                                                                        var_w("imm8",8)],prev_thy ),
                                                                  prev_thy )],qTy))))))],
                                           mb(mr(close
                                                   (var("s",qTy),
                                                    call
                                                      ("state.VFPExtension",@{typ VFPExtension},
                                                       var("s",qTy),prev_thy ))),
                                              close
                                                (var("v",@{typ VFPExtension}),
                                                 mb(mb(mu(eq(var("v",@{typ VFPExtension}),
                                                             lc("NoVFP","VFPExtension",prev_thy )),
                                                          qTy),
                                                       close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                                    close
                                                      (var_b"v",
                                                       mu(tp[var_b"v",
                                                             call
                                                               ("instruction.VFP",
                                                                @{typ instruction},
                                                                call
                                                                  ("VFP.vstm",@{typ VFP},
                                                                   tp[var_b"single_regs",lf,lt,
                                                                      var_w("d",5),var_w("Rn",4),
                                                                      var_w("imm8",8)],prev_thy ),
                                                                prev_thy )],qTy))))))))))))),
                    (bop(And,var_b"b'24",mop(Not,var_b"b'21")),
                     let'
                       (var_w("Vd",4),
                        mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                        let'
                          (var_w("Rn",4),
                           mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           let'
                             (var_w("D",1),mop(Cast w1,ll[var_b"b'22"]),
                              let'
                                (var_b"single_reg",eq(mop(Cast w1,ll[var_b"b'8"]),lw(0,1)),
                                 let'
                                   (var_b"add",eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),
                                    let'
                                      (var_w("imm32",32),
                                       mop(Cast w32,
                                           cc[mop(Cast w8,
                                                  ll[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                                     var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                              lw(0,2)]),
                                       let'
                                         (var_w("d",5),
                                          ite(var_b"single_reg",cc[var_w("Vd",4),var_w("D",1)],
                                              cc[var_w("D",1),var_w("Vd",4)]),
                                          ite(eq(mop(Cast w1,ll[var_b"b'20"]),lw(1,1)),
                                              mb(mr(close
                                                      (var("s",qTy),
                                                       call
                                                         ("state.VFPExtension",@{typ VFPExtension},
                                                          var("s",qTy),prev_thy ))),
                                                 close
                                                   (var("v",@{typ VFPExtension}),
                                                    mb(mb(mu(eq(var("v",@{typ VFPExtension}),
                                                                lc("NoVFP","VFPExtension",prev_thy )),
                                                             qTy),
                                                          close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                                       close
                                                         (var_b"v",
                                                          mu(tp[var_b"v",
                                                                call
                                                                  ("instruction.VFP",
                                                                   @{typ instruction},
                                                                   call
                                                                     ("VFP.vldr",@{typ VFP},
                                                                      tp[var_b"single_reg",
                                                                         var_b"add",var_w("d",5),
                                                                         var_w("Rn",4),
                                                                         var_w("imm32",32)],
                                                                      prev_thy ),prev_thy )],qTy))))),
                                              mb(mr(close
                                                      (var("s",qTy),
                                                       call
                                                         ("state.VFPExtension",@{typ VFPExtension},
                                                          var("s",qTy),prev_thy ))),
                                                 close
                                                   (var("v",@{typ VFPExtension}),
                                                    mb(mb(mu(eq(var("v",@{typ VFPExtension}),
                                                                lc("NoVFP","VFPExtension",prev_thy )),
                                                             qTy),
                                                          close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                                       close
                                                         (var_b"v",
                                                          mu(tp[var_b"v",
                                                                call
                                                                  ("instruction.VFP",
                                                                   @{typ instruction},
                                                                   call
                                                                     ("VFP.vstr",@{typ VFP},
                                                                      tp[var_b"single_reg",
                                                                         var_b"add",var_w("d",5),
                                                                         var_w("Rn",4),
                                                                         var_w("imm32",32)],
                                                                      prev_thy ),prev_thy )],qTy)))))))))))))),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'23"),
                             bop(And,var_b"b'22",
                                 bop(And,mop(Not,var_b"b'21"),
                                     bop(And,mop(Not,var_b"b'8"),
                                         bop(And,mop(Not,var_b"b'7"),
                                             bop(And,mop(Not,var_b"b'6"),var_b"b'4"))))))),
                     let'
                       (var_w("Rt",4),
                        mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                        let'
                          (var_w("Rt2",4),
                           mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           let'
                             (var_w("m",5),
                              cc[mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                 mop(Cast w1,ll[var_b"b'5"])],
                              let'
                                (var_b"to_arm_registers",eq(mop(Cast w1,ll[var_b"b'20"]),lw(1,1)),
                                 ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                         bop(Or,eq(var_w("Rt2",4),lw(15,4)),
                                             bop(Or,eq(var_w("m",5),lw(31,5)),
                                                 bop(And,var_b"to_arm_registers",
                                                     eq(var_w("Rt",4),var_w("Rt2",4)))))),
                                     call
                                       ("raise'exception",
                                        @{typ
                                        "'b state_scheme \<Rightarrow>
                                         ((bool \<times> instruction) \<times> 'b state_scheme)"},
                                        call
                                          ("exception.UNPREDICTABLE",@{typ exception},
                                           ls"DecodeVFP: vmov_two_singles",@{theory ARM_Monadic}),@{theory ARM_Monadic}),
                                     mb(mr(close
                                             (var("s",qTy),
                                              call
                                                ("state.VFPExtension",@{typ VFPExtension},
                                                 var("s",qTy),prev_thy ))),
                                        close
                                          (var("v",@{typ VFPExtension}),
                                           mb(mb(mu(eq(var("v",@{typ VFPExtension}),
                                                       lc("NoVFP","VFPExtension",prev_thy )),qTy),
                                                 close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                              close
                                                (var_b"v",
                                                 mu(tp[var_b"v",
                                                       call
                                                         ("instruction.VFP",@{typ instruction},
                                                          call
                                                            ("VFP.vmov_two_singles",@{typ VFP},
                                                             tp[var_b"to_arm_registers",
                                                                var_w("Rt",4),var_w("Rt2",4),
                                                                var_w("m",5)],prev_thy ),prev_thy )],
                                                    qTy))))))))))),
                    (bop(And,mop(Not,var_b"b'24"),
                         bop(And,mop(Not,var_b"b'23"),
                             bop(And,var_b"b'22",
                                 bop(And,mop(Not,var_b"b'21"),
                                     bop(And,var_b"b'8",
                                         bop(And,mop(Not,var_b"b'7"),
                                             bop(And,mop(Not,var_b"b'6"),var_b"b'4"))))))),
                     let'
                       (var_w("Rt",4),
                        mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                        let'
                          (var_w("Rt2",4),
                           mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           let'
                             (var_b"to_arm_registers",eq(mop(Cast w1,ll[var_b"b'20"]),lw(1,1)),
                              ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                      bop(Or,eq(var_w("Rt2",4),lw(15,4)),
                                          bop(And,var_b"to_arm_registers",
                                              eq(var_w("Rt",4),var_w("Rt2",4))))),
                                  call
                                    ("raise'exception",
                                     @{typ
                                     "'b state_scheme \<Rightarrow>
                                      ((bool \<times> instruction) \<times> 'b state_scheme)"},
                                     call
                                       ("exception.UNPREDICTABLE",@{typ exception},
                                        ls"DecodeVFP: vmov_double",@{theory ARM_Monadic}),@{theory ARM_Monadic}),
                                  mb(mr(close
                                          (var("s",qTy),
                                           call
                                             ("state.VFPExtension",@{typ VFPExtension},var("s",qTy),
                                              prev_thy ))),
                                     close
                                       (var("v",@{typ VFPExtension}),
                                        mb(mb(mu(eq(var("v",@{typ VFPExtension}),
                                                    lc("NoVFP","VFPExtension",prev_thy )),qTy),
                                              close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                           close
                                             (var_b"v",
                                              mu(tp[var_b"v",
                                                    call
                                                      ("instruction.VFP",@{typ instruction},
                                                       call
                                                         ("VFP.vmov_double",@{typ VFP},
                                                          tp[var_b"to_arm_registers",var_w("Rt",4),
                                                             var_w("Rt2",4),
                                                             cc[mop(Cast w1,ll[var_b"b'5"]),
                                                                mop(Cast w4,
                                                                    ll[var_b"b'3",var_b"b'2",
                                                                       var_b"b'1",var_b"b'0"])]],
                                                          prev_thy ),prev_thy )],qTy))))))))))],
                   mu(tp[lf,call("instruction.Undefined",@{typ instruction},lw(0,32),prev_thy )],qTy)))],
             mu(tp[lf,call("instruction.Undefined",@{typ instruction},lw(0,32),prev_thy )],qTy)))))
end
\<close>

(*
definition 
  "DecodeARM"
  :: "32 word \<Rightarrow> state \<Rightarrow> instruction \<times> state"
  where
  "DecodeARM \<equiv>
\<lambda>w. let mc = ARM w; cond = word_extract 31 28 w
    in if cond = 15
       then let (b'27, b'26, b'25, b'24, b'23, b'22, b'21, b'20, b'19, b'18, b'17, b'16, b'15, b'14, b'13, b'12, b'11, b'10, b'9, b'8, b'7, b'6, b'5, b'4, b'3, b'2, b'1, b'0) =
                  boolify'28 (word_extract 27 0 w)
            in if b'26 then if b'21 then if \<not> b'27 \<and> \<not> b'25 \<and> b'24 \<and> \<not> b'23 \<and> b'22 \<and> b'20 \<and> \<not> b'7
                                         then if \<not> b'6 \<and> \<not> b'5 \<and> b'4
                                              then bind (read_state Architecture)
                                                    (\<lambda>v. bind (bind (bind (return (v \<in> set [ARMv6K, ARMv7_A, ARMv7_R])) (\<lambda>v. return (14, v))) Do)
                                                          (\<lambda>b. if b then return ClearExclusive else Skip ()))
                                              else if b'19 \<and> b'18 \<and> b'17 \<and> b'16 \<and> b'15 \<and> b'14 \<and> b'13 \<and> b'12 \<and> \<not> b'11 \<and> \<not> b'10 \<and> \<not> b'9 \<and> \<not> b'8 \<and> b'6 \<and> \<not> b'5 \<and> \<not> b'4
                                                   then bind (ArchVersion ())
                                                         (\<lambda>v. bind (bind (bind (return (7 \<le> v)) (\<lambda>v. return (14, v))) Do)
                                                               (\<lambda>b. if b then return (Hint (DataSynchronizationBarrier (of_bl [b'3, b'2, b'1, b'0]))) else Skip ()))
                                                   else if b'6 \<and> \<not> b'5 \<and> b'4
                                                        then bind (ArchVersion ())
                                                              (\<lambda>v. bind (bind (bind (return (7 \<le> v)) (\<lambda>v. return (14, v))) Do)
                                                                    (\<lambda>b. if b then return (Hint (DataMemoryBarrier (of_bl [b'3, b'2, b'1, b'0]))) else Skip ()))
                                                        else if b'6 \<and> b'5 \<and> \<not> b'4
                                                             then bind (ArchVersion ())
                                                                   (\<lambda>v. bind (bind (bind (return (7 \<le> v)) (\<lambda>v. return (14, v))) Do)
                                                                         (\<lambda>b. if b then return (Hint (InstructionSynchronizationBarrier (of_bl [b'3, b'2, b'1, b'0]))) else Skip ()))
                                                             else bind (ArchVersion ())
                                                                   (\<lambda>v. bind (return (5 \<le> v))
                                                                         (\<lambda>b. if b then return (Undefined 0) else bind (DECODE_UNPREDICTABLE (mc, [])) (\<lambda>_. return HOL.undefined)))
                                         else bind (ArchVersion ())
                                               (\<lambda>v. bind (return (5 \<le> v)) (\<lambda>b. if b then return (Undefined 0) else bind (DECODE_UNPREDICTABLE (mc, [])) (\<lambda>_. return HOL.undefined)))
                            else if \<not> b'27 \<and> b'20
                                 then if \<not> b'25 \<and> \<not> b'24 \<and> b'22
                                      then bind (ArchVersion ())
                                            (\<lambda>v. bind (bind (bind (return (7 \<le> v)) (\<lambda>v. return (14, v))) Do)
                                                  (\<lambda>b. if b then return (Hint (PreloadInstruction
                                                                                (of_bl [b'23] = 1, of_bl [b'19, b'18, b'17, b'16],
                                                                                 immediate_form1
                                                                                  (word_of_int (uint (of_bl [b'11, b'10, b'9, b'8, b'7, b'6, b'5, b'4, b'3, b'2, b'1, b'0]))))))
                                                       else Skip ()))
                                      else if b'25 \<and> \<not> b'24 \<and> b'22 \<and> \<not> b'4
                                           then let Rm = of_bl [b'3, b'2, b'1, b'0]
                                                in bind (ArchVersion ())
                                                    (\<lambda>v. bind (bind (bind (return (7 \<le> v)) (\<lambda>v. return (14, v))) Do)
                                                          (\<lambda>b. if b then bind (if Rm = 15 then DECODE_UNPREDICTABLE (mc, ''PreloadInstruction (register)'') else return ())
                                                                          (\<lambda>_. return (let (shift_t, shift_n) = DecodeImmShift (of_bl [b'6, b'5], of_bl [b'11, b'10, b'9, b'8, b'7])
                                                                                        in Hint
(PreloadInstruction (of_bl [b'23] = 1, of_bl [b'19, b'18, b'17, b'16], register_form1 (Rm, shift_t, shift_n)))))
                                                               else Skip ()))
                                           else if \<not> b'25 \<and> b'24 \<and> b'19 \<and> b'18 \<and> b'17 \<and> b'16
                                                then bind (HaveDSPSupport ())
                                                      (\<lambda>v. bind (bind (return (14, v)) Do)
                                                            (\<lambda>b. if b then return (Hint (PreloadDataLiteral
                                                                                          (of_bl [b'23] = 1,
                                                                                           word_of_int (uint (of_bl [b'11, b'10, b'9, b'8, b'7, b'6, b'5, b'4, b'3, b'2, b'1, b'0])))))
                                                                 else Skip ()))
                                                else if \<not> b'25 \<and> b'24
                                                     then let R = of_bl [b'22]
                                                          in bind (if R = 1 then bind (ArchVersion ())
                                                                                  (\<lambda>v. bind (return (7 \<le> v))
                                                                                        (\<lambda>b.
if b then bind (read_state Extensions) (\<lambda>v. return (Extension_Multiprocessing \<in> v)) else return False))
                                                                   else return False)
                                                              (\<lambda>v. bind (bind (bind (if v then return True else if R = 0 then HaveDSPSupport () else return False)
                                                                                (\<lambda>v. return (14, v)))
                                                                          Do)
                                                                    (\<lambda>b. if b then return (Hint
(PreloadData (of_bl [b'23] = 1, R = 0, of_bl [b'19, b'18, b'17, b'16], immediate_form1 (word_of_int (uint (of_bl [b'11, b'10, b'9, b'8, b'7, b'6, b'5, b'4, b'3, b'2, b'1, b'0]))))))
                                                                         else Skip ()))
                                                     else if b'25 \<and> b'24 \<and> \<not> b'4
                                                          then let Rm = of_bl [b'3, b'2, b'1, b'0]; Rn = of_bl [b'19, b'18, b'17, b'16]; R = of_bl [b'22]
                                                               in bind (if R = 1 then bind (ArchVersion ())
                                                                                       (\<lambda>v. bind (return (7 \<le> v))
 (\<lambda>b. if b then bind (read_state Extensions) (\<lambda>v. return (Extension_Multiprocessing \<in> v)) else return False))
                                                                        else return False)
                                                                   (\<lambda>v. bind (bind (bind (if v then return True else if R = 0 then HaveDSPSupport () else return False)
                                                                                     (\<lambda>v. return (14, v)))
                                                                               Do)
                                                                         (\<lambda>b. if b then let is_pldw = R = 0
                                                                                        in bind
(if Rm = 15 \<or> Rn = 15 \<and> is_pldw then DECODE_UNPREDICTABLE (mc, ''PreloadData (register)'') else return ())
(\<lambda>_. return (let (shift_t, shift_n) = DecodeImmShift (of_bl [b'6, b'5], of_bl [b'11, b'10, b'9, b'8, b'7])
              in Hint (PreloadData (of_bl [b'23] = 1, is_pldw, Rn, register_form1 (Rm, shift_t, shift_n)))))
                                                                              else Skip ()))
                                                          else bind (ArchVersion ())
                                                                (\<lambda>v. bind (return (5 \<le> v))
                                                                      (\<lambda>b. if b then return (Undefined 0) else bind (DECODE_UNPREDICTABLE (mc, [])) (\<lambda>_. return HOL.undefined)))
                                 else bind (ArchVersion ())
                                       (\<lambda>v. bind (return (5 \<le> v)) (\<lambda>b. if b then return (Undefined 0) else bind (DECODE_UNPREDICTABLE (mc, [])) (\<lambda>_. return HOL.undefined)))
               else if \<not> b'27 \<and> \<not> b'25 \<and> b'24 \<and> \<not> b'23 \<and> \<not> b'22 \<and> \<not> b'21 \<and> \<not> b'20 \<and> b'16 \<and> \<not> b'7 \<and> \<not> b'6 \<and> \<not> b'5 \<and> \<not> b'4
                    then bind (ArchVersion ())
                          (\<lambda>v. bind (bind (bind (return (6 \<le> v)) (\<lambda>v. return (14, v))) Do) (\<lambda>b. if b then return (System (Setend (of_bl [b'9] = 1))) else Skip ()))
                    else if \<not> b'27 \<and> \<not> b'25 \<and> b'24 \<and> \<not> b'23 \<and> \<not> b'22 \<and> \<not> b'21 \<and> \<not> b'20 \<and> \<not> b'16 \<and> \<not> b'5
                         then let mode = of_bl [b'4, b'3, b'2, b'1, b'0]; F = of_bl [b'6]; I = of_bl [b'7]; A = of_bl [b'8]; M = of_bl [b'17]; imod = of_bl [b'19, b'18]
                              in bind (ArchVersion ())
                                  (\<lambda>v. bind (bind (bind (return (6 \<le> v)) (\<lambda>v. return (14, v))) Do)
                                        (\<lambda>b. if b then bind (if mode \<noteq> 0 \<and> M = 0 \<or> imod !! 1 = (word_cat A (word_cat I F) = 0) \<or> imod = 0 \<and> M = 0 \<or> imod = 1
                                                             then DECODE_UNPREDICTABLE (mc, ''ChangeProcessorState'') else return ())
                                                        (\<lambda>_. return (System (ChangeProcessorState (imod = 2, imod = 3, A = 1, I = 1, F = 1, if M = 1 then Some mode else None))))
                                             else Skip ()))
                         else if b'27 \<and> \<not> b'25 \<and> b'22 \<and> \<not> b'20
                              then let U = of_bl [b'23]
                                   in bind (ArchVersion ())
                                       (\<lambda>v. bind (bind (bind (return (6 \<le> v)) (\<lambda>v. return (14, v))) Do)
                                             (\<lambda>b. if b then return (System (StoreReturnState (U = 1, of_bl [b'24] = U, of_bl [b'21] = 1, of_bl [b'4, b'3, b'2, b'1, b'0])))
                                                  else Skip ()))
                              else if b'27 \<and> \<not> b'25 \<and> \<not> b'22 \<and> b'20
                                   then let Rn = of_bl [b'19, b'18, b'17, b'16]; U = of_bl [b'23]
                                        in bind (ArchVersion ())
                                            (\<lambda>v. bind (bind (bind (return (6 \<le> v)) (\<lambda>v. return (14, v))) Do)
                                                  (\<lambda>b. if b then bind (if Rn = 15 then DECODE_UNPREDICTABLE (mc, ''ReturnFromException'') else return ())
                                                                  (\<lambda>_. return (System (ReturnFromException (U = 1, of_bl [b'24] = U, of_bl [b'21] = 1, Rn))))
                                                       else Skip ()))
                                   else if b'27 \<and> b'25
                                        then bind (ArchVersion ())
                                              (\<lambda>v. bind (bind (bind (return (5 \<le> v)) (\<lambda>v. return (14, v))) Do)
                                                    (\<lambda>b. if b then return (Branch (BranchLinkExchangeImmediate
                                                                                    (InstrSet_Thumb,
                                                                                     scast (word_cat
 (of_bl [b'23, b'22, b'21, b'20, b'19, b'18, b'17, b'16, b'15, b'14, b'13, b'12, b'11, b'10, b'9, b'8, b'7, b'6, b'5, b'4, b'3, b'2, b'1, b'0]) (word_cat (of_bl [b'24]) 0)))))
                                                         else Skip ()))
                                        else bind (ArchVersion ())
                                              (\<lambda>v. bind (return (5 \<le> v)) (\<lambda>b. if b then return (Undefined 0) else bind (DECODE_UNPREDICTABLE (mc, [])) (\<lambda>_. return HOL.undefined)))
       else let (b'27, b'26, b'25, b'24, b'23, b'22, b'21, b'20, b'19, b'18, b'17, b'16, b'15, b'14, b'13, b'12, b'11, b'10, b'9, b'8, b'7, b'6, b'5, b'4, b'3, b'2, b'1, b'0) =
                  boolify'28 (word_extract 27 0 w)
            in if b'26 then if \<not> b'27 \<and> b'25 \<and> b'24 \<and> b'23 \<and> b'22 \<and> b'21 \<and> b'20 \<and> b'7 \<and> b'6 \<and> b'5 \<and> b'4                                                                          
                            then bind (update_state (CurrentCondition_update (\<lambda>_. cond)))
                                  (\<lambda>_. bind (ConditionPassed ())
                                         (\<lambda>b. return (if b then Undefined (word_of_int
                                                                            (uint (word_cat (of_bl [b'19, b'18, b'17, b'16, b'15, b'14, b'13, b'12, b'11, b'10, b'9, b'8])
                                                                                    (of_bl [b'3, b'2, b'1, b'0]))))
                                                      else NoOperation)))
                            else if \<not> b'27 \<and> \<not> b'25 \<and> \<not> b'24 \<and> b'21 \<and> \<not> b'20
                                 then let Rt = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16]; B = of_bl [b'22]
                                      in bind (Do (cond, True))
                                          (\<lambda>b. if b then bind (if B = 1 \<and> Rt = 15 \<or> Rn = 15 \<or> Rn = Rt then DECODE_UNPREDICTABLE (mc, ''StoreUnprivileged (immediate)'')
                                                               else return ())
                                                          (\<lambda>_. return (let add = of_bl [b'23] = 1;
                                                                             m = immediate_form1
                                                                                  (word_of_int (uint (of_bl [b'11, b'10, b'9, b'8, b'7, b'6, b'5, b'4, b'3, b'2, b'1, b'0])))
                                                                         in if B = 1 then Store (StoreByteUnprivileged (add, True, Rt, Rn, m))
                                                                            else Store (StoreUnprivileged (add, True, Rt, Rn, m))))
                                               else Skip ())
                                 else if \<not> b'27 \<and> \<not> b'25 \<and> \<not> b'20
                                      then let Rt = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16]; B = of_bl [b'22]; P = of_bl [b'24]
                                           in bind (Do (cond, True))
                                               (\<lambda>b. if b then let wback = P = 0 \<or> of_bl [b'21] = 1
                                                              in bind (if B = 1 \<and> Rt = 15 \<or> wback \<and> (Rn = 15 \<or> Rn = Rt) then DECODE_UNPREDICTABLE (mc, ''Store (immediate)'')
                                                                       else return ())
                                                                  (\<lambda>_. return (let add = of_bl [b'23] = 1; index = P = 1;
                                                                                     m = immediate_form1
                                                                                          (word_of_int (uint (of_bl [b'11, b'10, b'9, b'8, b'7, b'6, b'5, b'4, b'3, b'2, b'1, b'0])))
                                                                                 in if B = 1 then Store (StoreByte (add, index, wback, Rt, Rn, m))
                                                                                    else Store (StoreWord (add, index, wback, Rt, Rn, m))))
                                                    else Skip ())
                                      else if \<not> b'27 \<and> \<not> b'25 \<and> \<not> b'24 \<and> b'21 \<and> b'20
                                           then let Rt = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16]
                                                in bind (Do (cond, True))
                                                    (\<lambda>b. if b then bind (if Rt = 15 \<or> Rn = 15 \<or> Rn = Rt then DECODE_UNPREDICTABLE (mc, ''LoadUnprivileged (immediate)'')
                                                                         else return ())
                                                                    (\<lambda>_. return (let add = of_bl [b'23] = 1;
                                                                                       m = immediate_form1
(word_of_int (uint (of_bl [b'11, b'10, b'9, b'8, b'7, b'6, b'5, b'4, b'3, b'2, b'1, b'0])))
                                                                                   in if of_bl [b'22] = 1 then Load (LoadByteUnprivileged (add, True, Rt, Rn, m))
                                                                                      else Load (LoadUnprivileged (add, True, Rt, Rn, m))))
                                                         else Skip ())
                                           else if \<not> b'27 \<and> \<not> b'25 \<and> b'20 \<and> b'19 \<and> b'18 \<and> b'17 \<and> b'16
                                                then let Rt = of_bl [b'15, b'14, b'13, b'12]; B = of_bl [b'22]
                                                     in bind (Do (cond, True))
                                                         (\<lambda>b. if b then bind (if B = 1 \<and> Rt = 15 then DECODE_UNPREDICTABLE (mc, ''LoadByte (literal)'') else return ())
                                                                         (\<lambda>_. return (let add = of_bl [b'23] = 1;
imm32 = word_of_int (uint (of_bl [b'11, b'10, b'9, b'8, b'7, b'6, b'5, b'4, b'3, b'2, b'1, b'0]))
                                                                                        in if B = 1 then Load (LoadByteLiteral (True, add, Rt, imm32))
                                                                                           else Load (LoadLiteral (add, Rt, imm32))))
                                                              else Skip ())
                                                else if \<not> b'27 \<and> \<not> b'25 \<and> b'20
                                                     then let Rt = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16]; B = of_bl [b'22]; P = of_bl [b'24]
                                                          in bind (Do (cond, True))
                                                              (\<lambda>b. if b then let wback = P = 0 \<or> of_bl [b'21] = 1
                                                                             in bind (if B = 1 \<and> Rt = 15 \<or> wback \<and> Rn = Rt
                                                                                      then DECODE_UNPREDICTABLE (mc, ''LoadWord/Byte (immediate)'') else return ())
                                                                                 (\<lambda>_. return (let add = of_bl [b'23] = 1; index = P = 1;
        m = immediate_form1 (word_of_int (uint (of_bl [b'11, b'10, b'9, b'8, b'7, b'6, b'5, b'4, b'3, b'2, b'1, b'0])))
    in if B = 1 then Load (LoadByte (True, add, index, wback, Rt, Rn, m)) else Load (LoadWord (add, index, wback, Rt, Rn, m))))
                                                                   else Skip ())
                                                     else if \<not> b'27 \<and> b'25 \<and> \<not> b'24 \<and> b'21 \<and> \<not> b'20 \<and> \<not> b'4
                                                          then let Rm = of_bl [b'3, b'2, b'1, b'0]; Rt = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16];
                                                                   B = of_bl [b'22]
                                                               in bind (Do (cond, True))
                                                                   (\<lambda>b. if b then bind (if B = 1 \<and> Rt = 15 then return True
                                                                                        else if Rn = 15 then return True
 else if Rn = Rt then return True else if Rm = 15 then return True else bind (ArchVersion ()) (\<lambda>v. bind (return (v < 6)) (\<lambda>b. return (b \<and> Rm = Rn))))
                                                                                   (\<lambda>v. bind (if v then DECODE_UNPREDICTABLE (mc, ''StoreUnprivileged (regiser)'') else return ())
                                                                                         (\<lambda>_.
 return (let add = of_bl [b'23] = 1; (shift_t, shift_n) = DecodeImmShift (of_bl [b'6, b'5], of_bl [b'11, b'10, b'9, b'8, b'7]); m = register_form1 (Rm, shift_t, shift_n)
         in if B = 1 then Store (StoreByteUnprivileged (add, True, Rt, Rn, m)) else Store (StoreUnprivileged (add, True, Rt, Rn, m)))))
                                                                        else Skip ())
                                                          else if \<not> b'27 \<and> b'25 \<and> \<not> b'20 \<and> \<not> b'4
                                                               then let Rm = of_bl [b'3, b'2, b'1, b'0]; Rt = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16];
                                                                        B = of_bl [b'22]; P = of_bl [b'24]
                                                                    in bind (Do (cond, True))
                                                                        (\<lambda>b. if b then let wback = P = 0 \<or> of_bl [b'21] = 1
                                                                                       in bind (if B = 1 \<and> Rt = 15 then return True
    else if Rm = 15 then return True else if wback \<and> (Rn = 15 \<or> Rn = Rt) then return True else bind (ArchVersion ()) (\<lambda>v. bind (return (v < 6)) (\<lambda>b. return (b \<and> wback \<and> Rm = Rn))))
                                                                                           (\<lambda>v.
   bind (if v then DECODE_UNPREDICTABLE (mc, ''Store (regiser)'') else return ())
    (\<lambda>_. return (let add = of_bl [b'23] = 1; index = P = 1; (shift_t, shift_n) = DecodeImmShift (of_bl [b'6, b'5], of_bl [b'11, b'10, b'9, b'8, b'7]);
                       m = register_form1 (Rm, shift_t, shift_n)
                   in if B = 1 then Store (StoreByte (add, index, wback, Rt, Rn, m)) else Store (StoreWord (add, index, wback, Rt, Rn, m)))))
                                                                             else Skip ())
                                                               else if \<not> b'27 \<and> b'25 \<and> \<not> b'24 \<and> b'21 \<and> b'20 \<and> \<not> b'4
                                                                    then let Rm = of_bl [b'3, b'2, b'1, b'0]; Rt = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16]
                                                                         in bind (Do (cond, True))
                                                                             (\<lambda>b. if b then bind
 (if Rt = 15 then return True
  else if Rn = 15 then return True else if Rn = Rt then return True else if Rm = 15 then return True else bind (ArchVersion ()) (\<lambda>v. bind (return (v < 6)) (\<lambda>b. return (b \<and> Rm = Rn))))
 (\<lambda>v. bind (if v then DECODE_UNPREDICTABLE (mc, ''LoadUnprivileged (regiser)'') else return ())
       (\<lambda>_. return (let add = of_bl [b'23] = 1; (shift_t, shift_n) = DecodeImmShift (of_bl [b'6, b'5], of_bl [b'11, b'10, b'9, b'8, b'7]); m = register_form1 (Rm, shift_t, shift_n)
                      in if of_bl [b'22] = 1 then Load (LoadByteUnprivileged (add, True, Rt, Rn, m)) else Load (LoadUnprivileged (add, True, Rt, Rn, m)))))
                                                                                  else Skip ())
                                                                    else if \<not> b'27 \<and> b'25 \<and> b'20 \<and> \<not> b'4
                                                                         then let Rm = of_bl [b'3, b'2, b'1, b'0]; Rt = of_bl [b'15, b'14, b'13, b'12];
                                                                                  Rn = of_bl [b'19, b'18, b'17, b'16]; B = of_bl [b'22]; P = of_bl [b'24]
                                                                              in bind (Do (cond, True))
                                                                                  (\<lambda>b. if b then let wback = P = 0 \<or> of_bl [b'21] = 1
     in bind (if B = 1 \<and> Rt = 15 then return True
              else if Rm = 15 then return True
                   else if wback \<and> (Rn = 15 \<or> Rn = Rt) then return True else bind (ArchVersion ()) (\<lambda>v. bind (return (v < 6)) (\<lambda>b. return (b \<and> wback \<and> Rm = Rn))))
         (\<lambda>v. bind (if v then DECODE_UNPREDICTABLE (mc, ''LoadWord/Byte (regiser)'') else return ())
               (\<lambda>_. return (let add = of_bl [b'23] = 1; index = P = 1; (shift_t, shift_n) = DecodeImmShift (of_bl [b'6, b'5], of_bl [b'11, b'10, b'9, b'8, b'7]);
                                  m = register_form1 (Rm, shift_t, shift_n)
                              in if B = 1 then Load (LoadByte (True, add, index, wback, Rt, Rn, m)) else Load (LoadWord (add, index, wback, Rt, Rn, m)))))
                                                                                       else Skip ())
                                                                         else if \<not> b'27 \<and> b'25 \<and> \<not> b'24 \<and> \<not> b'23 \<and> b'4
                                                                              then let Rm = of_bl [b'3, b'2, b'1, b'0]; Rd = of_bl [b'15, b'14, b'13, b'12];
                                                                                       Rn = of_bl [b'19, b'18, b'17, b'16]
                                                                                   in bind (ArchVersion ())
                                                                                       (\<lambda>v. bind (bind (bind (return (6 \<le> v)) (\<lambda>v. return (cond, v))) Do)
 (\<lambda>b. if b then bind (if Rd = 15 \<or> Rn = 15 \<or> Rm = 15 then DECODE_UNPREDICTABLE (mc, ''Parallel addition and subtraction'') else return ())
                 (\<lambda>_. return (DecodeParallelAdditionSubtraction (of_bl [b'21, b'20], of_bl [b'7, b'6, b'5], of_bl [b'22], Rd, Rn, Rm)))
      else Skip ()))
                                                                              else if \<not> b'27 \<and> b'25 \<and> \<not> b'24 \<and> b'23 \<and> \<not> b'22 \<and> \<not> b'21 \<and> \<not> b'20 \<and> \<not> b'5 \<and> b'4
                                                                                   then let Rm = of_bl [b'3, b'2, b'1, b'0]; tb = of_bl [b'6]; Rd = of_bl [b'15, b'14, b'13, b'12];
Rn = of_bl [b'19, b'18, b'17, b'16]
                                                                                        in bind (ArchVersion ())
(\<lambda>v. bind (bind (bind (return (6 \<le> v)) (\<lambda>v. return (cond, v))) Do)
      (\<lambda>b. if b then bind (if Rd = 15 \<or> Rn = 15 \<or> Rm = 15 then DECODE_UNPREDICTABLE (mc, ''PackHalfword'') else return ())
                      (\<lambda>_. return (let (shift_t, shift_n) = DecodeImmShift (word_cat tb 0, of_bl [b'11, b'10, b'9, b'8, b'7])
                                     in Media (PackHalfword (shift_t, shift_n, tb = 1, Rd, Rn, Rm))))
           else Skip ()))
                                                                                   else if \<not> b'27 \<and> b'25 \<and> \<not> b'24 \<and> b'23 \<and> \<not> b'22 \<and> \<not> b'21 \<and> \<not> b'20 \<and> b'7 \<and> \<not> b'6 \<and> b'5 \<and> b'4
                                                                                        then let Rm = of_bl [b'3, b'2, b'1, b'0]; Rd = of_bl [b'15, b'14, b'13, b'12];
     Rn = of_bl [b'19, b'18, b'17, b'16]
 in bind (ArchVersion ())
     (\<lambda>v. bind (bind (bind (return (6 \<le> v)) (\<lambda>v. return (cond, v))) Do)
           (\<lambda>b. if b then bind (if Rd = 15 \<or> Rn = 15 \<or> Rm = 15 then DECODE_UNPREDICTABLE (mc, ''SelectBytes'') else return ()) (\<lambda>_. return (Media (SelectBytes (Rd, Rn, Rm))))
                else Skip ()))
                                                                                        else if \<not> b'27 \<and> b'25 \<and> \<not> b'24 \<and> b'23 \<and> b'21 \<and> \<not> b'5 \<and> b'4
 then let Rn = of_bl [b'3, b'2, b'1, b'0]; Rd = of_bl [b'15, b'14, b'13, b'12]; sat_imm = of_bl [b'20, b'19, b'18, b'17, b'16]
      in bind (ArchVersion ())
          (\<lambda>v. bind (bind (bind (return (6 \<le> v)) (\<lambda>v. return (cond, v))) Do)
                (\<lambda>b. if b then bind (if Rd = 15 \<or> Rn = 15 then DECODE_UNPREDICTABLE (mc, ''Saturate'') else return ())
                                (\<lambda>_. return (let unsigned = of_bl [b'22] = 1; (shift_t, shift_n) = DecodeImmShift (word_cat (of_bl [b'6]) 0, of_bl [b'11, b'10, b'9, b'8, b'7])
                                               in Media (Saturate (shift_t, shift_n, if unsigned then nat (uint sat_imm) else nat (uint sat_imm) + 1, unsigned, Rd, Rn))))
                     else Skip ()))
 else if \<not> b'27 \<and> b'25 \<and> \<not> b'24 \<and> b'23 \<and> b'21 \<and> \<not> b'20 \<and> \<not> b'7 \<and> \<not> b'6 \<and> b'5 \<and> b'4
      then let Rn = of_bl [b'3, b'2, b'1, b'0]; Rd = of_bl [b'15, b'14, b'13, b'12]; sat_imm = of_bl [b'19, b'18, b'17, b'16]
           in bind (ArchVersion ())
               (\<lambda>v. bind (bind (bind (return (6 \<le> v)) (\<lambda>v. return (cond, v))) Do)
                     (\<lambda>b. if b then bind (if Rd = 15 \<or> Rn = 15 then DECODE_UNPREDICTABLE (mc, ''Saturate16'') else return ())
                                     (\<lambda>_. return (let unsigned = of_bl [b'22] = 1
                                                    in Media (Saturate16 (if unsigned then nat (uint sat_imm) else nat (uint sat_imm) + 1, unsigned, Rd, Rn))))
                          else Skip ()))
      else if \<not> b'27 \<and> b'25 \<and> \<not> b'24 \<and> b'23 \<and> \<not> b'21 \<and> \<not> b'20 \<and> \<not> b'7 \<and> b'6 \<and> b'5 \<and> b'4
           then let Rm = of_bl [b'3, b'2, b'1, b'0]; Rd = of_bl [b'15, b'14, b'13, b'12]
                in bind (ArchVersion ())
                    (\<lambda>v. bind (bind (bind (return (6 \<le> v)) (\<lambda>v. return (cond, v))) Do)
                          (\<lambda>b. if b then bind (if Rd = 15 \<or> Rm = 15 then DECODE_UNPREDICTABLE (mc, ''ExtendByte16'') else return ())
                                          (\<lambda>_. return (Media (ExtendByte16
                                                                 (of_bl [b'22] = 1, Rd, of_bl [b'19, b'18, b'17, b'16], Rm, nat (uint (word_cat (of_bl [b'11, b'10]) 0))))))
                               else Skip ()))
           else if \<not> b'27 \<and> b'25 \<and> \<not> b'24 \<and> b'23 \<and> b'21 \<and> \<not> b'20 \<and> \<not> b'7 \<and> b'6 \<and> b'5 \<and> b'4
                then let Rm = of_bl [b'3, b'2, b'1, b'0]; Rd = of_bl [b'15, b'14, b'13, b'12]
                     in bind (ArchVersion ())
                         (\<lambda>v. bind (bind (bind (return (6 \<le> v)) (\<lambda>v. return (cond, v))) Do)
                               (\<lambda>b. if b then bind (if Rd = 15 \<or> Rm = 15 then DECODE_UNPREDICTABLE (mc, ''ExtendByte'') else return ())
                                               (\<lambda>_. return (Media (ExtendByte
                                                                      (of_bl [b'22] = 1, Rd, of_bl [b'19, b'18, b'17, b'16], Rm, nat (uint (word_cat (of_bl [b'11, b'10]) 0))))))
                                    else Skip ()))
                else if \<not> b'27 \<and> b'25 \<and> \<not> b'24 \<and> b'23 \<and> b'21 \<and> b'20 \<and> \<not> b'7 \<and> b'6 \<and> b'5 \<and> b'4
                     then let Rm = of_bl [b'3, b'2, b'1, b'0]; Rd = of_bl [b'15, b'14, b'13, b'12]
                          in bind (ArchVersion ())
                              (\<lambda>v. bind (bind (bind (return (6 \<le> v)) (\<lambda>v. return (cond, v))) Do)
                                    (\<lambda>b. if b then bind (if Rd = 15 \<or> Rm = 15 then DECODE_UNPREDICTABLE (mc, ''ExtendHalfword'') else return ())
                                                    (\<lambda>_. return (Media (ExtendHalfword
                                                                           (of_bl [b'22] = 1, Rd, of_bl [b'19, b'18, b'17, b'16], Rm, nat (uint (word_cat (of_bl [b'11, b'10]) 0))))))
                                         else Skip ()))
                     else if \<not> b'27 \<and> b'25 \<and> \<not> b'24 \<and> b'23 \<and> \<not> b'22 \<and> b'21 \<and> b'20 \<and> \<not> b'7 \<and> \<not> b'6 \<and> b'5 \<and> b'4
                          then let Rm = of_bl [b'3, b'2, b'1, b'0]; Rd = of_bl [b'15, b'14, b'13, b'12]
                               in bind (ArchVersion ())
                                   (\<lambda>v. bind (bind (bind (return (6 \<le> v)) (\<lambda>v. return (cond, v))) Do)
                                         (\<lambda>b. if b then bind (if Rd = 15 \<or> Rm = 15 then DECODE_UNPREDICTABLE (mc, ''ByteReverse'') else return ())
                                                         (\<lambda>_. return (Media (ByteReverse (Rd, Rm))))
                                              else Skip ()))
                          else if \<not> b'27 \<and> b'25 \<and> \<not> b'24 \<and> b'23 \<and> \<not> b'22 \<and> b'21 \<and> b'20 \<and> b'7 \<and> \<not> b'6 \<and> b'5 \<and> b'4
                               then let Rm = of_bl [b'3, b'2, b'1, b'0]; Rd = of_bl [b'15, b'14, b'13, b'12]
                                    in bind (ArchVersion ())
                                        (\<lambda>v. bind (bind (bind (return (6 \<le> v)) (\<lambda>v. return (cond, v))) Do)
                                              (\<lambda>b. if b then bind (if Rd = 15 \<or> Rm = 15 then DECODE_UNPREDICTABLE (mc, ''ByteReversePackedHalfword'') else return ())
                                                              (\<lambda>_. return (Media (ByteReversePackedHalfword (Rd, Rm))))
                                                   else Skip ()))
                               else if \<not> b'27 \<and> b'25 \<and> \<not> b'24 \<and> b'23 \<and> b'22 \<and> b'21 \<and> b'20 \<and> b'7 \<and> \<not> b'6 \<and> b'5 \<and> b'4
                                    then let Rm = of_bl [b'3, b'2, b'1, b'0]; Rd = of_bl [b'15, b'14, b'13, b'12]
                                         in bind (ArchVersion ())
                                             (\<lambda>v. bind (bind (bind (return (6 \<le> v)) (\<lambda>v. return (cond, v))) Do)
                                                   (\<lambda>b. if b then bind (if Rd = 15 \<or> Rm = 15 then DECODE_UNPREDICTABLE (mc, ''ByteReverseSignedHalfword'') else return ())
                                                                   (\<lambda>_. return (Media (ByteReverseSignedHalfword (Rd, Rm))))
                                                        else Skip ()))
                                    else if \<not> b'27 \<and> b'25 \<and> \<not> b'24 \<and> b'23 \<and> b'22 \<and> b'21 \<and> b'20 \<and> \<not> b'7 \<and> \<not> b'6 \<and> b'5 \<and> b'4
                                         then let Rm = of_bl [b'3, b'2, b'1, b'0]; Rd = of_bl [b'15, b'14, b'13, b'12]
                                              in bind (ArchVersion ())
                                                  (\<lambda>v. bind (bind (bind (return (6 \<le> v)) (\<lambda>v. return (cond, v))) Do)
                                                        (\<lambda>b. if b then bind (if Rd = 15 \<or> Rm = 15 then DECODE_UNPREDICTABLE (mc, ''ReverseBits'') else return ())
                                                                        (\<lambda>_. return (Media (ReverseBits (Rd, Rm))))
                                                             else Skip ()))
                                         else if \<not> b'27 \<and> b'25 \<and> b'24 \<and> \<not> b'23 \<and> \<not> b'22 \<and> \<not> b'21 \<and> \<not> b'20 \<and> \<not> b'7 \<and> b'4
                                              then let Rn = of_bl [b'3, b'2, b'1, b'0]; Rm = of_bl [b'11, b'10, b'9, b'8]; Rd = of_bl [b'19, b'18, b'17, b'16]
                                                   in bind (ArchVersion ())
                                                       (\<lambda>v. bind (bind (bind (return (6 \<le> v)) (\<lambda>v. return (cond, v))) Do)
                                                             (\<lambda>b. if b then bind (if Rd = 15 \<or> Rn = 15 \<or> Rm = 15 then DECODE_UNPREDICTABLE (mc, ''SignedMultiplyDual'')
                                                                                  else return ())
                                                                             (\<lambda>_. return (Multiply
 (SignedMultiplyDual (of_bl [b'6] = 1, of_bl [b'5] = 1, Rd, Rn, Rm, of_bl [b'15, b'14, b'13, b'12]))))
                                                                  else Skip ()))
                                              else if \<not> b'27 \<and> b'25 \<and> b'24 \<and> \<not> b'23 \<and> b'22 \<and> \<not> b'21 \<and> \<not> b'20 \<and> \<not> b'7 \<and> b'4
                                                   then let Rn = of_bl [b'3, b'2, b'1, b'0]; Rm = of_bl [b'11, b'10, b'9, b'8]; RdLo = of_bl [b'15, b'14, b'13, b'12];
                                                            RdHi = of_bl [b'19, b'18, b'17, b'16]
                                                        in bind (ArchVersion ())
                                                            (\<lambda>v. bind (bind (bind (return (6 \<le> v)) (\<lambda>v. return (cond, v))) Do)
                                                                  (\<lambda>b. if b then bind (if RdLo = 15 \<or> RdHi = 15 \<or> Rn = 15 \<or> Rm = 15
                                                                                       then DECODE_UNPREDICTABLE (mc, ''SignedMultiplyLongDual'') else return ())
                                                                                  (\<lambda>_. return (Multiply
      (SignedMultiplyLongDual (of_bl [b'6] = 1, of_bl [b'5] = 1, RdHi, RdLo, Rn, Rm))))
                                                                       else Skip ()))
                                                   else if \<not> b'27 \<and> b'25 \<and> b'24 \<and> \<not> b'23 \<and> b'22 \<and> \<not> b'21 \<and> b'20 \<and> \<not> b'7 \<and> \<not> b'6 \<and> b'4
                                                        then let Rn = of_bl [b'3, b'2, b'1, b'0]; Rm = of_bl [b'11, b'10, b'9, b'8]; Rd = of_bl [b'19, b'18, b'17, b'16]
                                                             in bind (ArchVersion ())
                                                                 (\<lambda>v. bind (bind (bind (return (6 \<le> v)) (\<lambda>v. return (cond, v))) Do)
                                                                       (\<lambda>b. if b then bind (if Rd = 15 \<or> Rn = 15 \<or> Rm = 15
then DECODE_UNPREDICTABLE (mc, ''SignedMostSignificantMultiply'') else return ())
                                                                                       (\<lambda>_. return
   (Multiply (SignedMostSignificantMultiply (of_bl [b'5] = 1, Rd, Rn, Rm, of_bl [b'15, b'14, b'13, b'12]))))
                                                                            else Skip ()))
                                                        else if \<not> b'27 \<and> b'25 \<and> b'24 \<and> \<not> b'23 \<and> b'22 \<and> \<not> b'21 \<and> b'20 \<and> b'7 \<and> b'6 \<and> b'4
                                                             then let Rn = of_bl [b'3, b'2, b'1, b'0]; Rm = of_bl [b'11, b'10, b'9, b'8]; Ra = of_bl [b'15, b'14, b'13, b'12];
                                                                      Rd = of_bl [b'19, b'18, b'17, b'16]
                                                                  in bind (ArchVersion ())
                                                                      (\<lambda>v. bind (bind (bind (return (6 \<le> v)) (\<lambda>v. return (cond, v))) Do)
                                                                            (\<lambda>b. if b then bind
(if Rd = 15 \<or> Rn = 15 \<or> Rm = 15 \<or> Ra = 15 then DECODE_UNPREDICTABLE (mc, ''SignedMostSignificantMultiplySubtract'') else return ())
(\<lambda>_. return (Multiply (SignedMostSignificantMultiplySubtract (of_bl [b'5] = 1, Rd, Rn, Rm, Ra))))
                                                                                 else Skip ()))
                                                             else if \<not> b'27 \<and> b'25 \<and> b'24 \<and> b'23 \<and> \<not> b'22 \<and> \<not> b'21 \<and> \<not> b'20 \<and> \<not> b'7 \<and> \<not> b'6 \<and> \<not> b'5 \<and> b'4
                                                                  then let Rn = of_bl [b'3, b'2, b'1, b'0]; Rm = of_bl [b'11, b'10, b'9, b'8]; Rd = of_bl [b'19, b'18, b'17, b'16]
                                                                       in bind (ArchVersion ())
                                                                           (\<lambda>v. bind (bind (bind (return (6 \<le> v)) (\<lambda>v. return (cond, v))) Do)
                                                                                 (\<lambda>b. if b then bind
     (if Rd = 15 \<or> Rn = 15 \<or> Rm = 15 then DECODE_UNPREDICTABLE (mc, ''UnsignedSumAbsoluteDifferences'') else return ())
     (\<lambda>_. return (SIMD (UnsignedSumAbsoluteDifferences (Rd, Rn, Rm, of_bl [b'15, b'14, b'13, b'12]))))
                                                                                      else Skip ()))
                                                                  else if \<not> b'27 \<and> b'25 \<and> b'24 \<and> b'23 \<and> b'21 \<and> b'6 \<and> \<not> b'5 \<and> b'4
                                                                       then let Rn = of_bl [b'3, b'2, b'1, b'0]; Rd = of_bl [b'15, b'14, b'13, b'12]
                                                                            in bind (ArchVersion ())
                                                                                (\<lambda>v. bind (bind (bind (return (6 \<le> v)) (\<lambda>v. return (cond, v))) Do)
                                                                                      (\<lambda>b. if b then let lsbit = nat (uint (of_bl [b'11, b'10, b'9, b'8, b'7]));
             widthminus1 = nat (uint (of_bl [b'20, b'19, b'18, b'17, b'16]))
         in bind (if Rd = 15 \<or> Rn = 15 \<or> 31 < lsbit + widthminus1 then DECODE_UNPREDICTABLE (mc, ''BitFieldExtract'') else return ())
             (\<lambda>_. return (Media (BitFieldExtract (of_bl [b'22] = 1, Rd, Rn, lsbit, widthminus1))))
                                                                                           else Skip ()))
                                                                       else if \<not> b'27 \<and> b'25 \<and> b'24 \<and> b'23 \<and> b'22 \<and> \<not> b'21 \<and> \<not> b'6 \<and> \<not> b'5 \<and> b'4
                                                                            then let Rd = of_bl [b'15, b'14, b'13, b'12]
                                                                                 in bind (ArchVersion ())
                                                                                     (\<lambda>v. bind (bind (bind (return (6 \<le> v)) (\<lambda>v. return (cond, v))) Do)
                                                                                           (\<lambda>b.
   if b then let lsbit = nat (uint (of_bl [b'11, b'10, b'9, b'8, b'7])); msbit = nat (uint (of_bl [b'20, b'19, b'18, b'17, b'16]))
             in bind (if Rd = 15 \<or> msbit < lsbit then DECODE_UNPREDICTABLE (mc, ''BitFieldClearOrInsert'') else return ())
                 (\<lambda>_. return (Media (BitFieldClearOrInsert (Rd, of_bl [b'3, b'2, b'1, b'0], lsbit, msbit))))
   else Skip ()))
                                                                            else if b'27 \<and> b'25 \<and> b'24
                                                                                 then bind (Do (cond, True))
                                                                                       (\<lambda>b. if b
then return (System (SupervisorCall
                      (scast (of_bl [b'23, b'22, b'21, b'20, b'19, b'18, b'17, b'16, b'15, b'14, b'13, b'12, b'11, b'10, b'9, b'8, b'7, b'6, b'5, b'4, b'3, b'2, b'1, b'0]))))
else Skip ())
                                                                                 else if b'27 \<and> b'11 \<and> \<not> b'10 \<and> b'9
                                                                                      then bind (DecodeVFP w)
(\<lambda>x. case x of (defined, i) \<Rightarrow> bind (Do (cond, defined)) (\<lambda>b. if b then return i else Skip ()))
                                                                                      else UndefinedARM cond
               else if b'27 then if \<not> b'25 \<and> b'22 \<and> \<not> b'20
                                 then let registers = of_bl [b'15, b'14, b'13, b'12, b'11, b'10, b'9, b'8, b'7, b'6, b'5, b'4, b'3, b'2, b'1, b'0];
                                          Rn = of_bl [b'19, b'18, b'17, b'16]; U = of_bl [b'23]
                                      in bind (Do (cond, True))
                                          (\<lambda>b. if b then bind (if Rn = 15 \<or> BitCount registers < 1 then DECODE_UNPREDICTABLE (mc, ''StoreMultipleUserRegisters'') else return ())
                                                          (\<lambda>_. return (Store (StoreMultipleUserRegisters (U = 1, of_bl [b'24] = U, Rn, registers))))
                                               else Skip ())
                                 else if \<not> b'25 \<and> \<not> b'22 \<and> \<not> b'20
                                      then let registers = of_bl [b'15, b'14, b'13, b'12, b'11, b'10, b'9, b'8, b'7, b'6, b'5, b'4, b'3, b'2, b'1, b'0];
                                               Rn = of_bl [b'19, b'18, b'17, b'16]
                                           in bind (Do (cond, True))
                                               (\<lambda>b. if b then bind (if Rn = 15 \<or> BitCount registers < 1 then DECODE_UNPREDICTABLE (mc, ''StoreMultiple'') else return ())
                                                               (\<lambda>_. return (Store (StoreMultiple (of_bl [b'23] = 1, of_bl [b'24] = 1, of_bl [b'21] = 1, Rn, registers))))
                                                    else Skip ())
                                      else if \<not> b'25 \<and> b'22 \<and> b'20 \<and> \<not> b'15
                                           then let registers = of_bl [b'14, b'13, b'12, b'11, b'10, b'9, b'8, b'7, b'6, b'5, b'4, b'3, b'2, b'1, b'0];
                                                    Rn = of_bl [b'19, b'18, b'17, b'16]; U = of_bl [b'23]
                                                in bind (Do (cond, True))
                                                    (\<lambda>b. if b then bind (if Rn = 15 \<or> BitCount registers < 1 then DECODE_UNPREDICTABLE (mc, ''LoadMultipleUserRegisters'')
                                                                         else return ())
                                                                    (\<lambda>_. return (Load (LoadMultipleUserRegisters (U = 1, of_bl [b'24] = U, Rn, registers))))
                                                         else Skip ())
                                           else if \<not> b'25 \<and> b'22 \<and> b'20 \<and> b'15
                                                then let registers = of_bl [b'14, b'13, b'12, b'11, b'10, b'9, b'8, b'7, b'6, b'5, b'4, b'3, b'2, b'1, b'0];
                                                         Rn = of_bl [b'19, b'18, b'17, b'16]; U = of_bl [b'23]
                                                     in bind (Do (cond, True))
                                                         (\<lambda>b. if b then let wback = of_bl [b'21] = 1
                                                                        in bind (if Rn = 15 then return True
                                                                                 else if wback then if registers !! nat (uint Rn) then bind (ArchVersion ()) (\<lambda>v. return (7 \<le> v))
        else return False
                                                                                      else return False)
                                                                            (\<lambda>v. bind (if v then DECODE_UNPREDICTABLE (mc, ''LoadMultipleExceptionReturn'') else return ())
                                                                                  (\<lambda>_. return (Load (LoadMultipleExceptionReturn (U = 1, of_bl [b'24] = U, wback, Rn, registers)))))
                                                              else Skip ())
                                                else if \<not> b'25 \<and> \<not> b'22 \<and> b'20
                                                     then let registers = of_bl [b'15, b'14, b'13, b'12, b'11, b'10, b'9, b'8, b'7, b'6, b'5, b'4, b'3, b'2, b'1, b'0];
                                                              Rn = of_bl [b'19, b'18, b'17, b'16]
                                                          in bind (Do (cond, True))
                                                              (\<lambda>b. if b then let wback = of_bl [b'21] = 1
                                                                             in bind (if Rn = 15 then return True
                                                                                      else if BitCount registers < 1 then return True
                                                                                           else if wback
    then if registers !! nat (uint Rn) then bind (ArchVersion ()) (\<lambda>v. return (7 \<le> v)) else return False else return False)
                                                                                 (\<lambda>v. bind (if v then DECODE_UNPREDICTABLE (mc, ''LoadMultiple'') else return ())
                                                                                       (\<lambda>_. return (Load (LoadMultiple (of_bl [b'23] = 1, of_bl [b'24] = 1, wback, Rn, registers)))))
                                                                   else Skip ())
                                                     else if b'25 \<and> \<not> b'24
                                                          then bind (Do (cond, True))
                                                                (\<lambda>b. if b then return (Branch (BranchTarget
    (scast (word_cat (of_bl [b'23, b'22, b'21, b'20, b'19, b'18, b'17, b'16, b'15, b'14, b'13, b'12, b'11, b'10, b'9, b'8, b'7, b'6, b'5, b'4, b'3, b'2, b'1, b'0]) 0))))
                                                                     else Skip ())
                                                          else if b'25 \<and> b'24
                                                               then bind (Do (cond, True))
                                                                     (\<lambda>b. if b then return (Branch
 (BranchLinkExchangeImmediate
   (InstrSet_ARM, scast (word_cat (of_bl [b'23, b'22, b'21, b'20, b'19, b'18, b'17, b'16, b'15, b'14, b'13, b'12, b'11, b'10, b'9, b'8, b'7, b'6, b'5, b'4, b'3, b'2, b'1, b'0]) 0))))
                                                                          else Skip ())
                                                               else UndefinedARM cond
                    else if b'25 then if b'24 \<and> \<not> b'23 \<and> \<not> b'21 \<and> \<not> b'20
                                      then let Rd = of_bl [b'15, b'14, b'13, b'12]
                                           in bind (HaveThumb2 ())
                                               (\<lambda>v. bind (bind (return (cond, v)) Do)
                                                     (\<lambda>b. if b then bind (if Rd = 15 then DECODE_UNPREDICTABLE (mc, ''MoveTopHalfword'') else return ())
                                                                     (\<lambda>_. return (Data (MoveHalfword
                                                                                           (of_bl [b'22] = 1, Rd,
word_cat (of_bl [b'19, b'18, b'17, b'16]) (of_bl [b'11, b'10, b'9, b'8, b'7, b'6, b'5, b'4, b'3, b'2, b'1, b'0])))))
                                                          else Skip ()))
                                      else if b'24 \<and> \<not> b'23 \<and> \<not> b'22 \<and> b'21 \<and> \<not> b'20 \<and> \<not> b'19 \<and> \<not> b'18 \<and> \<not> b'17 \<and> \<not> b'16
                                           then DecodeHint (cond, of_bl [b'7, b'6, b'5, b'4, b'3, b'2, b'1, b'0])
                                           else if b'24 \<and> \<not> b'23 \<and> b'21 \<and> \<not> b'20
                                                then let mask = of_bl [b'19, b'18, b'17, b'16]
                                                     in bind (Do (cond, True))
                                                         (\<lambda>b. if b then bind (if mask = 0 then DECODE_UNPREDICTABLE (mc, ''MoveToSpecialFromImmediate'') else return ())
                                                                         (\<lambda>_. bind (ARMExpandImm (of_bl [b'11, b'10, b'9, b'8, b'7, b'6, b'5, b'4, b'3, b'2, b'1, b'0]))
                                                                                 (\<lambda>imm32. return (System (MoveToSpecialFromImmediate (of_bl [b'22] = 1, imm32, mask)))))
                                                              else Skip ())
                                                else let imm12 = of_bl [b'11, b'10, b'9, b'8, b'7, b'6, b'5, b'4, b'3, b'2, b'1, b'0]; Rd = of_bl [b'15, b'14, b'13, b'12];
                                                         Rn = of_bl [b'19, b'18, b'17, b'16]; opc = of_bl [b'24, b'23, b'22, b'21]
                                                     in bind (Do (cond, True))
                                                         (\<lambda>b. if b then return (let setflags = of_bl [b'20] = 1; (b'3, b'2, b'1, b'0) = boolify'4 opc
                                                                                in if b'3 then if b'2 \<and> b'0 then Data (Move (setflags, of_bl [b'1] \<noteq> 0, Rd, imm12))
   else if \<not> b'2 then Data (TestCompareImmediate (of_bl [b'1, b'0], Rn, imm12)) else Data (ArithLogicImmediate (opc, setflags, Rd, Rn, imm12))
                                                                                   else Data (ArithLogicImmediate (opc, setflags, Rd, Rn, imm12)))
                                                              else Skip ())
                         else if b'24 \<and> \<not> b'23 \<and> \<not> b'21 \<and> \<not> b'20 \<and> b'9 \<and> \<not> b'7 \<and> \<not> b'6 \<and> \<not> b'5 \<and> \<not> b'4
                              then let Rd = of_bl [b'15, b'14, b'13, b'12]
                                   in bind (HaveVirtExt ())
                                       (\<lambda>v. bind (bind (return (cond, v)) Do)
                                             (\<lambda>b. if b then bind (if Rd = 15 then DECODE_UNPREDICTABLE (mc, ''MoveToRegisterFromBankedOrSpecial'') else return ())
                                                             (\<lambda>_. return (System (MoveToRegisterFromBankedOrSpecial
                                                                                     (of_bl [b'22] = 1, word_cat (of_bl [b'8]) (of_bl [b'19, b'18, b'17, b'16]), Rd))))
                                                  else Skip ()))
                              else if b'24 \<and> \<not> b'23 \<and> \<not> b'21 \<and> \<not> b'20 \<and> \<not> b'9 \<and> \<not> b'7 \<and> \<not> b'6 \<and> \<not> b'5 \<and> \<not> b'4
                                   then let Rd = of_bl [b'15, b'14, b'13, b'12]
                                        in bind (Do (cond, True))
                                            (\<lambda>b. if b then bind (if Rd = 15 then DECODE_UNPREDICTABLE (mc, ''MoveToRegisterFromSpecial'') else return ())
                                                            (\<lambda>_. return (System (MoveToRegisterFromSpecial (of_bl [b'22] = 1, Rd))))
                                                 else Skip ())
                                   else if b'24 \<and> \<not> b'23 \<and> b'21 \<and> \<not> b'20 \<and> b'9 \<and> \<not> b'7 \<and> \<not> b'6 \<and> \<not> b'5 \<and> \<not> b'4
                                        then let Rn = of_bl [b'3, b'2, b'1, b'0]
                                             in bind (HaveVirtExt ())
                                                 (\<lambda>v. bind (bind (return (cond, v)) Do)
                                                       (\<lambda>b. if b then bind (if Rn \<in> set [13, 15] then DECODE_UNPREDICTABLE (mc, ''MoveToBankedOrSpecialRegister'') else return ())
                                                                       (\<lambda>_. return (System (MoveToBankedOrSpecialRegister
   (of_bl [b'22] = 1, word_cat (of_bl [b'8]) (of_bl [b'19, b'18, b'17, b'16]), Rn))))
                                                            else Skip ()))
                                        else if b'24 \<and> \<not> b'23 \<and> b'21 \<and> \<not> b'20 \<and> \<not> b'9 \<and> \<not> b'7 \<and> \<not> b'6 \<and> \<not> b'5 \<and> \<not> b'4
                                             then let Rn = of_bl [b'3, b'2, b'1, b'0]; mask = of_bl [b'19, b'18, b'17, b'16]
                                                  in bind (Do (cond, True))
                                                      (\<lambda>b. if b then bind (if Rn = 15 \<or> mask = 0 then DECODE_UNPREDICTABLE (mc, ''MoveToSpecialFromRegister'') else return ())
                                                                      (\<lambda>_. return (System (MoveToSpecialFromRegister (of_bl [b'22] = 1, Rn, mask))))
                                                           else Skip ())
                                             else if b'24 \<and> \<not> b'23 \<and> \<not> b'22 \<and> b'21 \<and> \<not> b'20 \<and> \<not> b'7 \<and> \<not> b'6 \<and> \<not> b'5 \<and> b'4
                                                  then bind (read_state Architecture)
                                                        (\<lambda>v. bind (bind (bind (bind (return (v = ARMv4)) (\<lambda>v. return (\<not> v))) (\<lambda>v. return (cond, v))) Do)
                                                              (\<lambda>b. if b then return (Branch (BranchExchange (of_bl [b'3, b'2, b'1, b'0]))) else Skip ()))
                                                  else if b'24 \<and> \<not> b'23 \<and> b'22 \<and> b'21 \<and> \<not> b'20 \<and> \<not> b'7 \<and> \<not> b'6 \<and> \<not> b'5 \<and> b'4
                                                       then let Rm = of_bl [b'3, b'2, b'1, b'0]; Rd = of_bl [b'15, b'14, b'13, b'12]
                                                            in bind (ArchVersion ())
                                                                (\<lambda>v. bind (bind (bind (return (5 \<le> v)) (\<lambda>v. return (cond, v))) Do)
                                                                      (\<lambda>b. if b then bind (if Rd = 15 \<or> Rm = 15 then DECODE_UNPREDICTABLE (mc, ''CountLeadingZeroes'') else return ())
                                                                                      (\<lambda>_. return (Data (CountLeadingZeroes (Rd, Rm))))
                                                                           else Skip ()))
                                                       else if b'24 \<and> \<not> b'23 \<and> \<not> b'22 \<and> b'21 \<and> \<not> b'20 \<and> \<not> b'7 \<and> \<not> b'6 \<and> b'5 \<and> b'4
                                                            then let Rm = of_bl [b'3, b'2, b'1, b'0]
                                                                 in bind (ArchVersion ())
                                                                     (\<lambda>v. bind (bind (bind (return (5 \<le> v)) (\<lambda>v. return (cond, v))) Do)
                                                                           (\<lambda>b. if b then bind (if Rm = 15 then DECODE_UNPREDICTABLE (mc, ''BranchLinkExchangeRegister'')
    else return ())
                                                                                           (\<lambda>_. return (Branch (BranchLinkExchangeRegister Rm)))
                                                                                else Skip ()))
                                                            else if b'24 \<and> \<not> b'23 \<and> \<not> b'20 \<and> \<not> b'7 \<and> b'6 \<and> \<not> b'5 \<and> b'4
                                                                 then let Rm = of_bl [b'3, b'2, b'1, b'0]; Rd = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16]
                                                                      in bind (HaveDSPSupport ())
                                                                          (\<lambda>v. bind (bind (return (cond, v)) Do)
                                                                                (\<lambda>b. if b then bind
    (if Rd = 15 \<or> Rn = 15 \<or> Rm = 15 then DECODE_UNPREDICTABLE (mc, ''SaturatingAddSubtract'') else return ())
    (\<lambda>_. return (Media (SaturatingAddSubtract (of_bl [b'22, b'21], Rd, Rm, Rn))))
                                                                                     else Skip ()))
                                                                 else if b'24 \<and> \<not> b'23 \<and> \<not> b'22 \<and> b'21 \<and> \<not> b'20 \<and> \<not> b'7 \<and> b'6 \<and> b'5 \<and> b'4
                                                                      then bind (ArchVersion ())
                                                                            (\<lambda>v. bind (return (5 \<le> v))
                                                                                  (\<lambda>b. if b then bind (if cond \<noteq> 14 then DECODE_UNPREDICTABLE (mc, ''Breakpoint'') else return ())
      (\<lambda>_. bind (update_state (CurrentCondition_update (\<lambda>_. cond)))
              (\<lambda>_. return (Hint (Breakpoint
                                    (word_of_int (uint (word_cat (of_bl [b'19, b'18, b'17, b'16, b'15, b'14, b'13, b'12, b'11, b'10, b'9, b'8]) (of_bl [b'3, b'2, b'1, b'0]))))))))
                                                                                       else bind (Do (cond, False)) (\<lambda>b. return (if b then Undefined 0 else NoOperation))))
                                                                      else if b'24 \<and> \<not> b'23 \<and> b'22 \<and> \<not> b'21 \<and> \<not> b'20 \<and> \<not> b'7 \<and> b'6 \<and> b'5 \<and> b'4
                                                                           then bind (HaveVirtExt ())
                                                                                 (\<lambda>v. bind (bind (return (cond, v)) Do)
                                                                                       (\<lambda>b. if b
then bind (if cond \<noteq> 14 then DECODE_UNPREDICTABLE (mc, ''HypervisorCall'') else return ())
      (\<lambda>_. return (System (HypervisorCall (word_cat (of_bl [b'19, b'18, b'17, b'16, b'15, b'14, b'13, b'12, b'11, b'10, b'9, b'8]) (of_bl [b'3, b'2, b'1, b'0])))))
else Skip ()))
                                                                           else if b'24 \<and> \<not> b'23 \<and> b'22 \<and> b'21 \<and> \<not> b'20 \<and> \<not> b'7 \<and> b'6 \<and> b'5 \<and> b'4
                                                                                then bind (HaveSecurityExt ())
                                                                                      (\<lambda>v. bind (bind (return (cond, v)) Do)
(\<lambda>b. if b then return (System (SecureMonitorCall (of_bl [b'3, b'2, b'1, b'0]))) else Skip ()))
                                                                                else if b'24 \<and> \<not> b'23 \<and> \<not> b'22 \<and> \<not> b'21 \<and> \<not> b'20 \<and> b'7 \<and> \<not> b'4
                                                                                     then let Rn = of_bl [b'3, b'2, b'1, b'0]; Rm = of_bl [b'11, b'10, b'9, b'8];
  Ra = of_bl [b'15, b'14, b'13, b'12]; Rd = of_bl [b'19, b'18, b'17, b'16]
                                                                                          in bind (HaveDSPSupport ())
  (\<lambda>v. bind (bind (return (cond, v)) Do)
        (\<lambda>b. if b then bind (if Rd = 15 \<or> Rn = 15 \<or> Rm = 15 \<or> Ra = 15 then DECODE_UNPREDICTABLE (mc, ''Signed16Multiply32Accumulate'') else return ())
                        (\<lambda>_. return (Multiply (Signed16Multiply32Accumulate (of_bl [b'6] = 1, of_bl [b'5] = 1, Rd, Rn, Rm, Ra))))
             else Skip ()))
                                                                                     else if b'24 \<and> \<not> b'23 \<and> \<not> b'22 \<and> b'21 \<and> \<not> b'20 \<and> b'7 \<and> \<not> b'5 \<and> \<not> b'4
                                                                                          then let Rn = of_bl [b'3, b'2, b'1, b'0]; Rm = of_bl [b'11, b'10, b'9, b'8];
       Ra = of_bl [b'15, b'14, b'13, b'12]; Rd = of_bl [b'19, b'18, b'17, b'16]
   in bind (HaveDSPSupport ())
       (\<lambda>v. bind (bind (return (cond, v)) Do)
             (\<lambda>b. if b then bind (if Rd = 15 \<or> Rn = 15 \<or> Rm = 15 \<or> Ra = 15 then DECODE_UNPREDICTABLE (mc, ''Signed16x32Multiply32Accumulate'') else return ())
                             (\<lambda>_. return (Multiply (Signed16x32Multiply32Accumulate (of_bl [b'6] = 1, Rd, Rn, Rm, Ra))))
                  else Skip ()))
                                                                                          else if b'24 \<and> \<not> b'23 \<and> \<not> b'22 \<and> b'21 \<and> \<not> b'20 \<and> b'7 \<and> b'5 \<and> \<not> b'4
   then let Rn = of_bl [b'3, b'2, b'1, b'0]; Rm = of_bl [b'11, b'10, b'9, b'8]; Rd = of_bl [b'19, b'18, b'17, b'16]
        in bind (HaveDSPSupport ())
            (\<lambda>v. bind (bind (return (cond, v)) Do)
                  (\<lambda>b. if b then bind (if Rd = 15 \<or> Rn = 15 \<or> Rm = 15 then DECODE_UNPREDICTABLE (mc, ''Signed16x32Multiply32Result'') else return ())
                                  (\<lambda>_. return (Multiply (Signed16x32Multiply32Result (of_bl [b'6] = 1, Rd, Rn, Rm))))
                       else Skip ()))
   else if b'24 \<and> \<not> b'23 \<and> b'22 \<and> \<not> b'21 \<and> \<not> b'20 \<and> b'7 \<and> \<not> b'4
        then let Rn = of_bl [b'3, b'2, b'1, b'0]; Rm = of_bl [b'11, b'10, b'9, b'8]; RdLo = of_bl [b'15, b'14, b'13, b'12]; RdHi = of_bl [b'19, b'18, b'17, b'16]
             in bind (HaveDSPSupport ())
                 (\<lambda>v. bind (bind (return (cond, v)) Do)
                       (\<lambda>b. if b then bind (if RdLo = 15 \<or> RdHi = 15 \<or> Rn = 15 \<or> Rm = 15 then DECODE_UNPREDICTABLE (mc, ''Signed16Multiply64Accumulate'') else return ())
                                       (\<lambda>_. return (Multiply (Signed16Multiply64Accumulate (of_bl [b'6] = 1, of_bl [b'5] = 1, RdHi, RdLo, Rn, Rm))))
                            else Skip ()))
        else if b'24 \<and> \<not> b'23 \<and> b'22 \<and> b'21 \<and> \<not> b'20 \<and> b'7 \<and> \<not> b'4
             then let Rn = of_bl [b'3, b'2, b'1, b'0]; Rm = of_bl [b'11, b'10, b'9, b'8]; Rd = of_bl [b'19, b'18, b'17, b'16]
                  in bind (HaveDSPSupport ())
                      (\<lambda>v. bind (bind (return (cond, v)) Do)
                            (\<lambda>b. if b then bind (if Rd = 15 \<or> Rn = 15 \<or> Rm = 15 then DECODE_UNPREDICTABLE (mc, ''Signed16Multiply32Result'') else return ())
                                            (\<lambda>_. return (Multiply (Signed16Multiply32Result (of_bl [b'6] = 1, of_bl [b'5] = 1, Rd, Rn, Rm))))
                                 else Skip ()))
             else if b'24 \<and> \<not> b'23 \<and> b'22 \<and> b'21 \<and> \<not> b'20 \<and> \<not> b'19 \<and> \<not> b'18 \<and>
                                                                       \<not> b'17 \<and>
                                                                       \<not> b'16 \<and>
                                                                       \<not> b'15 \<and>
                                                                       \<not> b'14 \<and>
                                                                       \<not> b'13 \<and> \<not> b'12 \<and> \<not> b'11 \<and> \<not> b'10 \<and> \<not> b'9 \<and> \<not> b'8 \<and> \<not> b'7 \<and> b'6 \<and> b'5 \<and> \<not> b'4 \<and> b'3 \<and> b'2 \<and> b'1 \<and> \<not> b'0
                  then bind (HaveVirtExt ()) (\<lambda>v. bind (bind (return (cond, v)) Do) (\<lambda>b. if b then return (System ExceptionReturn) else Skip ()))
                  else if b'24 \<and> \<not> b'23 \<and> \<not> b'20 \<and> \<not> b'7 then return (Undefined 0)
                       else if \<not> b'4
                            then let Rm = of_bl [b'3, b'2, b'1, b'0]; Rd = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16]; opc = of_bl [b'24, b'23, b'22, b'21]
                                 in bind (Do (cond, True))
                                     (\<lambda>b. if b then return (let setflags = of_bl [b'20] = 1; (shift_t, shift_n) = DecodeImmShift (of_bl [b'6, b'5], of_bl [b'11, b'10, b'9, b'8, b'7])
                                                            in if word_extract 3 2 opc = 2 then Data (TestCompareRegister (word_extract 1 0 opc, Rn, Rm, shift_t, shift_n))
                                                               else if opc \<in> set [13, 15] then Data (ShiftImmediate (opc !! 1, setflags, Rd, Rm, shift_t, shift_n))
                                                                    else Data (Register (opc, setflags, Rd, Rn, Rm, shift_t, shift_n)))
                                          else Skip ())
                            else if \<not> b'7 \<and> b'4
                                 then let Rm = of_bl [b'3, b'2, b'1, b'0]; Rs = of_bl [b'11, b'10, b'9, b'8]; Rd = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16];
                                          opc = of_bl [b'24, b'23, b'22, b'21]
                                      in bind (Do (cond, True))
                                          (\<lambda>b. if b then bind (if Rd = 15 \<and> word_extract 3 2 opc \<noteq> 2 \<or> Rn = 15 \<or> Rm = 15 \<or> Rs = 15
                                                               then DECODE_UNPREDICTABLE (mc, ''RegisterShiftedRegister'') else return ())
                                                          (\<lambda>_. return (let setflags = of_bl [b'20] = 1; shift_t = DecodeRegShift (of_bl [b'6, b'5])
                                                                         in if opc = 13 \<or> opc = 15 then Data (ShiftRegister (opc !! 1, setflags, Rd, Rm, shift_t, Rs))
                                                                            else Data (RegisterShiftedRegister (opc, setflags, Rd, Rn, Rm, shift_t, Rs))))
                                               else Skip ())
                                 else if \<not> b'24 \<and> \<not> b'23 \<and> \<not> b'22 \<and> b'7 \<and> \<not> b'6 \<and> \<not> b'5 \<and> b'4
                                      then let Rn = of_bl [b'3, b'2, b'1, b'0]; Rm = of_bl [b'11, b'10, b'9, b'8]; Ra = of_bl [b'15, b'14, b'13, b'12];
                                               Rd = of_bl [b'19, b'18, b'17, b'16]; A = of_bl [b'21]
                                           in bind (Do (cond, True))
                                               (\<lambda>b. if b then bind (if Rd = 15 then return True
                                                                    else if Rn = 15 then return True
                                                                         else if Rm = 15 then return True
                                                                              else if A = 1 \<and> Ra = 15 then return True
                                                                                   else bind (ArchVersion ()) (\<lambda>v. bind (return (v < 6)) (\<lambda>b. return (b \<and> Rd = Rn))))
                                                               (\<lambda>v. bind (if v then DECODE_UNPREDICTABLE (mc, ''Multiply'') else return ())
                                                                     (\<lambda>_. return (let setflags = of_bl [b'20] = 1
                                                                                    in if A = 1 then Multiply (MultiplyAccumulate (setflags, Rd, Rn, Rm, Ra))
                                                                                       else Multiply (Multiply32 (setflags, Rd, Rn, Rm)))))
                                                    else Skip ())
                                      else if \<not> b'24 \<and> \<not> b'23 \<and> b'22 \<and> \<not> b'21 \<and> \<not> b'20 \<and> b'7 \<and> \<not> b'6 \<and> \<not> b'5 \<and> b'4
                                           then let Rn = of_bl [b'3, b'2, b'1, b'0]; Rm = of_bl [b'11, b'10, b'9, b'8]; RdLo = of_bl [b'15, b'14, b'13, b'12];
                                                    RdHi = of_bl [b'19, b'18, b'17, b'16]
                                                in bind (ArchVersion ())
                                                    (\<lambda>v. bind (bind (bind (return (6 \<le> v)) (\<lambda>v. return (cond, v))) Do)
                                                          (\<lambda>b. if b then bind (if RdHi = 15 \<or> RdLo = 15 \<or> Rn = 15 \<or> Rm = 15 \<or> RdHi = RdLo
                                                                               then DECODE_UNPREDICTABLE (mc, ''MultiplyAccumulateAccumulate'') else return ())
                                                                          (\<lambda>_. return (Multiply (MultiplyAccumulateAccumulate (RdHi, RdLo, Rn, Rm))))
                                                               else Skip ()))
                                           else if \<not> b'24 \<and> \<not> b'23 \<and> b'22 \<and> b'21 \<and> \<not> b'20 \<and> b'7 \<and> \<not> b'6 \<and> \<not> b'5 \<and> b'4
                                                then let Rn = of_bl [b'3, b'2, b'1, b'0]; Rm = of_bl [b'11, b'10, b'9, b'8]; Ra = of_bl [b'15, b'14, b'13, b'12];
                                                         Rd = of_bl [b'19, b'18, b'17, b'16]
                                                     in bind (HaveThumb2 ())
                                                         (\<lambda>v. bind (bind (return (cond, v)) Do)
                                                               (\<lambda>b. if b then bind (if Rd = 15 \<or> Rn = 15 \<or> Rm = 15 \<or> Ra = 15 then DECODE_UNPREDICTABLE (mc, ''MultiplySubtract'')
                                                                                    else return ())
                                                                               (\<lambda>_. return (Multiply (MultiplySubtract (Rd, Rn, Rm, Ra))))
                                                                    else Skip ()))
                                                else if \<not> b'24 \<and> b'23 \<and> b'7 \<and> \<not> b'6 \<and> \<not> b'5 \<and> b'4
                                                     then let Rn = of_bl [b'3, b'2, b'1, b'0]; Rm = of_bl [b'11, b'10, b'9, b'8]; RdLo = of_bl [b'15, b'14, b'13, b'12];
                                                              RdHi = of_bl [b'19, b'18, b'17, b'16]
                                                          in bind (Do (cond, True))
                                                              (\<lambda>b. if b then bind (if RdLo = 15 then return True
                                                                                   else if RdHi = 15 then return True
                                                                                        else if Rn = 15 then return True
 else if Rm = 15 then return True else if RdHi = RdLo then return True else bind (ArchVersion ()) (\<lambda>v. bind (return (v < 6)) (\<lambda>b. return (b \<and> (RdHi = Rn \<or> RdLo = Rn)))))
                                                                              (\<lambda>v. bind (if v then DECODE_UNPREDICTABLE (mc, ''MultiplyLong'') else return ())
                                                                                    (\<lambda>_. return
(Multiply (MultiplyLong (of_bl [b'21] = 1, of_bl [b'22] = 1, of_bl [b'20] = 1, RdHi, RdLo, Rn, Rm)))))
                                                                   else Skip ())
                                                     else if b'24 \<and> \<not> b'23 \<and> \<not> b'21 \<and> \<not> b'20 \<and> b'7 \<and> \<not> b'6 \<and> \<not> b'5 \<and> b'4
                                                          then let Rt2 = of_bl [b'3, b'2, b'1, b'0]; Rt = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16]
                                                               in bind (Do (cond, True))
                                                                   (\<lambda>b. if b then bind (if Rt = 15 \<or> Rt2 = 15 \<or> Rn = 15 \<or> Rn = Rt \<or> Rn = Rt2 then DECODE_UNPREDICTABLE (mc, ''Swap'')
                                                                                        else return ())
                                                                                   (\<lambda>_. return (Swap (of_bl [b'22] = 1, Rt, Rt2, Rn)))
                                                                        else Skip ())
                                                          else if b'24 \<and> b'23 \<and> \<not> b'22 \<and> \<not> b'21 \<and> \<not> b'20 \<and> b'7 \<and> \<not> b'6 \<and> \<not> b'5 \<and> b'4
                                                               then let Rt = of_bl [b'3, b'2, b'1, b'0]; Rd = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16]
                                                                    in bind (ArchVersion ())
                                                                        (\<lambda>v. bind (bind (bind (return (6 \<le> v)) (\<lambda>v. return (cond, v))) Do)
                                                                              (\<lambda>b. if b then bind
  (if Rd = 15 \<or> Rt = 15 \<or> Rn = 15 \<or> Rd = Rn \<or> Rd = Rt then DECODE_UNPREDICTABLE (mc, ''StoreExclusive'') else return ()) (\<lambda>_. return (Store (StoreExclusive (Rd, Rt, Rn, 0))))
                                                                                   else Skip ()))
                                                               else if b'24 \<and> b'23 \<and> \<not> b'22 \<and> \<not> b'21 \<and> b'20 \<and> b'7 \<and> \<not> b'6 \<and> \<not> b'5 \<and> b'4
                                                                    then let Rt = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16]
                                                                         in bind (ArchVersion ())
                                                                             (\<lambda>v. bind (bind (bind (return (6 \<le> v)) (\<lambda>v. return (cond, v))) Do)
                                                                                   (\<lambda>b. if b then bind
       (if Rt = 15 \<or> Rn = 15 then DECODE_UNPREDICTABLE (mc, ''LoadExclusive'') else return ()) (\<lambda>_. return (Load (LoadExclusive (Rt, Rn, 0))))
                                                                                        else Skip ()))
                                                                    else if b'24 \<and> b'23 \<and> \<not> b'22 \<and> b'21 \<and> \<not> b'20 \<and> b'7 \<and> \<not> b'6 \<and> \<not> b'5 \<and> b'4
                                                                         then let Rt = of_bl [b'3, b'2, b'1, b'0]; Rd = of_bl [b'15, b'14, b'13, b'12];
                                                                                  Rn = of_bl [b'19, b'18, b'17, b'16]
                                                                              in bind (read_state Architecture)
                                                                                  (\<lambda>v. bind (bind (bind (return (v \<in> set [ARMv6K, ARMv7_A, ARMv7_R])) (\<lambda>v. return (cond, v))) Do)
                                                                                        (\<lambda>b.
if b then let Rt2 = Rt + 1
          in bind (if Rd = 15 \<or> Rt !! 0 \<or> Rt = 14 \<or> Rn = 15 \<or> Rd = Rn \<or> Rd = Rt \<or> Rd = Rt2 then DECODE_UNPREDICTABLE (mc, ''StoreExclusiveDoubleword'') else return ())
              (\<lambda>_. return (Store (StoreExclusiveDoubleword (Rd, Rt, Rt2, Rn))))
else Skip ()))
                                                                         else if b'24 \<and> b'23 \<and> \<not> b'22 \<and> b'21 \<and> b'20 \<and> b'7 \<and> \<not> b'6 \<and> \<not> b'5 \<and> b'4
                                                                              then let Rt = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16]
                                                                                   in bind (read_state Architecture)
                                                                                       (\<lambda>v. bind (bind (bind (return (v \<in> set [ARMv6K, ARMv7_A, ARMv7_R])) (\<lambda>v. return (cond, v))) Do)
 (\<lambda>b. if b then bind (if Rt !! 0 \<or> Rt = 14 \<or> Rn = 15 then DECODE_UNPREDICTABLE (mc, ''LoadExclusiveDoubleword'') else return ())
                 (\<lambda>_. return (Load (LoadExclusiveDoubleword (Rt, Rt + 1, Rn))))
      else Skip ()))
                                                                              else if b'24 \<and> b'23 \<and> b'22 \<and> \<not> b'21 \<and> \<not> b'20 \<and> b'7 \<and> \<not> b'6 \<and> \<not> b'5 \<and> b'4
                                                                                   then let Rt = of_bl [b'3, b'2, b'1, b'0]; Rd = of_bl [b'15, b'14, b'13, b'12];
Rn = of_bl [b'19, b'18, b'17, b'16]
                                                                                        in bind (read_state Architecture)
(\<lambda>v. bind (bind (bind (return (v \<in> set [ARMv6K, ARMv7_A, ARMv7_R])) (\<lambda>v. return (cond, v))) Do)
      (\<lambda>b. if b then bind (if Rd = 15 \<or> Rt = 15 \<or> Rn = 15 \<or> Rd = Rn \<or> Rd = Rt then DECODE_UNPREDICTABLE (mc, ''StoreExclusiveByte'') else return ())
                      (\<lambda>_. return (Store (StoreExclusiveByte (Rd, Rt, Rn))))
           else Skip ()))
                                                                                   else if b'24 \<and> b'23 \<and> b'22 \<and> \<not> b'21 \<and> b'20 \<and> b'7 \<and> \<not> b'6 \<and> \<not> b'5 \<and> b'4
                                                                                        then let Rt = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16]
 in bind (read_state Architecture)
     (\<lambda>v. bind (bind (bind (return (v \<in> set [ARMv6K, ARMv7_A, ARMv7_R])) (\<lambda>v. return (cond, v))) Do)
           (\<lambda>b. if b then bind (if Rt = 15 \<or> Rn = 15 then DECODE_UNPREDICTABLE (mc, ''LoadExclusiveByte'') else return ()) (\<lambda>_. return (Load (LoadExclusiveByte (Rt, Rn))))
                else Skip ()))
                                                                                        else if b'24 \<and> b'23 \<and> b'22 \<and> b'21 \<and> \<not> b'20 \<and> b'7 \<and> \<not> b'6 \<and> \<not> b'5 \<and> b'4
 then let Rt = of_bl [b'3, b'2, b'1, b'0]; Rd = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16]
      in bind (read_state Architecture)
          (\<lambda>v. bind (bind (bind (return (v \<in> set [ARMv6K, ARMv7_A, ARMv7_R])) (\<lambda>v. return (cond, v))) Do)
                (\<lambda>b. if b then bind (if Rd = 15 \<or> Rt = 15 \<or> Rn = 15 \<or> Rd = Rn \<or> Rd = Rt then DECODE_UNPREDICTABLE (mc, ''StoreExclusiveHalf'') else return ())
                                (\<lambda>_. return (Store (StoreExclusiveHalf (Rd, Rt, Rn))))
                     else Skip ()))
 else if b'24 \<and> b'23 \<and> b'22 \<and> b'21 \<and> b'20 \<and> b'7 \<and> \<not> b'6 \<and> \<not> b'5 \<and> b'4
      then let Rt = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16]
           in bind (read_state Architecture)
               (\<lambda>v. bind (bind (bind (return (v \<in> set [ARMv6K, ARMv7_A, ARMv7_R])) (\<lambda>v. return (cond, v))) Do)
                     (\<lambda>b. if b then bind (if Rt = 15 \<or> Rn = 15 then DECODE_UNPREDICTABLE (mc, ''LoadExclusiveHalf'') else return ()) (\<lambda>_. return (Load (LoadExclusiveHalf (Rt, Rn))))
                          else Skip ()))
      else if \<not> b'24 \<and> \<not> b'22 \<and> b'21 \<and> \<not> b'20 \<and> b'7 \<and> \<not> b'6 \<and> b'5 \<and> b'4
           then let Rm = of_bl [b'3, b'2, b'1, b'0]; Rt = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16]
                in bind (HaveThumb2 ())
                    (\<lambda>v. bind (bind (return (cond, v)) Do)
                          (\<lambda>b. if b then bind (if Rt = 15 \<or> Rn = 15 \<or> Rn = Rt \<or> Rm = 15 then DECODE_UNPREDICTABLE (mc, ''StoreHalfUnprivileged'') else return ())
                                          (\<lambda>_. return (Store (StoreHalfUnprivileged (of_bl [b'23] = 1, True, Rt, Rn, register_form2 Rm))))
                               else Skip ()))
           else if \<not> b'22 \<and> \<not> b'20 \<and> b'7 \<and> \<not> b'6 \<and> b'5 \<and> b'4
                then let Rm = of_bl [b'3, b'2, b'1, b'0]; Rt = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16]; P = of_bl [b'24]
                     in bind (Do (cond, True))
                         (\<lambda>b. if b then let wback = P = 0 \<or> of_bl [b'21] = 1
                                        in bind (if Rt = 15 then return True
                                                 else if Rm = 15 then return True
                                                      else if wback \<and> (Rn = 15 \<or> Rn = Rt) then return True
                                                           else bind (ArchVersion ()) (\<lambda>v. bind (return (v < 6)) (\<lambda>b. return (b \<and> wback \<and> Rm = Rn))))
                                            (\<lambda>v. bind (if v then DECODE_UNPREDICTABLE (mc, ''StoreHalf'') else return ())
                                                  (\<lambda>_. return (Store (StoreHalf (of_bl [b'23] = 1, P = 1, wback, Rt, Rn, register_form1 (Rm, SRType_LSL, 0))))))
                              else Skip ())
                else if \<not> b'24 \<and> \<not> b'22 \<and> b'21 \<and> b'20 \<and> b'7 \<and> b'4
                     then let Rm = of_bl [b'3, b'2, b'1, b'0]; H = of_bl [b'5]; S = of_bl [b'6]; Rt = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16]
                          in bind (if H \<noteq> 0 \<or> S = 1 then HaveThumb2 () else return False)
                              (\<lambda>v. bind (bind (return (cond, v)) Do)
                                    (\<lambda>b. if b then bind (if Rt = 15 \<or> Rn = 15 \<or> Rn = Rt \<or> Rm = 15 then DECODE_UNPREDICTABLE (mc, ''LoadHalf/Byte (unprivileged)'') else return ())
                                                    (\<lambda>_. return (let add = of_bl [b'23] = 1; m = register_form2 Rm
                                                                   in if H = 1 then Load (LoadHalfUnprivileged (S = 0, add, True, Rt, Rn, m))
                                                                      else Load (LoadSignedByteUnprivileged (add, True, Rt, Rn, m))))
                                         else Skip ()))
                     else if \<not> b'22 \<and> b'20 \<and> b'7 \<and> b'4
                          then let Rm = of_bl [b'3, b'2, b'1, b'0]; H = of_bl [b'5]; S = of_bl [b'6]; Rt = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16];
                                   P = of_bl [b'24]
                               in bind (Do (cond, H \<noteq> 0 \<or> S = 1))
                                   (\<lambda>b. if b then let wback = P = 0 \<or> of_bl [b'21] = 1
                                                  in bind (if Rt = 15 then return True
                                                           else if Rm = 15 then return True else bind (ArchVersion ()) (\<lambda>v. bind (return (v < 6)) (\<lambda>b. return (b \<and> wback \<and> Rm = Rn))))
                                                      (\<lambda>v. bind (if v then DECODE_UNPREDICTABLE (mc, ''LoadHalf/Byte'') else return ())
                                                            (\<lambda>_. return (let index = P = 1; add = of_bl [b'23] = 1; unsigned = S = 0; m = register_form1 (Rm, SRType_LSL, 0)
                                                                           in if H = 1 then Load (LoadHalf (unsigned, add, index, wback, Rt, Rn, m))
                                                                              else Load (LoadByte (unsigned, add, index, wback, Rt, Rn, m)))))
                                        else Skip ())
                          else if \<not> b'22 \<and> \<not> b'20 \<and> b'7 \<and> b'6 \<and> b'4
                               then let Rm = of_bl [b'3, b'2, b'1, b'0]; Rt = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16]; W = of_bl [b'21]; P = of_bl [b'24]
                                    in bind (HaveDSPSupport ())
                                        (\<lambda>v. bind (bind (return (cond, v)) Do)
                                              (\<lambda>b. if b then let Rt2 = Rt + 1; wback = P = 0 \<or> W = 1; store = of_bl [b'5] = 1
                                                             in bind (if Rt !! 0 then return True
                                                                      else if P = 0 \<and> W = 1 then return True
                                                                           else if Rt2 = 15 then return True
                                                                                else if Rm = 15 then return True
                                                                                     else if \<not> store \<and> (Rm = Rt \<or> Rm = Rt2) then return True
                                                                                          else if wback \<and> (Rn = 15 \<or> Rn = Rt \<or> Rn = Rt2) then return True
   else bind (ArchVersion ()) (\<lambda>v. bind (return (v < 6)) (\<lambda>b. return (b \<and> wback \<and> Rm = Rn))))
                                                                 (\<lambda>v. bind (if v then DECODE_UNPREDICTABLE (mc, ''Load/StoreDual (register)'') else return ())
                                                                       (\<lambda>_. return (let index = P = 1; add = of_bl [b'23] = 1; m = register_form2 Rm
                                                                                      in if store then Store (StoreDual (add, index, wback, Rt, Rt2, Rn, m))
                                                                                         else Load (LoadDual (add, index, wback, Rt, Rt2, Rn, m)))))
                                                   else Skip ()))
                               else if b'22 \<and> \<not> b'20 \<and> b'19 \<and> b'18 \<and> b'17 \<and> b'16 \<and> b'7 \<and> b'6 \<and> \<not> b'5 \<and> b'4
                                    then let Rt = of_bl [b'15, b'14, b'13, b'12]
                                         in bind (HaveDSPSupport ())
                                             (\<lambda>v. bind (bind (return (cond, v)) Do)
                                                   (\<lambda>b. if b then let Rt2 = Rt + 1
                                                                  in bind (if Rt !! 0 \<or> Rt2 = 15 then DECODE_UNPREDICTABLE (mc, ''LoadDual (literal)'') else return ())
                                                                      (\<lambda>_. return (Load (LoadDualLiteral
(of_bl [b'23] = 1, Rt, Rt2, word_of_int (uint (word_cat (of_bl [b'11, b'10, b'9, b'8]) (of_bl [b'3, b'2, b'1, b'0])))))))
                                                        else Skip ()))
                                    else if b'22 \<and> \<not> b'20 \<and> b'7 \<and> b'6 \<and> b'4
                                         then let S = of_bl [b'5]; Rt = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16]; W = of_bl [b'21]; P = of_bl [b'24]
                                              in bind (HaveDSPSupport ())
                                                  (\<lambda>v. bind (bind (return (cond, v)) Do)
                                                        (\<lambda>b. if b then let Rt2 = Rt + 1; wback = P = 0 \<or> W = 1
                                                                       in bind (if Rt !! 0 \<or> P = 0 \<and> W = 1 \<or> wback \<and> (S = 1 \<and> Rn = 15 \<or> Rn = Rt \<or> Rn = Rt2) \<or> Rt2 = 15
                                                                                then DECODE_UNPREDICTABLE (mc, ''Load/StoreDual (immediate)'') else return ())
                                                                           (\<lambda>_. return (let index = P = 1; add = of_bl [b'23] = 1;
  m = immediate_form2 (word_of_int (uint (word_cat (of_bl [b'11, b'10, b'9, b'8]) (of_bl [b'3, b'2, b'1, b'0]))))
                                                                                          in if S = 1 then Store (StoreDual (add, index, wback, Rt, Rt2, Rn, m))
 else Load (LoadDual (add, index, wback, Rt, Rt2, Rn, m))))
                                                             else Skip ()))
                                         else if \<not> b'24 \<and> b'22 \<and> b'21 \<and> b'20 \<and> b'7 \<and> b'4
                                              then let H = of_bl [b'5]; S = of_bl [b'6]; Rt = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16]
                                                   in bind (if H \<noteq> 0 \<or> S = 1 then HaveThumb2 () else return False)
                                                       (\<lambda>v. bind (bind (return (cond, v)) Do)
                                                             (\<lambda>b. if b then bind (if Rt = 15 \<or> Rn = 15 \<or> Rn = Rt then DECODE_UNPREDICTABLE (mc, ''LoadHalf/Byte (unprivileged)'')
                                                                                  else return ())
                                                                             (\<lambda>_. return (let add = of_bl [b'23] = 1;
    m = immediate_form2 (word_of_int (uint (word_cat (of_bl [b'11, b'10, b'9, b'8]) (of_bl [b'3, b'2, b'1, b'0]))))
in if H = 1 then Load (LoadHalfUnprivileged (S = 0, add, True, Rt, Rn, m)) else Load (LoadSignedByteUnprivileged (add, True, Rt, Rn, m))))
                                                                  else Skip ()))
                                              else if b'22 \<and> b'20 \<and> b'19 \<and> b'18 \<and> b'17 \<and> b'16 \<and> b'7 \<and> b'4
                                                   then let H = of_bl [b'5]; S = of_bl [b'6]; Rt = of_bl [b'15, b'14, b'13, b'12]
                                                        in bind (Do (cond, H \<noteq> 0 \<or> S = 1))
                                                            (\<lambda>b. if b then bind (if Rt = 15 then DECODE_UNPREDICTABLE (mc, ''LoadHalf/Byte (literal)'') else return ())
                                                                            (\<lambda>_. return (let add = of_bl [b'23] = 1; unsigned = S = 0;
   imm32 = word_of_int (uint (word_cat (of_bl [b'11, b'10, b'9, b'8]) (of_bl [b'3, b'2, b'1, b'0])))
                                                                                           in if H = 1 then Load (LoadHalfLiteral (unsigned, add, Rt, imm32))
  else Load (LoadByteLiteral (unsigned, add, Rt, imm32))))
                                                                 else Skip ())
                                                   else if b'22 \<and> b'20 \<and> b'7 \<and> b'4
                                                        then let H = of_bl [b'5]; S = of_bl [b'6]; Rt = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16];
                                                                 P = of_bl [b'24]
                                                             in bind (Do (cond, H \<noteq> 0 \<or> S = 1))
                                                                 (\<lambda>b. if b then let wback = P = 0 \<or> of_bl [b'21] = 1
                                                                                in bind (if Rt = 15 \<or> wback \<and> Rn = Rt then DECODE_UNPREDICTABLE (mc, ''LoadHalf/Byte (immediate)'')
                                                                                         else return ())
                                                                                    (\<lambda>_. return
(let index = P = 1; add = of_bl [b'23] = 1; unsigned = S = 0; m = immediate_form1 (word_of_int (uint (word_cat (of_bl [b'11, b'10, b'9, b'8]) (of_bl [b'3, b'2, b'1, b'0]))))
 in if H = 1 then Load (LoadHalf (unsigned, add, index, wback, Rt, Rn, m)) else Load (LoadByte (unsigned, add, index, wback, Rt, Rn, m))))
                                                                      else Skip ())
                                                        else if \<not> b'24 \<and> b'22 \<and> b'21 \<and> \<not> b'20 \<and> b'7 \<and> \<not> b'6 \<and> b'5 \<and> b'4
                                                             then let Rt = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16]
                                                                  in bind (HaveThumb2 ())
                                                                      (\<lambda>v. bind (bind (return (cond, v)) Do)
                                                                            (\<lambda>b. if b then bind
(if Rt = 15 \<or> Rn = 15 \<or> Rn = Rt then DECODE_UNPREDICTABLE (mc, ''StoreHalf (immediate)'') else return ())
(\<lambda>_. return (Store (StoreHalfUnprivileged
                       (of_bl [b'23] = 1, True, Rt, Rn, immediate_form2 (word_of_int (uint (word_cat (of_bl [b'11, b'10, b'9, b'8]) (of_bl [b'3, b'2, b'1, b'0]))))))))
                                                                                 else Skip ()))
                                                             else if b'22 \<and> \<not> b'20 \<and> b'7 \<and> \<not> b'6 \<and> b'5 \<and> b'4
                                                                  then let Rt = of_bl [b'15, b'14, b'13, b'12]; Rn = of_bl [b'19, b'18, b'17, b'16]; P = of_bl [b'24]
                                                                       in bind (Do (cond, True))
                                                                           (\<lambda>b. if b then let wback = P = 0 \<or> of_bl [b'21] = 1
                                                                                          in bind
  (if Rt = 15 \<or> wback \<and> (Rn = 15 \<or> Rn = Rt) then DECODE_UNPREDICTABLE (mc, ''StoreHalf (immediate)'') else return ())
  (\<lambda>_. return (Store (StoreHalf (of_bl [b'23] = 1, P = 1, wback, Rt, Rn,
                                   immediate_form1 (word_of_int (uint (word_cat (of_bl [b'11, b'10, b'9, b'8]) (of_bl [b'3, b'2, b'1, b'0]))))))))
                                                                                else Skip ())
                                                                  else UndefinedARM cond" *)



ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("DecodeARM",
   close
     (var_w("w",32),
      let'
        (var("mc",@{typ MachineCode}),
         call("MachineCode.ARM",@{typ MachineCode},var_w("w",32),prev_thy ),
         let'
           (var_w("cond",4),ex(var_w("w",32),ln 31,ln 28,w4),
            ite(eq(var_w("cond",4),lw(15,4)),
                let'
                  (tp[var_b"b'27",var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                      var_b"b'21",var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                      var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",var_b"b'10",
                      var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",
                      var_b"b'2",var_b"b'1",var_b"b'0"],
                   call
                     ("boolify'28",
                      @{typ
                      "bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
                      ex(var_w("w",32),ln 27,ln 0,(Word_Lib.mk_wordT 28)),prev_thy ),
                   itb([(var_b"b'26",
                         itb([(var_b"b'21",
                               ite(bop(And,mop(Not,var_b"b'27"),
                                       bop(And,mop(Not,var_b"b'25"),
                                           bop(And,var_b"b'24",
                                               bop(And,mop(Not,var_b"b'23"),
                                                   bop(And,var_b"b'22",
                                                       bop(And,var_b"b'20",mop(Not,var_b"b'7"))))))),
                                   itb([(bop(And,mop(Not,var_b"b'6"),
                                             bop(And,mop(Not,var_b"b'5"),var_b"b'4")),
                                         mb(mr(close
                                                 (var("s",qTy),
                                                  call
                                                    ("state.Architecture",@{typ Architecture},
                                                     var("s",qTy),prev_thy ))),
                                            close
                                              (var("v",@{typ Architecture}),
                                               mb(mb(mb(mu(bop(In,var("v",@{typ Architecture}),
                                                               sl[lc("ARMv6K","Architecture",
                                                                     prev_thy ),
                                                                  lc("ARMv7_A","Architecture",
                                                                     prev_thy ),
                                                                  lc("ARMv7_R","Architecture",
                                                                     prev_thy)]),qTy),
                                                        close
                                                          (var_b"v",mu(tp[lw(14,4),var_b"v"],qTy))),
                                                     close
                                                       (var("v",@{typ "4 word \<times> bool"}),
                                                        call
                                                          ("Do",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (bool \<times> 'b state_scheme)"},
                                                           var("v",@{typ "4 word \<times> bool"}),
                                                           @{theory} ))),
                                                  close
                                                    (var_b"b",
                                                     ite(var_b"b",
                                                         mu(Term.Const
                                                              (@{const_name "ClearExclusive"},
                                                               @{typ instruction}),qTy),
                                                         call
                                                           ("Skip",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (instruction \<times> 'b state_scheme)"},lu,
                                                            @{theory ARM_Monadic} ))))))),
                                        (bop(And,var_b"b'19",
                                             bop(And,var_b"b'18",
                                                 bop(And,var_b"b'17",
                                                     bop(And,var_b"b'16",
                                                         bop(And,var_b"b'15",
                                                             bop(And,var_b"b'14",
                                                                 bop(And,var_b"b'13",
                                                                     bop(And,var_b"b'12",
                                                                         bop(And,
                                                                             mop(Not,var_b"b'11"),
                                                                             bop(And,
                                                                                 mop(Not,var_b"b'10"),
                                                                                 bop(And,
                                                                                     mop(Not,
                                                                                         var_b"b'9"),
                                                                                     bop(And,
                                                                                         mop(Not,
                                                                                             var_b"b'8"),
                                                                                         bop(And,
                                                                                             var_b"b'6",
                                                                                             bop(And,
                                                                                                 mop(Not,
                                                                                                     var_b"b'5"),
                                                                                                 mop(Not,
                                                                                                     var_b"b'4"))))))))))))))),
                                         mb(call
                                              ("ArchVersion",
                                               @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                               prev_thy ),
                                            close
                                              (var_n"v",
                                               mb(mb(mb(mu(bop(Ge,var_n"v",ln 7),qTy),
                                                        close
                                                          (var_b"v",mu(tp[lw(14,4),var_b"v"],qTy))),
                                                     close
                                                       (var("v",@{typ "4 word \<times> bool"}),
                                                        call
                                                          ("Do",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (bool \<times> 'b state_scheme)"},
                                                           var("v",@{typ "4 word \<times> bool"}),
                                                           @{theory } ))),
                                                  close
                                                    (var_b"b",
                                                     ite(var_b"b",
                                                         mu(call
                                                              ("instruction.Hint",
                                                               @{typ instruction},
                                                               call
                                                                 ("Hint.DataSynchronizationBarrier",
                                                                  @{typ Hint},
                                                                  mop(Cast w4,
                                                                      ll[var_b"b'3",var_b"b'2",
                                                                         var_b"b'1",var_b"b'0"]),
                                                                  prev_thy ),prev_thy ),qTy),
                                                         call
                                                           ("Skip",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (instruction \<times> 'b state_scheme)"},lu,
                                                            @{theory ARM_Monadic} ))))))),
                                        (bop(And,var_b"b'6",bop(And,mop(Not,var_b"b'5"),var_b"b'4")),
                                         mb(call
                                              ("ArchVersion",
                                               @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                               prev_thy ),
                                            close
                                              (var_n"v",
                                               mb(mb(mb(mu(bop(Ge,var_n"v",ln 7),qTy),
                                                        close
                                                          (var_b"v",mu(tp[lw(14,4),var_b"v"],qTy))),
                                                     close
                                                       (var("v",@{typ "4 word \<times> bool"}),
                                                        call
                                                          ("Do",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (bool \<times> 'b state_scheme)"},
                                                           var("v",@{typ "4 word \<times> bool"}),
                                                           @{theory } ))),
                                                  close
                                                    (var_b"b",
                                                     ite(var_b"b",
                                                         mu(call
                                                              ("instruction.Hint",
                                                               @{typ instruction},
                                                               call
                                                                 ("Hint.DataMemoryBarrier",
                                                                  @{typ Hint},
                                                                  mop(Cast w4,
                                                                      ll[var_b"b'3",var_b"b'2",
                                                                         var_b"b'1",var_b"b'0"]),
                                                                  prev_thy ),prev_thy ),qTy),
                                                         call
                                                           ("Skip",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (instruction \<times> 'b state_scheme)"},lu,
                                                            @{theory ARM_Monadic} ))))))),
                                        (bop(And,var_b"b'6",bop(And,var_b"b'5",mop(Not,var_b"b'4"))),
                                         mb(call
                                              ("ArchVersion",
                                               @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                               prev_thy ),
                                            close
                                              (var_n"v",
                                               mb(mb(mb(mu(bop(Ge,var_n"v",ln 7),qTy),
                                                        close
                                                          (var_b"v",mu(tp[lw(14,4),var_b"v"],qTy))),
                                                     close
                                                       (var("v",@{typ "4 word \<times> bool"}),
                                                        call
                                                          ("Do",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (bool \<times> 'b state_scheme)"},
                                                           var("v",@{typ "4 word \<times> bool"}),
                                                          @{theory } ))),
                                                  close
                                                    (var_b"b",
                                                     ite(var_b"b",
                                                         mu(call
                                                              ("instruction.Hint",
                                                               @{typ instruction},
                                                               call
                                                                 ("Hint.InstructionSynchronizationBarrier",
                                                                  @{typ Hint},
                                                                  mop(Cast w4,
                                                                      ll[var_b"b'3",var_b"b'2",
                                                                         var_b"b'1",var_b"b'0"]),
                                                                  prev_thy ),prev_thy ),qTy),
                                                         call
                                                           ("Skip",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (instruction \<times> 'b state_scheme)"},lu,
                                                            @{theory ARM_Monadic})))))))],
                                       mb(call
                                            ("ArchVersion",
                                             @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                             prev_thy ),
                                          close
                                            (var_n"v",
                                             mb(mu(bop(Ge,var_n"v",ln 5),qTy),
                                                close
                                                  (var_b"b",
                                                   ite(var_b"b",
                                                       mu(call
                                                            ("instruction.Undefined",
                                                             @{typ instruction},lw(0,32),prev_thy ),
                                                          qTy),
                                                       mb(call
                                                            ("DECODE_UNPREDICTABLE",
                                                             @{typ
                                                             "'b state_scheme \<Rightarrow>
                                                              (unit \<times> 'b state_scheme)"},
                                                             tp[var("mc",@{typ MachineCode}),ls""],
                                                             @{theory ARM_Monadic} ),
                                                          close
                                                            (var_a HOLogic.unitT,
                                                             mu(lx @{typ instruction},qTy))))))))),
                                   mb(call
                                        ("ArchVersion",
                                         @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                         prev_thy ),
                                      close
                                        (var_n"v",
                                         mb(mu(bop(Ge,var_n"v",ln 5),qTy),
                                            close
                                              (var_b"b",
                                               ite(var_b"b",
                                                   mu(call
                                                        ("instruction.Undefined",@{typ instruction},
                                                         lw(0,32),prev_thy ),qTy),
                                                   mb(call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                         tp[var("mc",@{typ MachineCode}),ls""],
                                                         @{theory ARM_Monadic} ),
                                                      close
                                                        (var_a HOLogic.unitT,
                                                         mu(lx @{typ instruction},qTy)))))))))),
                              (bop(And,mop(Not,var_b"b'27"),var_b"b'20"),
                               itb([(bop(And,mop(Not,var_b"b'25"),
                                         bop(And,mop(Not,var_b"b'24"),var_b"b'22")),
                                     mb(call
                                          ("ArchVersion",
                                           @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                           prev_thy ),
                                        close
                                          (var_n"v",
                                           mb(mb(mb(mu(bop(Ge,var_n"v",ln 7),qTy),
                                                    close(var_b"v",mu(tp[lw(14,4),var_b"v"],qTy))),
                                                 close
                                                   (var("v",@{typ "4 word \<times> bool"}),
                                                    call
                                                      ("Do",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                       var("v",@{typ "4 word \<times> bool"}),
                                                       @{theory } ))),
                                              close
                                                (var_b"b",
                                                 ite(var_b"b",
                                                     mu(call
                                                          ("instruction.Hint",@{typ instruction},
                                                           call
                                                             ("Hint.PreloadInstruction",@{typ Hint},
                                                              tp[eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                    lw(1,1)),
                                                                 mop(Cast w4,
                                                                     ll[var_b"b'19",var_b"b'18",
                                                                        var_b"b'17",var_b"b'16"]),
                                                                 call
                                                                   ("offset1.immediate_form1",
                                                                    @{typ offset1},
                                                                    mop(Cast w32,
                                                                        mop(Cast
                                                                              (Word_Lib.mk_wordT 12),
                                                                            ll[var_b"b'11",
                                                                               var_b"b'10",
                                                                               var_b"b'9",
                                                                               var_b"b'8",
                                                                               var_b"b'7",
                                                                               var_b"b'6",
                                                                               var_b"b'5",
                                                                               var_b"b'4",
                                                                               var_b"b'3",
                                                                               var_b"b'2",
                                                                               var_b"b'1",var_b"b'0"])),
                                                                    prev_thy )],prev_thy ),prev_thy ),
                                                        qTy),
                                                     call
                                                       ("Skip",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow>
                                                         (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} ))))))),
                                    (bop(And,var_b"b'25",
                                         bop(And,mop(Not,var_b"b'24"),
                                             bop(And,var_b"b'22",mop(Not,var_b"b'4")))),
                                     let'
                                       (var_w("Rm",4),
                                        mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                        mb(call
                                             ("ArchVersion",
                                              @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                              prev_thy ),
                                           close
                                             (var_n"v",
                                              mb(mb(mb(mu(bop(Ge,var_n"v",ln 7),qTy),
                                                       close(var_b"v",mu(tp[lw(14,4),var_b"v"],qTy))),
                                                    close
                                                      (var("v",@{typ "4 word \<times> bool"}),
                                                       call
                                                         ("Do",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          var("v",@{typ "4 word \<times> bool"}),
                                                         @{theory} ))),
                                                 close
                                                   (var_b"b",
                                                    ite(var_b"b",
                                                        mb(ite(eq(var_w("Rm",4),lw(15,4)),
                                                               call
                                                                 ("DECODE_UNPREDICTABLE",
                                                                  @{typ
                                                                  "'b state_scheme \<Rightarrow>
                                                                   (unit \<times> 'b state_scheme)"},
                                                                  tp[var("mc",@{typ MachineCode}),
                                                                     ls
                                                                      "PreloadInstruction (register)"],
                                                                  @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                           close
                                                             (var_a HOLogic.unitT,
                                                              mu(let'
                                                                   (tp[var("shift_t",@{typ SRType}),
                                                                       var_n"shift_n"],
                                                                    call
                                                                      ("DecodeImmShift",
                                                                       @{typ "SRType \<times> nat"},
                                                                       tp[mop(Cast
                                                                                (Word_Lib.mk_wordT 2),
                                                                              ll[var_b"b'6",
                                                                                 var_b"b'5"]),
                                                                          mop(Cast
                                                                                (Word_Lib.mk_wordT 5),
                                                                              ll[var_b"b'11",
                                                                                 var_b"b'10",
                                                                                 var_b"b'9",
                                                                                 var_b"b'8",
                                                                                 var_b"b'7"])],
                                                                       @{theory ARM_Monadic} ),
                                                                    call
                                                                      ("instruction.Hint",
                                                                       @{typ instruction},
                                                                       call
                                                                         ("Hint.PreloadInstruction",
                                                                          @{typ Hint},
                                                                          tp[eq(mop(Cast w1,
                                                                                    ll[var_b"b'23"]),
                                                                                lw(1,1)),
                                                                             mop(Cast w4,
                                                                                 ll[var_b"b'19",
                                                                                    var_b"b'18",
                                                                                    var_b"b'17",
                                                                                    var_b"b'16"]),
                                                                             call
                                                                               ("offset1.register_form1",
                                                                                @{typ offset1},
                                                                                tp[var_w("Rm",4),
                                                                                   var("shift_t",
                                                                                       @{typ SRType}),
                                                                                   var_n"shift_n"],
                                                                                prev_thy )],
                                                                          prev_thy ),prev_thy )),qTy))),
                                                        call
                                                          ("Skip",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (instruction \<times> 'b state_scheme)"},lu,
                                                           @{theory ARM_Monadic} )))))))),
                                    (bop(And,mop(Not,var_b"b'25"),
                                         bop(And,var_b"b'24",
                                             bop(And,var_b"b'19",
                                                 bop(And,var_b"b'18",
                                                     bop(And,var_b"b'17",var_b"b'16"))))),
                                     mb(call
                                          ("HaveDSPSupport",
                                           @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                           prev_thy ),
                                        close
                                          (var_b"v",
                                           mb(mb(mu(tp[lw(14,4),var_b"v"],qTy),
                                                 close
                                                   (var("v",@{typ "4 word \<times> bool"}),
                                                    call
                                                      ("Do",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                       var("v",@{typ "4 word \<times> bool"}),
                                                       @{theory } ))),
                                              close
                                                (var_b"b",
                                                 ite(var_b"b",
                                                     mu(call
                                                          ("instruction.Hint",@{typ instruction},
                                                           call
                                                             ("Hint.PreloadDataLiteral",@{typ Hint},
                                                              tp[eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                    lw(1,1)),
                                                                 mop(Cast w32,
                                                                     mop(Cast (Word_Lib.mk_wordT 12),
                                                                         ll[var_b"b'11",var_b"b'10",
                                                                            var_b"b'9",var_b"b'8",
                                                                            var_b"b'7",var_b"b'6",
                                                                            var_b"b'5",var_b"b'4",
                                                                            var_b"b'3",var_b"b'2",
                                                                            var_b"b'1",var_b"b'0"]))],
                                                              prev_thy ),prev_thy ),qTy),
                                                     call
                                                       ("Skip",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow>
                                                         (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} ))))))),
                                    (bop(And,mop(Not,var_b"b'25"),var_b"b'24"),
                                     let'
                                       (var_w("R",1),mop(Cast w1,ll[var_b"b'22"]),
                                        mb(ite(eq(var_w("R",1),lw(1,1)),
                                               mb(call
                                                    ("ArchVersion",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                                     prev_thy ),
                                                  close
                                                    (var_n"v",
                                                     mb(mu(bop(Ge,var_n"v",ln 7),qTy),
                                                        close
                                                          (var_b"b",
                                                           ite(var_b"b",
                                                               mb(mr(close
                                                                       (var("s",qTy),
                                                                        call
                                                                          ("state.Extensions",
                                                                           @{typ "Extensions set"},
                                                                           var("s",qTy),prev_thy ))),
                                                                  close
                                                                    (var("v",@{typ "Extensions set"}),
                                                                     mu(bop(In,
                                                                            lc("Extension_Multiprocessing",
                                                                               "Extensions",
                                                                               prev_thy ),
                                                                            var("v",
                                                                                @{typ
                                                                                "Extensions set"})),
                                                                        qTy))),mu(lf,qTy)))))),
                                               mu(lf,qTy)),
                                           close
                                             (var_b"v",
                                              mb(mb(mb(itb([(var_b"v",mu(lt,qTy)),
                                                            (eq(var_w("R",1),lw(0,1)),
                                                             call
                                                               ("HaveDSPSupport",
                                                                @{typ
                                                                "'b state_scheme \<Rightarrow>
                                                                 (bool \<times> 'b state_scheme)"},lu,
                                                                prev_thy ))],mu(lf,qTy)),
                                                       close(var_b"v",mu(tp[lw(14,4),var_b"v"],qTy))),
                                                    close
                                                      (var("v",@{typ "4 word \<times> bool"}),
                                                       call
                                                         ("Do",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          var("v",@{typ "4 word \<times> bool"}),
                                                          @{theory } ))),
                                                 close
                                                   (var_b"b",
                                                    ite(var_b"b",
                                                        mu(call
                                                             ("instruction.Hint",@{typ instruction},
                                                              call
                                                                ("Hint.PreloadData",@{typ Hint},
                                                                 tp[eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                       lw(1,1)),
                                                                    eq(var_w("R",1),lw(0,1)),
                                                                    mop(Cast w4,
                                                                        ll[var_b"b'19",var_b"b'18",
                                                                           var_b"b'17",var_b"b'16"]),
                                                                    call
                                                                      ("offset1.immediate_form1",
                                                                       @{typ offset1},
                                                                       mop(Cast w32,
                                                                           mop(Cast
                                                                                 (Word_Lib.mk_wordT 12),
                                                                               ll[var_b"b'11",
                                                                                  var_b"b'10",
                                                                                  var_b"b'9",
                                                                                  var_b"b'8",
                                                                                  var_b"b'7",
                                                                                  var_b"b'6",
                                                                                  var_b"b'5",
                                                                                  var_b"b'4",
                                                                                  var_b"b'3",
                                                                                  var_b"b'2",
                                                                                  var_b"b'1",
                                                                                  var_b"b'0"])),
                                                                       prev_thy )],prev_thy ),
                                                              prev_thy ),qTy),
                                                        call
                                                          ("Skip",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (instruction \<times> 'b state_scheme)"},lu,
                                                           @{theory ARM_Monadic} )))))))),
                                    (bop(And,var_b"b'25",bop(And,var_b"b'24",mop(Not,var_b"b'4"))),
                                     let'
                                       (var_w("Rm",4),
                                        mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                        let'
                                          (var_w("Rn",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (var_w("R",1),mop(Cast w1,ll[var_b"b'22"]),
                                              mb(ite(eq(var_w("R",1),lw(1,1)),
                                                     mb(call
                                                          ("ArchVersion",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},
                                                           lu,prev_thy ),
                                                        close
                                                          (var_n"v",
                                                           mb(mu(bop(Ge,var_n"v",ln 7),qTy),
                                                              close
                                                                (var_b"b",
                                                                 ite(var_b"b",
                                                                     mb(mr(close
                                                                             (var("s",qTy),
                                                                              call
                                                                                ("state.Extensions",
                                                                                 @{typ
                                                                                 "Extensions set"},
                                                                                 var("s",qTy),
                                                                                 prev_thy ))),
                                                                        close
                                                                          (var("v",
                                                                               @{typ
                                                                               "Extensions set"}),
                                                                           mu(bop(In,
                                                                                  lc("Extension_Multiprocessing",
                                                                                     "Extensions",
                                                                                     prev_thy ),
                                                                                  var("v",
                                                                                      @{typ
                                                                                      "Extensions
                                                                                          set"})),
                                                                              qTy))),mu(lf,qTy)))))),
                                                     mu(lf,qTy)),
                                                 close
                                                   (var_b"v",
                                                    mb(mb(mb(itb([(var_b"v",mu(lt,qTy)),
                                                                  (eq(var_w("R",1),lw(0,1)),
                                                                   call
                                                                     ("HaveDSPSupport",
                                                                      @{typ
                                                                      "'b state_scheme \<Rightarrow>
                                                                       (bool \<times> 'b state_scheme)"},lu,
                                                                      prev_thy ))],mu(lf,qTy)),
                                                             close
                                                               (var_b"v",
                                                                mu(tp[lw(14,4),var_b"v"],qTy))),
                                                          close
                                                            (var("v",@{typ "4 word \<times> bool"}),
                                                             call
                                                               ("Do",
                                                                @{typ
                                                                "'b state_scheme \<Rightarrow>
                                                                 (bool \<times> 'b state_scheme)"},
                                                                var("v",
                                                                    @{typ "4 word \<times> bool"}),
                                                                @{theory} ))),
                                                       close
                                                         (var_b"b",
                                                          ite(var_b"b",
                                                              let'
                                                                (var_b"is_pldw",
                                                                 eq(var_w("R",1),lw(0,1)),
                                                                 mb(ite(bop(Or,
                                                                            eq(var_w("Rm",4),
                                                                               lw(15,4)),
                                                                            bop(And,
                                                                                eq(var_w("Rn",4),
                                                                                   lw(15,4)),
                                                                                var_b"is_pldw")),
                                                                        call
                                                                          ("DECODE_UNPREDICTABLE",
                                                                           @{typ
                                                                           "'b state_scheme \<Rightarrow>
                                                                            (unit \<times> 'b state_scheme)"},
                                                                           tp[var("mc",
                                                                                  @{typ MachineCode}),
                                                                              ls
                                                                               "PreloadData (register)"],
                                                                           @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                                    close
                                                                      (var_a HOLogic.unitT,
                                                                       mu(let'
                                                                            (tp[var("shift_t",
                                                                                    @{typ SRType}),
                                                                                var_n"shift_n"],
                                                                             call
                                                                               ("DecodeImmShift",
                                                                                @{typ
                                                                                "SRType \<times> nat"},
                                                                                tp[mop(Cast
                                                                                         (Word_Lib.mk_wordT 2),
                                                                                       ll[var_b"b'6",
                                                                                          var_b"b'5"]),
                                                                                   mop(Cast
                                                                                         (Word_Lib.mk_wordT 5),
                                                                                       ll[var_b"b'11",
                                                                                          var_b"b'10",
                                                                                          var_b"b'9",
                                                                                          var_b"b'8",
                                                                                          var_b"b'7"])],
                                                                                @{theory ARM_Monadic} ),
                                                                             call
                                                                               ("instruction.Hint",
                                                                                @{typ instruction},
                                                                                call
                                                                                  ("Hint.PreloadData",
                                                                                   @{typ Hint},
                                                                                   tp[eq(mop(Cast w1,
                                                                                             ll[var_b"b'23"]),
                                                                                         lw(1,1)),
                                                                                      var_b"is_pldw",
                                                                                      var_w("Rn",4),
                                                                                      call
                                                                                        ("offset1.register_form1",
                                                                                         @{typ offset1},
                                                                                         tp[var_w("Rm",4),
                                                                                            var("shift_t",
                                                                                                @{typ SRType}),
                                                                                            var_n"shift_n"],
                                                                                         prev_thy )],
                                                                                   prev_thy ),
                                                                                prev_thy )),qTy)))),
                                                              call
                                                                ("Skip",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (instruction \<times> 'b state_scheme)"},lu,
                                                                 @{theory ARM_Monadic} ))))))))))],
                                   mb(call
                                        ("ArchVersion",
                                         @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                         prev_thy ),
                                      close
                                        (var_n"v",
                                         mb(mu(bop(Ge,var_n"v",ln 5),qTy),
                                            close
                                              (var_b"b",
                                               ite(var_b"b",
                                                   mu(call
                                                        ("instruction.Undefined",@{typ instruction},
                                                         lw(0,32),prev_thy ),qTy),
                                                   mb(call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                         tp[var("mc",@{typ MachineCode}),ls""],
                                                        @{theory ARM_Monadic} ),
                                                      close
                                                        (var_a HOLogic.unitT,
                                                         mu(lx @{typ instruction},qTy))))))))))],
                             mb(call
                                  ("ArchVersion",@{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},
                                   lu,prev_thy ),
                                close
                                  (var_n"v",
                                   mb(mu(bop(Ge,var_n"v",ln 5),qTy),
                                      close
                                        (var_b"b",
                                         ite(var_b"b",
                                             mu(call
                                                  ("instruction.Undefined",@{typ instruction},
                                                   lw(0,32),prev_thy ),qTy),
                                             mb(call
                                                  ("DECODE_UNPREDICTABLE",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                   tp[var("mc",@{typ MachineCode}),ls""],@{theory ARM_Monadic} ),
                                                close
                                                  (var_a HOLogic.unitT,mu(lx @{typ instruction},qTy)))))))))),
                        (bop(And,mop(Not,var_b"b'27"),
                             bop(And,mop(Not,var_b"b'25"),
                                 bop(And,var_b"b'24",
                                     bop(And,mop(Not,var_b"b'23"),
                                         bop(And,mop(Not,var_b"b'22"),
                                             bop(And,mop(Not,var_b"b'21"),
                                                 bop(And,mop(Not,var_b"b'20"),
                                                     bop(And,var_b"b'16",
                                                         bop(And,mop(Not,var_b"b'7"),
                                                             bop(And,mop(Not,var_b"b'6"),
                                                                 bop(And,mop(Not,var_b"b'5"),
                                                                     mop(Not,var_b"b'4")))))))))))),
                         mb(call
                              ("ArchVersion",@{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                               prev_thy ),
                            close
                              (var_n"v",
                               mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                        close(var_b"v",mu(tp[lw(14,4),var_b"v"],qTy))),
                                     close
                                       (var("v",@{typ "4 word \<times> bool"}),
                                        call
                                          ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                           var("v",@{typ "4 word \<times> bool"}),@{theory }))),
                                  close
                                    (var_b"b",
                                     ite(var_b"b",
                                         mu(call
                                              ("instruction.System",@{typ instruction},
                                               call
                                                 ("System.Setend",@{typ System},
                                                  eq(mop(Cast w1,ll[var_b"b'9"]),lw(1,1)),prev_thy ),
                                               prev_thy ),qTy),
                                         call
                                           ("Skip",
                                            @{typ
                                            "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                                            @{theory ARM_Monadic} ))))))),
                        (bop(And,mop(Not,var_b"b'27"),
                             bop(And,mop(Not,var_b"b'25"),
                                 bop(And,var_b"b'24",
                                     bop(And,mop(Not,var_b"b'23"),
                                         bop(And,mop(Not,var_b"b'22"),
                                             bop(And,mop(Not,var_b"b'21"),
                                                 bop(And,mop(Not,var_b"b'20"),
                                                     bop(And,mop(Not,var_b"b'16"),
                                                         mop(Not,var_b"b'5"))))))))),
                         let'
                           (var_w("mode",5),
                            mop(Cast (Word_Lib.mk_wordT 5),
                                ll[var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("F",1),mop(Cast w1,ll[var_b"b'6"]),
                               let'
                                 (var_w("I",1),mop(Cast w1,ll[var_b"b'7"]),
                                  let'
                                    (var_w("A",1),mop(Cast w1,ll[var_b"b'8"]),
                                     let'
                                       (var_w("M",1),mop(Cast w1,ll[var_b"b'17"]),
                                        let'
                                          (var_w("imod",2),
                                           mop(Cast (Word_Lib.mk_wordT 2),
                                               ll[var_b"b'19",var_b"b'18"]),
                                           mb(call
                                                ("ArchVersion",
                                                 @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},
                                                 lu,prev_thy ),
                                              close
                                                (var_n"v",
                                                 mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                                          close
                                                            (var_b"v",mu(tp[lw(14,4),var_b"v"],qTy))),
                                                       close
                                                         (var("v",@{typ "4 word \<times> bool"}),
                                                          call
                                                            ("Do",
                                                             @{typ
                                                             "'b state_scheme \<Rightarrow>
                                                              (bool \<times> 'b state_scheme)"},
                                                             var("v",@{typ "4 word \<times> bool"}),
                                                             @{theory}))),
                                                    close
                                                      (var_b"b",
                                                       ite(var_b"b",
                                                           mb(ite(bop(Or,
                                                                      bop(And,
                                                                          mop(Not,
                                                                              eq(var_w("mode",5),
                                                                                 lw(0,5))),
                                                                          eq(var_w("M",1),lw(0,1))),
                                                                      bop(Or,
                                                                          eq(bop(Bit,
                                                                                 var_w("imod",2),
                                                                                 ln 1),
                                                                             eq(cc[var_w("A",1),
                                                                                   var_w("I",1),
                                                                                   var_w("F",1)],
                                                                                lw(0,3))),
                                                                          bop(Or,
                                                                              bop(And,
                                                                                  eq(var_w("imod",2),
                                                                                     lw(0,2)),
                                                                                  eq(var_w("M",1),
                                                                                     lw(0,1))),
                                                                              eq(var_w("imod",2),
                                                                                 lw(1,2))))),
                                                                  call
                                                                    ("DECODE_UNPREDICTABLE",
                                                                     @{typ
                                                                     "'b state_scheme \<Rightarrow>
                                                                      (unit \<times> 'b state_scheme)"},
                                                                     tp[var("mc",@{typ MachineCode}),
                                                                        ls"ChangeProcessorState"],
                                                                     @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                              close
                                                                (var_a HOLogic.unitT,
                                                                 mu(call
                                                                      ("instruction.System",
                                                                       @{typ instruction},
                                                                       call
                                                                         ("System.ChangeProcessorState",
                                                                          @{typ System},
                                                                          tp[eq(var_w("imod",2),
                                                                                lw(2,2)),
                                                                             eq(var_w("imod",2),
                                                                                lw(3,2)),
                                                                             eq(var_w("A",1),lw(1,1)),
                                                                             eq(var_w("I",1),lw(1,1)),
                                                                             eq(var_w("F",1),lw(1,1)),
                                                                             ite(eq(var_w("M",1),
                                                                                    lw(1,1)),
                                                                                 mop(Some,
                                                                                     var_w("mode",5)),
                                                                                 lo (Word_Lib.mk_wordT 5))],
                                                                          prev_thy ),prev_thy ),qTy))),
                                                           call
                                                             ("Skip",
                                                              @{typ
                                                              "'b state_scheme \<Rightarrow>
                                                               (instruction \<times> 'b state_scheme)"},lu,
                                                              @{theory ARM_Monadic} ))))))))))))),
                        (bop(And,var_b"b'27",
                             bop(And,mop(Not,var_b"b'25"),bop(And,var_b"b'22",mop(Not,var_b"b'20")))),
                         let'
                           (var_w("U",1),mop(Cast w1,ll[var_b"b'23"]),
                            mb(call
                                 ("ArchVersion",@{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},
                                  lu,prev_thy ),
                               close
                                 (var_n"v",
                                  mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                           close(var_b"v",mu(tp[lw(14,4),var_b"v"],qTy))),
                                        close
                                          (var("v",@{typ "4 word \<times> bool"}),
                                           call
                                             ("Do",
                                              @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                              var("v",@{typ "4 word \<times> bool"}),@{theory}))),
                                     close
                                       (var_b"b",
                                        ite(var_b"b",
                                            mu(call
                                                 ("instruction.System",@{typ instruction},
                                                  call
                                                    ("System.StoreReturnState",@{typ System},
                                                     tp[eq(var_w("U",1),lw(1,1)),
                                                        eq(mop(Cast w1,ll[var_b"b'24"]),var_w("U",1)),
                                                        eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1)),
                                                        mop(Cast (Word_Lib.mk_wordT 5),
                                                            ll[var_b"b'4",var_b"b'3",var_b"b'2",
                                                               var_b"b'1",var_b"b'0"])],prev_thy ),
                                                  prev_thy ),qTy),
                                            call
                                              ("Skip",
                                               @{typ
                                               "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                               lu,@{theory ARM_Monadic})))))))),
                        (bop(And,var_b"b'27",
                             bop(And,mop(Not,var_b"b'25"),bop(And,mop(Not,var_b"b'22"),var_b"b'20"))),
                         let'
                           (var_w("Rn",4),
                            mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                            let'
                              (var_w("U",1),mop(Cast w1,ll[var_b"b'23"]),
                               mb(call
                                    ("ArchVersion",
                                     @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,prev_thy ),
                                  close
                                    (var_n"v",
                                     mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                              close(var_b"v",mu(tp[lw(14,4),var_b"v"],qTy))),
                                           close
                                             (var("v",@{typ "4 word \<times> bool"}),
                                              call
                                                ("Do",
                                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                 var("v",@{typ "4 word \<times> bool"}),@{theory}))),
                                        close
                                          (var_b"b",
                                           ite(var_b"b",
                                               mb(ite(eq(var_w("Rn",4),lw(15,4)),
                                                      call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"ReturnFromException"],@{theory ARM_Monadic}),
                                                      mu(lu,qTy)),
                                                  close
                                                    (var_a HOLogic.unitT,
                                                     mu(call
                                                          ("instruction.System",@{typ instruction},
                                                           call
                                                             ("System.ReturnFromException",
                                                              @{typ System},
                                                              tp[eq(var_w("U",1),lw(1,1)),
                                                                 eq(mop(Cast w1,ll[var_b"b'24"]),
                                                                    var_w("U",1)),
                                                                 eq(mop(Cast w1,ll[var_b"b'21"]),
                                                                    lw(1,1)),var_w("Rn",4)],
                                                              prev_thy ),prev_thy ),qTy))),
                                               call
                                                 ("Skip",
                                                  @{typ
                                                  "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                  lu,@{theory ARM_Monadic}))))))))),
                        (bop(And,var_b"b'27",var_b"b'25"),
                         mb(call
                              ("ArchVersion",@{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                               prev_thy ),
                            close
                              (var_n"v",
                               mb(mb(mb(mu(bop(Ge,var_n"v",ln 5),qTy),
                                        close(var_b"v",mu(tp[lw(14,4),var_b"v"],qTy))),
                                     close
                                       (var("v",@{typ "4 word \<times> bool"}),
                                        call
                                          ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                           var("v",@{typ "4 word \<times> bool"}),@{theory}))),
                                  close
                                    (var_b"b",
                                     ite(var_b"b",
                                         mu(call
                                              ("instruction.Branch",@{typ instruction},
                                               call
                                                 ("Branch.BranchLinkExchangeImmediate",
                                                  @{typ Branch},
                                                  tp[lc("InstrSet_Thumb","InstrSet",prev_thy ),
                                                     mop(SE w32,
                                                         cc[mop(Cast (Word_Lib.mk_wordT 24),
                                                                ll[var_b"b'23",var_b"b'22",
                                                                   var_b"b'21",var_b"b'20",
                                                                   var_b"b'19",var_b"b'18",
                                                                   var_b"b'17",var_b"b'16",
                                                                   var_b"b'15",var_b"b'14",
                                                                   var_b"b'13",var_b"b'12",
                                                                   var_b"b'11",var_b"b'10",
                                                                   var_b"b'9",var_b"b'8",var_b"b'7",
                                                                   var_b"b'6",var_b"b'5",var_b"b'4",
                                                                   var_b"b'3",var_b"b'2",var_b"b'1",
                                                                   var_b"b'0"]),
                                                            mop(Cast w1,ll[var_b"b'24"]),lw(0,1)])],
                                                  prev_thy ),prev_thy ),qTy),
                                         call
                                           ("Skip",
                                            @{typ
                                            "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                                            @{theory ARM_Monadic} )))))))],
                       mb(call
                            ("ArchVersion",@{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                             prev_thy ),
                          close
                            (var_n"v",
                             mb(mu(bop(Ge,var_n"v",ln 5),qTy),
                                close
                                  (var_b"b",
                                   ite(var_b"b",
                                       mu(call
                                            ("instruction.Undefined",@{typ instruction},lw(0,32),
                                             prev_thy ),qTy),
                                       mb(call
                                            ("DECODE_UNPREDICTABLE",
                                             @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                             tp[var("mc",@{typ MachineCode}),ls""],@{theory ARM_Monadic} ),
                                          close(var_a HOLogic.unitT,mu(lx @{typ instruction},qTy)))))))))),
     let'
                  (tp[var_b"b'27",var_b"b'26",var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",
                      var_b"b'21",var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16",
                      var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",var_b"b'10",
                      var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",
                      var_b"b'2",var_b"b'1",var_b"b'0"],
                   call
                     ("boolify'28",
                      @{typ
                      "bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times>
                       bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
                      ex(var_w("w",32),ln 27,ln 0,(Word_Lib.mk_wordT 28)),prev_thy ),
                   itb([(var_b"b'26",
                         itb([(bop(And,mop(Not,var_b"b'27"),
                                   bop(And,var_b"b'25",
                                       bop(And,var_b"b'24",
                                           bop(And,var_b"b'23",
                                               bop(And,var_b"b'22",
                                                   bop(And,var_b"b'21",
                                                       bop(And,var_b"b'20",
                                                           bop(And,var_b"b'7",
                                                               bop(And,var_b"b'6",
                                                                   bop(And,var_b"b'5",var_b"b'4")))))))))),
                               mb(mw(close
                                       (var("s",qTy),
                                        rupd
                                          ("state.CurrentCondition",
                                           tp[var("s",qTy),var_w("cond",4)],prev_thy ))),
                                  close
                                    (var_a HOLogic.unitT,
                                     mb(call
                                          ("ConditionPassed",
                                           @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                           prev_thy ),
                                        close
                                          (var_b"b",
                                           mu(ite(var_b"b",
                                                  call
                                                    ("instruction.Undefined",@{typ instruction},
                                                     mop(Cast w32,
                                                         cc[mop(Cast (Word_Lib.mk_wordT 12),
                                                                ll[var_b"b'19",var_b"b'18",
                                                                   var_b"b'17",var_b"b'16",
                                                                   var_b"b'15",var_b"b'14",
                                                                   var_b"b'13",var_b"b'12",
                                                                   var_b"b'11",var_b"b'10",
                                                                   var_b"b'9",var_b"b'8"]),
                                                            mop(Cast w4,
                                                                ll[var_b"b'3",var_b"b'2",var_b"b'1",
                                                                   var_b"b'0"])]),prev_thy),
                                                  Term.Const
                                                    (@{const_name "NoOperation"},@{typ instruction})),
                                              qTy)))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,mop(Not,var_b"b'25"),
                                       bop(And,mop(Not,var_b"b'24"),
                                           bop(And,var_b"b'21",mop(Not,var_b"b'20"))))),
                               let'
                                 (var_w("Rt",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     let'
                                       (var_w("B",1),mop(Cast w1,ll[var_b"b'22"]),
                                        mb(call
                                             ("Do",
                                              @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                              tp[var_w("cond",4),lt],@{theory }),
                                           close
                                             (var_b"b",
                                              ite(var_b"b",
                                                  mb(ite(bop(Or,
                                                             bop(And,eq(var_w("B",1),lw(1,1)),
                                                                 eq(var_w("Rt",4),lw(15,4))),
                                                             bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                 eq(var_w("Rn",4),var_w("Rt",4)))),
                                                         call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (unit \<times> 'b state_scheme)"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"StoreUnprivileged (immediate)"],
                                                            @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                     close
                                                       (var_a HOLogic.unitT,
                                                        mu(let'
                                                             (var_b"add",
                                                              eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                 lw(1,1)),
                                                              let'
                                                                (var("m",@{typ offset1}),
                                                                 call
                                                                   ("offset1.immediate_form1",
                                                                    @{typ offset1},
                                                                    mop(Cast w32,
                                                                        mop(Cast
                                                                              (Word_Lib.mk_wordT 12),
                                                                            ll[var_b"b'11",
                                                                               var_b"b'10",
                                                                               var_b"b'9",
                                                                               var_b"b'8",
                                                                               var_b"b'7",
                                                                               var_b"b'6",
                                                                               var_b"b'5",
                                                                               var_b"b'4",
                                                                               var_b"b'3",
                                                                               var_b"b'2",
                                                                               var_b"b'1",var_b"b'0"])),
                                                                    prev_thy ),
                                                                 ite(eq(var_w("B",1),lw(1,1)),
                                                                     call
                                                                       ("instruction.Store",
                                                                        @{typ instruction},
                                                                        call
                                                                          ("Store.StoreByteUnprivileged",
                                                                           @{typ Store},
                                                                           tp[var_b"add",lt,
                                                                              var_w("Rt",4),
                                                                              var_w("Rn",4),
                                                                              var("m",@{typ offset1})],
                                                                           prev_thy ),prev_thy ),
                                                                     call
                                                                       ("instruction.Store",
                                                                        @{typ instruction},
                                                                        call
                                                                          ("Store.StoreUnprivileged",
                                                                           @{typ Store},
                                                                           tp[var_b"add",lt,
                                                                              var_w("Rt",4),
                                                                              var_w("Rn",4),
                                                                              var("m",@{typ offset1})],
                                                                           prev_thy),prev_thy )))),
                                                           qTy))),
                                                  call
                                                    ("Skip",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow>
                                                      (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} )))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,mop(Not,var_b"b'25"),mop(Not,var_b"b'20"))),
                               let'
                                 (var_w("Rt",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     let'
                                       (var_w("B",1),mop(Cast w1,ll[var_b"b'22"]),
                                        let'
                                          (var_w("P",1),mop(Cast w1,ll[var_b"b'24"]),
                                           mb(call
                                                ("Do",
                                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                 tp[var_w("cond",4),lt],@{theory }),
                                              close
                                                (var_b"b",
                                                 ite(var_b"b",
                                                     let'
                                                       (var_b"wback",
                                                        bop(Or,eq(var_w("P",1),lw(0,1)),
                                                            eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1))),
                                                        mb(ite(bop(Or,
                                                                   bop(And,eq(var_w("B",1),lw(1,1)),
                                                                       eq(var_w("Rt",4),lw(15,4))),
                                                                   bop(And,var_b"wback",
                                                                       bop(Or,
                                                                           eq(var_w("Rn",4),lw(15,4)),
                                                                           eq(var_w("Rn",4),
                                                                              var_w("Rt",4))))),
                                                               call
                                                                 ("DECODE_UNPREDICTABLE",
                                                                  @{typ
                                                                  "'b state_scheme \<Rightarrow>
                                                                   (unit \<times> 'b state_scheme)"},
                                                                  tp[var("mc",@{typ MachineCode}),
                                                                     ls"Store (immediate)"],
                                                                  @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                           close
                                                             (var_a HOLogic.unitT,
                                                              mu(let'
                                                                   (var_b"add",
                                                                    eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                       lw(1,1)),
                                                                    let'
                                                                      (var_b"index",
                                                                       eq(var_w("P",1),lw(1,1)),
                                                                       let'
                                                                         (var("m",@{typ offset1}),
                                                                          call
                                                                            ("offset1.immediate_form1",
                                                                             @{typ offset1},
                                                                             mop(Cast w32,
                                                                                 mop(Cast
                                                                                       (Word_Lib.mk_wordT 12),
                                                                                     ll[var_b"b'11",
                                                                                        var_b"b'10",
                                                                                        var_b"b'9",
                                                                                        var_b"b'8",
                                                                                        var_b"b'7",
                                                                                        var_b"b'6",
                                                                                        var_b"b'5",
                                                                                        var_b"b'4",
                                                                                        var_b"b'3",
                                                                                        var_b"b'2",
                                                                                        var_b"b'1",
                                                                                        var_b"b'0"])),
                                                                             prev_thy ),
                                                                          ite(eq(var_w("B",1),
                                                                                 lw(1,1)),
                                                                              call
                                                                                ("instruction.Store",
                                                                                 @{typ instruction},
                                                                                 call
                                                                                   ("Store.StoreByte",
                                                                                    @{typ Store},
                                                                                    tp[var_b"add",
                                                                                       var_b"index",
                                                                                       var_b"wback",
                                                                                       var_w("Rt",4),
                                                                                       var_w("Rn",4),
                                                                                       var("m",
                                                                                           @{typ offset1})],
                                                                                    prev_thy ),
                                                                                 prev_thy),
                                                                              call
                                                                                ("instruction.Store",
                                                                                 @{typ instruction},
                                                                                 call
                                                                                   ("Store.StoreWord",
                                                                                    @{typ Store},
                                                                                    tp[var_b"add",
                                                                                       var_b"index",
                                                                                       var_b"wback",
                                                                                       var_w("Rt",4),
                                                                                       var_w("Rn",4),
                                                                                       var("m",
                                                                                           @{typ offset1})],
                                                                                    prev_thy ),
                                                                                 prev_thy ))))),qTy)))),
                                                     call
                                                       ("Skip",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow>
                                                         (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} ))))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,mop(Not,var_b"b'25"),
                                       bop(And,mop(Not,var_b"b'24"),bop(And,var_b"b'21",var_b"b'20")))),
                               let'
                                 (var_w("Rt",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     mb(call
                                          ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                           tp[var_w("cond",4),lt],@{theory} ),
                                        close
                                          (var_b"b",
                                           ite(var_b"b",
                                               mb(ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                          bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                              eq(var_w("Rn",4),var_w("Rt",4)))),
                                                      call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"LoadUnprivileged (immediate)"],
                                                         @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                  close
                                                    (var_a HOLogic.unitT,
                                                     mu(let'
                                                          (var_b"add",
                                                           eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),
                                                           let'
                                                             (var("m",@{typ offset1}),
                                                              call
                                                                ("offset1.immediate_form1",
                                                                 @{typ offset1},
                                                                 mop(Cast w32,
                                                                     mop(Cast (Word_Lib.mk_wordT 12),
                                                                         ll[var_b"b'11",var_b"b'10",
                                                                            var_b"b'9",var_b"b'8",
                                                                            var_b"b'7",var_b"b'6",
                                                                            var_b"b'5",var_b"b'4",
                                                                            var_b"b'3",var_b"b'2",
                                                                            var_b"b'1",var_b"b'0"])),
                                                                 prev_thy ),
                                                              ite(eq(mop(Cast w1,ll[var_b"b'22"]),
                                                                     lw(1,1)),
                                                                  call
                                                                    ("instruction.Load",
                                                                     @{typ instruction},
                                                                     call
                                                                       ("Load.LoadByteUnprivileged",
                                                                        @{typ Load},
                                                                        tp[var_b"add",lt,
                                                                           var_w("Rt",4),
                                                                           var_w("Rn",4),
                                                                           var("m",@{typ offset1})],
                                                                        prev_thy  ),prev_thy ),
                                                                  call
                                                                    ("instruction.Load",
                                                                     @{typ instruction},
                                                                     call
                                                                       ("Load.LoadUnprivileged",
                                                                        @{typ Load},
                                                                        tp[var_b"add",lt,
                                                                           var_w("Rt",4),
                                                                           var_w("Rn",4),
                                                                           var("m",@{typ offset1})],
                                                                       prev_thy ),prev_thy  )))),qTy))),
                                               call
                                                 ("Skip",
                                                  @{typ
                                                  "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                  lu,@{theory ARM_Monadic} ))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,mop(Not,var_b"b'25"),
                                       bop(And,var_b"b'20",
                                           bop(And,var_b"b'19",
                                               bop(And,var_b"b'18",bop(And,var_b"b'17",var_b"b'16")))))),
                               let'
                                 (var_w("Rt",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("B",1),mop(Cast w1,ll[var_b"b'22"]),
                                     mb(call
                                          ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                           tp[var_w("cond",4),lt],@{theory} ),
                                        close
                                          (var_b"b",
                                           ite(var_b"b",
                                               mb(ite(bop(And,eq(var_w("B",1),lw(1,1)),
                                                          eq(var_w("Rt",4),lw(15,4))),
                                                      call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"LoadByte (literal)"],@{theory ARM_Monadic} ),
                                                      mu(lu,qTy)),
                                                  close
                                                    (var_a HOLogic.unitT,
                                                     mu(let'
                                                          (var_b"add",
                                                           eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),
                                                           let'
                                                             (var_w("imm32",32),
                                                              mop(Cast w32,
                                                                  mop(Cast (Word_Lib.mk_wordT 12),
                                                                      ll[var_b"b'11",var_b"b'10",
                                                                         var_b"b'9",var_b"b'8",
                                                                         var_b"b'7",var_b"b'6",
                                                                         var_b"b'5",var_b"b'4",
                                                                         var_b"b'3",var_b"b'2",
                                                                         var_b"b'1",var_b"b'0"])),
                                                              ite(eq(var_w("B",1),lw(1,1)),
                                                                  call
                                                                    ("instruction.Load",
                                                                     @{typ instruction},
                                                                     call
                                                                       ("Load.LoadByteLiteral",
                                                                        @{typ Load},
                                                                        tp[lt,var_b"add",
                                                                           var_w("Rt",4),
                                                                           var_w("imm32",32)],
                                                                         prev_thy  ), prev_thy  ),
                                                                  call
                                                                    ("instruction.Load",
                                                                     @{typ instruction},
                                                                     call
                                                                       ("Load.LoadLiteral",
                                                                        @{typ Load},
                                                                        tp[var_b"add",var_w("Rt",4),
                                                                           var_w("imm32",32)],
                                                                         prev_thy   ), prev_thy  )))),qTy))),
                                               call
                                                 ("Skip",
                                                  @{typ
                                                  "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                  lu,@{theory ARM_Monadic} ))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,mop(Not,var_b"b'25"),var_b"b'20")),
                               let'
                                 (var_w("Rt",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     let'
                                       (var_w("B",1),mop(Cast w1,ll[var_b"b'22"]),
                                        let'
                                          (var_w("P",1),mop(Cast w1,ll[var_b"b'24"]),
                                           mb(call
                                                ("Do",
                                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                 tp[var_w("cond",4),lt],@{theory}),
                                              close
                                                (var_b"b",
                                                 ite(var_b"b",
                                                     let'
                                                       (var_b"wback",
                                                        bop(Or,eq(var_w("P",1),lw(0,1)),
                                                            eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1))),
                                                        mb(ite(bop(Or,
                                                                   bop(And,eq(var_w("B",1),lw(1,1)),
                                                                       eq(var_w("Rt",4),lw(15,4))),
                                                                   bop(And,var_b"wback",
                                                                       eq(var_w("Rn",4),
                                                                          var_w("Rt",4)))),
                                                               call
                                                                 ("DECODE_UNPREDICTABLE",
                                                                  @{typ
                                                                  "'b state_scheme \<Rightarrow>
                                                                   (unit \<times> 'b state_scheme)"},
                                                                  tp[var("mc",@{typ MachineCode}),
                                                                     ls"LoadWord/Byte (immediate)"],
                                                                  @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                           close
                                                             (var_a HOLogic.unitT,
                                                              mu(let'
                                                                   (var_b"add",
                                                                    eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                       lw(1,1)),
                                                                    let'
                                                                      (var_b"index",
                                                                       eq(var_w("P",1),lw(1,1)),
                                                                       let'
                                                                         (var("m",@{typ offset1}),
                                                                          call
                                                                            ("offset1.immediate_form1",
                                                                             @{typ offset1},
                                                                             mop(Cast w32,
                                                                                 mop(Cast
                                                                                       (Word_Lib.mk_wordT 12),
                                                                                     ll[var_b"b'11",
                                                                                        var_b"b'10",
                                                                                        var_b"b'9",
                                                                                        var_b"b'8",
                                                                                        var_b"b'7",
                                                                                        var_b"b'6",
                                                                                        var_b"b'5",
                                                                                        var_b"b'4",
                                                                                        var_b"b'3",
                                                                                        var_b"b'2",
                                                                                        var_b"b'1",
                                                                                        var_b"b'0"])),
                                                                             prev_thy),
                                                                          ite(eq(var_w("B",1),
                                                                                 lw(1,1)),
                                                                              call
                                                                                ("instruction.Load",
                                                                                 @{typ instruction},
                                                                                 call
                                                                                   ("Load.LoadByte",
                                                                                    @{typ Load},
                                                                                    tp[lt,
                                                                                       var_b"add",
                                                                                       var_b"index",
                                                                                       var_b"wback",
                                                                                       var_w("Rt",4),
                                                                                       var_w("Rn",4),
                                                                                       var("m",
                                                                                           @{typ offset1})],
                                                                                    prev_thy   ),
                                                                                 prev_thy   ),
                                                                              call
                                                                                ("instruction.Load",
                                                                                 @{typ instruction},
                                                                                 call
                                                                                   ("Load.LoadWord",
                                                                                    @{typ Load},
                                                                                    tp[var_b"add",
                                                                                       var_b"index",
                                                                                       var_b"wback",
                                                                                       var_w("Rt",4),
                                                                                       var_w("Rn",4),
                                                                                       var("m",
                                                                                           @{typ offset1})],
                                                                                    prev_thy ),
                                                                                   prev_thy ))))),qTy)))),
                                                     call
                                                       ("Skip",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow>
                                                         (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} ))))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,var_b"b'25",
                                       bop(And,mop(Not,var_b"b'24"),
                                           bop(And,var_b"b'21",
                                               bop(And,mop(Not,var_b"b'20"),mop(Not,var_b"b'4")))))),
                               let'
                                 (var_w("Rm",4),
                                  mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                  let'
                                    (var_w("Rt",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("Rn",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        let'
                                          (var_w("B",1),mop(Cast w1,ll[var_b"b'22"]),
                                           mb(call
                                                ("Do",
                                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                 tp[var_w("cond",4),lt],@{theory}),
                                              close
                                                (var_b"b",
                                                 ite(var_b"b",
                                                     mb(itb([(bop(And,eq(var_w("B",1),lw(1,1)),
                                                                  eq(var_w("Rt",4),lw(15,4))),
                                                              mu(lt,qTy)),
                                                             (eq(var_w("Rn",4),lw(15,4)),mu(lt,qTy)),
                                                             (eq(var_w("Rn",4),var_w("Rt",4)),
                                                              mu(lt,qTy)),
                                                             (eq(var_w("Rm",4),lw(15,4)),mu(lt,qTy))],
                                                            mb(call
                                                                 ("ArchVersion",
                                                                  @{typ
                                                                  "'b state_scheme \<Rightarrow>
                                                                   (nat \<times> 'b state_scheme)"},lu,
                                                                  prev_thy ),
                                                               close
                                                                 (var_n"v",
                                                                  mb(mu(bop(Lt,var_n"v",ln 6),qTy),
                                                                     close
                                                                       (var_b"b",
                                                                        mu(bop(And,var_b"b",
                                                                               eq(var_w("Rm",4),
                                                                                  var_w("Rn",4))),
                                                                           qTy)))))),
                                                        close
                                                          (var_b"v",
                                                           mb(ite(var_b"v",
                                                                  call
                                                                    ("DECODE_UNPREDICTABLE",
                                                                     @{typ
                                                                     "'b state_scheme \<Rightarrow>
                                                                      (unit \<times> 'b state_scheme)"},
                                                                     tp[var("mc",@{typ MachineCode}),
                                                                        ls
                                                                         "StoreUnprivileged (regiser)"],
                                                                     @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                              close
                                                                (var_a HOLogic.unitT,
                                                                 mu(let'
                                                                      (var_b"add",
                                                                       eq(mop(Cast w1,
                                                                              ll[var_b"b'23"]),
                                                                          lw(1,1)),
                                                                       let'
                                                                         (tp[var("shift_t",
                                                                                 @{typ SRType}),
                                                                             var_n"shift_n"],
                                                                          call
                                                                            ("DecodeImmShift",
                                                                             @{typ
                                                                             "SRType \<times> nat"},
                                                                             tp[mop(Cast
                                                                                      (Word_Lib.mk_wordT 2),
                                                                                    ll[var_b"b'6",
                                                                                       var_b"b'5"]),
                                                                                mop(Cast
                                                                                      (Word_Lib.mk_wordT 5),
                                                                                    ll[var_b"b'11",
                                                                                       var_b"b'10",
                                                                                       var_b"b'9",
                                                                                       var_b"b'8",
                                                                                       var_b"b'7"])],
                                                                             @{theory ARM_Monadic} ),
                                                                          let'
                                                                            (var("m",@{typ offset1}),
                                                                             call
                                                                               ("offset1.register_form1",
                                                                                @{typ offset1},
                                                                                tp[var_w("Rm",4),
                                                                                   var("shift_t",
                                                                                       @{typ SRType}),
                                                                                   var_n"shift_n"],
                                                                                prev_thy ),
                                                                             ite(eq(var_w("B",1),
                                                                                    lw(1,1)),
                                                                                 call
                                                                                   ("instruction.Store",
                                                                                    @{typ instruction},
                                                                                    call
                                                                                      ("Store.StoreByteUnprivileged",
                                                                                       @{typ Store},
                                                                                       tp[var_b"add",
                                                                                          lt,
                                                                                          var_w("Rt",4),
                                                                                          var_w("Rn",4),
                                                                                          var("m",
                                                                                              @{typ offset1})],
                                                                                       prev_thy ),
                                                                                    prev_thy ),
                                                                                 call
                                                                                   ("instruction.Store",
                                                                                    @{typ instruction},
                                                                                    call
                                                                                      ("Store.StoreUnprivileged",
                                                                                       @{typ Store},
                                                                                       tp[var_b"add",
                                                                                          lt,
                                                                                          var_w("Rt",4),
                                                                                          var_w("Rn",4),
                                                                                          var("m",
                                                                                              @{typ offset1})],
                                                                                       prev_thy),
                                                                                    prev_thy))))),
                                                                    qTy))))),
                                                     call
                                                       ("Skip",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow>
                                                         (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} ))))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,var_b"b'25",
                                       bop(And,mop(Not,var_b"b'20"),mop(Not,var_b"b'4")))),
                               let'
                                 (var_w("Rm",4),
                                  mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                  let'
                                    (var_w("Rt",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("Rn",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        let'
                                          (var_w("B",1),mop(Cast w1,ll[var_b"b'22"]),
                                           let'
                                             (var_w("P",1),mop(Cast w1,ll[var_b"b'24"]),
                                              mb(call
                                                   ("Do",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                    tp[var_w("cond",4),lt],@{theory}),
                                                 close
                                                   (var_b"b",
                                                    ite(var_b"b",
                                                        let'
                                                          (var_b"wback",
                                                           bop(Or,eq(var_w("P",1),lw(0,1)),
                                                               eq(mop(Cast w1,ll[var_b"b'21"]),
                                                                  lw(1,1))),
                                                           mb(itb([(bop(And,
                                                                        eq(var_w("B",1),lw(1,1)),
                                                                        eq(var_w("Rt",4),lw(15,4))),
                                                                    mu(lt,qTy)),
                                                                   (eq(var_w("Rm",4),lw(15,4)),
                                                                    mu(lt,qTy)),
                                                                   (bop(And,var_b"wback",
                                                                        bop(Or,
                                                                            eq(var_w("Rn",4),
                                                                               lw(15,4)),
                                                                            eq(var_w("Rn",4),
                                                                               var_w("Rt",4)))),
                                                                    mu(lt,qTy))],
                                                                  mb(call
                                                                       ("ArchVersion",
                                                                        @{typ
                                                                        "'b state_scheme \<Rightarrow>
                                                                         (nat \<times> 'b state_scheme)"},lu,
                                                                        prev_thy ),
                                                                     close
                                                                       (var_n"v",
                                                                        mb(mu(bop(Lt,var_n"v",ln 6),
                                                                              qTy),
                                                                           close
                                                                             (var_b"b",
                                                                              mu(bop(And,var_b"b",
                                                                                     bop(And,
                                                                                         var_b"wback",
                                                                                         eq(var_w("Rm",4),
                                                                                            var_w("Rn",4)))),
                                                                                 qTy)))))),
                                                              close
                                                                (var_b"v",
                                                                 mb(ite(var_b"v",
                                                                        call
                                                                          ("DECODE_UNPREDICTABLE",
                                                                           @{typ
                                                                           "'b state_scheme \<Rightarrow>
                                                                            (unit \<times> 'b state_scheme)"},
                                                                           tp[var("mc",
                                                                                  @{typ MachineCode}),
                                                                              ls"Store (regiser)"],
                                                                           @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                                    close
                                                                      (var_a HOLogic.unitT,
                                                                       mu(let'
                                                                            (var_b"add",
                                                                             eq(mop(Cast w1,
                                                                                    ll[var_b"b'23"]),
                                                                                lw(1,1)),
                                                                             let'
                                                                               (var_b"index",
                                                                                eq(var_w("P",1),
                                                                                   lw(1,1)),
                                                                                let'
                                                                                  (tp[var("shift_t",
                                                                                          @{typ SRType}),
                                                                                      var_n"shift_n"],
                                                                                   call
                                                                                     ("DecodeImmShift",
                                                                                      @{typ
                                                                                      "SRType \<times>
                                                                                       nat"},
                                                                                      tp[mop(Cast
                                                                                               (Word_Lib.mk_wordT 2),
                                                                                             ll[var_b"b'6",
                                                                                                var_b"b'5"]),
                                                                                         mop(Cast
                                                                                               (Word_Lib.mk_wordT 5),
                                                                                             ll[var_b"b'11",
                                                                                                var_b"b'10",
                                                                                                var_b"b'9",
                                                                                                var_b"b'8",
                                                                                                var_b"b'7"])],
                                                                                      @{theory ARM_Monadic} ),
                                                                                   let'
                                                                                     (var("m",
                                                                                          @{typ offset1}),
                                                                                      call
                                                                                        ("offset1.register_form1",
                                                                                         @{typ offset1},
                                                                                         tp[var_w("Rm",4),
                                                                                            var("shift_t",
                                                                                                @{typ SRType}),
                                                                                            var_n"shift_n"],
                                                                                         prev_thy  ),
                                                                                      ite(eq(var_w("B",1),
                                                                                             lw(1,1)),
                                                                                          call
                                                                                            ("instruction.Store",
                                                                                             @{typ instruction},
                                                                                             call
                                                                                               ("Store.StoreByte",
                                                                                                @{typ Store},
                                                                                                tp[var_b"add",
                                                                                                   var_b"index",
                                                                                                   var_b"wback",
                                                                                                   var_w("Rt",4),
                                                                                                   var_w("Rn",4),
                                                                                                   var("m",
                                                                                                       @{typ offset1})],
                                                                                                prev_thy ),
                                                                                             prev_thy ),
                                                                                          call
                                                                                            ("instruction.Store",
                                                                                             @{typ instruction},
                                                                                             call
                                                                                               ("Store.StoreWord",
                                                                                                @{typ Store},
                                                                                                tp[var_b"add",
                                                                                                   var_b"index",
                                                                                                   var_b"wback",
                                                                                                   var_w("Rt",4),
                                                                                                   var_w("Rn",4),
                                                                                                   var("m",
                                                                                                       @{typ offset1})],
                                                                                                prev_thy ),
                                                                                             prev_thy )))))),
                                                                          qTy)))))),
                                                        call
                                                          ("Skip",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (instruction \<times> 'b state_scheme)"},lu,
                                                           @{theory ARM_Monadic} )))))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,var_b"b'25",
                                       bop(And,mop(Not,var_b"b'24"),
                                           bop(And,var_b"b'21",
                                               bop(And,var_b"b'20",mop(Not,var_b"b'4")))))),
                               let'
                                 (var_w("Rm",4),
                                  mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                  let'
                                    (var_w("Rt",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("Rn",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        mb(call
                                             ("Do",
                                              @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                              tp[var_w("cond",4),lt],@{theory}),
                                           close
                                             (var_b"b",
                                              ite(var_b"b",
                                                  mb(itb([(eq(var_w("Rt",4),lw(15,4)),mu(lt,qTy)),
                                                          (eq(var_w("Rn",4),lw(15,4)),mu(lt,qTy)),
                                                          (eq(var_w("Rn",4),var_w("Rt",4)),
                                                           mu(lt,qTy)),
                                                          (eq(var_w("Rm",4),lw(15,4)),mu(lt,qTy))],
                                                         mb(call
                                                              ("ArchVersion",
                                                               @{typ
                                                               "'b state_scheme \<Rightarrow>
                                                                (nat \<times> 'b state_scheme)"},lu,prev_thy ),
                                                            close
                                                              (var_n"v",
                                                               mb(mu(bop(Lt,var_n"v",ln 6),qTy),
                                                                  close
                                                                    (var_b"b",
                                                                     mu(bop(And,var_b"b",
                                                                            eq(var_w("Rm",4),
                                                                               var_w("Rn",4))),qTy)))))),
                                                     close
                                                       (var_b"v",
                                                        mb(ite(var_b"v",
                                                               call
                                                                 ("DECODE_UNPREDICTABLE",
                                                                  @{typ
                                                                  "'b state_scheme \<Rightarrow>
                                                                   (unit \<times> 'b state_scheme)"},
                                                                  tp[var("mc",@{typ MachineCode}),
                                                                     ls"LoadUnprivileged (regiser)"],
                                                                  @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                           close
                                                             (var_a HOLogic.unitT,
                                                              mu(let'
                                                                   (var_b"add",
                                                                    eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                       lw(1,1)),
                                                                    let'
                                                                      (tp[var("shift_t",
                                                                              @{typ SRType}),
                                                                          var_n"shift_n"],
                                                                       call
                                                                         ("DecodeImmShift",
                                                                          @{typ
                                                                          "SRType \<times> nat"},
                                                                          tp[mop(Cast
                                                                                   (Word_Lib.mk_wordT 2),
                                                                                 ll[var_b"b'6",
                                                                                    var_b"b'5"]),
                                                                             mop(Cast
                                                                                   (Word_Lib.mk_wordT 5),
                                                                                 ll[var_b"b'11",
                                                                                    var_b"b'10",
                                                                                    var_b"b'9",
                                                                                    var_b"b'8",
                                                                                    var_b"b'7"])],
                                                                          @{theory ARM_Monadic} ),
                                                                       let'
                                                                         (var("m",@{typ offset1}),
                                                                          call
                                                                            ("offset1.register_form1",
                                                                             @{typ offset1},
                                                                             tp[var_w("Rm",4),
                                                                                var("shift_t",
                                                                                    @{typ SRType}),
                                                                                var_n"shift_n"],
                                                                            prev_thy  ),
                                                                          ite(eq(mop(Cast w1,
                                                                                     ll[var_b"b'22"]),
                                                                                 lw(1,1)),
                                                                              call
                                                                                ("instruction.Load",
                                                                                 @{typ instruction},
                                                                                 call
                                                                                   ("Load.LoadByteUnprivileged",
                                                                                    @{typ Load},
                                                                                    tp[var_b"add",
                                                                                       lt,
                                                                                       var_w("Rt",4),
                                                                                       var_w("Rn",4),
                                                                                       var("m",
                                                                                           @{typ offset1})],
                                                                                     prev_thy  ),
                                                                                  prev_thy  ),
                                                                              call
                                                                                ("instruction.Load",
                                                                                 @{typ instruction},
                                                                                 call
                                                                                   ("Load.LoadUnprivileged",
                                                                                    @{typ Load},
                                                                                    tp[var_b"add",
                                                                                       lt,
                                                                                       var_w("Rt",4),
                                                                                       var_w("Rn",4),
                                                                                       var("m",
                                                                                           @{typ offset1})],
                                                                                     prev_thy  ),
                                                                                 prev_thy  ))))),qTy))))),
                                                  call
                                                    ("Skip",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow>
                                                      (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} )))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,var_b"b'25",bop(And,var_b"b'20",mop(Not,var_b"b'4")))),
                               let'
                                 (var_w("Rm",4),
                                  mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                  let'
                                    (var_w("Rt",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("Rn",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        let'
                                          (var_w("B",1),mop(Cast w1,ll[var_b"b'22"]),
                                           let'
                                             (var_w("P",1),mop(Cast w1,ll[var_b"b'24"]),
                                              mb(call
                                                   ("Do",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                    tp[var_w("cond",4),lt],@{theory} ),
                                                 close
                                                   (var_b"b",
                                                    ite(var_b"b",
                                                        let'
                                                          (var_b"wback",
                                                           bop(Or,eq(var_w("P",1),lw(0,1)),
                                                               eq(mop(Cast w1,ll[var_b"b'21"]),
                                                                  lw(1,1))),
                                                           mb(itb([(bop(And,
                                                                        eq(var_w("B",1),lw(1,1)),
                                                                        eq(var_w("Rt",4),lw(15,4))),
                                                                    mu(lt,qTy)),
                                                                   (eq(var_w("Rm",4),lw(15,4)),
                                                                    mu(lt,qTy)),
                                                                   (bop(And,var_b"wback",
                                                                        bop(Or,
                                                                            eq(var_w("Rn",4),
                                                                               lw(15,4)),
                                                                            eq(var_w("Rn",4),
                                                                               var_w("Rt",4)))),
                                                                    mu(lt,qTy))],
                                                                  mb(call
                                                                       ("ArchVersion",
                                                                        @{typ
                                                                        "'b state_scheme \<Rightarrow>
                                                                         (nat \<times> 'b state_scheme)"},lu,
                                                                        prev_thy  ),
                                                                     close
                                                                       (var_n"v",
                                                                        mb(mu(bop(Lt,var_n"v",ln 6),
                                                                              qTy),
                                                                           close
                                                                             (var_b"b",
                                                                              mu(bop(And,var_b"b",
                                                                                     bop(And,
                                                                                         var_b"wback",
                                                                                         eq(var_w("Rm",4),
                                                                                            var_w("Rn",4)))),
                                                                                 qTy)))))),
                                                              close
                                                                (var_b"v",
                                                                 mb(ite(var_b"v",
                                                                        call
                                                                          ("DECODE_UNPREDICTABLE",
                                                                           @{typ
                                                                           "'b state_scheme \<Rightarrow>
                                                                            (unit \<times> 'b state_scheme)"},
                                                                           tp[var("mc",
                                                                                  @{typ MachineCode}),
                                                                              ls
                                                                               "LoadWord/Byte (regiser)"],
                                                                           @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                                    close
                                                                      (var_a HOLogic.unitT,
                                                                       mu(let'
                                                                            (var_b"add",
                                                                             eq(mop(Cast w1,
                                                                                    ll[var_b"b'23"]),
                                                                                lw(1,1)),
                                                                             let'
                                                                               (var_b"index",
                                                                                eq(var_w("P",1),
                                                                                   lw(1,1)),
                                                                                let'
                                                                                  (tp[var("shift_t",
                                                                                          @{typ SRType}),
                                                                                      var_n"shift_n"],
                                                                                   call
                                                                                     ("DecodeImmShift",
                                                                                      @{typ
                                                                                      "SRType \<times>
                                                                                       nat"},
                                                                                      tp[mop(Cast
                                                                                               (Word_Lib.mk_wordT 2),
                                                                                             ll[var_b"b'6",
                                                                                                var_b"b'5"]),
                                                                                         mop(Cast
                                                                                               (Word_Lib.mk_wordT 5),
                                                                                             ll[var_b"b'11",
                                                                                                var_b"b'10",
                                                                                                var_b"b'9",
                                                                                                var_b"b'8",
                                                                                                var_b"b'7"])],
                                                                                      @{theory ARM_Monadic} ),
                                                                                   let'
                                                                                     (var("m",
                                                                                          @{typ offset1}),
                                                                                      call
                                                                                        ("offset1.register_form1",
                                                                                         @{typ offset1},
                                                                                         tp[var_w("Rm",4),
                                                                                            var("shift_t",
                                                                                                @{typ SRType}),
                                                                                            var_n"shift_n"],
                                                                                         prev_thy  ),
                                                                                      ite(eq(var_w("B",1),
                                                                                             lw(1,1)),
                                                                                          call
                                                                                            ("instruction.Load",
                                                                                             @{typ instruction},
                                                                                             call
                                                                                               ("Load.LoadByte",
                                                                                                @{typ Load},
                                                                                                tp[lt,
                                                                                                   var_b"add",
                                                                                                   var_b"index",
                                                                                                   var_b"wback",
                                                                                                   var_w("Rt",4),
                                                                                                   var_w("Rn",4),
                                                                                                   var("m",
                                                                                                       @{typ offset1})],
                                                                                                 prev_thy  ),
                                                                                              prev_thy  ),
                                                                                          call
                                                                                            ("instruction.Load",
                                                                                             @{typ instruction},
                                                                                             call
                                                                                               ("Load.LoadWord",
                                                                                                @{typ Load},
                                                                                                tp[var_b"add",
                                                                                                   var_b"index",
                                                                                                   var_b"wback",
                                                                                                   var_w("Rt",4),
                                                                                                   var_w("Rn",4),
                                                                                                   var("m",
                                                                                                       @{typ offset1})],
                                                                                                 prev_thy  ),
                                                                                              prev_thy  )))))),
                                                                          qTy)))))),
                                                        call
                                                          ("Skip",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (instruction \<times> 'b state_scheme)"},lu,
                                                           @{theory ARM_Monadic} )))))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,var_b"b'25",
                                       bop(And,mop(Not,var_b"b'24"),
                                           bop(And,mop(Not,var_b"b'23"),var_b"b'4")))),
                               let'
                                 (var_w("Rm",4),
                                  mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                  let'
                                    (var_w("Rd",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("Rn",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        mb(call
                                             ("ArchVersion",
                                              @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                              prev_thy  ),
                                           close
                                             (var_n"v",
                                              mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                                       close
                                                         (var_b"v",
                                                          mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                                    close
                                                      (var("v",@{typ "4 word \<times> bool"}),
                                                       call
                                                         ("Do",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          var("v",@{typ "4 word \<times> bool"}),
                                                          @{theory} ))),
                                                 close
                                                   (var_b"b",
                                                    ite(var_b"b",
                                                        mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                                   bop(Or,
                                                                       eq(var_w("Rn",4),lw(15,4)),
                                                                       eq(var_w("Rm",4),lw(15,4)))),
                                                               call
                                                                 ("DECODE_UNPREDICTABLE",
                                                                  @{typ
                                                                  "'b state_scheme \<Rightarrow>
                                                                   (unit \<times> 'b state_scheme)"},
                                                                  tp[var("mc",@{typ MachineCode}),
                                                                     ls
                                                                      "Parallel addition and subtraction"],
                                                                  @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                           close
                                                             (var_a HOLogic.unitT,
                                                              mu(call
                                                                   ("DecodeParallelAdditionSubtraction",
                                                                    @{typ instruction},
                                                                    tp[mop(Cast
                                                                             (Word_Lib.mk_wordT 2),
                                                                           ll[var_b"b'21",
                                                                              var_b"b'20"]),
                                                                       mop(Cast
                                                                             (Word_Lib.mk_wordT 3),
                                                                           ll[var_b"b'7",var_b"b'6",
                                                                              var_b"b'5"]),
                                                                       mop(Cast w1,ll[var_b"b'22"]),
                                                                       var_w("Rd",4),var_w("Rn",4),
                                                                       var_w("Rm",4)],@{theory ARM_Monadic} ),qTy))),
                                                        call
                                                          ("Skip",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (instruction \<times> 'b state_scheme)"},lu,
                                                           @{theory ARM_Monadic} )))))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,var_b"b'25",
                                       bop(And,mop(Not,var_b"b'24"),
                                           bop(And,var_b"b'23",
                                               bop(And,mop(Not,var_b"b'22"),
                                                   bop(And,mop(Not,var_b"b'21"),
                                                       bop(And,mop(Not,var_b"b'20"),
                                                           bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                               let'
                                 (var_w("Rm",4),
                                  mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                  let'
                                    (var_w("tb",1),mop(Cast w1,ll[var_b"b'6"]),
                                     let'
                                       (var_w("Rd",4),
                                        mop(Cast w4,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                        let'
                                          (var_w("Rn",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           mb(call
                                                ("ArchVersion",
                                                 @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},
                                                 lu,prev_thy  ),
                                              close
                                                (var_n"v",
                                                 mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                                          close
                                                            (var_b"v",
                                                             mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                                       close
                                                         (var("v",@{typ "4 word \<times> bool"}),
                                                          call
                                                            ("Do",
                                                             @{typ
                                                             "'b state_scheme \<Rightarrow>
                                                              (bool \<times> 'b state_scheme)"},
                                                             var("v",@{typ "4 word \<times> bool"}),
                                                            @{theory} ))),
                                                    close
                                                      (var_b"b",
                                                       ite(var_b"b",
                                                           mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                                      bop(Or,
                                                                          eq(var_w("Rn",4),lw(15,4)),
                                                                          eq(var_w("Rm",4),lw(15,4)))),
                                                                  call
                                                                    ("DECODE_UNPREDICTABLE",
                                                                     @{typ
                                                                     "'b state_scheme \<Rightarrow>
                                                                      (unit \<times> 'b state_scheme)"},
                                                                     tp[var("mc",@{typ MachineCode}),
                                                                        ls"PackHalfword"],@{theory ARM_Monadic} ),
                                                                  mu(lu,qTy)),
                                                              close
                                                                (var_a HOLogic.unitT,
                                                                 mu(let'
                                                                      (tp[var("shift_t",
                                                                              @{typ SRType}),
                                                                          var_n"shift_n"],
                                                                       call
                                                                         ("DecodeImmShift",
                                                                          @{typ
                                                                          "SRType \<times> nat"},
                                                                          tp[cc[var_w("tb",1),
                                                                                lw(0,1)],
                                                                             mop(Cast
                                                                                   (Word_Lib.mk_wordT 5),
                                                                                 ll[var_b"b'11",
                                                                                    var_b"b'10",
                                                                                    var_b"b'9",
                                                                                    var_b"b'8",
                                                                                    var_b"b'7"])],
                                                                          @{theory ARM_Monadic} ),
                                                                       call
                                                                         ("instruction.Media",
                                                                          @{typ instruction},
                                                                          call
                                                                            ("Media.PackHalfword",
                                                                             @{typ Media},
                                                                             tp[var("shift_t",
                                                                                    @{typ SRType}),
                                                                                var_n"shift_n",
                                                                                eq(var_w("tb",1),
                                                                                   lw(1,1)),
                                                                                var_w("Rd",4),
                                                                                var_w("Rn",4),
                                                                                var_w("Rm",4)],
                                                                             prev_thy ),prev_thy  )),
                                                                    qTy))),
                                                           call
                                                             ("Skip",
                                                              @{typ
                                                              "'b state_scheme \<Rightarrow>
                                                               (instruction \<times> 'b state_scheme)"},lu,
                                                              @{theory ARM_Monadic} ))))))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,var_b"b'25",
                                       bop(And,mop(Not,var_b"b'24"),
                                           bop(And,var_b"b'23",
                                               bop(And,mop(Not,var_b"b'22"),
                                                   bop(And,mop(Not,var_b"b'21"),
                                                       bop(And,mop(Not,var_b"b'20"),
                                                           bop(And,var_b"b'7",
                                                               bop(And,mop(Not,var_b"b'6"),
                                                                   bop(And,var_b"b'5",var_b"b'4")))))))))),
                               let'
                                 (var_w("Rm",4),
                                  mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                  let'
                                    (var_w("Rd",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("Rn",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        mb(call
                                             ("ArchVersion",
                                              @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                              prev_thy ),
                                           close
                                             (var_n"v",
                                              mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                                       close
                                                         (var_b"v",
                                                          mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                                    close
                                                      (var("v",@{typ "4 word \<times> bool"}),
                                                       call
                                                         ("Do",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          var("v",@{typ "4 word \<times> bool"}),
                                                          @{theory}))),
                                                 close
                                                   (var_b"b",
                                                    ite(var_b"b",
                                                        mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                                   bop(Or,
                                                                       eq(var_w("Rn",4),lw(15,4)),
                                                                       eq(var_w("Rm",4),lw(15,4)))),
                                                               call
                                                                 ("DECODE_UNPREDICTABLE",
                                                                  @{typ
                                                                  "'b state_scheme \<Rightarrow>
                                                                   (unit \<times> 'b state_scheme)"},
                                                                  tp[var("mc",@{typ MachineCode}),
                                                                     ls"SelectBytes"],@{theory ARM_Monadic} ),
                                                               mu(lu,qTy)),
                                                           close
                                                             (var_a HOLogic.unitT,
                                                              mu(call
                                                                   ("instruction.Media",
                                                                    @{typ instruction},
                                                                    call
                                                                      ("Media.SelectBytes",
                                                                       @{typ Media},
                                                                       tp[var_w("Rd",4),
                                                                          var_w("Rn",4),
                                                                          var_w("Rm",4)],prev_thy  ),
                                                                   prev_thy  ),qTy))),
                                                        call
                                                          ("Skip",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (instruction \<times> 'b state_scheme)"},lu,
                                                           @{theory ARM_Monadic} )))))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,var_b"b'25",
                                       bop(And,mop(Not,var_b"b'24"),
                                           bop(And,var_b"b'23",
                                               bop(And,var_b"b'21",
                                                   bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                  let'
                                    (var_w("Rd",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("sat_imm",5),
                                        mop(Cast (Word_Lib.mk_wordT 5),
                                            ll[var_b"b'20",var_b"b'19",var_b"b'18",var_b"b'17",
                                               var_b"b'16"]),
                                        mb(call
                                             ("ArchVersion",
                                              @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                              prev_thy  ),
                                           close
                                             (var_n"v",
                                              mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                                       close
                                                         (var_b"v",
                                                          mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                                    close
                                                      (var("v",@{typ "4 word \<times> bool"}),
                                                       call
                                                         ("Do",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          var("v",@{typ "4 word \<times> bool"}),
                                                         @{theory} ))),
                                                 close
                                                   (var_b"b",
                                                    ite(var_b"b",
                                                        mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                                   eq(var_w("Rn",4),lw(15,4))),
                                                               call
                                                                 ("DECODE_UNPREDICTABLE",
                                                                  @{typ
                                                                  "'b state_scheme \<Rightarrow>
                                                                   (unit \<times> 'b state_scheme)"},
                                                                  tp[var("mc",@{typ MachineCode}),
                                                                     ls"Saturate"],@{theory ARM_Monadic} ),
                                                               mu(lu,qTy)),
                                                           close
                                                             (var_a HOLogic.unitT,
                                                              mu(let'
                                                                   (var_b"unsigned",
                                                                    eq(mop(Cast w1,ll[var_b"b'22"]),
                                                                       lw(1,1)),
                                                                    let'
                                                                      (tp[var("shift_t",
                                                                              @{typ SRType}),
                                                                          var_n"shift_n"],
                                                                       call
                                                                         ("DecodeImmShift",
                                                                          @{typ
                                                                          "SRType \<times> nat"},
                                                                          tp[cc[mop(Cast w1,
                                                                                    ll[var_b"b'6"]),
                                                                                lw(0,1)],
                                                                             mop(Cast
                                                                                   (Word_Lib.mk_wordT 5),
                                                                                 ll[var_b"b'11",
                                                                                    var_b"b'10",
                                                                                    var_b"b'9",
                                                                                    var_b"b'8",
                                                                                    var_b"b'7"])],
                                                                          @{theory ARM_Monadic} ),
                                                                       call
                                                                         ("instruction.Media",
                                                                          @{typ instruction},
                                                                          call
                                                                            ("Media.Saturate",
                                                                             @{typ Media},
                                                                             tp[var("shift_t",
                                                                                    @{typ SRType}),
                                                                                var_n"shift_n",
                                                                                ite(var_b"unsigned",
                                                                                    mop(Cast
                                                                                          HOLogic.natT,
                                                                                        var_w("sat_imm",5)),
                                                                                    bop(Add,
                                                                                        mop(Cast
                                                                                              HOLogic.natT,
                                                                                            var_w("sat_imm",5)),
                                                                                        ln 1)),
                                                                                var_b"unsigned",
                                                                                var_w("Rd",4),
                                                                                var_w("Rn",4)],
                                                                             prev_thy  ),prev_thy  ))),
                                                                 qTy))),
                                                        call
                                                          ("Skip",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (instruction \<times> 'b state_scheme)"},lu,
                                                           @{theory ARM_Monadic} )))))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,var_b"b'25",
                                       bop(And,mop(Not,var_b"b'24"),
                                           bop(And,var_b"b'23",
                                               bop(And,var_b"b'21",
                                                   bop(And,mop(Not,var_b"b'20"),
                                                       bop(And,mop(Not,var_b"b'7"),
                                                           bop(And,mop(Not,var_b"b'6"),
                                                               bop(And,var_b"b'5",var_b"b'4"))))))))),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                  let'
                                    (var_w("Rd",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("sat_imm",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        mb(call
                                             ("ArchVersion",
                                              @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                              prev_thy  ),
                                           close
                                             (var_n"v",
                                              mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                                       close
                                                         (var_b"v",
                                                          mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                                    close
                                                      (var("v",@{typ "4 word \<times> bool"}),
                                                       call
                                                         ("Do",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          var("v",@{typ "4 word \<times> bool"}),
                                                         @{theory}))),
                                                 close
                                                   (var_b"b",
                                                    ite(var_b"b",
                                                        mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                                   eq(var_w("Rn",4),lw(15,4))),
                                                               call
                                                                 ("DECODE_UNPREDICTABLE",
                                                                  @{typ
                                                                  "'b state_scheme \<Rightarrow>
                                                                   (unit \<times> 'b state_scheme)"},
                                                                  tp[var("mc",@{typ MachineCode}),
                                                                     ls"Saturate16"],@{theory ARM_Monadic} ),
                                                               mu(lu,qTy)),
                                                           close
                                                             (var_a HOLogic.unitT,
                                                              mu(let'
                                                                   (var_b"unsigned",
                                                                    eq(mop(Cast w1,ll[var_b"b'22"]),
                                                                       lw(1,1)),
                                                                    call
                                                                      ("instruction.Media",
                                                                       @{typ instruction},
                                                                       call
                                                                         ("Media.Saturate16",
                                                                          @{typ Media},
                                                                          tp[ite(var_b"unsigned",
                                                                                 mop(Cast
                                                                                       HOLogic.natT,
                                                                                     var_w("sat_imm",4)),
                                                                                 bop(Add,
                                                                                     mop(Cast
                                                                                           HOLogic.natT,
                                                                                         var_w("sat_imm",4)),
                                                                                     ln 1)),
                                                                             var_b"unsigned",
                                                                             var_w("Rd",4),
                                                                             var_w("Rn",4)],
                                                                          prev_thy ),prev_thy  )),qTy))),
                                                        call
                                                          ("Skip",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (instruction \<times> 'b state_scheme)"},lu,
                                                           @{theory ARM_Monadic} )))))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,var_b"b'25",
                                       bop(And,mop(Not,var_b"b'24"),
                                           bop(And,var_b"b'23",
                                               bop(And,mop(Not,var_b"b'21"),
                                                   bop(And,mop(Not,var_b"b'20"),
                                                       bop(And,mop(Not,var_b"b'7"),
                                                           bop(And,var_b"b'6",
                                                               bop(And,var_b"b'5",var_b"b'4"))))))))),
                               let'
                                 (var_w("Rm",4),
                                  mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                  let'
                                    (var_w("Rd",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     mb(call
                                          ("ArchVersion",
                                           @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                           prev_thy ),
                                        close
                                          (var_n"v",
                                           mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                                    close
                                                      (var_b"v",mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                                 close
                                                   (var("v",@{typ "4 word \<times> bool"}),
                                                    call
                                                      ("Do",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                       var("v",@{typ "4 word \<times> bool"}),
                                                       @{theory} ))),
                                              close
                                                (var_b"b",
                                                 ite(var_b"b",
                                                     mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                                eq(var_w("Rm",4),lw(15,4))),
                                                            call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ
                                                               "'b state_scheme \<Rightarrow>
                                                                (unit \<times> 'b state_scheme)"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"ExtendByte16"],@{theory ARM_Monadic} ),
                                                            mu(lu,qTy)),
                                                        close
                                                          (var_a HOLogic.unitT,
                                                           mu(call
                                                                ("instruction.Media",
                                                                 @{typ instruction},
                                                                 call
                                                                   ("Media.ExtendByte16",
                                                                    @{typ Media},
                                                                    tp[eq(mop(Cast w1,
                                                                              ll[var_b"b'22"]),
                                                                          lw(1,1)),var_w("Rd",4),
                                                                       mop(Cast w4,
                                                                           ll[var_b"b'19",
                                                                              var_b"b'18",
                                                                              var_b"b'17",
                                                                              var_b"b'16"]),
                                                                       var_w("Rm",4),
                                                                       mop(Cast HOLogic.natT,
                                                                           cc[mop(Cast
                                                                                    (Word_Lib.mk_wordT 2),
                                                                                  ll[var_b"b'11",
                                                                                     var_b"b'10"]),
                                                                              lw(0,3)])],prev_thy  ),
                                                                 prev_thy  ),qTy))),
                                                     call
                                                       ("Skip",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow>
                                                         (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} ))))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,var_b"b'25",
                                       bop(And,mop(Not,var_b"b'24"),
                                           bop(And,var_b"b'23",
                                               bop(And,var_b"b'21",
                                                   bop(And,mop(Not,var_b"b'20"),
                                                       bop(And,mop(Not,var_b"b'7"),
                                                           bop(And,var_b"b'6",
                                                               bop(And,var_b"b'5",var_b"b'4"))))))))),
                               let'
                                 (var_w("Rm",4),
                                  mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                  let'
                                    (var_w("Rd",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     mb(call
                                          ("ArchVersion",
                                           @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                           prev_thy  ),
                                        close
                                          (var_n"v",
                                           mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                                    close
                                                      (var_b"v",mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                                 close
                                                   (var("v",@{typ "4 word \<times> bool"}),
                                                    call
                                                      ("Do",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                       var("v",@{typ "4 word \<times> bool"}),
                                                      @{theory} ))),
                                              close
                                                (var_b"b",
                                                 ite(var_b"b",
                                                     mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                                eq(var_w("Rm",4),lw(15,4))),
                                                            call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ
                                                               "'b state_scheme \<Rightarrow>
                                                                (unit \<times> 'b state_scheme)"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"ExtendByte"],@{theory ARM_Monadic} ),
                                                            mu(lu,qTy)),
                                                        close
                                                          (var_a HOLogic.unitT,
                                                           mu(call
                                                                ("instruction.Media",
                                                                 @{typ instruction},
                                                                 call
                                                                   ("Media.ExtendByte",@{typ Media},
                                                                    tp[eq(mop(Cast w1,
                                                                              ll[var_b"b'22"]),
                                                                          lw(1,1)),var_w("Rd",4),
                                                                       mop(Cast w4,
                                                                           ll[var_b"b'19",
                                                                              var_b"b'18",
                                                                              var_b"b'17",
                                                                              var_b"b'16"]),
                                                                       var_w("Rm",4),
                                                                       mop(Cast HOLogic.natT,
                                                                           cc[mop(Cast
                                                                                    (Word_Lib.mk_wordT 2),
                                                                                  ll[var_b"b'11",
                                                                                     var_b"b'10"]),
                                                                              lw(0,3)])],@{theory ARM_Monadic} ),
                                                                 @{theory ARM_Monadic} ),qTy))),
                                                     call
                                                       ("Skip",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow>
                                                         (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} ))))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,var_b"b'25",
                                       bop(And,mop(Not,var_b"b'24"),
                                           bop(And,var_b"b'23",
                                               bop(And,var_b"b'21",
                                                   bop(And,var_b"b'20",
                                                       bop(And,mop(Not,var_b"b'7"),
                                                           bop(And,var_b"b'6",
                                                               bop(And,var_b"b'5",var_b"b'4"))))))))),
                               let'
                                 (var_w("Rm",4),
                                  mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                  let'
                                    (var_w("Rd",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     mb(call
                                          ("ArchVersion",
                                           @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                           prev_thy ),
                                        close
                                          (var_n"v",
                                           mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                                    close
                                                      (var_b"v",mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                                 close
                                                   (var("v",@{typ "4 word \<times> bool"}),
                                                    call
                                                      ("Do",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                       var("v",@{typ "4 word \<times> bool"}),
                                                      @{theory} ))),
                                              close
                                                (var_b"b",
                                                 ite(var_b"b",
                                                     mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                                eq(var_w("Rm",4),lw(15,4))),
                                                            call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ
                                                               "'b state_scheme \<Rightarrow>
                                                                (unit \<times> 'b state_scheme)"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"ExtendHalfword"],@{theory ARM_Monadic} ),
                                                            mu(lu,qTy)),
                                                        close
                                                          (var_a HOLogic.unitT,
                                                           mu(call
                                                                ("instruction.Media",
                                                                 @{typ instruction},
                                                                 call
                                                                   ("Media.ExtendHalfword",
                                                                    @{typ Media},
                                                                    tp[eq(mop(Cast w1,
                                                                              ll[var_b"b'22"]),
                                                                          lw(1,1)),var_w("Rd",4),
                                                                       mop(Cast w4,
                                                                           ll[var_b"b'19",
                                                                              var_b"b'18",
                                                                              var_b"b'17",
                                                                              var_b"b'16"]),
                                                                       var_w("Rm",4),
                                                                       mop(Cast HOLogic.natT,
                                                                           cc[mop(Cast
                                                                                    (Word_Lib.mk_wordT 2),
                                                                                  ll[var_b"b'11",
                                                                                     var_b"b'10"]),
                                                                              lw(0,3)])],@{theory ARM_Monadic} ),
                                                                 @{theory ARM_Monadic} ),qTy))),
                                                     call
                                                       ("Skip",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow>
                                                         (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} ))))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,var_b"b'25",
                                       bop(And,mop(Not,var_b"b'24"),
                                           bop(And,var_b"b'23",
                                               bop(And,mop(Not,var_b"b'22"),
                                                   bop(And,var_b"b'21",
                                                       bop(And,var_b"b'20",
                                                           bop(And,mop(Not,var_b"b'7"),
                                                               bop(And,mop(Not,var_b"b'6"),
                                                                   bop(And,var_b"b'5",var_b"b'4")))))))))),
                               let'
                                 (var_w("Rm",4),
                                  mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                  let'
                                    (var_w("Rd",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     mb(call
                                          ("ArchVersion",
                                           @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                            prev_thy  ),
                                        close
                                          (var_n"v",
                                           mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                                    close
                                                      (var_b"v",mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                                 close
                                                   (var("v",@{typ "4 word \<times> bool"}),
                                                    call
                                                      ("Do",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                       var("v",@{typ "4 word \<times> bool"}),
                                                      @{theory} ))),
                                              close
                                                (var_b"b",
                                                 ite(var_b"b",
                                                     mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                                eq(var_w("Rm",4),lw(15,4))),
                                                            call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ
                                                               "'b state_scheme \<Rightarrow>
                                                                (unit \<times> 'b state_scheme)"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"ByteReverse"],@{theory ARM_Monadic} ),
                                                            mu(lu,qTy)),
                                                        close
                                                          (var_a HOLogic.unitT,
                                                           mu(call
                                                                ("instruction.Media",
                                                                 @{typ instruction},
                                                                 call
                                                                   ("Media.ByteReverse",
                                                                    @{typ Media},
                                                                    tp[var_w("Rd",4),var_w("Rm",4)],
                                                                    @{theory ARM_Monadic} ),@{theory ARM_Monadic} ),qTy))),
                                                     call
                                                       ("Skip",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow>
                                                         (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} ))))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,var_b"b'25",
                                       bop(And,mop(Not,var_b"b'24"),
                                           bop(And,var_b"b'23",
                                               bop(And,mop(Not,var_b"b'22"),
                                                   bop(And,var_b"b'21",
                                                       bop(And,var_b"b'20",
                                                           bop(And,var_b"b'7",
                                                               bop(And,mop(Not,var_b"b'6"),
                                                                   bop(And,var_b"b'5",var_b"b'4")))))))))),
                               let'
                                 (var_w("Rm",4),
                                  mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                  let'
                                    (var_w("Rd",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     mb(call
                                          ("ArchVersion",
                                           @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                            prev_thy  ),
                                        close
                                          (var_n"v",
                                           mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                                    close
                                                      (var_b"v",mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                                 close
                                                   (var("v",@{typ "4 word \<times> bool"}),
                                                    call
                                                      ("Do",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                       var("v",@{typ "4 word \<times> bool"}),
                                                       @{theory} ))),
                                              close
                                                (var_b"b",
                                                 ite(var_b"b",
                                                     mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                                eq(var_w("Rm",4),lw(15,4))),
                                                            call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ
                                                               "'b state_scheme \<Rightarrow>
                                                                (unit \<times> 'b state_scheme)"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"ByteReversePackedHalfword"],
                                                               @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                        close
                                                          (var_a HOLogic.unitT,
                                                           mu(call
                                                                ("instruction.Media",
                                                                 @{typ instruction},
                                                                 call
                                                                   ("Media.ByteReversePackedHalfword",
                                                                    @{typ Media},
                                                                    tp[var_w("Rd",4),var_w("Rm",4)],
                                                                    @{theory ARM_Monadic} ),@{theory ARM_Monadic} ),qTy))),
                                                     call
                                                       ("Skip",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow>
                                                         (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} ))))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,var_b"b'25",
                                       bop(And,mop(Not,var_b"b'24"),
                                           bop(And,var_b"b'23",
                                               bop(And,var_b"b'22",
                                                   bop(And,var_b"b'21",
                                                       bop(And,var_b"b'20",
                                                           bop(And,var_b"b'7",
                                                               bop(And,mop(Not,var_b"b'6"),
                                                                   bop(And,var_b"b'5",var_b"b'4")))))))))),
                               let'
                                 (var_w("Rm",4),
                                  mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                  let'
                                    (var_w("Rd",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     mb(call
                                          ("ArchVersion",
                                           @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                            prev_thy  ),
                                        close
                                          (var_n"v",
                                           mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                                    close
                                                      (var_b"v",mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                                 close
                                                   (var("v",@{typ "4 word \<times> bool"}),
                                                    call
                                                      ("Do",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                       var("v",@{typ "4 word \<times> bool"}),
                                                      @{theory }))),
                                              close
                                                (var_b"b",
                                                 ite(var_b"b",
                                                     mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                                eq(var_w("Rm",4),lw(15,4))),
                                                            call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ
                                                               "'b state_scheme \<Rightarrow>
                                                                (unit \<times> 'b state_scheme)"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"ByteReverseSignedHalfword"],
                                                               @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                        close
                                                          (var_a HOLogic.unitT,
                                                           mu(call
                                                                ("instruction.Media",
                                                                 @{typ instruction},
                                                                 call
                                                                   ("Media.ByteReverseSignedHalfword",
                                                                    @{typ Media},
                                                                    tp[var_w("Rd",4),var_w("Rm",4)],
                                                                    @{theory ARM_Monadic} ),@{theory ARM_Monadic} ),qTy))),
                                                     call
                                                       ("Skip",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow>
                                                         (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} ))))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,var_b"b'25",
                                       bop(And,mop(Not,var_b"b'24"),
                                           bop(And,var_b"b'23",
                                               bop(And,var_b"b'22",
                                                   bop(And,var_b"b'21",
                                                       bop(And,var_b"b'20",
                                                           bop(And,mop(Not,var_b"b'7"),
                                                               bop(And,mop(Not,var_b"b'6"),
                                                                   bop(And,var_b"b'5",var_b"b'4")))))))))),
                               let'
                                 (var_w("Rm",4),
                                  mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                  let'
                                    (var_w("Rd",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     mb(call
                                          ("ArchVersion",
                                           @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                           prev_thy  ),
                                        close
                                          (var_n"v",
                                           mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                                    close
                                                      (var_b"v",mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                                 close
                                                   (var("v",@{typ "4 word \<times> bool"}),
                                                    call
                                                      ("Do",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                       var("v",@{typ "4 word \<times> bool"}),
                                                       @{theory } ))),
                                              close
                                                (var_b"b",
                                                 ite(var_b"b",
                                                     mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                                eq(var_w("Rm",4),lw(15,4))),
                                                            call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ
                                                               "'b state_scheme \<Rightarrow>
                                                                (unit \<times> 'b state_scheme)"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"ReverseBits"],@{theory ARM_Monadic} ),
                                                            mu(lu,qTy)),
                                                        close
                                                          (var_a HOLogic.unitT,
                                                           mu(call
                                                                ("instruction.Media",
                                                                 @{typ instruction},
                                                                 call
                                                                   ("Media.ReverseBits",
                                                                    @{typ Media},
                                                                    tp[var_w("Rd",4),var_w("Rm",4)],
                                                                    @{theory ARM_Monadic} ),@{theory ARM_Monadic} ),qTy))),
                                                     call
                                                       ("Skip",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow>
                                                         (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} ))))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,var_b"b'25",
                                       bop(And,var_b"b'24",
                                           bop(And,mop(Not,var_b"b'23"),
                                               bop(And,mop(Not,var_b"b'22"),
                                                   bop(And,mop(Not,var_b"b'21"),
                                                       bop(And,mop(Not,var_b"b'20"),
                                                           bop(And,mop(Not,var_b"b'7"),var_b"b'4")))))))),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                  let'
                                    (var_w("Rm",4),
                                     mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                     let'
                                       (var_w("Rd",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        mb(call
                                             ("ArchVersion",
                                              @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                               prev_thy ),
                                           close
                                             (var_n"v",
                                              mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                                       close
                                                         (var_b"v",
                                                          mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                                    close
                                                      (var("v",@{typ "4 word \<times> bool"}),
                                                       call
                                                         ("Do",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          var("v",@{typ "4 word \<times> bool"}),
                                                          @{theory} ))),
                                                 close
                                                   (var_b"b",
                                                    ite(var_b"b",
                                                        mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                                   bop(Or,
                                                                       eq(var_w("Rn",4),lw(15,4)),
                                                                       eq(var_w("Rm",4),lw(15,4)))),
                                                               call
                                                                 ("DECODE_UNPREDICTABLE",
                                                                  @{typ
                                                                  "'b state_scheme \<Rightarrow>
                                                                   (unit \<times> 'b state_scheme)"},
                                                                  tp[var("mc",@{typ MachineCode}),
                                                                     ls"SignedMultiplyDual"],
                                                                  @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                           close
                                                             (var_a HOLogic.unitT,
                                                              mu(call
                                                                   ("instruction.Multiply",
                                                                    @{typ instruction},
                                                                    call
                                                                      ("Multiply.SignedMultiplyDual",
                                                                       @{typ Multiply},
                                                                       tp[eq(mop(Cast w1,
                                                                                 ll[var_b"b'6"]),
                                                                             lw(1,1)),
                                                                          eq(mop(Cast w1,
                                                                                 ll[var_b"b'5"]),
                                                                             lw(1,1)),var_w("Rd",4),
                                                                          var_w("Rn",4),
                                                                          var_w("Rm",4),
                                                                          mop(Cast w4,
                                                                              ll[var_b"b'15",
                                                                                 var_b"b'14",
                                                                                 var_b"b'13",
                                                                                 var_b"b'12"])],
                                                                       @{theory ARM_Monadic} ),@{theory ARM_Monadic} ),qTy))),
                                                        call
                                                          ("Skip",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (instruction \<times> 'b state_scheme)"},lu,
                                                           @{theory ARM_Monadic} )))))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,var_b"b'25",
                                       bop(And,var_b"b'24",
                                           bop(And,mop(Not,var_b"b'23"),
                                               bop(And,var_b"b'22",
                                                   bop(And,mop(Not,var_b"b'21"),
                                                       bop(And,mop(Not,var_b"b'20"),
                                                           bop(And,mop(Not,var_b"b'7"),var_b"b'4")))))))),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                  let'
                                    (var_w("Rm",4),
                                     mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                     let'
                                       (var_w("RdLo",4),
                                        mop(Cast w4,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                        let'
                                          (var_w("RdHi",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           mb(call
                                                ("ArchVersion",
                                                 @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},
                                                 lu, prev_thy  ),
                                              close
                                                (var_n"v",
                                                 mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                                          close
                                                            (var_b"v",
                                                             mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                                       close
                                                         (var("v",@{typ "4 word \<times> bool"}),
                                                          call
                                                            ("Do",
                                                             @{typ
                                                             "'b state_scheme \<Rightarrow>
                                                              (bool \<times> 'b state_scheme)"},
                                                             var("v",@{typ "4 word \<times> bool"}),
                                                            @{theory} ))),
                                                    close
                                                      (var_b"b",
                                                       ite(var_b"b",
                                                           mb(ite(bop(Or,
                                                                      eq(var_w("RdLo",4),lw(15,4)),
                                                                      bop(Or,
                                                                          eq(var_w("RdHi",4),
                                                                             lw(15,4)),
                                                                          bop(Or,
                                                                              eq(var_w("Rn",4),
                                                                                 lw(15,4)),
                                                                              eq(var_w("Rm",4),
                                                                                 lw(15,4))))),
                                                                  call
                                                                    ("DECODE_UNPREDICTABLE",
                                                                     @{typ
                                                                     "'b state_scheme \<Rightarrow>
                                                                      (unit \<times> 'b state_scheme)"},
                                                                     tp[var("mc",@{typ MachineCode}),
                                                                        ls"SignedMultiplyLongDual"],
                                                                     @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                              close
                                                                (var_a HOLogic.unitT,
                                                                 mu(call
                                                                      ("instruction.Multiply",
                                                                       @{typ instruction},
                                                                       call
                                                                         ("Multiply.SignedMultiplyLongDual",
                                                                          @{typ Multiply},
                                                                          tp[eq(mop(Cast w1,
                                                                                    ll[var_b"b'6"]),
                                                                                lw(1,1)),
                                                                             eq(mop(Cast w1,
                                                                                    ll[var_b"b'5"]),
                                                                                lw(1,1)),
                                                                             var_w("RdHi",4),
                                                                             var_w("RdLo",4),
                                                                             var_w("Rn",4),
                                                                             var_w("Rm",4)],
                                                                          @{theory ARM_Monadic} ),@{theory ARM_Monadic} ),qTy))),
                                                           call
                                                             ("Skip",
                                                              @{typ
                                                              "'b state_scheme \<Rightarrow>
                                                               (instruction \<times> 'b state_scheme)"},lu,
                                                              @{theory ARM_Monadic} ))))))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,var_b"b'25",
                                       bop(And,var_b"b'24",
                                           bop(And,mop(Not,var_b"b'23"),
                                               bop(And,var_b"b'22",
                                                   bop(And,mop(Not,var_b"b'21"),
                                                       bop(And,var_b"b'20",
                                                           bop(And,mop(Not,var_b"b'7"),
                                                               bop(And,mop(Not,var_b"b'6"),
                                                                   var_b"b'4"))))))))),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                  let'
                                    (var_w("Rm",4),
                                     mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                     let'
                                       (var_w("Rd",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        mb(call
                                             ("ArchVersion",
                                              @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                               prev_thy  ),
                                           close
                                             (var_n"v",
                                              mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                                       close
                                                         (var_b"v",
                                                          mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                                    close
                                                      (var("v",@{typ "4 word \<times> bool"}),
                                                       call
                                                         ("Do",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          var("v",@{typ "4 word \<times> bool"}),
                                                          @{theory} ))),
                                                 close
                                                   (var_b"b",
                                                    ite(var_b"b",
                                                        mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                                   bop(Or,
                                                                       eq(var_w("Rn",4),lw(15,4)),
                                                                       eq(var_w("Rm",4),lw(15,4)))),
                                                               call
                                                                 ("DECODE_UNPREDICTABLE",
                                                                  @{typ
                                                                  "'b state_scheme \<Rightarrow>
                                                                   (unit \<times> 'b state_scheme)"},
                                                                  tp[var("mc",@{typ MachineCode}),
                                                                     ls
                                                                      "SignedMostSignificantMultiply"],
                                                                  @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                           close
                                                             (var_a HOLogic.unitT,
                                                              mu(call
                                                                   ("instruction.Multiply",
                                                                    @{typ instruction},
                                                                    call
                                                                      ("Multiply.SignedMostSignificantMultiply",
                                                                       @{typ Multiply},
                                                                       tp[eq(mop(Cast w1,
                                                                                 ll[var_b"b'5"]),
                                                                             lw(1,1)),var_w("Rd",4),
                                                                          var_w("Rn",4),
                                                                          var_w("Rm",4),
                                                                          mop(Cast w4,
                                                                              ll[var_b"b'15",
                                                                                 var_b"b'14",
                                                                                 var_b"b'13",
                                                                                 var_b"b'12"])],
                                                                       @{theory ARM_Monadic} ),@{theory ARM_Monadic} ),qTy))),
                                                        call
                                                          ("Skip",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (instruction \<times> 'b state_scheme)"},lu,
                                                           @{theory ARM_Monadic} )))))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,var_b"b'25",
                                       bop(And,var_b"b'24",
                                           bop(And,mop(Not,var_b"b'23"),
                                               bop(And,var_b"b'22",
                                                   bop(And,mop(Not,var_b"b'21"),
                                                       bop(And,var_b"b'20",
                                                           bop(And,var_b"b'7",
                                                               bop(And,var_b"b'6",var_b"b'4"))))))))),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                  let'
                                    (var_w("Rm",4),
                                     mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                     let'
                                       (var_w("Ra",4),
                                        mop(Cast w4,
                                            ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                        let'
                                          (var_w("Rd",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           mb(call
                                                ("ArchVersion",
                                                 @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},
                                                 lu, prev_thy  ),
                                              close
                                                (var_n"v",
                                                 mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                                          close
                                                            (var_b"v",
                                                             mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                                       close
                                                         (var("v",@{typ "4 word \<times> bool"}),
                                                          call
                                                            ("Do",
                                                             @{typ
                                                             "'b state_scheme \<Rightarrow>
                                                              (bool \<times> 'b state_scheme)"},
                                                             var("v",@{typ "4 word \<times> bool"}),
                                                          @{theory}))),
                                                    close
                                                      (var_b"b",
                                                       ite(var_b"b",
                                                           mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                                      bop(Or,
                                                                          eq(var_w("Rn",4),lw(15,4)),
                                                                          bop(Or,
                                                                              eq(var_w("Rm",4),
                                                                                 lw(15,4)),
                                                                              eq(var_w("Ra",4),
                                                                                 lw(15,4))))),
                                                                  call
                                                                    ("DECODE_UNPREDICTABLE",
                                                                     @{typ
                                                                     "'b state_scheme \<Rightarrow>
                                                                      (unit \<times> 'b state_scheme)"},
                                                                     tp[var("mc",@{typ MachineCode}),
                                                                        ls
                                                                         "SignedMostSignificantMultiplySubtract"],
                                                                     @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                              close
                                                                (var_a HOLogic.unitT,
                                                                 mu(call
                                                                      ("instruction.Multiply",
                                                                       @{typ instruction},
                                                                       call
                                                                         ("Multiply.SignedMostSignificantMultiplySubtract",
                                                                          @{typ Multiply},
                                                                          tp[eq(mop(Cast w1,
                                                                                    ll[var_b"b'5"]),
                                                                                lw(1,1)),
                                                                             var_w("Rd",4),
                                                                             var_w("Rn",4),
                                                                             var_w("Rm",4),
                                                                             var_w("Ra",4)],
                                                                          @{theory ARM_Monadic} ),@{theory ARM_Monadic} ),qTy))),
                                                           call
                                                             ("Skip",
                                                              @{typ
                                                              "'b state_scheme \<Rightarrow>
                                                               (instruction \<times> 'b state_scheme)"},lu,
                                                              @{theory ARM_Monadic} ))))))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,var_b"b'25",
                                       bop(And,var_b"b'24",
                                           bop(And,var_b"b'23",
                                               bop(And,mop(Not,var_b"b'22"),
                                                   bop(And,mop(Not,var_b"b'21"),
                                                       bop(And,mop(Not,var_b"b'20"),
                                                           bop(And,mop(Not,var_b"b'7"),
                                                               bop(And,mop(Not,var_b"b'6"),
                                                                   bop(And,mop(Not,var_b"b'5"),
                                                                       var_b"b'4")))))))))),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                  let'
                                    (var_w("Rm",4),
                                     mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                     let'
                                       (var_w("Rd",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        mb(call
                                             ("ArchVersion",
                                              @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                               prev_thy ),
                                           close
                                             (var_n"v",
                                              mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                                       close
                                                         (var_b"v",
                                                          mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                                    close
                                                      (var("v",@{typ "4 word \<times> bool"}),
                                                       call
                                                         ("Do",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          var("v",@{typ "4 word \<times> bool"}),
                                                          @{theory} ))),
                                                 close
                                                   (var_b"b",
                                                    ite(var_b"b",
                                                        mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                                   bop(Or,
                                                                       eq(var_w("Rn",4),lw(15,4)),
                                                                       eq(var_w("Rm",4),lw(15,4)))),
                                                               call
                                                                 ("DECODE_UNPREDICTABLE",
                                                                  @{typ
                                                                  "'b state_scheme \<Rightarrow>
                                                                   (unit \<times> 'b state_scheme)"},
                                                                  tp[var("mc",@{typ MachineCode}),
                                                                     ls
                                                                      "UnsignedSumAbsoluteDifferences"],
                                                                  @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                           close
                                                             (var_a HOLogic.unitT,
                                                              mu(call
                                                                   ("instruction.SIMD",
                                                                    @{typ instruction},
                                                                    call
                                                                      ("SIMD.UnsignedSumAbsoluteDifferences",
                                                                       @{typ SIMD},
                                                                       tp[var_w("Rd",4),
                                                                          var_w("Rn",4),
                                                                          var_w("Rm",4),
                                                                          mop(Cast w4,
                                                                              ll[var_b"b'15",
                                                                                 var_b"b'14",
                                                                                 var_b"b'13",
                                                                                 var_b"b'12"])],
                                                                       @{theory ARM_Monadic} ),@{theory ARM_Monadic} ),qTy))),
                                                        call
                                                          ("Skip",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (instruction \<times> 'b state_scheme)"},lu,
                                                           @{theory ARM_Monadic} )))))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,var_b"b'25",
                                       bop(And,var_b"b'24",
                                           bop(And,var_b"b'23",
                                               bop(And,var_b"b'21",
                                                   bop(And,var_b"b'6",
                                                       bop(And,mop(Not,var_b"b'5"),var_b"b'4"))))))),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                  let'
                                    (var_w("Rd",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     mb(call
                                          ("ArchVersion",
                                           @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                            prev_thy  ),
                                        close
                                          (var_n"v",
                                           mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                                    close
                                                      (var_b"v",mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                                 close
                                                   (var("v",@{typ "4 word \<times> bool"}),
                                                    call
                                                      ("Do",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                       var("v",@{typ "4 word \<times> bool"}),
                                                     @{theory}))),
                                              close
                                                (var_b"b",
                                                 ite(var_b"b",
                                                     let'
                                                       (var_n"lsbit",
                                                        mop(Cast HOLogic.natT,
                                                            mop(Cast (Word_Lib.mk_wordT 5),
                                                                ll[var_b"b'11",var_b"b'10",
                                                                   var_b"b'9",var_b"b'8",var_b"b'7"])),
                                                        let'
                                                          (var_n"widthminus1",
                                                           mop(Cast HOLogic.natT,
                                                               mop(Cast (Word_Lib.mk_wordT 5),
                                                                   ll[var_b"b'20",var_b"b'19",
                                                                      var_b"b'18",var_b"b'17",
                                                                      var_b"b'16"])),
                                                           mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                                      bop(Or,
                                                                          eq(var_w("Rn",4),lw(15,4)),
                                                                          bop(Lt,ln 31,
                                                                              bop(Add,var_n"lsbit",
                                                                                  var_n"widthminus1")))),
                                                                  call
                                                                    ("DECODE_UNPREDICTABLE",
                                                                     @{typ
                                                                     "'b state_scheme \<Rightarrow>
                                                                      (unit \<times> 'b state_scheme)"},
                                                                     tp[var("mc",@{typ MachineCode}),
                                                                        ls"BitFieldExtract"],
                                                                     @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                              close
                                                                (var_a HOLogic.unitT,
                                                                 mu(call
                                                                      ("instruction.Media",
                                                                       @{typ instruction},
                                                                       call
                                                                         ("Media.BitFieldExtract",
                                                                          @{typ Media},
                                                                          tp[eq(mop(Cast w1,
                                                                                    ll[var_b"b'22"]),
                                                                                lw(1,1)),
                                                                             var_w("Rd",4),
                                                                             var_w("Rn",4),
                                                                             var_n"lsbit",
                                                                             var_n"widthminus1"],
                                                                          @{theory ARM_Monadic} ),@{theory ARM_Monadic} ),qTy))))),
                                                     call
                                                       ("Skip",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow>
                                                         (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} ))))))))),
                              (bop(And,mop(Not,var_b"b'27"),
                                   bop(And,var_b"b'25",
                                       bop(And,var_b"b'24",
                                           bop(And,var_b"b'23",
                                               bop(And,var_b"b'22",
                                                   bop(And,mop(Not,var_b"b'21"),
                                                       bop(And,mop(Not,var_b"b'6"),
                                                           bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                               let'
                                 (var_w("Rd",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  mb(call
                                       ("ArchVersion",
                                        @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                         prev_thy  ),
                                     close
                                       (var_n"v",
                                        mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                                 close
                                                   (var_b"v",mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                              close
                                                (var("v",@{typ "4 word \<times> bool"}),
                                                 call
                                                   ("Do",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                    var("v",@{typ "4 word \<times> bool"}),@{theory}))),
                                           close
                                             (var_b"b",
                                              ite(var_b"b",
                                                  let'
                                                    (var_n"lsbit",
                                                     mop(Cast HOLogic.natT,
                                                         mop(Cast (Word_Lib.mk_wordT 5),
                                                             ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                                var_b"b'8",var_b"b'7"])),
                                                     let'
                                                       (var_n"msbit",
                                                        mop(Cast HOLogic.natT,
                                                            mop(Cast (Word_Lib.mk_wordT 5),
                                                                ll[var_b"b'20",var_b"b'19",
                                                                   var_b"b'18",var_b"b'17",
                                                                   var_b"b'16"])),
                                                        mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                                   bop(Lt,var_n"msbit",var_n"lsbit")),
                                                               call
                                                                 ("DECODE_UNPREDICTABLE",
                                                                  @{typ
                                                                  "'b state_scheme \<Rightarrow>
                                                                   (unit \<times> 'b state_scheme)"},
                                                                  tp[var("mc",@{typ MachineCode}),
                                                                     ls"BitFieldClearOrInsert"],
                                                                  @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                           close
                                                             (var_a HOLogic.unitT,
                                                              mu(call
                                                                   ("instruction.Media",
                                                                    @{typ instruction},
                                                                    call
                                                                      ("Media.BitFieldClearOrInsert",
                                                                       @{typ Media},
                                                                       tp[var_w("Rd",4),
                                                                          mop(Cast w4,
                                                                              ll[var_b"b'3",
                                                                                 var_b"b'2",
                                                                                 var_b"b'1",
                                                                                 var_b"b'0"]),
                                                                          var_n"lsbit",var_n"msbit"],
                                                                       @{theory ARM_Monadic} ),@{theory ARM_Monadic} ),qTy))))),
                                                  call
                                                    ("Skip",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow>
                                                      (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} )))))))),
                              (bop(And,var_b"b'27",bop(And,var_b"b'25",var_b"b'24")),
                               mb(call
                                    ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                     tp[var_w("cond",4),lt],@{theory} ),
                                  close
                                    (var_b"b",
                                     ite(var_b"b",
                                         mu(call
                                              ("instruction.System",@{typ instruction},
                                               call
                                                 ("System.SupervisorCall",@{typ System},
                                                  mop(SE w32,
                                                      mop(Cast (Word_Lib.mk_wordT 24),
                                                          ll[var_b"b'23",var_b"b'22",var_b"b'21",
                                                             var_b"b'20",var_b"b'19",var_b"b'18",
                                                             var_b"b'17",var_b"b'16",var_b"b'15",
                                                             var_b"b'14",var_b"b'13",var_b"b'12",
                                                             var_b"b'11",var_b"b'10",var_b"b'9",
                                                             var_b"b'8",var_b"b'7",var_b"b'6",
                                                             var_b"b'5",var_b"b'4",var_b"b'3",
                                                             var_b"b'2",var_b"b'1",var_b"b'0"])),
                                                  @{theory ARM_Monadic} ),@{theory ARM_Monadic} ),qTy),
                                         call
                                           ("Skip",
                                            @{typ
                                            "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                                            @{theory ARM_Monadic} ))))),
                              (bop(And,var_b"b'27",
                                   bop(And,var_b"b'11",bop(And,mop(Not,var_b"b'10"),var_b"b'9"))),
                               mb(call
                                    ("DecodeVFP",
                                     @{typ
                                     "'b state_scheme \<Rightarrow>
                                      ((bool \<times> instruction) \<times> 'b state_scheme)"},var_w("w",32),
                                     @{theory ARM_Monadic} ),
                                  close
                                    (var("x",@{typ "bool \<times> instruction"}),
                                     cs(var("x",@{typ "bool \<times> instruction"}),
                                        [(tp[var_b"defined",var("i",@{typ instruction})],
                                          mb(call
                                               ("Do",
                                                @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                tp[var_w("cond",4),var_b"defined"],@{theory} ),
                                             close
                                               (var_b"b",
                                                ite(var_b"b",mu(var("i",@{typ instruction}),qTy),
                                                    call
                                                      ("Skip",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow>
                                                        (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} )))))],
                                        @{context}))))],
                             call
                               ("UndefinedARM",
                                @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                var_w("cond",4),@{theory ARM_Monadic} ))),
                        (var_b"b'27",
                         itb([(bop(And,mop(Not,var_b"b'25"),
                                   bop(And,var_b"b'22",mop(Not,var_b"b'20"))),
                               let'
                                 (var_w("registers",16),
                                  mop(Cast w16,
                                      ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                         var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                         var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                         var_b"b'1",var_b"b'0"]),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     let'
                                       (var_w("U",1),mop(Cast w1,ll[var_b"b'23"]),
                                        mb(call
                                             ("Do",
                                              @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                              tp[var_w("cond",4),lt],@{theory} ),
                                           close
                                             (var_b"b",
                                              ite(var_b"b",
                                                  mb(ite(bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                             bop(Lt,
                                                                 call
                                                                   ("BitCount",HOLogic.natT,
                                                                    var_w("registers",16),@{theory ARM_Monadic} ),
                                                                 ln 1)),
                                                         call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (unit \<times> 'b state_scheme)"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"StoreMultipleUserRegisters"],
                                                            @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                     close
                                                       (var_a HOLogic.unitT,
                                                        mu(call
                                                             ("instruction.Store",
                                                              @{typ instruction},
                                                              call
                                                                ("Store.StoreMultipleUserRegisters",
                                                                 @{typ Store},
                                                                 tp[eq(var_w("U",1),lw(1,1)),
                                                                    eq(mop(Cast w1,ll[var_b"b'24"]),
                                                                       var_w("U",1)),var_w("Rn",4),
                                                                    var_w("registers",16)],prev_thy ),
                                                              prev_thy ),qTy))),
                                                  call
                                                    ("Skip",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow>
                                                      (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} )))))))),
                              (bop(And,mop(Not,var_b"b'25"),
                                   bop(And,mop(Not,var_b"b'22"),mop(Not,var_b"b'20"))),
                               let'
                                 (var_w("registers",16),
                                  mop(Cast w16,
                                      ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                         var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                         var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                         var_b"b'1",var_b"b'0"]),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     mb(call
                                          ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                           tp[var_w("cond",4),lt],@{theory} ),
                                        close
                                          (var_b"b",
                                           ite(var_b"b",
                                               mb(ite(bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                          bop(Lt,
                                                              call
                                                                ("BitCount",HOLogic.natT,
                                                                 var_w("registers",16),@{theory ARM_Monadic} ),
                                                              ln 1)),
                                                      call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"StoreMultiple"],@{theory ARM_Monadic} ),mu(lu,qTy)),
                                                  close
                                                    (var_a HOLogic.unitT,
                                                     mu(call
                                                          ("instruction.Store",@{typ instruction},
                                                           call
                                                             ("Store.StoreMultiple",@{typ Store},
                                                              tp[eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                    lw(1,1)),
                                                                 eq(mop(Cast w1,ll[var_b"b'24"]),
                                                                    lw(1,1)),
                                                                 eq(mop(Cast w1,ll[var_b"b'21"]),
                                                                    lw(1,1)),var_w("Rn",4),
                                                                 var_w("registers",16)],prev_thy),
                                                           prev_thy ),qTy))),
                                               call
                                                 ("Skip",
                                                  @{typ
                                                  "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                  lu,@{theory ARM_Monadic} ))))))),
                              (bop(And,mop(Not,var_b"b'25"),
                                   bop(And,var_b"b'22",bop(And,var_b"b'20",mop(Not,var_b"b'15")))),
                               let'
                                 (var_w("registers",15),
                                  mop(Cast (Word_Lib.mk_wordT 15),
                                      ll[var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                         var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                         var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                         var_b"b'0"]),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     let'
                                       (var_w("U",1),mop(Cast w1,ll[var_b"b'23"]),
                                        mb(call
                                             ("Do",
                                              @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                              tp[var_w("cond",4),lt],@{theory} ),
                                           close
                                             (var_b"b",
                                              ite(var_b"b",
                                                  mb(ite(bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                             bop(Lt,
                                                                 call
                                                                   ("BitCount",HOLogic.natT,
                                                                    var_w("registers",15),@{theory ARM_Monadic} ),
                                                                 ln 1)),
                                                         call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (unit \<times> 'b state_scheme)"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"LoadMultipleUserRegisters"],
                                                            @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                     close
                                                       (var_a HOLogic.unitT,
                                                        mu(call
                                                             ("instruction.Load",@{typ instruction},
                                                              call
                                                                ("Load.LoadMultipleUserRegisters",
                                                                 @{typ Load},
                                                                 tp[eq(var_w("U",1),lw(1,1)),
                                                                    eq(mop(Cast w1,ll[var_b"b'24"]),
                                                                       var_w("U",1)),var_w("Rn",4),
                                                                    var_w("registers",15)], prev_thy ),
                                                               prev_thy  ),qTy))),
                                                  call
                                                    ("Skip",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow>
                                                      (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} )))))))),
                              (bop(And,mop(Not,var_b"b'25"),
                                   bop(And,var_b"b'22",bop(And,var_b"b'20",var_b"b'15"))),
                               let'
                                 (var_w("registers",15),
                                  mop(Cast (Word_Lib.mk_wordT 15),
                                      ll[var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                                         var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",
                                         var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",
                                         var_b"b'0"]),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     let'
                                       (var_w("U",1),mop(Cast w1,ll[var_b"b'23"]),
                                        mb(call
                                             ("Do",
                                              @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                              tp[var_w("cond",4),lt],@{theory} ),
                                           close
                                             (var_b"b",
                                              ite(var_b"b",
                                                  let'
                                                    (var_b"wback",
                                                     eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1)),
                                                     mb(itb([(eq(var_w("Rn",4),lw(15,4)),mu(lt,qTy)),
                                                             (var_b"wback",
                                                              ite(bop(Bit,var_w("registers",15),
                                                                      mop(Cast HOLogic.natT,
                                                                          var_w("Rn",4))),
                                                                  mb(call
                                                                       ("ArchVersion",
                                                                        @{typ
                                                                        "'b state_scheme \<Rightarrow>
                                                                         (nat \<times> 'b state_scheme)"},lu,
                                                                        prev_thy  ),
                                                                     close
                                                                       (var_n"v",
                                                                        mu(bop(Ge,var_n"v",ln 7),qTy))),
                                                                  mu(lf,qTy)))],mu(lf,qTy)),
                                                        close
                                                          (var_b"v",
                                                           mb(ite(var_b"v",
                                                                  call
                                                                    ("DECODE_UNPREDICTABLE",
                                                                     @{typ
                                                                     "'b state_scheme \<Rightarrow>
                                                                      (unit \<times> 'b state_scheme)"},
                                                                     tp[var("mc",@{typ MachineCode}),
                                                                        ls
                                                                         "LoadMultipleExceptionReturn"],
                                                                     @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                              close
                                                                (var_a HOLogic.unitT,
                                                                 mu(call
                                                                      ("instruction.Load",
                                                                       @{typ instruction},
                                                                       call
                                                                         ("Load.LoadMultipleExceptionReturn",
                                                                          @{typ Load},
                                                                          tp[eq(var_w("U",1),lw(1,1)),
                                                                             eq(mop(Cast w1,
                                                                                    ll[var_b"b'24"]),
                                                                                var_w("U",1)),
                                                                             var_b"wback",
                                                                             var_w("Rn",4),
                                                                             var_w("registers",15)],
                                                                         prev_thy ),prev_thy  ),qTy)))))),
                                                  call
                                                    ("Skip",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow>
                                                      (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} )))))))),
                              (bop(And,mop(Not,var_b"b'25"),
                                   bop(And,mop(Not,var_b"b'22"),var_b"b'20")),
                               let'
                                 (var_w("registers",16),
                                  mop(Cast w16,
                                      ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",
                                         var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                         var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                         var_b"b'1",var_b"b'0"]),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     mb(call
                                          ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                           tp[var_w("cond",4),lt],@{theory} ),
                                        close
                                          (var_b"b",
                                           ite(var_b"b",
                                               let'
                                                 (var_b"wback",
                                                  eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1)),
                                                  mb(itb([(eq(var_w("Rn",4),lw(15,4)),mu(lt,qTy)),
                                                          (bop(Lt,
                                                               call
                                                                 ("BitCount",HOLogic.natT,
                                                                  var_w("registers",16),@{theory ARM_Monadic} ),
                                                               ln 1),mu(lt,qTy)),
                                                          (var_b"wback",
                                                           ite(bop(Bit,var_w("registers",16),
                                                                   mop(Cast HOLogic.natT,
                                                                       var_w("Rn",4))),
                                                               mb(call
                                                                    ("ArchVersion",
                                                                     @{typ
                                                                     "'b state_scheme \<Rightarrow>
                                                                      (nat \<times> 'b state_scheme)"},lu,
                                                                     prev_thy  ),
                                                                  close
                                                                    (var_n"v",
                                                                     mu(bop(Ge,var_n"v",ln 7),qTy))),
                                                               mu(lf,qTy)))],mu(lf,qTy)),
                                                     close
                                                       (var_b"v",
                                                        mb(ite(var_b"v",
                                                               call
                                                                 ("DECODE_UNPREDICTABLE",
                                                                  @{typ
                                                                  "'b state_scheme \<Rightarrow>
                                                                   (unit \<times> 'b state_scheme)"},
                                                                  tp[var("mc",@{typ MachineCode}),
                                                                     ls"LoadMultiple"],@{theory ARM_Monadic} ),
                                                               mu(lu,qTy)),
                                                           close
                                                             (var_a HOLogic.unitT,
                                                              mu(call
                                                                   ("instruction.Load",
                                                                    @{typ instruction},
                                                                    call
                                                                      ("Load.LoadMultiple",
                                                                       @{typ Load},
                                                                       tp[eq(mop(Cast w1,
                                                                                 ll[var_b"b'23"]),
                                                                             lw(1,1)),
                                                                          eq(mop(Cast w1,
                                                                                 ll[var_b"b'24"]),
                                                                             lw(1,1)),var_b"wback",
                                                                          var_w("Rn",4),
                                                                          var_w("registers",16)],
                                                                       prev_thy  ),prev_thy  ),qTy)))))),
                                               call
                                                 ("Skip",
                                                  @{typ
                                                  "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                  lu,@{theory ARM_Monadic} ))))))),
                              (bop(And,var_b"b'25",mop(Not,var_b"b'24")),
                               mb(call
                                    ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                     tp[var_w("cond",4),lt],@{theory} ),
                                  close
                                    (var_b"b",
                                     ite(var_b"b",
                                         mu(call
                                              ("instruction.Branch",@{typ instruction},
                                               call
                                                 ("Branch.BranchTarget",@{typ Branch},
                                                  mop(SE w32,
                                                      cc[mop(Cast (Word_Lib.mk_wordT 24),
                                                             ll[var_b"b'23",var_b"b'22",var_b"b'21",
                                                                var_b"b'20",var_b"b'19",var_b"b'18",
                                                                var_b"b'17",var_b"b'16",var_b"b'15",
                                                                var_b"b'14",var_b"b'13",var_b"b'12",
                                                                var_b"b'11",var_b"b'10",var_b"b'9",
                                                                var_b"b'8",var_b"b'7",var_b"b'6",
                                                                var_b"b'5",var_b"b'4",var_b"b'3",
                                                                var_b"b'2",var_b"b'1",var_b"b'0"]),
                                                         lw(0,2)]),@{theory ARM_Monadic} ),@{theory ARM_Monadic} ),qTy),
                                         call
                                           ("Skip",
                                            @{typ
                                            "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                                            @{theory ARM_Monadic} ))))),
                              (bop(And,var_b"b'25",var_b"b'24"),
                               mb(call
                                    ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                     tp[var_w("cond",4),lt],@{theory} ),
                                  close
                                    (var_b"b",
                                     ite(var_b"b",
                                         mu(call
                                              ("instruction.Branch",@{typ instruction},
                                               call
                                                 ("Branch.BranchLinkExchangeImmediate",
                                                  @{typ Branch},
                                                  tp[lc("InstrSet_ARM","InstrSet",prev_thy ),
                                                     mop(SE w32,
                                                         cc[mop(Cast (Word_Lib.mk_wordT 24),
                                                                ll[var_b"b'23",var_b"b'22",
                                                                   var_b"b'21",var_b"b'20",
                                                                   var_b"b'19",var_b"b'18",
                                                                   var_b"b'17",var_b"b'16",
                                                                   var_b"b'15",var_b"b'14",
                                                                   var_b"b'13",var_b"b'12",
                                                                   var_b"b'11",var_b"b'10",
                                                                   var_b"b'9",var_b"b'8",var_b"b'7",
                                                                   var_b"b'6",var_b"b'5",var_b"b'4",
                                                                   var_b"b'3",var_b"b'2",var_b"b'1",
                                                                   var_b"b'0"]),lw(0,2)])],@{theory ARM_Monadic} ),
                                               @{theory ARM_Monadic} ),qTy),
                                         call
                                           ("Skip",
                                            @{typ
                                            "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                                            @{theory ARM_Monadic} )))))],
                             call
                               ("UndefinedARM",
                                @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                var_w("cond",4),@{theory ARM_Monadic} ))),
                        (var_b"b'25",
                         itb([(bop(And,var_b"b'24",
                                   bop(And,mop(Not,var_b"b'23"),
                                       bop(And,mop(Not,var_b"b'21"),mop(Not,var_b"b'20")))),
                               let'
                                 (var_w("Rd",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  mb(call
                                       ("HaveThumb2",
                                        @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                        @{theory ARM_Monadic} ),
                                     close
                                       (var_b"v",
                                        mb(mb(mu(tp[var_w("cond",4),var_b"v"],qTy),
                                              close
                                                (var("v",@{typ "4 word \<times> bool"}),
                                                 call
                                                   ("Do",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                    var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                           close
                                             (var_b"b",
                                              ite(var_b"b",
                                                  mb(ite(eq(var_w("Rd",4),lw(15,4)),
                                                         call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (unit \<times> 'b state_scheme)"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"MoveTopHalfword"],@{theory ARM_Monadic} ),
                                                         mu(lu,qTy)),
                                                     close
                                                       (var_a HOLogic.unitT,
                                                        mu(call
                                                             ("instruction.Data",@{typ instruction},
                                                              call
                                                                ("Data.MoveHalfword",@{typ Data},
                                                                 tp[eq(mop(Cast w1,ll[var_b"b'22"]),
                                                                       lw(1,1)),var_w("Rd",4),
                                                                    cc[mop(Cast w4,
                                                                           ll[var_b"b'19",
                                                                              var_b"b'18",
                                                                              var_b"b'17",
                                                                              var_b"b'16"]),
                                                                       mop(Cast
                                                                             (Word_Lib.mk_wordT 12),
                                                                           ll[var_b"b'11",
                                                                              var_b"b'10",
                                                                              var_b"b'9",var_b"b'8",
                                                                              var_b"b'7",var_b"b'6",
                                                                              var_b"b'5",var_b"b'4",
                                                                              var_b"b'3",var_b"b'2",
                                                                              var_b"b'1",var_b"b'0"])]],
                                                                 @{theory ARM_Monadic} ),@{theory ARM_Monadic} ),qTy))),
                                                  call
                                                    ("Skip",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow>
                                                      (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} )))))))),
                              (bop(And,var_b"b'24",
                                   bop(And,mop(Not,var_b"b'23"),
                                       bop(And,mop(Not,var_b"b'22"),
                                           bop(And,var_b"b'21",
                                               bop(And,mop(Not,var_b"b'20"),
                                                   bop(And,mop(Not,var_b"b'19"),
                                                       bop(And,mop(Not,var_b"b'18"),
                                                           bop(And,mop(Not,var_b"b'17"),
                                                               mop(Not,var_b"b'16"))))))))),
                               call
                                 ("DecodeHint",
                                  @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                  tp[var_w("cond",4),
                                     mop(Cast w8,
                                         ll[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",
                                            var_b"b'2",var_b"b'1",var_b"b'0"])],@{theory ARM_Monadic} )),
                              (bop(And,var_b"b'24",
                                   bop(And,mop(Not,var_b"b'23"),
                                       bop(And,var_b"b'21",mop(Not,var_b"b'20")))),
                               let'
                                 (var_w("mask",4),
                                  mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                  mb(call
                                       ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                        tp[var_w("cond",4),lt],@{theory} ),
                                     close
                                       (var_b"b",
                                        ite(var_b"b",
                                            mb(ite(eq(var_w("mask",4),lw(0,4)),
                                                   call
                                                     ("DECODE_UNPREDICTABLE",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                      tp[var("mc",@{typ MachineCode}),
                                                         ls"MoveToSpecialFromImmediate"],@{theory ARM_Monadic} ),
                                                   mu(lu,qTy)),
                                               close
                                                 (var_a HOLogic.unitT,
                                                  mb(call
                                                       ("ARMExpandImm",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow>
                                                         (32 word \<times> 'b state_scheme)"},
                                                        mop(Cast (Word_Lib.mk_wordT 12),
                                                            ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                               var_b"b'8",var_b"b'7",var_b"b'6",
                                                               var_b"b'5",var_b"b'4",var_b"b'3",
                                                               var_b"b'2",var_b"b'1",var_b"b'0"]),
                                                        @{theory ARM_Monadic} ),
                                                     close
                                                       (var_w("imm32",32),
                                                        mu(call
                                                             ("instruction.System",
                                                              @{typ instruction},
                                                              call
                                                                ("System.MoveToSpecialFromImmediate",
                                                                 @{typ System},
                                                                 tp[eq(mop(Cast w1,ll[var_b"b'22"]),
                                                                       lw(1,1)),var_w("imm32",32),
                                                                    var_w("mask",4)],@{theory ARM_Monadic} ),
                                                              @{theory ARM_Monadic} ),qTy))))),
                                            call
                                              ("Skip",
                                               @{typ
                                               "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                               lu,@{theory ARM_Monadic} ))))))],
                             let'
                               (var_w("imm12",12),
                                mop(Cast (Word_Lib.mk_wordT 12),
                                    ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
                                       var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
                                       var_b"b'1",var_b"b'0"]),
                                let'
                                  (var_w("Rd",4),
                                   mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                   let'
                                     (var_w("Rn",4),
                                      mop(Cast w4,
                                          ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                      let'
                                        (var_w("opc",4),
                                         mop(Cast w4,
                                             ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                                         mb(call
                                              ("Do",
                                               @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                               tp[var_w("cond",4),lt],@{theory} ),
                                            close
                                              (var_b"b",
                                               ite(var_b"b",
                                                   mu(let'
                                                        (var_b"setflags",
                                                         eq(mop(Cast w1,ll[var_b"b'20"]),lw(1,1)),
                                                         let'
                                                           (tp[var_b"b'3",var_b"b'2",var_b"b'1",
                                                               var_b"b'0"],
                                                            call
                                                              ("boolify'4",
                                                               @{typ
                                                               "bool \<times>
                                                                bool \<times> bool \<times> bool"},
                                                               var_w("opc",4),@{theory ARM_Monadic} ),
                                                            ite(var_b"b'3",
                                                                itb([(bop(And,var_b"b'2",var_b"b'0"),
                                                                      call
                                                                        ("instruction.Data",
                                                                         @{typ instruction},
                                                                         call
                                                                           ("Data.Move",@{typ Data},
                                                                            tp[var_b"setflags",
                                                                               mop(Cast
                                                                                     HOLogic.boolT,
                                                                                   mop(Cast w1,
                                                                                       ll[var_b"b'1"])),
                                                                               var_w("Rd",4),
                                                                               var_w("imm12",12)],
                                                                            @{theory ARM_Monadic} ),@{theory ARM_Monadic} )),
                                                                     (mop(Not,var_b"b'2"),
                                                                      call
                                                                        ("instruction.Data",
                                                                         @{typ instruction},
                                                                         call
                                                                           ("Data.TestCompareImmediate",
                                                                            @{typ Data},
                                                                            tp[mop(Cast
                                                                                     (Word_Lib.mk_wordT 2),
                                                                                   ll[var_b"b'1",
                                                                                      var_b"b'0"]),
                                                                               var_w("Rn",4),
                                                                               var_w("imm12",12)],
                                                                            @{theory ARM_Monadic} ),@{theory ARM_Monadic} ))],
                                                                    call
                                                                      ("instruction.Data",
                                                                       @{typ instruction},
                                                                       call
                                                                         ("Data.ArithLogicImmediate",
                                                                          @{typ Data},
                                                                          tp[var_w("opc",4),
                                                                             var_b"setflags",
                                                                             var_w("Rd",4),
                                                                             var_w("Rn",4),
                                                                             var_w("imm12",12)],
                                                                          @{theory ARM_Monadic} ),@{theory ARM_Monadic} )),
                                                                call
                                                                  ("instruction.Data",
                                                                   @{typ instruction},
                                                                   call
                                                                     ("Data.ArithLogicImmediate",
                                                                      @{typ Data},
                                                                      tp[var_w("opc",4),
                                                                         var_b"setflags",
                                                                         var_w("Rd",4),
                                                                         var_w("Rn",4),
                                                                         var_w("imm12",12)],
                                                                      @{theory ARM_Monadic} ),@{theory ARM_Monadic} )))),qTy),
                                                   call
                                                     ("Skip",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow>
                                                       (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} )))))))))),
                        (bop(And,var_b"b'24",
                             bop(And,mop(Not,var_b"b'23"),
                                 bop(And,mop(Not,var_b"b'21"),
                                     bop(And,mop(Not,var_b"b'20"),
                                         bop(And,var_b"b'9",
                                             bop(And,mop(Not,var_b"b'7"),
                                                 bop(And,mop(Not,var_b"b'6"),
                                                     bop(And,mop(Not,var_b"b'5"),mop(Not,var_b"b'4"))))))))),
                         let'
                           (var_w("Rd",4),
                            mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                            mb(call
                                 ("HaveVirtExt",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                  lu,@{theory ARM_Monadic} ),
                               close
                                 (var_b"v",
                                  mb(mb(mu(tp[var_w("cond",4),var_b"v"],qTy),
                                        close
                                          (var("v",@{typ "4 word \<times> bool"}),
                                           call
                                             ("Do",
                                              @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                              var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                     close
                                       (var_b"b",
                                        ite(var_b"b",
                                            mb(ite(eq(var_w("Rd",4),lw(15,4)),
                                                   call
                                                     ("DECODE_UNPREDICTABLE",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                      tp[var("mc",@{typ MachineCode}),
                                                         ls"MoveToRegisterFromBankedOrSpecial"],
                                                      @{theory ARM_Monadic} ),mu(lu,qTy)),
                                               close
                                                 (var_a HOLogic.unitT,
                                                  mu(call
                                                       ("instruction.System",@{typ instruction},
                                                        call
                                                          ("System.MoveToRegisterFromBankedOrSpecial",
                                                           @{typ System},
                                                           tp[eq(mop(Cast w1,ll[var_b"b'22"]),
                                                                 lw(1,1)),
                                                              cc[mop(Cast w1,ll[var_b"b'8"]),
                                                                 mop(Cast w4,
                                                                     ll[var_b"b'19",var_b"b'18",
                                                                        var_b"b'17",var_b"b'16"])],
                                                              var_w("Rd",4)],@{theory ARM_Monadic} ),@{theory ARM_Monadic} ),
                                                     qTy))),
                                            call
                                              ("Skip",
                                               @{typ
                                               "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                               lu,@{theory ARM_Monadic} )))))))),
                        (bop(And,var_b"b'24",
                             bop(And,mop(Not,var_b"b'23"),
                                 bop(And,mop(Not,var_b"b'21"),
                                     bop(And,mop(Not,var_b"b'20"),
                                         bop(And,mop(Not,var_b"b'9"),
                                             bop(And,mop(Not,var_b"b'7"),
                                                 bop(And,mop(Not,var_b"b'6"),
                                                     bop(And,mop(Not,var_b"b'5"),mop(Not,var_b"b'4"))))))))),
                         let'
                           (var_w("Rd",4),
                            mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                            mb(call
                                 ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                  tp[var_w("cond",4),lt],@{theory} ),
                               close
                                 (var_b"b",
                                  ite(var_b"b",
                                      mb(ite(eq(var_w("Rd",4),lw(15,4)),
                                             call
                                               ("DECODE_UNPREDICTABLE",
                                                @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                tp[var("mc",@{typ MachineCode}),
                                                   ls"MoveToRegisterFromSpecial"],@{theory ARM_Monadic} ),
                                             mu(lu,qTy)),
                                         close
                                           (var_a HOLogic.unitT,
                                            mu(call
                                                 ("instruction.System",@{typ instruction},
                                                  call
                                                    ("System.MoveToRegisterFromSpecial",
                                                     @{typ System},
                                                     tp[eq(mop(Cast w1,ll[var_b"b'22"]),lw(1,1)),
                                                        var_w("Rd",4)],@{theory ARM_Monadic} ),@{theory ARM_Monadic} ),qTy))),
                                      call
                                        ("Skip",
                                         @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                         lu,@{theory ARM_Monadic} )))))),
                        (bop(And,var_b"b'24",
                             bop(And,mop(Not,var_b"b'23"),
                                 bop(And,var_b"b'21",
                                     bop(And,mop(Not,var_b"b'20"),
                                         bop(And,var_b"b'9",
                                             bop(And,mop(Not,var_b"b'7"),
                                                 bop(And,mop(Not,var_b"b'6"),
                                                     bop(And,mop(Not,var_b"b'5"),mop(Not,var_b"b'4"))))))))),
                         let'
                           (var_w("Rn",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            mb(call
                                 ("HaveVirtExt",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                  lu,@{theory ARM_Monadic} ),
                               close
                                 (var_b"v",
                                  mb(mb(mu(tp[var_w("cond",4),var_b"v"],qTy),
                                        close
                                          (var("v",@{typ "4 word \<times> bool"}),
                                           call
                                             ("Do",
                                              @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                              var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                     close
                                       (var_b"b",
                                        ite(var_b"b",
                                            mb(ite(bop(In,var_w("Rn",4),sl[lw(13,4),lw(15,4)]),
                                                   call
                                                     ("DECODE_UNPREDICTABLE",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                      tp[var("mc",@{typ MachineCode}),
                                                         ls"MoveToBankedOrSpecialRegister"],
                                                      @{theory ARM_Monadic} ),mu(lu,qTy)),
                                               close
                                                 (var_a HOLogic.unitT,
                                                  mu(call
                                                       ("instruction.System",@{typ instruction},
                                                        call
                                                          ("System.MoveToBankedOrSpecialRegister",
                                                           @{typ System},
                                                           tp[eq(mop(Cast w1,ll[var_b"b'22"]),
                                                                 lw(1,1)),
                                                              cc[mop(Cast w1,ll[var_b"b'8"]),
                                                                 mop(Cast w4,
                                                                     ll[var_b"b'19",var_b"b'18",
                                                                        var_b"b'17",var_b"b'16"])],
                                                              var_w("Rn",4)],@{theory ARM_Monadic} ),@{theory ARM_Monadic} ),
                                                     qTy))),
                                            call
                                              ("Skip",
                                               @{typ
                                               "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                               lu,@{theory ARM_Monadic} )))))))),
                        (bop(And,var_b"b'24",
                             bop(And,mop(Not,var_b"b'23"),
                                 bop(And,var_b"b'21",
                                     bop(And,mop(Not,var_b"b'20"),
                                         bop(And,mop(Not,var_b"b'9"),
                                             bop(And,mop(Not,var_b"b'7"),
                                                 bop(And,mop(Not,var_b"b'6"),
                                                     bop(And,mop(Not,var_b"b'5"),mop(Not,var_b"b'4"))))))))),
                         let'
                           (var_w("Rn",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("mask",4),
                               mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                               mb(call
                                    ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                     tp[var_w("cond",4),lt],@{theory } ),
                                  close
                                    (var_b"b",
                                     ite(var_b"b",
                                         mb(ite(bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                    eq(var_w("mask",4),lw(0,4))),
                                                call
                                                  ("DECODE_UNPREDICTABLE",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                   tp[var("mc",@{typ MachineCode}),
                                                      ls"MoveToSpecialFromRegister"],@{theory ARM_Monadic} ),
                                                mu(lu,qTy)),
                                            close
                                              (var_a HOLogic.unitT,
                                               mu(call
                                                    ("instruction.System",@{typ instruction},
                                                     call
                                                       ("System.MoveToSpecialFromRegister",
                                                        @{typ System},
                                                        tp[eq(mop(Cast w1,ll[var_b"b'22"]),lw(1,1)),
                                                           var_w("Rn",4),var_w("mask",4)],@{theory ARM_Monadic} ),
                                                     @{theory ARM_Monadic} ),qTy))),
                                         call
                                           ("Skip",
                                            @{typ
                                            "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                                            @{theory ARM_Monadic} ))))))),
                        (bop(And,var_b"b'24",
                             bop(And,mop(Not,var_b"b'23"),
                                 bop(And,mop(Not,var_b"b'22"),
                                     bop(And,var_b"b'21",
                                         bop(And,mop(Not,var_b"b'20"),
                                             bop(And,mop(Not,var_b"b'7"),
                                                 bop(And,mop(Not,var_b"b'6"),
                                                     bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                         mb(mr(close
                                 (var("s",qTy),
                                  call
                                    ("state.Architecture",@{typ Architecture},var("s",qTy),prev_thy  ))),
                            close
                              (var("v",@{typ Architecture}),
                               mb(mb(mb(mb(mu(eq(var("v",@{typ Architecture}),
                                                 lc("ARMv4","Architecture",prev_thy )),qTy),
                                           close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                        close(var_b"v",mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                     close
                                       (var("v",@{typ "4 word \<times> bool"}),
                                        call
                                          ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                           var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                  close
                                    (var_b"b",
                                     ite(var_b"b",
                                         mu(call
                                              ("instruction.Branch",@{typ instruction},
                                               call
                                                 ("Branch.BranchExchange",@{typ Branch},
                                                  mop(Cast w4,
                                                      ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                                  prev_thy  ),prev_thy  ),qTy),
                                         call
                                           ("Skip",
                                            @{typ
                                            "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                                            @{theory ARM_Monadic} ))))))),
                        (bop(And,var_b"b'24",
                             bop(And,mop(Not,var_b"b'23"),
                                 bop(And,var_b"b'22",
                                     bop(And,var_b"b'21",
                                         bop(And,mop(Not,var_b"b'20"),
                                             bop(And,mop(Not,var_b"b'7"),
                                                 bop(And,mop(Not,var_b"b'6"),
                                                     bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                         let'
                           (var_w("Rm",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("Rd",4),
                               mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                               mb(call
                                    ("ArchVersion",
                                     @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu, prev_thy  ),
                                  close
                                    (var_n"v",
                                     mb(mb(mb(mu(bop(Ge,var_n"v",ln 5),qTy),
                                              close(var_b"v",mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                           close
                                             (var("v",@{typ "4 word \<times> bool"}),
                                              call
                                                ("Do",
                                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                 var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                        close
                                          (var_b"b",
                                           ite(var_b"b",
                                               mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                          eq(var_w("Rm",4),lw(15,4))),
                                                      call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"CountLeadingZeroes"],@{theory ARM_Monadic} ),
                                                      mu(lu,qTy)),
                                                  close
                                                    (var_a HOLogic.unitT,
                                                     mu(call
                                                          ("instruction.Data",@{typ instruction},
                                                           call
                                                             ("Data.CountLeadingZeroes",@{typ Data},
                                                              tp[var_w("Rd",4),var_w("Rm",4)],
                                                              @{theory ARM_Monadic} ),@{theory ARM_Monadic} ),qTy))),
                                               call
                                                 ("Skip",
                                                  @{typ
                                                  "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                  lu,@{theory ARM_Monadic} ))))))))),
                        (bop(And,var_b"b'24",
                             bop(And,mop(Not,var_b"b'23"),
                                 bop(And,mop(Not,var_b"b'22"),
                                     bop(And,var_b"b'21",
                                         bop(And,mop(Not,var_b"b'20"),
                                             bop(And,mop(Not,var_b"b'7"),
                                                 bop(And,mop(Not,var_b"b'6"),
                                                     bop(And,var_b"b'5",var_b"b'4")))))))),
                         let'
                           (var_w("Rm",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            mb(call
                                 ("ArchVersion",@{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},
                                  lu, prev_thy  ),
                               close
                                 (var_n"v",
                                  mb(mb(mb(mu(bop(Ge,var_n"v",ln 5),qTy),
                                           close(var_b"v",mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                        close
                                          (var("v",@{typ "4 word \<times> bool"}),
                                           call
                                             ("Do",
                                              @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                              var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                     close
                                       (var_b"b",
                                        ite(var_b"b",
                                            mb(ite(eq(var_w("Rm",4),lw(15,4)),
                                                   call
                                                     ("DECODE_UNPREDICTABLE",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                      tp[var("mc",@{typ MachineCode}),
                                                         ls"BranchLinkExchangeRegister"],@{theory ARM_Monadic} ),
                                                   mu(lu,qTy)),
                                               close
                                                 (var_a HOLogic.unitT,
                                                  mu(call
                                                       ("instruction.Branch",@{typ instruction},
                                                        call
                                                          ("Branch.BranchLinkExchangeRegister",
                                                           @{typ Branch},var_w("Rm",4),@{theory ARM_Monadic} ),
                                                        @{theory ARM_Monadic} ),qTy))),
                                            call
                                              ("Skip",
                                               @{typ
                                               "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                               lu,@{theory ARM_Monadic} )))))))),
                        (bop(And,var_b"b'24",
                             bop(And,mop(Not,var_b"b'23"),
                                 bop(And,mop(Not,var_b"b'20"),
                                     bop(And,mop(Not,var_b"b'7"),
                                         bop(And,var_b"b'6",bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))),
                         let'
                           (var_w("Rm",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("Rd",4),
                               mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                  mb(call
                                       ("HaveDSPSupport",
                                        @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                        @{theory ARM_Monadic} ),
                                     close
                                       (var_b"v",
                                        mb(mb(mu(tp[var_w("cond",4),var_b"v"],qTy),
                                              close
                                                (var("v",@{typ "4 word \<times> bool"}),
                                                 call
                                                   ("Do",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                    var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                           close
                                             (var_b"b",
                                              ite(var_b"b",
                                                  mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                             bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                 eq(var_w("Rm",4),lw(15,4)))),
                                                         call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (unit \<times> 'b state_scheme)"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"SaturatingAddSubtract"],@{theory ARM_Monadic} ),
                                                         mu(lu,qTy)),
                                                     close
                                                       (var_a HOLogic.unitT,
                                                        mu(call
                                                             ("instruction.Media",
                                                              @{typ instruction},
                                                              call
                                                                ("Media.SaturatingAddSubtract",
                                                                 @{typ Media},
                                                                 tp[mop(Cast (Word_Lib.mk_wordT 2),
                                                                        ll[var_b"b'22",var_b"b'21"]),
                                                                    var_w("Rd",4),var_w("Rm",4),
                                                                    var_w("Rn",4)],@{theory ARM_Monadic} ),
                                                              @{theory ARM_Monadic} ),qTy))),
                                                  call
                                                    ("Skip",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow>
                                                      (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} )))))))))),
                        (bop(And,var_b"b'24",
                             bop(And,mop(Not,var_b"b'23"),
                                 bop(And,mop(Not,var_b"b'22"),
                                     bop(And,var_b"b'21",
                                         bop(And,mop(Not,var_b"b'20"),
                                             bop(And,mop(Not,var_b"b'7"),
                                                 bop(And,var_b"b'6",bop(And,var_b"b'5",var_b"b'4")))))))),
                         mb(call
                              ("ArchVersion",@{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                prev_thy  ),
                            close
                              (var_n"v",
                               mb(mu(bop(Ge,var_n"v",ln 5),qTy),
                                  close
                                    (var_b"b",
                                     ite(var_b"b",
                                         mb(ite(mop(Not,eq(var_w("cond",4),lw(14,4))),
                                                call
                                                  ("DECODE_UNPREDICTABLE",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                   tp[var("mc",@{typ MachineCode}),ls"Breakpoint"],
                                                   @{theory ARM_Monadic} ),mu(lu,qTy)),
                                            close
                                              (var_a HOLogic.unitT,
                                               mb(mw(close
                                                       (var("s",qTy),
                                                        rupd
                                                          ("state.CurrentCondition",
                                                           tp[var("s",qTy),var_w("cond",4)],
                                                           prev_thy  ))),
                                                  close
                                                    (var_a HOLogic.unitT,
                                                     mu(call
                                                          ("instruction.Hint",@{typ instruction},
                                                           call
                                                             ("Hint.Breakpoint",@{typ Hint},
                                                              mop(Cast w32,
                                                                  cc[mop(Cast (Word_Lib.mk_wordT 12),
                                                                         ll[var_b"b'19",var_b"b'18",
                                                                            var_b"b'17",var_b"b'16",
                                                                            var_b"b'15",var_b"b'14",
                                                                            var_b"b'13",var_b"b'12",
                                                                            var_b"b'11",var_b"b'10",
                                                                            var_b"b'9",var_b"b'8"]),
                                                                     mop(Cast w4,
                                                                         ll[var_b"b'3",var_b"b'2",
                                                                            var_b"b'1",var_b"b'0"])]),
                                                              @{theory ARM_Monadic} ),@{theory ARM_Monadic} ),qTy))))),
                                         mb(call
                                              ("Do",
                                               @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                               tp[var_w("cond",4),lf],@{theory } ),
                                            close
                                              (var_b"b",
                                               mu(ite(var_b"b",
                                                      call
                                                        ("instruction.Undefined",@{typ instruction},
                                                         lw(0,32),prev_thy),
                                                      Term.Const
                                                        (@{const_name "NoOperation"},
                                                         @{typ instruction})),qTy))))))))),
                        (bop(And,var_b"b'24",
                             bop(And,mop(Not,var_b"b'23"),
                                 bop(And,var_b"b'22",
                                     bop(And,mop(Not,var_b"b'21"),
                                         bop(And,mop(Not,var_b"b'20"),
                                             bop(And,mop(Not,var_b"b'7"),
                                                 bop(And,var_b"b'6",bop(And,var_b"b'5",var_b"b'4")))))))),
                         mb(call
                              ("HaveVirtExt",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                               @{theory ARM_Monadic} ),
                            close
                              (var_b"v",
                               mb(mb(mu(tp[var_w("cond",4),var_b"v"],qTy),
                                     close
                                       (var("v",@{typ "4 word \<times> bool"}),
                                        call
                                          ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                           var("v",@{typ "4 word \<times> bool"}),@{theory ARM_Monadic} ))),
                                  close
                                    (var_b"b",
                                     ite(var_b"b",
                                         mb(ite(mop(Not,eq(var_w("cond",4),lw(14,4))),
                                                call
                                                  ("DECODE_UNPREDICTABLE",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                   tp[var("mc",@{typ MachineCode}),
                                                      ls"HypervisorCall"],@{theory ARM_Monadic} ),mu(lu,qTy)),
                                            close
                                              (var_a HOLogic.unitT,
                                               mu(call
                                                    ("instruction.System",@{typ instruction},
                                                     call
                                                       ("System.HypervisorCall",@{typ System},
                                                        cc[mop(Cast (Word_Lib.mk_wordT 12),
                                                               ll[var_b"b'19",var_b"b'18",
                                                                  var_b"b'17",var_b"b'16",
                                                                  var_b"b'15",var_b"b'14",
                                                                  var_b"b'13",var_b"b'12",
                                                                  var_b"b'11",var_b"b'10",
                                                                  var_b"b'9",var_b"b'8"]),
                                                           mop(Cast w4,
                                                               ll[var_b"b'3",var_b"b'2",var_b"b'1",
                                                                  var_b"b'0"])],@{theory ARM_Monadic} ),@{theory ARM_Monadic} ),
                                                  qTy))),
                                         call
                                           ("Skip",
                                            @{typ
                                            "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                                            @{theory ARM_Monadic} ))))))),
                        (bop(And,var_b"b'24",
                             bop(And,mop(Not,var_b"b'23"),
                                 bop(And,var_b"b'22",
                                     bop(And,var_b"b'21",
                                         bop(And,mop(Not,var_b"b'20"),
                                             bop(And,mop(Not,var_b"b'7"),
                                                 bop(And,var_b"b'6",bop(And,var_b"b'5",var_b"b'4")))))))),
                         mb(call
                              ("HaveSecurityExt",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                               lu,@{theory ARM_Monadic}),
                            close
                              (var_b"v",
                               mb(mb(mu(tp[var_w("cond",4),var_b"v"],qTy),
                                     close
                                       (var("v",@{typ "4 word \<times> bool"}),
                                        call
                                          ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                           var("v",@{typ "4 word \<times> bool"}),@{theory ARM_Monadic} ))),
                                  close
                                    (var_b"b",
                                     ite(var_b"b",
                                         mu(call
                                              ("instruction.System",@{typ instruction},
                                               call
                                                 ("System.SecureMonitorCall",@{typ System},
                                                  mop(Cast w4,
                                                      ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                                  @{theory ARM_Monadic} ),@{theory ARM_Monadic} ),qTy),
                                         call
                                           ("Skip",
                                            @{typ
                                            "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                                            @{theory ARM_Monadic} ))))))),
                        (bop(And,var_b"b'24",
                             bop(And,mop(Not,var_b"b'23"),
                                 bop(And,mop(Not,var_b"b'22"),
                                     bop(And,mop(Not,var_b"b'21"),
                                         bop(And,mop(Not,var_b"b'20"),
                                             bop(And,var_b"b'7",mop(Not,var_b"b'4"))))))),
                         let'
                           (var_w("Rn",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("Rm",4),
                               mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                               let'
                                 (var_w("Ra",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("Rd",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     mb(call
                                          ("HaveDSPSupport",
                                           @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                           @{theory ARM_Monadic} ),
                                        close
                                          (var_b"v",
                                           mb(mb(mu(tp[var_w("cond",4),var_b"v"],qTy),
                                                 close
                                                   (var("v",@{typ "4 word \<times> bool"}),
                                                    call
                                                      ("Do",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                       var("v",@{typ "4 word \<times> bool"}),
                                                       @{theory ARM_Monadic} ))),
                                              close
                                                (var_b"b",
                                                 ite(var_b"b",
                                                     mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                                bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                    bop(Or,
                                                                        eq(var_w("Rm",4),lw(15,4)),
                                                                        eq(var_w("Ra",4),lw(15,4))))),
                                                            call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ
                                                               "'b state_scheme \<Rightarrow>
                                                                (unit \<times> 'b state_scheme)"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"Signed16Multiply32Accumulate"],
                                                               @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                        close
                                                          (var_a HOLogic.unitT,
                                                           mu(call
                                                                ("instruction.Multiply",
                                                                 @{typ instruction},
                                                                 call
                                                                   ("Multiply.Signed16Multiply32Accumulate",
                                                                    @{typ Multiply},
                                                                    tp[eq(mop(Cast w1,ll[var_b"b'6"]),
                                                                          lw(1,1)),
                                                                       eq(mop(Cast w1,ll[var_b"b'5"]),
                                                                          lw(1,1)),var_w("Rd",4),
                                                                       var_w("Rn",4),var_w("Rm",4),
                                                                       var_w("Ra",4)],@{theory ARM_Monadic} ),
                                                                 @{theory ARM_Monadic} ),qTy))),
                                                     call
                                                       ("Skip",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow>
                                                         (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} ))))))))))),
                        (bop(And,var_b"b'24",
                             bop(And,mop(Not,var_b"b'23"),
                                 bop(And,mop(Not,var_b"b'22"),
                                     bop(And,var_b"b'21",
                                         bop(And,mop(Not,var_b"b'20"),
                                             bop(And,var_b"b'7",
                                                 bop(And,mop(Not,var_b"b'5"),mop(Not,var_b"b'4")))))))),
                         let'
                           (var_w("Rn",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("Rm",4),
                               mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                               let'
                                 (var_w("Ra",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("Rd",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     mb(call
                                          ("HaveDSPSupport",
                                           @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                           @{theory ARM_Monadic} ),
                                        close
                                          (var_b"v",
                                           mb(mb(mu(tp[var_w("cond",4),var_b"v"],qTy),
                                                 close
                                                   (var("v",@{typ "4 word \<times> bool"}),
                                                    call
                                                      ("Do",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                       var("v",@{typ "4 word \<times> bool"}),
                                                       @{theory ARM_Monadic} ))),
                                              close
                                                (var_b"b",
                                                 ite(var_b"b",
                                                     mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                                bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                    bop(Or,
                                                                        eq(var_w("Rm",4),lw(15,4)),
                                                                        eq(var_w("Ra",4),lw(15,4))))),
                                                            call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ
                                                               "'b state_scheme \<Rightarrow>
                                                                (unit \<times> 'b state_scheme)"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls
                                                                   "Signed16x32Multiply32Accumulate"],
                                                               @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                        close
                                                          (var_a HOLogic.unitT,
                                                           mu(call
                                                                ("instruction.Multiply",
                                                                 @{typ instruction},
                                                                 call
                                                                   ("Multiply.Signed16x32Multiply32Accumulate",
                                                                    @{typ Multiply},
                                                                    tp[eq(mop(Cast w1,ll[var_b"b'6"]),
                                                                          lw(1,1)),var_w("Rd",4),
                                                                       var_w("Rn",4),var_w("Rm",4),
                                                                       var_w("Ra",4)],@{theory ARM_Monadic} ),
                                                                 @{theory ARM_Monadic} ),qTy))),
                                                     call
                                                       ("Skip",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow>
                                                         (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} ))))))))))),
                        (bop(And,var_b"b'24",
                             bop(And,mop(Not,var_b"b'23"),
                                 bop(And,mop(Not,var_b"b'22"),
                                     bop(And,var_b"b'21",
                                         bop(And,mop(Not,var_b"b'20"),
                                             bop(And,var_b"b'7",
                                                 bop(And,var_b"b'5",mop(Not,var_b"b'4")))))))),
                         let'
                           (var_w("Rn",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("Rm",4),
                               mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                               let'
                                 (var_w("Rd",4),
                                  mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                  mb(call
                                       ("HaveDSPSupport",
                                        @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                        @{theory ARM_Monadic} ),
                                     close
                                       (var_b"v",
                                        mb(mb(mu(tp[var_w("cond",4),var_b"v"],qTy),
                                              close
                                                (var("v",@{typ "4 word \<times> bool"}),
                                                 call
                                                   ("Do",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                    var("v",@{typ "4 word \<times> bool"}),@{theory ARM_Monadic} ))),
                                           close
                                             (var_b"b",
                                              ite(var_b"b",
                                                  mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                             bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                 eq(var_w("Rm",4),lw(15,4)))),
                                                         call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (unit \<times> 'b state_scheme)"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"Signed16x32Multiply32Result"],
                                                            @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                     close
                                                       (var_a HOLogic.unitT,
                                                        mu(call
                                                             ("instruction.Multiply",
                                                              @{typ instruction},
                                                              call
                                                                ("Multiply.Signed16x32Multiply32Result",
                                                                 @{typ Multiply},
                                                                 tp[eq(mop(Cast w1,ll[var_b"b'6"]),
                                                                       lw(1,1)),var_w("Rd",4),
                                                                    var_w("Rn",4),var_w("Rm",4)],
                                                                 @{theory ARM_Monadic} ),@{theory ARM_Monadic} ),qTy))),
                                                  call
                                                    ("Skip",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow>
                                                      (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} )))))))))),
                        (bop(And,var_b"b'24",
                             bop(And,mop(Not,var_b"b'23"),
                                 bop(And,var_b"b'22",
                                     bop(And,mop(Not,var_b"b'21"),
                                         bop(And,mop(Not,var_b"b'20"),
                                             bop(And,var_b"b'7",mop(Not,var_b"b'4"))))))),
                         let'
                           (var_w("Rn",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("Rm",4),
                               mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                               let'
                                 (var_w("RdLo",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("RdHi",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     mb(call
                                          ("HaveDSPSupport",
                                           @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                           @{theory ARM_Monadic} ),
                                        close
                                          (var_b"v",
                                           mb(mb(mu(tp[var_w("cond",4),var_b"v"],qTy),
                                                 close
                                                   (var("v",@{typ "4 word \<times> bool"}),
                                                    call
                                                      ("Do",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                       var("v",@{typ "4 word \<times> bool"}),
                                                       @{theory ARM_Monadic} ))),
                                              close
                                                (var_b"b",
                                                 ite(var_b"b",
                                                     mb(ite(bop(Or,eq(var_w("RdLo",4),lw(15,4)),
                                                                bop(Or,eq(var_w("RdHi",4),lw(15,4)),
                                                                    bop(Or,
                                                                        eq(var_w("Rn",4),lw(15,4)),
                                                                        eq(var_w("Rm",4),lw(15,4))))),
                                                            call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ
                                                               "'b state_scheme \<Rightarrow>
                                                                (unit \<times> 'b state_scheme)"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"Signed16Multiply64Accumulate"],
                                                               @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                        close
                                                          (var_a HOLogic.unitT,
                                                           mu(call
                                                                ("instruction.Multiply",
                                                                 @{typ instruction},
                                                                 call
                                                                   ("Multiply.Signed16Multiply64Accumulate",
                                                                    @{typ Multiply},
                                                                    tp[eq(mop(Cast w1,ll[var_b"b'6"]),
                                                                          lw(1,1)),
                                                                       eq(mop(Cast w1,ll[var_b"b'5"]),
                                                                          lw(1,1)),var_w("RdHi",4),
                                                                       var_w("RdLo",4),
                                                                       var_w("Rn",4),var_w("Rm",4)],
                                                                    @{theory ARM_Monadic} ),@{theory ARM_Monadic} ),qTy))),
                                                     call
                                                       ("Skip",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow>
                                                         (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} ))))))))))),
                        (bop(And,var_b"b'24",
                             bop(And,mop(Not,var_b"b'23"),
                                 bop(And,var_b"b'22",
                                     bop(And,var_b"b'21",
                                         bop(And,mop(Not,var_b"b'20"),
                                             bop(And,var_b"b'7",mop(Not,var_b"b'4"))))))),
                         let'
                           (var_w("Rn",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("Rm",4),
                               mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                               let'
                                 (var_w("Rd",4),
                                  mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                  mb(call
                                       ("HaveDSPSupport",
                                        @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                        @{theory ARM_Monadic} ),
                                     close
                                       (var_b"v",
                                        mb(mb(mu(tp[var_w("cond",4),var_b"v"],qTy),
                                              close
                                                (var("v",@{typ "4 word \<times> bool"}),
                                                 call
                                                   ("Do",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                    var("v",@{typ "4 word \<times> bool"}),@{theory ARM_Monadic} ))),
                                           close
                                             (var_b"b",
                                              ite(var_b"b",
                                                  mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                             bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                 eq(var_w("Rm",4),lw(15,4)))),
                                                         call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (unit \<times> 'b state_scheme)"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"Signed16Multiply32Result"],
                                                            @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                     close
                                                       (var_a HOLogic.unitT,
                                                        mu(call
                                                             ("instruction.Multiply",
                                                              @{typ instruction},
                                                              call
                                                                ("Multiply.Signed16Multiply32Result",
                                                                 @{typ Multiply},
                                                                 tp[eq(mop(Cast w1,ll[var_b"b'6"]),
                                                                       lw(1,1)),
                                                                    eq(mop(Cast w1,ll[var_b"b'5"]),
                                                                       lw(1,1)),var_w("Rd",4),
                                                                    var_w("Rn",4),var_w("Rm",4)],
                                                                 @{theory ARM_Monadic} ),@{theory ARM_Monadic} ),qTy))),
                                                  call
                                                    ("Skip",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow>
                                                      (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} )))))))))),
                        (bop(And,var_b"b'24",
                             bop(And,mop(Not,var_b"b'23"),
                                 bop(And,var_b"b'22",
                                     bop(And,var_b"b'21",
                                         bop(And,mop(Not,var_b"b'20"),
                                             bop(And,mop(Not,var_b"b'19"),
                                                 bop(And,mop(Not,var_b"b'18"),
                                                     bop(And,mop(Not,var_b"b'17"),
                                                         bop(And,mop(Not,var_b"b'16"),
                                                             bop(And,mop(Not,var_b"b'15"),
                                                                 bop(And,mop(Not,var_b"b'14"),
                                                                     bop(And,mop(Not,var_b"b'13"),
                                                                         bop(And,
                                                                             mop(Not,var_b"b'12"),
                                                                             bop(And,
                                                                                 mop(Not,var_b"b'11"),
                                                                                 bop(And,
                                                                                     mop(Not,
                                                                                         var_b"b'10"),
                                                                                     bop(And,
                                                                                         mop(Not,
                                                                                             var_b"b'9"),
                                                                                         bop(And,
                                                                                             mop(Not,
                                                                                                 var_b"b'8"),
                                                                                             bop(And,
                                                                                                 mop(Not,
                                                                                                     var_b"b'7"),
                                                                                                 bop(And,
                                                                                                     var_b"b'6",
                                                                                                     bop(And,
                                                                                                         var_b"b'5",
                                                                                                         bop(And,
                                                                                                             mop(Not,
                                                                                                                 var_b"b'4"),
                                                                                                             bop(And,
                                                                                                                 var_b"b'3",
                                                                                                                 bop(And,
                                                                                                                     var_b"b'2",
                                                                                                                     bop(And,
                                                                                                                         var_b"b'1",
                                                                                                                         mop(Not,
                                                                                                                             var_b"b'0"))))))))))))))))))))))))),
                         mb(call
                              ("HaveVirtExt",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                               @{theory ARM_Monadic} ),
                            close
                              (var_b"v",
                               mb(mb(mu(tp[var_w("cond",4),var_b"v"],qTy),
                                     close
                                       (var("v",@{typ "4 word \<times> bool"}),
                                        call
                                          ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                           var("v",@{typ "4 word \<times> bool"}),@{theory ARM_Monadic} ))),
                                  close
                                    (var_b"b",
                                     ite(var_b"b",
                                         mu(call
                                              ("instruction.System",@{typ instruction},
                                               Term.Const
                                                 (@{const_name "ExceptionReturn"},@{typ System}),
                                               @{theory ARM_Monadic} ),qTy),
                                         call
                                           ("Skip",
                                            @{typ
                                            "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                                            @{theory ARM_Monadic} ))))))),
                        (bop(And,var_b"b'24",
                             bop(And,mop(Not,var_b"b'23"),
                                 bop(And,mop(Not,var_b"b'20"),mop(Not,var_b"b'7")))),
                         mu(call("instruction.Undefined",@{typ instruction},lw(0,32),prev_thy ),qTy)),
                        (mop(Not,var_b"b'4"),
                         let'
                           (var_w("Rm",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("Rd",4),
                               mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                  let'
                                    (var_w("opc",4),
                                     mop(Cast w4,ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                                     mb(call
                                          ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                           tp[var_w("cond",4),lt],@{theory ARM_Monadic} ),
                                        close
                                          (var_b"b",
                                           ite(var_b"b",
                                               mu(let'
                                                    (var_b"setflags",
                                                     eq(mop(Cast w1,ll[var_b"b'20"]),lw(1,1)),
                                                     let'
                                                       (tp[var("shift_t",@{typ SRType}),
                                                           var_n"shift_n"],
                                                        call
                                                          ("DecodeImmShift",
                                                           @{typ "SRType \<times> nat"},
                                                           tp[mop(Cast (Word_Lib.mk_wordT 2),
                                                                  ll[var_b"b'6",var_b"b'5"]),
                                                              mop(Cast (Word_Lib.mk_wordT 5),
                                                                  ll[var_b"b'11",var_b"b'10",
                                                                     var_b"b'9",var_b"b'8",
                                                                     var_b"b'7"])],@{theory ARM_Monadic} ),
                                                        itb([(eq(ex(var_w("opc",4),ln 3,ln 2,
                                                                    (Word_Lib.mk_wordT 2)),lw(2,2)),
                                                              call
                                                                ("instruction.Data",
                                                                 @{typ instruction},
                                                                 call
                                                                   ("Data.TestCompareRegister",
                                                                    @{typ Data},
                                                                    tp[ex(var_w("opc",4),ln 1,ln 0,
                                                                          (Word_Lib.mk_wordT 2)),
                                                                       var_w("Rn",4),var_w("Rm",4),
                                                                       var("shift_t",@{typ SRType}),
                                                                       var_n"shift_n"],prev_thy  ),
                                                                 @{theory ARM_Monadic} )),
                                                             (bop(In,var_w("opc",4),
                                                                  sl[lw(13,4),lw(15,4)]),
                                                              call
                                                                ("instruction.Data",
                                                                 @{typ instruction},
                                                                 call
                                                                   ("Data.ShiftImmediate",
                                                                    @{typ Data},
                                                                    tp[bop(Bit,var_w("opc",4),ln 1),
                                                                       var_b"setflags",
                                                                       var_w("Rd",4),var_w("Rm",4),
                                                                       var("shift_t",@{typ SRType}),
                                                                       var_n"shift_n"],prev_thy  ),
                                                                 @{theory ARM_Monadic} ))],
                                                            call
                                                              ("instruction.Data",
                                                               @{typ instruction},
                                                               call
                                                                 ("Data.Register",@{typ Data},
                                                                  tp[var_w("opc",4),var_b"setflags",
                                                                     var_w("Rd",4),var_w("Rn",4),
                                                                     var_w("Rm",4),
                                                                     var("shift_t",@{typ SRType}),
                                                                     var_n"shift_n"],prev_thy ),
                                                               @{theory ARM_Monadic} )))),qTy),
                                               call
                                                 ("Skip",
                                                  @{typ
                                                  "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                  lu,@{theory ARM_Monadic} ))))))))),
                        (bop(And,mop(Not,var_b"b'7"),var_b"b'4"),
                         let'
                           (var_w("Rm",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("Rs",4),
                               mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                               let'
                                 (var_w("Rd",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     let'
                                       (var_w("opc",4),
                                        mop(Cast w4,
                                            ll[var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21"]),
                                        mb(call
                                             ("Do",
                                              @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                              tp[var_w("cond",4),lt],@{theory ARM_Monadic} ),
                                           close
                                             (var_b"b",
                                              ite(var_b"b",
                                                  mb(ite(bop(Or,
                                                             bop(And,eq(var_w("Rd",4),lw(15,4)),
                                                                 mop(Not,
                                                                     eq(ex(var_w("opc",4),ln 3,ln 2,
                                                                           (Word_Lib.mk_wordT 2)),
                                                                        lw(2,2)))),
                                                             bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                 bop(Or,eq(var_w("Rm",4),lw(15,4)),
                                                                     eq(var_w("Rs",4),lw(15,4))))),
                                                         call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (unit \<times> 'b state_scheme)"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"RegisterShiftedRegister"],
                                                            @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                     close
                                                       (var_a HOLogic.unitT,
                                                        mu(let'
                                                             (var_b"setflags",
                                                              eq(mop(Cast w1,ll[var_b"b'20"]),
                                                                 lw(1,1)),
                                                              let'
                                                                (var("shift_t",@{typ SRType}),
                                                                 call
                                                                   ("DecodeRegShift",@{typ SRType},
                                                                    mop(Cast (Word_Lib.mk_wordT 2),
                                                                        ll[var_b"b'6",var_b"b'5"]),
                                                                    prev_thy  ),
                                                                 ite(bop(Or,
                                                                         eq(var_w("opc",4),lw(13,4)),
                                                                         eq(var_w("opc",4),lw(15,4))),
                                                                     call
                                                                       ("instruction.Data",
                                                                        @{typ instruction},
                                                                        call
                                                                          ("Data.ShiftRegister",
                                                                           @{typ Data},
                                                                           tp[bop(Bit,
                                                                                  var_w("opc",4),
                                                                                  ln 1),
                                                                              var_b"setflags",
                                                                              var_w("Rd",4),
                                                                              var_w("Rm",4),
                                                                              var("shift_t",
                                                                                  @{typ SRType}),
                                                                              var_w("Rs",4)],
                                                                           prev_thy ),@{theory ARM_Monadic} ),
                                                                     call
                                                                       ("instruction.Data",
                                                                        @{typ instruction},
                                                                        call
                                                                          ("Data.RegisterShiftedRegister",
                                                                           @{typ Data},
                                                                           tp[var_w("opc",4),
                                                                              var_b"setflags",
                                                                              var_w("Rd",4),
                                                                              var_w("Rn",4),
                                                                              var_w("Rm",4),
                                                                              var("shift_t",
                                                                                  @{typ SRType}),
                                                                              var_w("Rs",4)],
                                                                           prev_thy  ),@{theory ARM_Monadic} )))),
                                                           qTy))),
                                                  call
                                                    ("Skip",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow>
                                                      (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} )))))))))),
                        (bop(And,mop(Not,var_b"b'24"),
                             bop(And,mop(Not,var_b"b'23"),
                                 bop(And,mop(Not,var_b"b'22"),
                                     bop(And,var_b"b'7",
                                         bop(And,mop(Not,var_b"b'6"),
                                             bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))),
                         let'
                           (var_w("Rn",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("Rm",4),
                               mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                               let'
                                 (var_w("Ra",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("Rd",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     let'
                                       (var_w("A",1),mop(Cast w1,ll[var_b"b'21"]),
                                        mb(call
                                             ("Do",
                                              @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                              tp[var_w("cond",4),lt],@{theory ARM_Monadic} ),
                                           close
                                             (var_b"b",
                                              ite(var_b"b",
                                                  mb(itb([(eq(var_w("Rd",4),lw(15,4)),mu(lt,qTy)),
                                                          (eq(var_w("Rn",4),lw(15,4)),mu(lt,qTy)),
                                                          (eq(var_w("Rm",4),lw(15,4)),mu(lt,qTy)),
                                                          (bop(And,eq(var_w("A",1),lw(1,1)),
                                                               eq(var_w("Ra",4),lw(15,4))),
                                                           mu(lt,qTy))],
                                                         mb(call
                                                              ("ArchVersion",
                                                               @{typ
                                                               "'b state_scheme \<Rightarrow>
                                                                (nat \<times> 'b state_scheme)"},lu, prev_thy  ),
                                                            close
                                                              (var_n"v",
                                                               mb(mu(bop(Lt,var_n"v",ln 6),qTy),
                                                                  close
                                                                    (var_b"b",
                                                                     mu(bop(And,var_b"b",
                                                                            eq(var_w("Rd",4),
                                                                               var_w("Rn",4))),qTy)))))),
                                                     close
                                                       (var_b"v",
                                                        mb(ite(var_b"v",
                                                               call
                                                                 ("DECODE_UNPREDICTABLE",
                                                                  @{typ
                                                                  "'b state_scheme \<Rightarrow>
                                                                   (unit \<times> 'b state_scheme)"},
                                                                  tp[var("mc",@{typ MachineCode}),
                                                                     ls"Multiply"],@{theory ARM_Monadic} ),
                                                               mu(lu,qTy)),
                                                           close
                                                             (var_a HOLogic.unitT,
                                                              mu(let'
                                                                   (var_b"setflags",
                                                                    eq(mop(Cast w1,ll[var_b"b'20"]),
                                                                       lw(1,1)),
                                                                    ite(eq(var_w("A",1),lw(1,1)),
                                                                        call
                                                                          ("instruction.Multiply",
                                                                           @{typ instruction},
                                                                           call
                                                                             ("Multiply.MultiplyAccumulate",
                                                                              @{typ Multiply},
                                                                              tp[var_b"setflags",
                                                                                 var_w("Rd",4),
                                                                                 var_w("Rn",4),
                                                                                 var_w("Rm",4),
                                                                                 var_w("Ra",4)],
                                                                              @{theory ARM_Monadic} ),@{theory ARM_Monadic} ),
                                                                        call
                                                                          ("instruction.Multiply",
                                                                           @{typ instruction},
                                                                           call
                                                                             ("Multiply.Multiply32",
                                                                              @{typ Multiply},
                                                                              tp[var_b"setflags",
                                                                                 var_w("Rd",4),
                                                                                 var_w("Rn",4),
                                                                                 var_w("Rm",4)],
                                                                              @{theory ARM_Monadic} ),@{theory ARM_Monadic} ))),
                                                                 qTy))))),
                                                  call
                                                    ("Skip",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow>
                                                      (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} )))))))))),
                        (bop(And,mop(Not,var_b"b'24"),
                             bop(And,mop(Not,var_b"b'23"),
                                 bop(And,var_b"b'22",
                                     bop(And,mop(Not,var_b"b'21"),
                                         bop(And,mop(Not,var_b"b'20"),
                                             bop(And,var_b"b'7",
                                                 bop(And,mop(Not,var_b"b'6"),
                                                     bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                         let'
                           (var_w("Rn",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("Rm",4),
                               mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                               let'
                                 (var_w("RdLo",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("RdHi",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     mb(call
                                          ("ArchVersion",
                                           @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                            prev_thy  ),
                                        close
                                          (var_n"v",
                                           mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                                    close
                                                      (var_b"v",mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                                 close
                                                   (var("v",@{typ "4 word \<times> bool"}),
                                                    call
                                                      ("Do",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                       var("v",@{typ "4 word \<times> bool"}),
                                                       @{theory ARM_Monadic} ))),
                                              close
                                                (var_b"b",
                                                 ite(var_b"b",
                                                     mb(ite(bop(Or,eq(var_w("RdHi",4),lw(15,4)),
                                                                bop(Or,eq(var_w("RdLo",4),lw(15,4)),
                                                                    bop(Or,
                                                                        eq(var_w("Rn",4),lw(15,4)),
                                                                        bop(Or,
                                                                            eq(var_w("Rm",4),
                                                                               lw(15,4)),
                                                                            eq(var_w("RdHi",4),
                                                                               var_w("RdLo",4)))))),
                                                            call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ
                                                               "'b state_scheme \<Rightarrow>
                                                                (unit \<times> 'b state_scheme)"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"MultiplyAccumulateAccumulate"],
                                                               @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                        close
                                                          (var_a HOLogic.unitT,
                                                           mu(call
                                                                ("instruction.Multiply",
                                                                 @{typ instruction},
                                                                 call
                                                                   ("Multiply.MultiplyAccumulateAccumulate",
                                                                    @{typ Multiply},
                                                                    tp[var_w("RdHi",4),
                                                                       var_w("RdLo",4),
                                                                       var_w("Rn",4),var_w("Rm",4)],
                                                                    @{theory ARM_Monadic} ),@{theory ARM_Monadic} ),qTy))),
                                                     call
                                                       ("Skip",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow>
                                                         (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} ))))))))))),
                        (bop(And,mop(Not,var_b"b'24"),
                             bop(And,mop(Not,var_b"b'23"),
                                 bop(And,var_b"b'22",
                                     bop(And,var_b"b'21",
                                         bop(And,mop(Not,var_b"b'20"),
                                             bop(And,var_b"b'7",
                                                 bop(And,mop(Not,var_b"b'6"),
                                                     bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                         let'
                           (var_w("Rn",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("Rm",4),
                               mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                               let'
                                 (var_w("Ra",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("Rd",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     mb(call
                                          ("HaveThumb2",
                                           @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                           @{theory ARM_Monadic} ),
                                        close
                                          (var_b"v",
                                           mb(mb(mu(tp[var_w("cond",4),var_b"v"],qTy),
                                                 close
                                                   (var("v",@{typ "4 word \<times> bool"}),
                                                    call
                                                      ("Do",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                       var("v",@{typ "4 word \<times> bool"}),
                                                       @{theory ARM_Monadic} ))),
                                              close
                                                (var_b"b",
                                                 ite(var_b"b",
                                                     mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                                bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                    bop(Or,
                                                                        eq(var_w("Rm",4),lw(15,4)),
                                                                        eq(var_w("Ra",4),lw(15,4))))),
                                                            call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ
                                                               "'b state_scheme \<Rightarrow>
                                                                (unit \<times> 'b state_scheme)"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"MultiplySubtract"],@{theory ARM_Monadic} ),
                                                            mu(lu,qTy)),
                                                        close
                                                          (var_a HOLogic.unitT,
                                                           mu(call
                                                                ("instruction.Multiply",
                                                                 @{typ instruction},
                                                                 call
                                                                   ("Multiply.MultiplySubtract",
                                                                    @{typ Multiply},
                                                                    tp[var_w("Rd",4),var_w("Rn",4),
                                                                       var_w("Rm",4),var_w("Ra",4)],
                                                                    @{theory ARM_Monadic} ),@{theory ARM_Monadic} ),qTy))),
                                                     call
                                                       ("Skip",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow>
                                                         (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} ))))))))))),
                        (bop(And,mop(Not,var_b"b'24"),
                             bop(And,var_b"b'23",
                                 bop(And,var_b"b'7",
                                     bop(And,mop(Not,var_b"b'6"),
                                         bop(And,mop(Not,var_b"b'5"),var_b"b'4"))))),
                         let'
                           (var_w("Rn",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("Rm",4),
                               mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                               let'
                                 (var_w("RdLo",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("RdHi",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     mb(call
                                          ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                           tp[var_w("cond",4),lt],@{theory ARM_Monadic} ),
                                        close
                                          (var_b"b",
                                           ite(var_b"b",
                                               mb(itb([(eq(var_w("RdLo",4),lw(15,4)),mu(lt,qTy)),
                                                       (eq(var_w("RdHi",4),lw(15,4)),mu(lt,qTy)),
                                                       (eq(var_w("Rn",4),lw(15,4)),mu(lt,qTy)),
                                                       (eq(var_w("Rm",4),lw(15,4)),mu(lt,qTy)),
                                                       (eq(var_w("RdHi",4),var_w("RdLo",4)),
                                                        mu(lt,qTy))],
                                                      mb(call
                                                           ("ArchVersion",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (nat \<times> 'b state_scheme)"},lu, prev_thy  ),
                                                         close
                                                           (var_n"v",
                                                            mb(mu(bop(Lt,var_n"v",ln 6),qTy),
                                                               close
                                                                 (var_b"b",
                                                                  mu(bop(And,var_b"b",
                                                                         bop(Or,
                                                                             eq(var_w("RdHi",4),
                                                                                var_w("Rn",4)),
                                                                             eq(var_w("RdLo",4),
                                                                                var_w("Rn",4)))),qTy)))))),
                                                  close
                                                    (var_b"v",
                                                     mb(ite(var_b"v",
                                                            call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ
                                                               "'b state_scheme \<Rightarrow>
                                                                (unit \<times> 'b state_scheme)"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"MultiplyLong"],@{theory ARM_Monadic} ),
                                                            mu(lu,qTy)),
                                                        close
                                                          (var_a HOLogic.unitT,
                                                           mu(call
                                                                ("instruction.Multiply",
                                                                 @{typ instruction},
                                                                 call
                                                                   ("Multiply.MultiplyLong",
                                                                    @{typ Multiply},
                                                                    tp[eq(mop(Cast w1,
                                                                              ll[var_b"b'21"]),
                                                                          lw(1,1)),
                                                                       eq(mop(Cast w1,
                                                                              ll[var_b"b'22"]),
                                                                          lw(1,1)),
                                                                       eq(mop(Cast w1,
                                                                              ll[var_b"b'20"]),
                                                                          lw(1,1)),var_w("RdHi",4),
                                                                       var_w("RdLo",4),
                                                                       var_w("Rn",4),var_w("Rm",4)],
                                                                    @{theory ARM_Monadic} ),@{theory ARM_Monadic} ),qTy))))),
                                               call
                                                 ("Skip",
                                                  @{typ
                                                  "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                  lu,@{theory ARM_Monadic} ))))))))),
                        (bop(And,var_b"b'24",
                             bop(And,mop(Not,var_b"b'23"),
                                 bop(And,mop(Not,var_b"b'21"),
                                     bop(And,mop(Not,var_b"b'20"),
                                         bop(And,var_b"b'7",
                                             bop(And,mop(Not,var_b"b'6"),
                                                 bop(And,mop(Not,var_b"b'5"),var_b"b'4"))))))),
                         let'
                           (var_w("Rt2",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("Rt",4),
                               mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                  mb(call
                                       ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                        tp[var_w("cond",4),lt],@{theory ARM_Monadic} ),
                                     close
                                       (var_b"b",
                                        ite(var_b"b",
                                            mb(ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                       bop(Or,eq(var_w("Rt2",4),lw(15,4)),
                                                           bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                               bop(Or,
                                                                   eq(var_w("Rn",4),var_w("Rt",4)),
                                                                   eq(var_w("Rn",4),var_w("Rt2",4)))))),
                                                   call
                                                     ("DECODE_UNPREDICTABLE",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                      tp[var("mc",@{typ MachineCode}),ls"Swap"],
                                                      @{theory ARM_Monadic} ),mu(lu,qTy)),
                                               close
                                                 (var_a HOLogic.unitT,
                                                  mu(call
                                                       ("instruction.Swap",@{typ instruction},
                                                        tp[eq(mop(Cast w1,ll[var_b"b'22"]),lw(1,1)),
                                                           var_w("Rt",4),var_w("Rt2",4),
                                                           var_w("Rn",4)],@{theory ARM_Monadic} ),qTy))),
                                            call
                                              ("Skip",
                                               @{typ
                                               "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                               lu,@{theory ARM_Monadic} )))))))),
                        (bop(And,var_b"b'24",
                             bop(And,var_b"b'23",
                                 bop(And,mop(Not,var_b"b'22"),
                                     bop(And,mop(Not,var_b"b'21"),
                                         bop(And,mop(Not,var_b"b'20"),
                                             bop(And,var_b"b'7",
                                                 bop(And,mop(Not,var_b"b'6"),
                                                     bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                         let'
                           (var_w("Rt",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("Rd",4),
                               mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                  mb(call
                                       ("ArchVersion",
                                        @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                         prev_thy  ),
                                     close
                                       (var_n"v",
                                        mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                                 close
                                                   (var_b"v",mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                              close
                                                (var("v",@{typ "4 word \<times> bool"}),
                                                 call
                                                   ("Do",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                    var("v",@{typ "4 word \<times> bool"}),@{theory ARM_Monadic} ))),
                                           close
                                             (var_b"b",
                                              ite(var_b"b",
                                                  mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                             bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                                 bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                     bop(Or,
                                                                         eq(var_w("Rd",4),
                                                                            var_w("Rn",4)),
                                                                         eq(var_w("Rd",4),
                                                                            var_w("Rt",4)))))),
                                                         call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (unit \<times> 'b state_scheme)"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"StoreExclusive"],@{theory ARM_Monadic} ),
                                                         mu(lu,qTy)),
                                                     close
                                                       (var_a HOLogic.unitT,
                                                        mu(call
                                                             ("instruction.Store",
                                                              @{typ instruction},
                                                              call
                                                                ("Store.StoreExclusive",
                                                                 @{typ Store},
                                                                 tp[var_w("Rd",4),var_w("Rt",4),
                                                                    var_w("Rn",4),lw(0,32)],
                                                                 prev_thy ),prev_thy ),qTy))),
                                                  call
                                                    ("Skip",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow>
                                                      (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} )))))))))),
                        (bop(And,var_b"b'24",
                             bop(And,var_b"b'23",
                                 bop(And,mop(Not,var_b"b'22"),
                                     bop(And,mop(Not,var_b"b'21"),
                                         bop(And,var_b"b'20",
                                             bop(And,var_b"b'7",
                                                 bop(And,mop(Not,var_b"b'6"),
                                                     bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                         let'
                           (var_w("Rt",4),
                            mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                            let'
                              (var_w("Rn",4),
                               mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                               mb(call
                                    ("ArchVersion",
                                     @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu, prev_thy  ),
                                  close
                                    (var_n"v",
                                     mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                              close(var_b"v",mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                           close
                                             (var("v",@{typ "4 word \<times> bool"}),
                                              call
                                                ("Do",
                                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                 var("v",@{typ "4 word \<times> bool"}),@{theory ARM_Monadic} ))),
                                        close
                                          (var_b"b",
                                           ite(var_b"b",
                                               mb(ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                          eq(var_w("Rn",4),lw(15,4))),
                                                      call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"LoadExclusive"],@{theory ARM_Monadic} ),mu(lu,qTy)),
                                                  close
                                                    (var_a HOLogic.unitT,
                                                     mu(call
                                                          ("instruction.Load",@{typ instruction},
                                                           call
                                                             ("Load.LoadExclusive",@{typ Load},
                                                              tp[var_w("Rt",4),var_w("Rn",4),
                                                                 lw(0,32)],prev_thy  ),prev_thy  ),qTy))),
                                               call
                                                 ("Skip",
                                                  @{typ
                                                  "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                  lu,@{theory ARM_Monadic} ))))))))),
                        (bop(And,var_b"b'24",
                             bop(And,var_b"b'23",
                                 bop(And,mop(Not,var_b"b'22"),
                                     bop(And,var_b"b'21",
                                         bop(And,mop(Not,var_b"b'20"),
                                             bop(And,var_b"b'7",
                                                 bop(And,mop(Not,var_b"b'6"),
                                                     bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                         let'
                           (var_w("Rt",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("Rd",4),
                               mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                  mb(mr(close
                                          (var("s",qTy),
                                           call
                                             ("state.Architecture",@{typ Architecture},var("s",qTy),
                                              prev_thy ))),
                                     close
                                       (var("v",@{typ Architecture}),
                                        mb(mb(mb(mu(bop(In,var("v",@{typ Architecture}),
                                                        sl[lc("ARMv6K","Architecture",prev_thy ),
                                                           lc("ARMv7_A","Architecture",prev_thy  ),
                                                           lc("ARMv7_R","Architecture",prev_thy  )]),
                                                    qTy),
                                                 close
                                                   (var_b"v",mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                              close
                                                (var("v",@{typ "4 word \<times> bool"}),
                                                 call
                                                   ("Do",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                    var("v",@{typ "4 word \<times> bool"}),@{theory ARM_Monadic} ))),
                                           close
                                             (var_b"b",
                                              ite(var_b"b",
                                                  let'
                                                    (var_w("Rt2",4),bop(Add,var_w("Rt",4),lw(1,4)),
                                                     mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                                bop(Or,bop(Bit,var_w("Rt",4),ln 0),
                                                                    bop(Or,
                                                                        eq(var_w("Rt",4),lw(14,4)),
                                                                        bop(Or,
                                                                            eq(var_w("Rn",4),
                                                                               lw(15,4)),
                                                                            bop(Or,
                                                                                eq(var_w("Rd",4),
                                                                                   var_w("Rn",4)),
                                                                                bop(Or,
                                                                                    eq(var_w("Rd",4),
                                                                                       var_w("Rt",4)),
                                                                                    eq(var_w("Rd",4),
                                                                                       var_w("Rt2",4)))))))),
                                                            call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ
                                                               "'b state_scheme \<Rightarrow>
                                                                (unit \<times> 'b state_scheme)"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"StoreExclusiveDoubleword"],
                                                               @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                        close
                                                          (var_a HOLogic.unitT,
                                                           mu(call
                                                                ("instruction.Store",
                                                                 @{typ instruction},
                                                                 call
                                                                   ("Store.StoreExclusiveDoubleword",
                                                                    @{typ Store},
                                                                    tp[var_w("Rd",4),var_w("Rt",4),
                                                                       var_w("Rt2",4),var_w("Rn",4)],
                                                                    prev_thy ),prev_thy),qTy)))),
                                                  call
                                                    ("Skip",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow>
                                                      (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} )))))))))),
                        (bop(And,var_b"b'24",
                             bop(And,var_b"b'23",
                                 bop(And,mop(Not,var_b"b'22"),
                                     bop(And,var_b"b'21",
                                         bop(And,var_b"b'20",
                                             bop(And,var_b"b'7",
                                                 bop(And,mop(Not,var_b"b'6"),
                                                     bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                         let'
                           (var_w("Rt",4),
                            mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                            let'
                              (var_w("Rn",4),
                               mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                               mb(mr(close
                                       (var("s",qTy),
                                        call
                                          ("state.Architecture",@{typ Architecture},var("s",qTy),
                                           prev_thy  ))),
                                  close
                                    (var("v",@{typ Architecture}),
                                     mb(mb(mb(mu(bop(In,var("v",@{typ Architecture}),
                                                     sl[lc("ARMv6K","Architecture",prev_thy ),
                                                        lc("ARMv7_A","Architecture",prev_thy  ),
                                                        lc("ARMv7_R","Architecture",prev_thy )]),qTy),
                                              close(var_b"v",mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                           close
                                             (var("v",@{typ "4 word \<times> bool"}),
                                              call
                                                ("Do",
                                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                 var("v",@{typ "4 word \<times> bool"}),@{theory ARM_Monadic} ))),
                                        close
                                          (var_b"b",
                                           ite(var_b"b",
                                               mb(ite(bop(Or,bop(Bit,var_w("Rt",4),ln 0),
                                                          bop(Or,eq(var_w("Rt",4),lw(14,4)),
                                                              eq(var_w("Rn",4),lw(15,4)))),
                                                      call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"LoadExclusiveDoubleword"],@{theory ARM_Monadic} ),
                                                      mu(lu,qTy)),
                                                  close
                                                    (var_a HOLogic.unitT,
                                                     mu(call
                                                          ("instruction.Load",@{typ instruction},
                                                           call
                                                             ("Load.LoadExclusiveDoubleword",
                                                              @{typ Load},
                                                              tp[var_w("Rt",4),
                                                                 bop(Add,var_w("Rt",4),lw(1,4)),
                                                                 var_w("Rn",4)],prev_thy ),prev_thy  ),
                                                        qTy))),
                                               call
                                                 ("Skip",
                                                  @{typ
                                                  "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                  lu,@{theory ARM_Monadic} ))))))))),
                        (bop(And,var_b"b'24",
                             bop(And,var_b"b'23",
                                 bop(And,var_b"b'22",
                                     bop(And,mop(Not,var_b"b'21"),
                                         bop(And,mop(Not,var_b"b'20"),
                                             bop(And,var_b"b'7",
                                                 bop(And,mop(Not,var_b"b'6"),
                                                     bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                         let'
                           (var_w("Rt",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("Rd",4),
                               mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                  mb(mr(close
                                          (var("s",qTy),
                                           call
                                             ("state.Architecture",@{typ Architecture},var("s",qTy),
                                              prev_thy ))),
                                     close
                                       (var("v",@{typ Architecture}),
                                        mb(mb(mb(mu(bop(In,var("v",@{typ Architecture}),
                                                        sl[lc("ARMv6K","Architecture",prev_thy ),
                                                           lc("ARMv7_A","Architecture",prev_thy  ),
                                                           lc("ARMv7_R","Architecture",prev_thy  )]),
                                                    qTy),
                                                 close
                                                   (var_b"v",mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                              close
                                                (var("v",@{typ "4 word \<times> bool"}),
                                                 call
                                                   ("Do",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                    var("v",@{typ "4 word \<times> bool"}),@{theory ARM_Monadic} ))),
                                           close
                                             (var_b"b",
                                              ite(var_b"b",
                                                  mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                             bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                                 bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                     bop(Or,
                                                                         eq(var_w("Rd",4),
                                                                            var_w("Rn",4)),
                                                                         eq(var_w("Rd",4),
                                                                            var_w("Rt",4)))))),
                                                         call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (unit \<times> 'b state_scheme)"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"StoreExclusiveByte"],@{theory ARM_Monadic} ),
                                                         mu(lu,qTy)),
                                                     close
                                                       (var_a HOLogic.unitT,
                                                        mu(call
                                                             ("instruction.Store",
                                                              @{typ instruction},
                                                              call
                                                                ("Store.StoreExclusiveByte",
                                                                 @{typ Store},
                                                                 tp[var_w("Rd",4),var_w("Rt",4),
                                                                    var_w("Rn",4)],prev_thy),
                                                              prev_thy ),qTy))),
                                                  call
                                                    ("Skip",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow>
                                                      (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} )))))))))),
                        (bop(And,var_b"b'24",
                             bop(And,var_b"b'23",
                                 bop(And,var_b"b'22",
                                     bop(And,mop(Not,var_b"b'21"),
                                         bop(And,var_b"b'20",
                                             bop(And,var_b"b'7",
                                                 bop(And,mop(Not,var_b"b'6"),
                                                     bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                         let'
                           (var_w("Rt",4),
                            mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                            let'
                              (var_w("Rn",4),
                               mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                               mb(mr(close
                                       (var("s",qTy),
                                        call
                                          ("state.Architecture",@{typ Architecture},var("s",qTy),
                                          prev_thy  ))),
                                  close
                                    (var("v",@{typ Architecture}),
                                     mb(mb(mb(mu(bop(In,var("v",@{typ Architecture}),
                                                     sl[lc("ARMv6K","Architecture",prev_thy  ),
                                                        lc("ARMv7_A","Architecture",prev_thy  ),
                                                        lc("ARMv7_R","Architecture",prev_thy  )]),qTy),
                                              close(var_b"v",mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                           close
                                             (var("v",@{typ "4 word \<times> bool"}),
                                              call
                                                ("Do",
                                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                 var("v",@{typ "4 word \<times> bool"}),@{theory ARM_Monadic} ))),
                                        close
                                          (var_b"b",
                                           ite(var_b"b",
                                               mb(ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                          eq(var_w("Rn",4),lw(15,4))),
                                                      call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"LoadExclusiveByte"],@{theory ARM_Monadic} ),
                                                      mu(lu,qTy)),
                                                  close
                                                    (var_a HOLogic.unitT,
                                                     mu(call
                                                          ("instruction.Load",@{typ instruction},
                                                           call
                                                             ("Load.LoadExclusiveByte",@{typ Load},
                                                              tp[var_w("Rt",4),var_w("Rn",4)],
                                                              prev_thy  ),prev_thy  ),qTy))),
                                               call
                                                 ("Skip",
                                                  @{typ
                                                  "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                  lu,@{theory ARM_Monadic} ))))))))),
                        (bop(And,var_b"b'24",
                             bop(And,var_b"b'23",
                                 bop(And,var_b"b'22",
                                     bop(And,var_b"b'21",
                                         bop(And,mop(Not,var_b"b'20"),
                                             bop(And,var_b"b'7",
                                                 bop(And,mop(Not,var_b"b'6"),
                                                     bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                         let'
                           (var_w("Rt",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("Rd",4),
                               mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                  mb(mr(close
                                          (var("s",qTy),
                                           call
                                             ("state.Architecture",@{typ Architecture},var("s",qTy),
                                              prev_thy  ))),
                                     close
                                       (var("v",@{typ Architecture}),
                                        mb(mb(mb(mu(bop(In,var("v",@{typ Architecture}),
                                                        sl[lc("ARMv6K","Architecture",prev_thy  ),
                                                           lc("ARMv7_A","Architecture",prev_thy  ),
                                                           lc("ARMv7_R","Architecture",prev_thy  )]),
                                                    qTy),
                                                 close
                                                   (var_b"v",mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                              close
                                                (var("v",@{typ "4 word \<times> bool"}),
                                                 call
                                                   ("Do",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                    var("v",@{typ "4 word \<times> bool"}),@{theory ARM_Monadic} ))),
                                           close
                                             (var_b"b",
                                              ite(var_b"b",
                                                  mb(ite(bop(Or,eq(var_w("Rd",4),lw(15,4)),
                                                             bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                                 bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                     bop(Or,
                                                                         eq(var_w("Rd",4),
                                                                            var_w("Rn",4)),
                                                                         eq(var_w("Rd",4),
                                                                            var_w("Rt",4)))))),
                                                         call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (unit \<times> 'b state_scheme)"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"StoreExclusiveHalf"],@{theory ARM_Monadic} ),
                                                         mu(lu,qTy)),
                                                     close
                                                       (var_a HOLogic.unitT,
                                                        mu(call
                                                             ("instruction.Store",
                                                              @{typ instruction},
                                                              call
                                                                ("Store.StoreExclusiveHalf",
                                                                 @{typ Store},
                                                                 tp[var_w("Rd",4),var_w("Rt",4),
                                                                    var_w("Rn",4)],prev_thy ),
                                                              prev_thy ),qTy))),
                                                  call
                                                    ("Skip",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow>
                                                      (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} )))))))))),
                        (bop(And,var_b"b'24",
                             bop(And,var_b"b'23",
                                 bop(And,var_b"b'22",
                                     bop(And,var_b"b'21",
                                         bop(And,var_b"b'20",
                                             bop(And,var_b"b'7",
                                                 bop(And,mop(Not,var_b"b'6"),
                                                     bop(And,mop(Not,var_b"b'5"),var_b"b'4")))))))),
                         let'
                           (var_w("Rt",4),
                            mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                            let'
                              (var_w("Rn",4),
                               mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                               mb(mr(close
                                       (var("s",qTy),
                                        call
                                          ("state.Architecture",@{typ Architecture},var("s",qTy),
                                           prev_thy  ))),
                                  close
                                    (var("v",@{typ Architecture}),
                                     mb(mb(mb(mu(bop(In,var("v",@{typ Architecture}),
                                                     sl[lc("ARMv6K","Architecture",prev_thy  ),
                                                        lc("ARMv7_A","Architecture",prev_thy ),
                                                        lc("ARMv7_R","Architecture",prev_thy  )]),qTy),
                                              close(var_b"v",mu(tp[var_w("cond",4),var_b"v"],qTy))),
                                           close
                                             (var("v",@{typ "4 word \<times> bool"}),
                                              call
                                                ("Do",
                                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                 var("v",@{typ "4 word \<times> bool"}),@{theory ARM_Monadic} ))),
                                        close
                                          (var_b"b",
                                           ite(var_b"b",
                                               mb(ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                          eq(var_w("Rn",4),lw(15,4))),
                                                      call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"LoadExclusiveHalf"],@{theory ARM_Monadic} ),
                                                      mu(lu,qTy)),
                                                  close
                                                    (var_a HOLogic.unitT,
                                                     mu(call
                                                          ("instruction.Load",@{typ instruction},
                                                           call
                                                             ("Load.LoadExclusiveHalf",@{typ Load},
                                                              tp[var_w("Rt",4),var_w("Rn",4)],
                                                              prev_thy  ),prev_thy  ),qTy))),
                                               call
                                                 ("Skip",
                                                  @{typ
                                                  "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                  lu,@{theory ARM_Monadic} ))))))))),
                        (bop(And,mop(Not,var_b"b'24"),
                             bop(And,mop(Not,var_b"b'22"),
                                 bop(And,var_b"b'21",
                                     bop(And,mop(Not,var_b"b'20"),
                                         bop(And,var_b"b'7",
                                             bop(And,mop(Not,var_b"b'6"),
                                                 bop(And,var_b"b'5",var_b"b'4"))))))),
                         let'
                           (var_w("Rm",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("Rt",4),
                               mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                  mb(call
                                       ("HaveThumb2",
                                        @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                        @{theory ARM_Monadic} ),
                                     close
                                       (var_b"v",
                                        mb(mb(mu(tp[var_w("cond",4),var_b"v"],qTy),
                                              close
                                                (var("v",@{typ "4 word \<times> bool"}),
                                                 call
                                                   ("Do",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                    var("v",@{typ "4 word \<times> bool"}),@{theory ARM_Monadic} ))),
                                           close
                                             (var_b"b",
                                              ite(var_b"b",
                                                  mb(ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                             bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                 bop(Or,
                                                                     eq(var_w("Rn",4),var_w("Rt",4)),
                                                                     eq(var_w("Rm",4),lw(15,4))))),
                                                         call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (unit \<times> 'b state_scheme)"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"StoreHalfUnprivileged"],@{theory ARM_Monadic} ),
                                                         mu(lu,qTy)),
                                                     close
                                                       (var_a HOLogic.unitT,
                                                        mu(call
                                                             ("instruction.Store",
                                                              @{typ instruction},
                                                              call
                                                                ("Store.StoreHalfUnprivileged",
                                                                 @{typ Store},
                                                                 tp[eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                       lw(1,1)),lt,var_w("Rt",4),
                                                                    var_w("Rn",4),
                                                                    call
                                                                      ("offset2.register_form2",
                                                                       @{typ offset2},var_w("Rm",4),
                                                                       @{theory ARM_Monadic} )],prev_thy),
                                                              prev_thy ),qTy))),
                                                  call
                                                    ("Skip",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow>
                                                      (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} )))))))))),
                        (bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'20"),
                                 bop(And,var_b"b'7",
                                     bop(And,mop(Not,var_b"b'6"),bop(And,var_b"b'5",var_b"b'4"))))),
                         let'
                           (var_w("Rm",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("Rt",4),
                               mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                  let'
                                    (var_w("P",1),mop(Cast w1,ll[var_b"b'24"]),
                                     mb(call
                                          ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                           tp[var_w("cond",4),lt],@{theory ARM_Monadic} ),
                                        close
                                          (var_b"b",
                                           ite(var_b"b",
                                               let'
                                                 (var_b"wback",
                                                  bop(Or,eq(var_w("P",1),lw(0,1)),
                                                      eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1))),
                                                  mb(itb([(eq(var_w("Rt",4),lw(15,4)),mu(lt,qTy)),
                                                          (eq(var_w("Rm",4),lw(15,4)),mu(lt,qTy)),
                                                          (bop(And,var_b"wback",
                                                               bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                   eq(var_w("Rn",4),var_w("Rt",4)))),
                                                           mu(lt,qTy))],
                                                         mb(call
                                                              ("ArchVersion",
                                                               @{typ
                                                               "'b state_scheme \<Rightarrow>
                                                                (nat \<times> 'b state_scheme)"},lu, prev_thy  ),
                                                            close
                                                              (var_n"v",
                                                               mb(mu(bop(Lt,var_n"v",ln 6),qTy),
                                                                  close
                                                                    (var_b"b",
                                                                     mu(bop(And,var_b"b",
                                                                            bop(And,var_b"wback",
                                                                                eq(var_w("Rm",4),
                                                                                   var_w("Rn",4)))),
                                                                        qTy)))))),
                                                     close
                                                       (var_b"v",
                                                        mb(ite(var_b"v",
                                                               call
                                                                 ("DECODE_UNPREDICTABLE",
                                                                  @{typ
                                                                  "'b state_scheme \<Rightarrow>
                                                                   (unit \<times> 'b state_scheme)"},
                                                                  tp[var("mc",@{typ MachineCode}),
                                                                     ls"StoreHalf"],@{theory ARM_Monadic} ),
                                                               mu(lu,qTy)),
                                                           close
                                                             (var_a HOLogic.unitT,
                                                              mu(call
                                                                   ("instruction.Store",
                                                                    @{typ instruction},
                                                                    call
                                                                      ("Store.StoreHalf",
                                                                       @{typ Store},
                                                                       tp[eq(mop(Cast w1,
                                                                                 ll[var_b"b'23"]),
                                                                             lw(1,1)),
                                                                          eq(var_w("P",1),lw(1,1)),
                                                                          var_b"wback",
                                                                          var_w("Rt",4),
                                                                          var_w("Rn",4),
                                                                          call
                                                                            ("offset1.register_form1",
                                                                             @{typ offset1},
                                                                             tp[var_w("Rm",4),
                                                                                lc("SRType_LSL",
                                                                                   "SRType",
                                                                                   prev_thy ),ln 0],
                                                                             prev_thy )],prev_thy ),
                                                                    prev_thy ),qTy)))))),
                                               call
                                                 ("Skip",
                                                  @{typ
                                                  "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                  lu,@{theory ARM_Monadic} ))))))))),
                        (bop(And,mop(Not,var_b"b'24"),
                             bop(And,mop(Not,var_b"b'22"),
                                 bop(And,var_b"b'21",
                                     bop(And,var_b"b'20",bop(And,var_b"b'7",var_b"b'4"))))),
                         let'
                           (var_w("Rm",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("H",1),mop(Cast w1,ll[var_b"b'5"]),
                               let'
                                 (var_w("S",1),mop(Cast w1,ll[var_b"b'6"]),
                                  let'
                                    (var_w("Rt",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("Rn",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        mb(ite(bop(Or,mop(Not,eq(var_w("H",1),lw(0,1))),
                                                   eq(var_w("S",1),lw(1,1))),
                                               call
                                                 ("HaveThumb2",
                                                  @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                  lu,@{theory ARM_Monadic} ),mu(lf,qTy)),
                                           close
                                             (var_b"v",
                                              mb(mb(mu(tp[var_w("cond",4),var_b"v"],qTy),
                                                    close
                                                      (var("v",@{typ "4 word \<times> bool"}),
                                                       call
                                                         ("Do",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          var("v",@{typ "4 word \<times> bool"}),
                                                          @{theory ARM_Monadic} ))),
                                                 close
                                                   (var_b"b",
                                                    ite(var_b"b",
                                                        mb(ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                                   bop(Or,
                                                                       eq(var_w("Rn",4),lw(15,4)),
                                                                       bop(Or,
                                                                           eq(var_w("Rn",4),
                                                                              var_w("Rt",4)),
                                                                           eq(var_w("Rm",4),lw(15,4))))),
                                                               call
                                                                 ("DECODE_UNPREDICTABLE",
                                                                  @{typ
                                                                  "'b state_scheme \<Rightarrow>
                                                                   (unit \<times> 'b state_scheme)"},
                                                                  tp[var("mc",@{typ MachineCode}),
                                                                     ls
                                                                      "LoadHalf/Byte (unprivileged)"],
                                                                  @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                           close
                                                             (var_a HOLogic.unitT,
                                                              mu(let'
                                                                   (var_b"add",
                                                                    eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                       lw(1,1)),
                                                                    let'
                                                                      (var("m",@{typ offset2}),
                                                                       call
                                                                         ("offset2.register_form2",
                                                                          @{typ offset2},
                                                                          var_w("Rm",4),@{theory ARM_Monadic} ),
                                                                       ite(eq(var_w("H",1),lw(1,1)),
                                                                           call
                                                                             ("instruction.Load",
                                                                              @{typ instruction},
                                                                              call
                                                                                ("Load.LoadHalfUnprivileged",
                                                                                 @{typ Load},
                                                                                 tp[eq(var_w("S",1),
                                                                                       lw(0,1)),
                                                                                    var_b"add",lt,
                                                                                    var_w("Rt",4),
                                                                                    var_w("Rn",4),
                                                                                    var("m",
                                                                                        @{typ offset2})],
                                                                                 prev_thy  ),
                                                                              prev_thy  ),
                                                                           call
                                                                             ("instruction.Load",
                                                                              @{typ instruction},
                                                                              call
                                                                                ("Load.LoadSignedByteUnprivileged",
                                                                                 @{typ Load},
                                                                                 tp[var_b"add",lt,
                                                                                    var_w("Rt",4),
                                                                                    var_w("Rn",4),
                                                                                    var("m",
                                                                                        @{typ offset2})],
                                                                                prev_thy  ),
                                                                              prev_thy  )))),qTy))),
                                                        call
                                                          ("Skip",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (instruction \<times> 'b state_scheme)"},lu,
                                                           @{theory ARM_Monadic} )))))))))))),
                        (bop(And,mop(Not,var_b"b'22"),
                             bop(And,var_b"b'20",bop(And,var_b"b'7",var_b"b'4"))),
                         let'
                           (var_w("Rm",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("H",1),mop(Cast w1,ll[var_b"b'5"]),
                               let'
                                 (var_w("S",1),mop(Cast w1,ll[var_b"b'6"]),
                                  let'
                                    (var_w("Rt",4),
                                     mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                     let'
                                       (var_w("Rn",4),
                                        mop(Cast w4,
                                            ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                        let'
                                          (var_w("P",1),mop(Cast w1,ll[var_b"b'24"]),
                                           mb(call
                                                ("Do",
                                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                 tp[var_w("cond",4),
                                                    bop(Or,mop(Not,eq(var_w("H",1),lw(0,1))),
                                                        eq(var_w("S",1),lw(1,1)))],@{theory ARM_Monadic} ),
                                              close
                                                (var_b"b",
                                                 ite(var_b"b",
                                                     let'
                                                       (var_b"wback",
                                                        bop(Or,eq(var_w("P",1),lw(0,1)),
                                                            eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1))),
                                                        mb(itb([(eq(var_w("Rt",4),lw(15,4)),
                                                                 mu(lt,qTy)),
                                                                (eq(var_w("Rm",4),lw(15,4)),
                                                                 mu(lt,qTy))],
                                                               mb(call
                                                                    ("ArchVersion",
                                                                     @{typ
                                                                     "'b state_scheme \<Rightarrow>
                                                                      (nat \<times> 'b state_scheme)"},lu,
                                                                     prev_thy  ),
                                                                  close
                                                                    (var_n"v",
                                                                     mb(mu(bop(Lt,var_n"v",ln 6),qTy),
                                                                        close
                                                                          (var_b"b",
                                                                           mu(bop(And,var_b"b",
                                                                                  bop(And,
                                                                                      var_b"wback",
                                                                                      eq(var_w("Rm",4),
                                                                                         var_w("Rn",4)))),
                                                                              qTy)))))),
                                                           close
                                                             (var_b"v",
                                                              mb(ite(var_b"v",
                                                                     call
                                                                       ("DECODE_UNPREDICTABLE",
                                                                        @{typ
                                                                        "'b state_scheme \<Rightarrow>
                                                                         (unit \<times> 'b state_scheme)"},
                                                                        tp[var("mc",
                                                                               @{typ MachineCode}),
                                                                           ls"LoadHalf/Byte"],
                                                                        @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                                 close
                                                                   (var_a HOLogic.unitT,
                                                                    mu(let'
                                                                         (var_b"index",
                                                                          eq(var_w("P",1),lw(1,1)),
                                                                          let'
                                                                            (var_b"add",
                                                                             eq(mop(Cast w1,
                                                                                    ll[var_b"b'23"]),
                                                                                lw(1,1)),
                                                                             let'
                                                                               (var_b"unsigned",
                                                                                eq(var_w("S",1),
                                                                                   lw(0,1)),
                                                                                let'
                                                                                  (var("m",
                                                                                       @{typ offset1}),
                                                                                   call
                                                                                     ("offset1.register_form1",
                                                                                      @{typ offset1},
                                                                                      tp[var_w("Rm",4),
                                                                                         lc("SRType_LSL",
                                                                                            "SRType",
                                                                                              prev_thy  ),
                                                                                         ln 0],
                                                                                      @{theory ARM_Monadic} ),
                                                                                   ite(eq(var_w("H",1),
                                                                                          lw(1,1)),
                                                                                       call
                                                                                         ("instruction.Load",
                                                                                          @{typ instruction},
                                                                                          call
                                                                                            ("Load.LoadHalf",
                                                                                             @{typ Load},
                                                                                             tp[var_b"unsigned",
                                                                                                var_b"add",
                                                                                                var_b"index",
                                                                                                var_b"wback",
                                                                                                var_w("Rt",4),
                                                                                                var_w("Rn",4),
                                                                                                var("m",
                                                                                                    @{typ offset1})],
                                                                                             prev_thy  ),
                                                                                          prev_thy  ),
                                                                                       call
                                                                                         ("instruction.Load",
                                                                                          @{typ instruction},
                                                                                          call
                                                                                            ("Load.LoadByte",
                                                                                             @{typ Load},
                                                                                             tp[var_b"unsigned",
                                                                                                var_b"add",
                                                                                                var_b"index",
                                                                                                var_b"wback",
                                                                                                var_w("Rt",4),
                                                                                                var_w("Rn",4),
                                                                                                var("m",
                                                                                                    @{typ offset1})],
                                                                                             prev_thy  ),
                                                                                          prev_thy  )))))),
                                                                       qTy)))))),
                                                     call
                                                       ("Skip",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow>
                                                         (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} ))))))))))),
                        (bop(And,mop(Not,var_b"b'22"),
                             bop(And,mop(Not,var_b"b'20"),
                                 bop(And,var_b"b'7",bop(And,var_b"b'6",var_b"b'4")))),
                         let'
                           (var_w("Rm",4),
                            mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                            let'
                              (var_w("Rt",4),
                               mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                  let'
                                    (var_w("W",1),mop(Cast w1,ll[var_b"b'21"]),
                                     let'
                                       (var_w("P",1),mop(Cast w1,ll[var_b"b'24"]),
                                        mb(call
                                             ("HaveDSPSupport",
                                              @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                              @{theory ARM_Monadic} ),
                                           close
                                             (var_b"v",
                                              mb(mb(mu(tp[var_w("cond",4),var_b"v"],qTy),
                                                    close
                                                      (var("v",@{typ "4 word \<times> bool"}),
                                                       call
                                                         ("Do",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          var("v",@{typ "4 word \<times> bool"}),
                                                          @{theory ARM_Monadic} ))),
                                                 close
                                                   (var_b"b",
                                                    ite(var_b"b",
                                                        let'
                                                          (var_w("Rt2",4),
                                                           bop(Add,var_w("Rt",4),lw(1,4)),
                                                           let'
                                                             (var_b"wback",
                                                              bop(Or,eq(var_w("P",1),lw(0,1)),
                                                                  eq(var_w("W",1),lw(1,1))),
                                                              let'
                                                                (var_b"store",
                                                                 eq(mop(Cast w1,ll[var_b"b'5"]),
                                                                    lw(1,1)),
                                                                 mb(itb([(bop(Bit,var_w("Rt",4),ln 0),
                                                                          mu(lt,qTy)),
                                                                         (bop(And,
                                                                              eq(var_w("P",1),
                                                                                 lw(0,1)),
                                                                              eq(var_w("W",1),
                                                                                 lw(1,1))),
                                                                          mu(lt,qTy)),
                                                                         (eq(var_w("Rt2",4),lw(15,4)),
                                                                          mu(lt,qTy)),
                                                                         (eq(var_w("Rm",4),lw(15,4)),
                                                                          mu(lt,qTy)),
                                                                         (bop(And,
                                                                              mop(Not,var_b"store"),
                                                                              bop(Or,
                                                                                  eq(var_w("Rm",4),
                                                                                     var_w("Rt",4)),
                                                                                  eq(var_w("Rm",4),
                                                                                     var_w("Rt2",4)))),
                                                                          mu(lt,qTy)),
                                                                         (bop(And,var_b"wback",
                                                                              bop(Or,
                                                                                  eq(var_w("Rn",4),
                                                                                     lw(15,4)),
                                                                                  bop(Or,
                                                                                      eq(var_w("Rn",4),
                                                                                         var_w("Rt",4)),
                                                                                      eq(var_w("Rn",4),
                                                                                         var_w("Rt2",4))))),
                                                                          mu(lt,qTy))],
                                                                        mb(call
                                                                             ("ArchVersion",
                                                                              @{typ
                                                                              "'b state_scheme \<Rightarrow>
                                                                               (nat \<times> 'b state_scheme)"},
                                                                              lu, prev_thy  ),
                                                                           close
                                                                             (var_n"v",
                                                                              mb(mu(bop(Lt,var_n"v",
                                                                                        ln 6),qTy),
                                                                                 close
                                                                                   (var_b"b",
                                                                                    mu(bop(And,
                                                                                           var_b"b",
                                                                                           bop(And,
                                                                                               var_b"wback",
                                                                                               eq(var_w("Rm",4),
                                                                                                  var_w("Rn",4)))),
                                                                                       qTy)))))),
                                                                    close
                                                                      (var_b"v",
                                                                       mb(ite(var_b"v",
                                                                              call
                                                                                ("DECODE_UNPREDICTABLE",
                                                                                 @{typ
                                                                                 "'b state_scheme \<Rightarrow>
                                                                                  (unit \<times>
                                                                                   'b state_scheme)"},
                                                                                 tp[var("mc",
                                                                                        @{typ MachineCode}),
                                                                                    ls
                                                                                     "Load/StoreDual (register)"],
                                                                                 @{theory ARM_Monadic} ),
                                                                              mu(lu,qTy)),
                                                                          close
                                                                            (var_a HOLogic.unitT,
                                                                             mu(let'
                                                                                  (var_b"index",
                                                                                   eq(var_w("P",1),
                                                                                      lw(1,1)),
                                                                                   let'
                                                                                     (var_b"add",
                                                                                      eq(mop(Cast w1,
                                                                                             ll[var_b"b'23"]),
                                                                                         lw(1,1)),
                                                                                      let'
                                                                                        (var("m",
                                                                                             @{typ offset2}),
                                                                                         call
                                                                                           ("offset2.register_form2",
                                                                                            @{typ offset2},
                                                                                            var_w("Rm",4),
                                                                                            @{theory ARM_Monadic} ),
                                                                                         ite(var_b"store",
                                                                                             call
                                                                                               ("instruction.Store",
                                                                                                @{typ instruction},
                                                                                                call
                                                                                                  ("Store.StoreDual",
                                                                                                   @{typ Store},
                                                                                                   tp[var_b"add",
                                                                                                      var_b"index",
                                                                                                      var_b"wback",
                                                                                                      var_w("Rt",4),
                                                                                                      var_w("Rt2",4),
                                                                                                      var_w("Rn",4),
                                                                                                      var("m",
                                                                                                          @{typ offset2})],
                                                                                                   prev_thy),
                                                                                               prev_thy ),
                                                                                             call
                                                                                               ("instruction.Load",
                                                                                                @{typ instruction},
                                                                                                call
                                                                                                  ("Load.LoadDual",
                                                                                                   @{typ Load},
                                                                                                   tp[var_b"add",
                                                                                                      var_b"index",
                                                                                                      var_b"wback",
                                                                                                      var_w("Rt",4),
                                                                                                      var_w("Rt2",4),
                                                                                                      var_w("Rn",4),
                                                                                                      var("m",
                                                                                                          @{typ offset2})],
                                                                                                   prev_thy  ),
                                                                                                prev_thy ))))),
                                                                                qTy)))))))),
                                                        call
                                                          ("Skip",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (instruction \<times> 'b state_scheme)"},lu,
                                                           @{theory ARM_Monadic} )))))))))))),
                        (bop(And,var_b"b'22",
                             bop(And,mop(Not,var_b"b'20"),
                                 bop(And,var_b"b'19",
                                     bop(And,var_b"b'18",
                                         bop(And,var_b"b'17",
                                             bop(And,var_b"b'16",
                                                 bop(And,var_b"b'7",
                                                     bop(And,var_b"b'6",
                                                         bop(And,mop(Not,var_b"b'5"),var_b"b'4"))))))))),
                         let'
                           (var_w("Rt",4),
                            mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                            mb(call
                                 ("HaveDSPSupport",
                                  @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} ),
                               close
                                 (var_b"v",
                                  mb(mb(mu(tp[var_w("cond",4),var_b"v"],qTy),
                                        close
                                          (var("v",@{typ "4 word \<times> bool"}),
                                           call
                                             ("Do",
                                              @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                              var("v",@{typ "4 word \<times> bool"}),@{theory ARM_Monadic} ))),
                                     close
                                       (var_b"b",
                                        ite(var_b"b",
                                            let'
                                              (var_w("Rt2",4),bop(Add,var_w("Rt",4),lw(1,4)),
                                               mb(ite(bop(Or,bop(Bit,var_w("Rt",4),ln 0),
                                                          eq(var_w("Rt2",4),lw(15,4))),
                                                      call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"LoadDual (literal)"],@{theory ARM_Monadic} ),
                                                      mu(lu,qTy)),
                                                  close
                                                    (var_a HOLogic.unitT,
                                                     mu(call
                                                          ("instruction.Load",@{typ instruction},
                                                           call
                                                             ("Load.LoadDualLiteral",@{typ Load},
                                                              tp[eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                    lw(1,1)),var_w("Rt",4),
                                                                 var_w("Rt2",4),
                                                                 mop(Cast w32,
                                                                     cc[mop(Cast w4,
                                                                            ll[var_b"b'11",
                                                                               var_b"b'10",
                                                                               var_b"b'9",var_b"b'8"]),
                                                                        mop(Cast w4,
                                                                            ll[var_b"b'3",
                                                                               var_b"b'2",
                                                                               var_b"b'1",var_b"b'0"])])],
                                                              prev_thy  ),prev_thy  ),qTy)))),
                                            call
                                              ("Skip",
                                               @{typ
                                               "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                               lu,@{theory ARM_Monadic} )))))))),
                        (bop(And,var_b"b'22",
                             bop(And,mop(Not,var_b"b'20"),
                                 bop(And,var_b"b'7",bop(And,var_b"b'6",var_b"b'4")))),
                         let'
                           (var_w("S",1),mop(Cast w1,ll[var_b"b'5"]),
                            let'
                              (var_w("Rt",4),
                               mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                               let'
                                 (var_w("Rn",4),
                                  mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                  let'
                                    (var_w("W",1),mop(Cast w1,ll[var_b"b'21"]),
                                     let'
                                       (var_w("P",1),mop(Cast w1,ll[var_b"b'24"]),
                                        mb(call
                                             ("HaveDSPSupport",
                                              @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                              @{theory ARM_Monadic} ),
                                           close
                                             (var_b"v",
                                              mb(mb(mu(tp[var_w("cond",4),var_b"v"],qTy),
                                                    close
                                                      (var("v",@{typ "4 word \<times> bool"}),
                                                       call
                                                         ("Do",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          var("v",@{typ "4 word \<times> bool"}),
                                                          @{theory ARM_Monadic} ))),
                                                 close
                                                   (var_b"b",
                                                    ite(var_b"b",
                                                        let'
                                                          (var_w("Rt2",4),
                                                           bop(Add,var_w("Rt",4),lw(1,4)),
                                                           let'
                                                             (var_b"wback",
                                                              bop(Or,eq(var_w("P",1),lw(0,1)),
                                                                  eq(var_w("W",1),lw(1,1))),
                                                              mb(ite(bop(Or,
                                                                         bop(Bit,var_w("Rt",4),ln 0),
                                                                         bop(Or,
                                                                             bop(And,
                                                                                 eq(var_w("P",1),
                                                                                    lw(0,1)),
                                                                                 eq(var_w("W",1),
                                                                                    lw(1,1))),
                                                                             bop(Or,
                                                                                 bop(And,
                                                                                     var_b"wback",
                                                                                     bop(Or,
                                                                                         bop(And,
                                                                                             eq(var_w("S",1),
                                                                                                lw(1,
                                                                                                   1)),
                                                                                             eq(var_w("Rn",4),
                                                                                                lw(15,
                                                                                                   4))),
                                                                                         bop(Or,
                                                                                             eq(var_w("Rn",4),
                                                                                                var_w("Rt",4)),
                                                                                             eq(var_w("Rn",4),
                                                                                                var_w("Rt2",4))))),
                                                                                 eq(var_w("Rt2",4),
                                                                                    lw(15,4))))),
                                                                     call
                                                                       ("DECODE_UNPREDICTABLE",
                                                                        @{typ
                                                                        "'b state_scheme \<Rightarrow>
                                                                         (unit \<times> 'b state_scheme)"},
                                                                        tp[var("mc",
                                                                               @{typ MachineCode}),
                                                                           ls
                                                                            "Load/StoreDual (immediate)"],
                                                                        @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                                 close
                                                                   (var_a HOLogic.unitT,
                                                                    mu(let'
                                                                         (var_b"index",
                                                                          eq(var_w("P",1),lw(1,1)),
                                                                          let'
                                                                            (var_b"add",
                                                                             eq(mop(Cast w1,
                                                                                    ll[var_b"b'23"]),
                                                                                lw(1,1)),
                                                                             let'
                                                                               (var("m",
                                                                                    @{typ offset2}),
                                                                                call
                                                                                  ("offset2.immediate_form2",
                                                                                   @{typ offset2},
                                                                                   mop(Cast w32,
                                                                                       cc[mop(Cast
                                                                                                w4,
                                                                                              ll[var_b"b'11",
                                                                                                 var_b"b'10",
                                                                                                 var_b"b'9",
                                                                                                 var_b"b'8"]),
                                                                                          mop(Cast
                                                                                                w4,
                                                                                              ll[var_b"b'3",
                                                                                                 var_b"b'2",
                                                                                                 var_b"b'1",
                                                                                                 var_b"b'0"])]),
                                                                                   @{theory ARM_Monadic} ),
                                                                                ite(eq(var_w("S",1),
                                                                                       lw(1,1)),
                                                                                    call
                                                                                      ("instruction.Store",
                                                                                       @{typ instruction},
                                                                                       call
                                                                                         ("Store.StoreDual",
                                                                                          @{typ Store},
                                                                                          tp[var_b"add",
                                                                                             var_b"index",
                                                                                             var_b"wback",
                                                                                             var_w("Rt",4),
                                                                                             var_w("Rt2",4),
                                                                                             var_w("Rn",4),
                                                                                             var("m",
                                                                                                 @{typ offset2})],
                                                                                          prev_thy ),
                                                                                      prev_thy ),
                                                                                    call
                                                                                      ("instruction.Load",
                                                                                       @{typ instruction},
                                                                                       call
                                                                                         ("Load.LoadDual",
                                                                                          @{typ Load},
                                                                                          tp[var_b"add",
                                                                                             var_b"index",
                                                                                             var_b"wback",
                                                                                             var_w("Rt",4),
                                                                                             var_w("Rt2",4),
                                                                                             var_w("Rn",4),
                                                                                             var("m",
                                                                                                 @{typ offset2})],
                                                                                         prev_thy  ),
                                                                                       prev_thy ))))),
                                                                       qTy))))),
                                                        call
                                                          ("Skip",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (instruction \<times> 'b state_scheme)"},lu,
                                                           @{theory ARM_Monadic} )))))))))))),
                        (bop(And,mop(Not,var_b"b'24"),
                             bop(And,var_b"b'22",
                                 bop(And,var_b"b'21",
                                     bop(And,var_b"b'20",bop(And,var_b"b'7",var_b"b'4"))))),
                         let'
                           (var_w("H",1),mop(Cast w1,ll[var_b"b'5"]),
                            let'
                              (var_w("S",1),mop(Cast w1,ll[var_b"b'6"]),
                               let'
                                 (var_w("Rt",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     mb(ite(bop(Or,mop(Not,eq(var_w("H",1),lw(0,1))),
                                                eq(var_w("S",1),lw(1,1))),
                                            call
                                              ("HaveThumb2",
                                               @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                               lu,@{theory ARM_Monadic} ),mu(lf,qTy)),
                                        close
                                          (var_b"v",
                                           mb(mb(mu(tp[var_w("cond",4),var_b"v"],qTy),
                                                 close
                                                   (var("v",@{typ "4 word \<times> bool"}),
                                                    call
                                                      ("Do",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                       var("v",@{typ "4 word \<times> bool"}),
                                                       @{theory ARM_Monadic} ))),
                                              close
                                                (var_b"b",
                                                 ite(var_b"b",
                                                     mb(ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                                bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                    eq(var_w("Rn",4),var_w("Rt",4)))),
                                                            call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ
                                                               "'b state_scheme \<Rightarrow>
                                                                (unit \<times> 'b state_scheme)"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"LoadHalf/Byte (unprivileged)"],
                                                               @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                        close
                                                          (var_a HOLogic.unitT,
                                                           mu(let'
                                                                (var_b"add",
                                                                 eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                    lw(1,1)),
                                                                 let'
                                                                   (var("m",@{typ offset2}),
                                                                    call
                                                                      ("offset2.immediate_form2",
                                                                       @{typ offset2},
                                                                       mop(Cast w32,
                                                                           cc[mop(Cast w4,
                                                                                  ll[var_b"b'11",
                                                                                     var_b"b'10",
                                                                                     var_b"b'9",
                                                                                     var_b"b'8"]),
                                                                              mop(Cast w4,
                                                                                  ll[var_b"b'3",
                                                                                     var_b"b'2",
                                                                                     var_b"b'1",
                                                                                     var_b"b'0"])]),
                                                                       @{theory ARM_Monadic} ),
                                                                    ite(eq(var_w("H",1),lw(1,1)),
                                                                        call
                                                                          ("instruction.Load",
                                                                           @{typ instruction},
                                                                           call
                                                                             ("Load.LoadHalfUnprivileged",
                                                                              @{typ Load},
                                                                              tp[eq(var_w("S",1),
                                                                                    lw(0,1)),
                                                                                 var_b"add",lt,
                                                                                 var_w("Rt",4),
                                                                                 var_w("Rn",4),
                                                                                 var("m",
                                                                                     @{typ offset2})],
                                                                             prev_thy ),prev_thy  ),
                                                                        call
                                                                          ("instruction.Load",
                                                                           @{typ instruction},
                                                                           call
                                                                             ("Load.LoadSignedByteUnprivileged",
                                                                              @{typ Load},
                                                                              tp[var_b"add",lt,
                                                                                 var_w("Rt",4),
                                                                                 var_w("Rn",4),
                                                                                 var("m",
                                                                                     @{typ offset2})],
                                                                              prev_thy  ),prev_thy  )))),
                                                              qTy))),
                                                     call
                                                       ("Skip",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow>
                                                         (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} ))))))))))),
                        (bop(And,var_b"b'22",
                             bop(And,var_b"b'20",
                                 bop(And,var_b"b'19",
                                     bop(And,var_b"b'18",
                                         bop(And,var_b"b'17",
                                             bop(And,var_b"b'16",bop(And,var_b"b'7",var_b"b'4"))))))),
                         let'
                           (var_w("H",1),mop(Cast w1,ll[var_b"b'5"]),
                            let'
                              (var_w("S",1),mop(Cast w1,ll[var_b"b'6"]),
                               let'
                                 (var_w("Rt",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  mb(call
                                       ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                        tp[var_w("cond",4),
                                           bop(Or,mop(Not,eq(var_w("H",1),lw(0,1))),
                                               eq(var_w("S",1),lw(1,1)))],@{theory ARM_Monadic} ),
                                     close
                                       (var_b"b",
                                        ite(var_b"b",
                                            mb(ite(eq(var_w("Rt",4),lw(15,4)),
                                                   call
                                                     ("DECODE_UNPREDICTABLE",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                      tp[var("mc",@{typ MachineCode}),
                                                         ls"LoadHalf/Byte (literal)"],@{theory ARM_Monadic} ),
                                                   mu(lu,qTy)),
                                               close
                                                 (var_a HOLogic.unitT,
                                                  mu(let'
                                                       (var_b"add",
                                                        eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),
                                                        let'
                                                          (var_b"unsigned",eq(var_w("S",1),lw(0,1)),
                                                           let'
                                                             (var_w("imm32",32),
                                                              mop(Cast w32,
                                                                  cc[mop(Cast w4,
                                                                         ll[var_b"b'11",var_b"b'10",
                                                                            var_b"b'9",var_b"b'8"]),
                                                                     mop(Cast w4,
                                                                         ll[var_b"b'3",var_b"b'2",
                                                                            var_b"b'1",var_b"b'0"])]),
                                                              ite(eq(var_w("H",1),lw(1,1)),
                                                                  call
                                                                    ("instruction.Load",
                                                                     @{typ instruction},
                                                                     call
                                                                       ("Load.LoadHalfLiteral",
                                                                        @{typ Load},
                                                                        tp[var_b"unsigned",
                                                                           var_b"add",var_w("Rt",4),
                                                                           var_w("imm32",32)],
                                                                        prev_thy  ),prev_thy  ),
                                                                  call
                                                                    ("instruction.Load",
                                                                     @{typ instruction},
                                                                     call
                                                                       ("Load.LoadByteLiteral",
                                                                        @{typ Load},
                                                                        tp[var_b"unsigned",
                                                                           var_b"add",var_w("Rt",4),
                                                                           var_w("imm32",32)],
                                                                        prev_thy  ),prev_thy ))))),
                                                     qTy))),
                                            call
                                              ("Skip",
                                               @{typ
                                               "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                               lu,@{theory ARM_Monadic} )))))))),
                        (bop(And,var_b"b'22",bop(And,var_b"b'20",bop(And,var_b"b'7",var_b"b'4"))),
                         let'
                           (var_w("H",1),mop(Cast w1,ll[var_b"b'5"]),
                            let'
                              (var_w("S",1),mop(Cast w1,ll[var_b"b'6"]),
                               let'
                                 (var_w("Rt",4),
                                  mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                  let'
                                    (var_w("Rn",4),
                                     mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                     let'
                                       (var_w("P",1),mop(Cast w1,ll[var_b"b'24"]),
                                        mb(call
                                             ("Do",
                                              @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                              tp[var_w("cond",4),
                                                 bop(Or,mop(Not,eq(var_w("H",1),lw(0,1))),
                                                     eq(var_w("S",1),lw(1,1)))],@{theory ARM_Monadic} ),
                                           close
                                             (var_b"b",
                                              ite(var_b"b",
                                                  let'
                                                    (var_b"wback",
                                                     bop(Or,eq(var_w("P",1),lw(0,1)),
                                                         eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1))),
                                                     mb(ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                                bop(And,var_b"wback",
                                                                    eq(var_w("Rn",4),var_w("Rt",4)))),
                                                            call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ
                                                               "'b state_scheme \<Rightarrow>
                                                                (unit \<times> 'b state_scheme)"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"LoadHalf/Byte (immediate)"],
                                                               @{theory ARM_Monadic} ),mu(lu,qTy)),
                                                        close
                                                          (var_a HOLogic.unitT,
                                                           mu(let'
                                                                (var_b"index",
                                                                 eq(var_w("P",1),lw(1,1)),
                                                                 let'
                                                                   (var_b"add",
                                                                    eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                       lw(1,1)),
                                                                    let'
                                                                      (var_b"unsigned",
                                                                       eq(var_w("S",1),lw(0,1)),
                                                                       let'
                                                                         (var("m",@{typ offset1}),
                                                                          call
                                                                            ("offset1.immediate_form1",
                                                                             @{typ offset1},
                                                                             mop(Cast w32,
                                                                                 cc[mop(Cast w4,
                                                                                        ll[var_b"b'11",
                                                                                           var_b"b'10",
                                                                                           var_b"b'9",
                                                                                           var_b"b'8"]),
                                                                                    mop(Cast w4,
                                                                                        ll[var_b"b'3",
                                                                                           var_b"b'2",
                                                                                           var_b"b'1",
                                                                                           var_b"b'0"])]),
                                                                             prev_thy ),
                                                                          ite(eq(var_w("H",1),
                                                                                 lw(1,1)),
                                                                              call
                                                                                ("instruction.Load",
                                                                                 @{typ instruction},
                                                                                 call
                                                                                   ("Load.LoadHalf",
                                                                                    @{typ Load},
                                                                                    tp[var_b"unsigned",
                                                                                       var_b"add",
                                                                                       var_b"index",
                                                                                       var_b"wback",
                                                                                       var_w("Rt",4),
                                                                                       var_w("Rn",4),
                                                                                       var("m",
                                                                                           @{typ offset1})],
                                                                                    prev_thy  ),
                                                                                 prev_thy  ),
                                                                              call
                                                                                ("instruction.Load",
                                                                                 @{typ instruction},
                                                                                 call
                                                                                   ("Load.LoadByte",
                                                                                    @{typ Load},
                                                                                    tp[var_b"unsigned",
                                                                                       var_b"add",
                                                                                       var_b"index",
                                                                                       var_b"wback",
                                                                                       var_w("Rt",4),
                                                                                       var_w("Rn",4),
                                                                                       var("m",
                                                                                           @{typ offset1})],
                                                                                    prev_thy ),
                                                                                prev_thy  )))))),qTy)))),
                                                  call
                                                    ("Skip",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow>
                                                      (instruction \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} )))))))))),
                        (bop(And,mop(Not,var_b"b'24"),
                             bop(And,var_b"b'22",
                                 bop(And,var_b"b'21",
                                     bop(And,mop(Not,var_b"b'20"),
                                         bop(And,var_b"b'7",
                                             bop(And,mop(Not,var_b"b'6"),
                                                 bop(And,var_b"b'5",var_b"b'4"))))))),
                         let'
                           (var_w("Rt",4),
                            mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                            let'
                              (var_w("Rn",4),
                               mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                               mb(call
                                    ("HaveThumb2",
                                     @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic} ),
                                  close
                                    (var_b"v",
                                     mb(mb(mu(tp[var_w("cond",4),var_b"v"],qTy),
                                           close
                                             (var("v",@{typ "4 word \<times> bool"}),
                                              call
                                                ("Do",
                                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                 var("v",@{typ "4 word \<times> bool"}),@{theory ARM_Monadic} ))),
                                        close
                                          (var_b"b",
                                           ite(var_b"b",
                                               mb(ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                          bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                              eq(var_w("Rn",4),var_w("Rt",4)))),
                                                      call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"StoreHalf (immediate)"],@{theory ARM_Monadic} ),
                                                      mu(lu,qTy)),
                                                  close
                                                    (var_a HOLogic.unitT,
                                                     mu(call
                                                          ("instruction.Store",@{typ instruction},
                                                           call
                                                             ("Store.StoreHalfUnprivileged",
                                                              @{typ Store},
                                                              tp[eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                    lw(1,1)),lt,var_w("Rt",4),
                                                                 var_w("Rn",4),
                                                                 call
                                                                   ("offset2.immediate_form2",
                                                                    @{typ offset2},
                                                                    mop(Cast w32,
                                                                        cc[mop(Cast w4,
                                                                               ll[var_b"b'11",
                                                                                  var_b"b'10",
                                                                                  var_b"b'9",
                                                                                  var_b"b'8"]),
                                                                           mop(Cast w4,
                                                                               ll[var_b"b'3",
                                                                                  var_b"b'2",
                                                                                  var_b"b'1",
                                                                                  var_b"b'0"])]),
                                                                    prev_thy )],prev_thy ),prev_thy ),
                                                        qTy))),
                                               call
                                                 ("Skip",
                                                  @{typ
                                                  "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                  lu,@{theory ARM_Monadic} ))))))))),
                        (bop(And,var_b"b'22",
                             bop(And,mop(Not,var_b"b'20"),
                                 bop(And,var_b"b'7",
                                     bop(And,mop(Not,var_b"b'6"),bop(And,var_b"b'5",var_b"b'4"))))),
                         let'
                           (var_w("Rt",4),
                            mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                            let'
                              (var_w("Rn",4),
                               mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                               let'
                                 (var_w("P",1),mop(Cast w1,ll[var_b"b'24"]),
                                  mb(call
                                       ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                        tp[var_w("cond",4),lt],@{theory ARM_Monadic} ),
                                     close
                                       (var_b"b",
                                        ite(var_b"b",
                                            let'
                                              (var_b"wback",
                                               bop(Or,eq(var_w("P",1),lw(0,1)),
                                                   eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1))),
                                               mb(ite(bop(Or,eq(var_w("Rt",4),lw(15,4)),
                                                          bop(And,var_b"wback",
                                                              bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                  eq(var_w("Rn",4),var_w("Rt",4))))),
                                                      call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"StoreHalf (immediate)"],@{theory ARM_Monadic} ),
                                                      mu(lu,qTy)),
                                                  close
                                                    (var_a HOLogic.unitT,
                                                     mu(call
                                                          ("instruction.Store",@{typ instruction},
                                                           call
                                                             ("Store.StoreHalf",@{typ Store},
                                                              tp[eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                    lw(1,1)),
                                                                 eq(var_w("P",1),lw(1,1)),
                                                                 var_b"wback",var_w("Rt",4),
                                                                 var_w("Rn",4),
                                                                 call
                                                                   ("offset1.immediate_form1",
                                                                    @{typ offset1},
                                                                    mop(Cast w32,
                                                                        cc[mop(Cast w4,
                                                                               ll[var_b"b'11",
                                                                                  var_b"b'10",
                                                                                  var_b"b'9",
                                                                                  var_b"b'8"]),
                                                                           mop(Cast w4,
                                                                               ll[var_b"b'3",
                                                                                  var_b"b'2",
                                                                                  var_b"b'1",
                                                                                  var_b"b'0"])]),
                                                                    prev_thy)],prev_thy ),prev_thy),
                                                        qTy)))),
                                            call
                                              ("Skip",
                                               @{typ
                                               "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                               lu,@{theory ARM_Monadic} ))))))))],
                       call
                         ("UndefinedARM",@{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                          var_w("cond",4),@{theory ARM_Monadic} ))))))))
end
\<close>

           




ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("DecodeThumb",
   close
     (var_w("h",16),
      let'
        (var("mc",@{typ MachineCode}),
         call("MachineCode.Thumb",@{typ MachineCode},var_w("h",16),@{theory} ),
         let'
           (tp[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",var_b"b'10",var_b"b'9",
               var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
               var_b"b'1",var_b"b'0"],
            call
              ("boolify'16",
               @{typ
               "bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
               var_w("h",16),@{theory} ),
            itb([(var_b"b'13",
                  itb([(var_b"b'15",
                        itb([(bop(And,mop(Not,var_b"b'14"),mop(Not,var_b"b'12")),
                              mb(call
                                   ("ThumbCondition",
                                    @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                    @{theory} ),
                                 close
                                   (var_w("v",4),
                                    mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                          close
                                            (var("v",@{typ "4 word \<times> bool"}),
                                             call
                                               ("Do",
                                                @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                       close
                                         (var_b"b",
                                          ite(var_b"b",
                                              mu(call
                                                   ("instruction.Data",@{typ instruction},
                                                    call
                                                      ("Data.ArithLogicImmediate",@{typ Data},
                                                       tp[lw(4,4),lf,
                                                          mop(Cast w4,
                                                              mop(Cast (Word_Lib.mk_wordT 3),
                                                                  ll[var_b"b'10",var_b"b'9",
                                                                     var_b"b'8"])),
                                                          ite(eq(mop(Cast w1,ll[var_b"b'11"]),
                                                                 lw(1,1)),lw(13,4),lw(15,4)),
                                                          cc[lw(15,4),
                                                             mop(Cast w8,
                                                                 ll[var_b"b'7",var_b"b'6",
                                                                    var_b"b'5",var_b"b'4",
                                                                    var_b"b'3",var_b"b'2",
                                                                    var_b"b'1",var_b"b'0"])]],
                                                       @{theory} ),@{theory} ),qTy),
                                              call
                                                ("Skip",
                                                 @{typ
                                                 "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                 lu,@{theory} ))))))),
                             (bop(And,mop(Not,var_b"b'14"),
                                  bop(And,var_b"b'12",
                                      bop(And,mop(Not,var_b"b'11"),
                                          bop(And,mop(Not,var_b"b'10"),
                                              bop(And,mop(Not,var_b"b'9"),mop(Not,var_b"b'8")))))),
                              mb(call
                                   ("ThumbCondition",
                                    @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                    @{theory} ),
                                 close
                                   (var_w("v",4),
                                    mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                          close
                                            (var("v",@{typ "4 word \<times> bool"}),
                                             call
                                               ("Do",
                                                @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                       close
                                         (var_b"b",
                                          ite(var_b"b",
                                              mu(call
                                                   ("instruction.Data",@{typ instruction},
                                                    call
                                                      ("Data.ArithLogicImmediate",@{typ Data},
                                                       tp[ite(eq(mop(Cast w1,ll[var_b"b'7"]),lw(1,1)),
                                                              lw(2,4),lw(4,4)),lf,lw(13,4),lw(13,4),
                                                          cc[lw(30,5),
                                                             mop(Cast (Word_Lib.mk_wordT 7),
                                                                 ll[var_b"b'6",var_b"b'5",
                                                                    var_b"b'4",var_b"b'3",
                                                                    var_b"b'2",var_b"b'1",var_b"b'0"])]],
                                                       @{theory} ),@{theory} ),qTy),
                                              call
                                                ("Skip",
                                                 @{typ
                                                 "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                 lu,@{theory} ))))))),
                             (bop(And,mop(Not,var_b"b'14"),
                                  bop(And,var_b"b'12",bop(And,mop(Not,var_b"b'10"),var_b"b'8"))),
                              mb(call
                                   ("HaveThumb2",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                    lu,@{theory} ),
                                 close
                                   (var_b"v",
                                    mb(mb(mu(tp[lw(14,4),var_b"v"],qTy),
                                          close
                                            (var("v",@{typ "4 word \<times> bool"}),
                                             call
                                               ("Do",
                                                @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                       close
                                         (var_b"b",
                                          ite(var_b"b",
                                              mb(call
                                                   ("InITBlock",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                                    @{theory} ),
                                                 close
                                                   (var_b"v",
                                                    mb(ite(var_b"v",
                                                           call
                                                             ("DECODE_UNPREDICTABLE",
                                                              @{typ
                                                              "'b state_scheme \<Rightarrow>
                                                               (unit \<times> 'b state_scheme)"},
                                                              tp[var("mc",@{typ MachineCode}),
                                                                 ls"CompareBranch"],@{theory} ),
                                                           mu(lu,qTy)),
                                                       close
                                                         (var_a HOLogic.unitT,
                                                          mu(call
                                                               ("instruction.Branch",
                                                                @{typ instruction},
                                                                call
                                                                  ("Branch.CompareBranch",
                                                                   @{typ Branch},
                                                                   tp[eq(mop(Cast w1,ll[var_b"b'11"]),
                                                                         lw(1,1)),
                                                                      mop(Cast w4,
                                                                          mop(Cast
                                                                                (Word_Lib.mk_wordT 3),
                                                                              ll[var_b"b'2",
                                                                                 var_b"b'1",
                                                                                 var_b"b'0"])),
                                                                      mop(Cast w32,
                                                                          cc[mop(Cast w1,
                                                                                 ll[var_b"b'9"]),
                                                                             mop(Cast
                                                                                   (Word_Lib.mk_wordT 5),
                                                                                 ll[var_b"b'7",
                                                                                    var_b"b'6",
                                                                                    var_b"b'5",
                                                                                    var_b"b'4",
                                                                                    var_b"b'3"]),
                                                                             lw(0,1)])],@{theory} ),
                                                                @{theory} ),qTy))))),
                                              call
                                                ("Skip",
                                                 @{typ
                                                 "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                 lu,@{theory} ))))))),
                             (bop(And,mop(Not,var_b"b'14"),
                                  bop(And,var_b"b'12",
                                      bop(And,mop(Not,var_b"b'11"),
                                          bop(And,mop(Not,var_b"b'10"),
                                              bop(And,var_b"b'9",
                                                  bop(And,mop(Not,var_b"b'8"),mop(Not,var_b"b'6"))))))),
                              mb(call
                                   ("ThumbCondition",
                                    @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                    @{theory} ),
                                 close
                                   (var_w("v",4),
                                    mb(mb(mb(call
                                               ("ArchVersion",
                                                @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},
                                                lu,@{theory} ),
                                             close
                                               (var_n"v0",
                                                mb(mu(bop(Ge,var_n"v0",ln 6),qTy),
                                                   close
                                                     (var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))))),
                                          close
                                            (var("v",@{typ "4 word \<times> bool"}),
                                             call
                                               ("Do",
                                                @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                       close
                                         (var_b"b",
                                          ite(var_b"b",
                                              mu(call
                                                   ("instruction.Media",@{typ instruction},
                                                    call
                                                      ("Media.ExtendHalfword",@{typ Media},
                                                       tp[eq(mop(Cast w1,ll[var_b"b'7"]),lw(1,1)),
                                                          mop(Cast w4,
                                                              mop(Cast (Word_Lib.mk_wordT 3),
                                                                  ll[var_b"b'2",var_b"b'1",
                                                                     var_b"b'0"])),lw(15,4),
                                                          mop(Cast w4,
                                                              mop(Cast (Word_Lib.mk_wordT 3),
                                                                  ll[var_b"b'5",var_b"b'4",
                                                                     var_b"b'3"])),ln 0],@{theory} ),
                                                    @{theory} ),qTy),
                                              call
                                                ("Skip",
                                                 @{typ
                                                 "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                 lu,@{theory} ))))))),
                             (bop(And,mop(Not,var_b"b'14"),
                                  bop(And,var_b"b'12",
                                      bop(And,mop(Not,var_b"b'11"),
                                          bop(And,mop(Not,var_b"b'10"),
                                              bop(And,var_b"b'9",
                                                  bop(And,mop(Not,var_b"b'8"),var_b"b'6")))))),
                              mb(call
                                   ("ThumbCondition",
                                    @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                    @{theory} ),
                                 close
                                   (var_w("v",4),
                                    mb(mb(mb(call
                                               ("ArchVersion",
                                                @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},
                                                lu,@{theory} ),
                                             close
                                               (var_n"v0",
                                                mb(mu(bop(Ge,var_n"v0",ln 6),qTy),
                                                   close
                                                     (var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))))),
                                          close
                                            (var("v",@{typ "4 word \<times> bool"}),
                                             call
                                               ("Do",
                                                @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                       close
                                         (var_b"b",
                                          ite(var_b"b",
                                              mu(call
                                                   ("instruction.Media",@{typ instruction},
                                                    call
                                                      ("Media.ExtendByte",@{typ Media},
                                                       tp[eq(mop(Cast w1,ll[var_b"b'7"]),lw(1,1)),
                                                          mop(Cast w4,
                                                              mop(Cast (Word_Lib.mk_wordT 3),
                                                                  ll[var_b"b'2",var_b"b'1",
                                                                     var_b"b'0"])),lw(15,4),
                                                          mop(Cast w4,
                                                              mop(Cast (Word_Lib.mk_wordT 3),
                                                                  ll[var_b"b'5",var_b"b'4",
                                                                     var_b"b'3"])),ln 0],@{theory} ),
                                                    @{theory} ),qTy),
                                              call
                                                ("Skip",
                                                 @{typ
                                                 "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                 lu,@{theory} ))))))),
                             (bop(And,mop(Not,var_b"b'14"),
                                  bop(And,var_b"b'12",
                                      bop(And,mop(Not,var_b"b'11"),
                                          bop(And,var_b"b'10",mop(Not,var_b"b'9"))))),
                              mb(call
                                   ("ThumbCondition",
                                    @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                    @{theory} ),
                                 close
                                   (var_w("v",4),
                                    mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                          close
                                            (var("v",@{typ "4 word \<times> bool"}),
                                             call
                                               ("Do",
                                                @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                       close
                                         (var_b"b",
                                          ite(var_b"b",
                                              let'
                                                (var_w("registers",16),
                                                 cc[lw(0,1),mop(Cast w1,ll[var_b"b'8"]),lw(0,6),
                                                    mop(Cast w8,
                                                        ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                           var_b"b'4",var_b"b'3",var_b"b'2",
                                                           var_b"b'1",var_b"b'0"])],
                                                 mb(ite(bop(Lt,
                                                            call
                                                              ("BitCount",HOLogic.natT,
                                                               var_w("registers",16),@{theory} ),ln 1),
                                                        call
                                                          ("DECODE_UNPREDICTABLE",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (unit \<times> 'b state_scheme)"},
                                                           tp[var("mc",@{typ MachineCode}),
                                                              ls"StoreMultiple"],@{theory} ),
                                                        mu(lu,qTy)),
                                                    close
                                                      (var_a HOLogic.unitT,
                                                       mu(call
                                                            ("instruction.Store",@{typ instruction},
                                                             call
                                                               ("Store.StoreMultiple",@{typ Store},
                                                                tp[lf,lt,lt,lw(13,4),
                                                                   var_w("registers",16)],@{theory} ),
                                                             @{theory} ),qTy)))),
                                              call
                                                ("Skip",
                                                 @{typ
                                                 "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                 lu,@{theory} ))))))),
                             (bop(And,mop(Not,var_b"b'14"),
                                  bop(And,var_b"b'12",
                                      bop(And,mop(Not,var_b"b'11"),
                                          bop(And,var_b"b'10",
                                              bop(And,var_b"b'9",
                                                  bop(And,mop(Not,var_b"b'8"),
                                                      bop(And,mop(Not,var_b"b'7"),
                                                          bop(And,var_b"b'6",mop(Not,var_b"b'5"))))))))),
                              mb(call
                                   ("ArchVersion",@{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},
                                    lu,@{theory} ),
                                 close
                                   (var_n"v",
                                    mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                             close(var_b"v",mu(tp[lw(14,4),var_b"v"],qTy))),
                                          close
                                            (var("v",@{typ "4 word \<times> bool"}),
                                             call
                                               ("Do",
                                                @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                       close
                                         (var_b"b",
                                          ite(var_b"b",
                                              mb(call
                                                   ("InITBlock",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                                    @{theory} ),
                                                 close
                                                   (var_b"v",
                                                    mb(ite(var_b"v",
                                                           call
                                                             ("DECODE_UNPREDICTABLE",
                                                              @{typ
                                                              "'b state_scheme \<Rightarrow>
                                                               (unit \<times> 'b state_scheme)"},
                                                              tp[var("mc",@{typ MachineCode}),
                                                                 ls"Setend"],@{theory} ),mu(lu,qTy)),
                                                       close
                                                         (var_a HOLogic.unitT,
                                                          mu(call
                                                               ("instruction.System",
                                                                @{typ instruction},
                                                                call
                                                                  ("System.Setend",@{typ System},
                                                                   eq(mop(Cast w1,ll[var_b"b'3"]),
                                                                      lw(1,1)),@{theory} ),@{theory} ),
                                                             qTy))))),
                                              call
                                                ("Skip",
                                                 @{typ
                                                 "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                 lu,@{theory} ))))))),
                             (bop(And,mop(Not,var_b"b'14"),
                                  bop(And,var_b"b'12",
                                      bop(And,mop(Not,var_b"b'11"),
                                          bop(And,var_b"b'10",
                                              bop(And,var_b"b'9",
                                                  bop(And,mop(Not,var_b"b'8"),
                                                      bop(And,mop(Not,var_b"b'7"),
                                                          bop(And,var_b"b'6",var_b"b'5")))))))),
                              let'
                                (var_w("F",1),mop(Cast w1,ll[var_b"b'0"]),
                                 let'
                                   (var_w("I",1),mop(Cast w1,ll[var_b"b'1"]),
                                    let'
                                      (var_w("A",1),mop(Cast w1,ll[var_b"b'2"]),
                                       mb(call
                                            ("ArchVersion",
                                             @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                             @{theory} ),
                                          close
                                            (var_n"v",
                                             mb(mb(mb(mu(bop(Ge,var_n"v",ln 6),qTy),
                                                      close(var_b"v",mu(tp[lw(14,4),var_b"v"],qTy))),
                                                   close
                                                     (var("v",@{typ "4 word \<times> bool"}),
                                                      call
                                                        ("Do",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                         var("v",@{typ "4 word \<times> bool"}),
                                                         @{theory} ))),
                                                close
                                                  (var_b"b",
                                                   ite(var_b"b",
                                                       mb(ite(eq(cc[var_w("A",1),var_w("I",1),
                                                                    var_w("F",1)],lw(0,3)),
                                                              mu(lt,qTy),
                                                              call
                                                                ("InITBlock",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (bool \<times> 'b state_scheme)"},lu,
                                                                 @{theory} )),
                                                          close
                                                            (var_b"v",
                                                             mb(ite(var_b"v",
                                                                    call
                                                                      ("DECODE_UNPREDICTABLE",
                                                                       @{typ
                                                                       "'b state_scheme \<Rightarrow>
                                                                        (unit \<times> 'b state_scheme)"},
                                                                       tp[var("mc",
                                                                              @{typ MachineCode}),
                                                                          ls"ChangeProcessorState"],
                                                                       @{theory} ),mu(lu,qTy)),
                                                                close
                                                                  (var_a HOLogic.unitT,
                                                                   mu(let'
                                                                        (var_b"enable",
                                                                         eq(mop(Cast w1,
                                                                                ll[var_b"b'4"]),
                                                                            lw(0,1)),
                                                                         call
                                                                           ("instruction.System",
                                                                            @{typ instruction},
                                                                            call
                                                                              ("System.ChangeProcessorState",
                                                                               @{typ System},
                                                                               tp[var_b"enable",
                                                                                  mop(Not,
                                                                                      var_b"enable"),
                                                                                  eq(var_w("A",1),
                                                                                     lw(1,1)),
                                                                                  eq(var_w("I",1),
                                                                                     lw(1,1)),
                                                                                  eq(var_w("F",1),
                                                                                     lw(1,1)),
                                                                                  lo (Word_Lib.mk_wordT 5)],
                                                                               @{theory} ),@{theory} )),
                                                                      qTy))))),
                                                       call
                                                         ("Skip",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow>
                                                           (instruction \<times> 'b state_scheme)"},lu,
                                                          @{theory} )))))))))),
                             (bop(And,mop(Not,var_b"b'14"),
                                  bop(And,var_b"b'12",
                                      bop(And,var_b"b'11",
                                          bop(And,mop(Not,var_b"b'10"),
                                              bop(And,var_b"b'9",mop(Not,var_b"b'8")))))),
                              let'
                                (var_w("Rd",3),
                                 mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'2",var_b"b'1",var_b"b'0"]),
                                 let'
                                   (var_w("Rm",3),
                                    mop(Cast (Word_Lib.mk_wordT 3),
                                        ll[var_b"b'5",var_b"b'4",var_b"b'3"]),
                                    mb(call
                                         ("ThumbCondition",
                                          @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                          @{theory} ),
                                       close
                                         (var_w("v",4),
                                          mb(mb(mb(call
                                                     ("ArchVersion",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},
                                                      lu,@{theory} ),
                                                   close
                                                     (var_n"v0",
                                                      mb(mu(bop(Ge,var_n"v0",ln 6),qTy),
                                                         close
                                                           (var_b"v0",
                                                            mu(tp[var_w("v",4),var_b"v0"],qTy))))),
                                                close
                                                  (var("v",@{typ "4 word \<times> bool"}),
                                                   call
                                                     ("Do",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                      var("v",@{typ "4 word \<times> bool"}),
                                                      @{theory} ))),
                                             close
                                               (var_b"b",
                                                ite(var_b"b",
                                                    mu(cs(mop(Cast (Word_Lib.mk_wordT 2),
                                                              ll[var_b"b'7",var_b"b'6"]),
                                                          [(var_w("v",2),
                                                            itb([(eq(var_w("v",2),lw(0,2)),
                                                                  call
                                                                    ("instruction.Media",
                                                                     @{typ instruction},
                                                                     call
                                                                       ("Media.ByteReverse",
                                                                        @{typ Media},
                                                                        tp[mop(Cast w4,var_w("Rd",3)),
                                                                           mop(Cast w4,var_w("Rm",3))],
                                                                        @{theory} ),@{theory} )),
                                                                 (eq(var_w("v",2),lw(1,2)),
                                                                  call
                                                                    ("instruction.Media",
                                                                     @{typ instruction},
                                                                     call
                                                                       ("Media.ByteReversePackedHalfword",
                                                                        @{typ Media},
                                                                        tp[mop(Cast w4,var_w("Rd",3)),
                                                                           mop(Cast w4,var_w("Rm",3))],
                                                                        @{theory} ),@{theory} )),
                                                                 (eq(var_w("v",2),lw(3,2)),
                                                                  call
                                                                    ("instruction.Media",
                                                                     @{typ instruction},
                                                                     call
                                                                       ("Media.ByteReverseSignedHalfword",
                                                                        @{typ Media},
                                                                        tp[mop(Cast w4,var_w("Rd",3)),
                                                                           mop(Cast w4,var_w("Rm",3))],
                                                                        @{theory} ),@{theory} ))],
                                                                call
                                                                  ("instruction.Undefined",
                                                                   @{typ instruction},lw(0,32),
                                                                   @{theory} )))],@{context}),qTy),
                                                    call
                                                      ("Skip",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow>
                                                        (instruction \<times> 'b state_scheme)"},lu,@{theory} ))))))))),
                             (bop(And,mop(Not,var_b"b'14"),
                                  bop(And,var_b"b'12",
                                      bop(And,var_b"b'11",bop(And,var_b"b'10",mop(Not,var_b"b'9"))))),
                              mb(call
                                   ("ThumbCondition",
                                    @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                    @{theory} ),
                                 close
                                   (var_w("v",4),
                                    mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                          close
                                            (var("v",@{typ "4 word \<times> bool"}),
                                             call
                                               ("Do",
                                                @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                       close
                                         (var_b"b",
                                          ite(var_b"b",
                                              let'
                                                (var_w("registers",16),
                                                 cc[mop(Cast w1,ll[var_b"b'8"]),lw(0,7),
                                                    mop(Cast w8,
                                                        ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                           var_b"b'4",var_b"b'3",var_b"b'2",
                                                           var_b"b'1",var_b"b'0"])],
                                                 mb(itb([(bop(Lt,
                                                              call
                                                                ("BitCount",HOLogic.natT,
                                                                 var_w("registers",16),@{theory} ),
                                                              ln 1),mu(lt,qTy)),
                                                         (bop(Bit,var_w("registers",16),ln 15),
                                                          mb(call
                                                               ("InITBlock",
                                                                @{typ
                                                                "'b state_scheme \<Rightarrow>
                                                                 (bool \<times> 'b state_scheme)"},lu,
                                                                @{theory} ),
                                                             close
                                                               (var_b"b",
                                                                ite(var_b"b",
                                                                    mb(call
                                                                         ("LastInITBlock",
                                                                          @{typ
                                                                          "'b state_scheme \<Rightarrow>
                                                                           (bool \<times> 'b state_scheme)"},
                                                                          lu,@{theory} ),
                                                                       close
                                                                         (var_b"v",
                                                                          mu(mop(Not,var_b"v"),qTy))),
                                                                    mu(lf,qTy)))))],mu(lf,qTy)),
                                                    close
                                                      (var_b"v",
                                                       mb(ite(var_b"v",
                                                              call
                                                                ("DECODE_UNPREDICTABLE",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (unit \<times> 'b state_scheme)"},
                                                                 tp[var("mc",@{typ MachineCode}),
                                                                    ls"LoadMultiple"],@{theory} ),
                                                              mu(lu,qTy)),
                                                          close
                                                            (var_a HOLogic.unitT,
                                                             mu(call
                                                                  ("instruction.Load",
                                                                   @{typ instruction},
                                                                   call
                                                                     ("Load.LoadMultiple",
                                                                      @{typ Load},
                                                                      tp[lt,lf,lt,lw(13,4),
                                                                         var_w("registers",16)],
                                                                      @{theory} ),@{theory} ),qTy)))))),
                                              call
                                                ("Skip",
                                                 @{typ
                                                 "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                 lu,@{theory} ))))))),
                             (bop(And,mop(Not,var_b"b'14"),
                                  bop(And,var_b"b'12",
                                      bop(And,var_b"b'11",
                                          bop(And,var_b"b'10",
                                              bop(And,var_b"b'9",mop(Not,var_b"b'8")))))),
                              mb(call
                                   ("ArchVersion",@{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},
                                    lu,@{theory} ),
                                 close
                                   (var_n"v",
                                    mb(mb(mb(mu(bop(Ge,var_n"v",ln 5),qTy),
                                             close(var_b"v",mu(tp[lw(14,4),var_b"v"],qTy))),
                                          close
                                            (var("v",@{typ "4 word \<times> bool"}),
                                             call
                                               ("Do",
                                                @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                       close
                                         (var_b"b",
                                          ite(var_b"b",
                                              mu(call
                                                   ("instruction.Hint",@{typ instruction},
                                                    call
                                                      ("Hint.Breakpoint",@{typ Hint},
                                                       mop(Cast w32,
                                                           mop(Cast w8,
                                                               ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                                  var_b"b'4",var_b"b'3",var_b"b'2",
                                                                  var_b"b'1",var_b"b'0"])),@{theory} ),
                                                    @{theory} ),qTy),
                                              call
                                                ("Skip",
                                                 @{typ
                                                 "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                 lu,@{theory} ))))))),
                             (bop(And,mop(Not,var_b"b'14"),
                                  bop(And,var_b"b'12",
                                      bop(And,var_b"b'11",
                                          bop(And,var_b"b'10",
                                              bop(And,var_b"b'9",
                                                  bop(And,var_b"b'8",
                                                      bop(And,mop(Not,var_b"b'3"),
                                                          bop(And,mop(Not,var_b"b'2"),
                                                              bop(And,mop(Not,var_b"b'1"),
                                                                  mop(Not,var_b"b'0")))))))))),
                              mb(call
                                   ("ThumbCondition",
                                    @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                    @{theory} ),
                                 close
                                   (var_w("v",4),
                                    mb(mu(tp[var_w("v",4),
                                             mop(Cast w8,
                                                 mop(Cast w4,
                                                     ll[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4"]))],
                                          qTy),
                                       close
                                         (var("v",@{typ "4 word \<times> 8 word"}),
                                          call
                                            ("DecodeHint",
                                             @{typ
                                             "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                             var("v",@{typ "4 word \<times> 8 word"}),@{theory} )))))),
                             (bop(And,mop(Not,var_b"b'14"),
                                  bop(And,var_b"b'12",
                                      bop(And,var_b"b'11",
                                          bop(And,var_b"b'10",bop(And,var_b"b'9",var_b"b'8"))))),
                              let'
                                (var_w("mask",4),
                                 mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                 let'
                                   (var_w("firstcond",4),
                                    mop(Cast w4,ll[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4"]),
                                    mb(call
                                         ("HaveThumb2",
                                          @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                          @{theory} ),
                                       close
                                         (var_b"v",
                                          mb(mb(mu(tp[lw(14,4),var_b"v"],qTy),
                                                close
                                                  (var("v",@{typ "4 word \<times> bool"}),
                                                   call
                                                     ("Do",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                      var("v",@{typ "4 word \<times> bool"}),
                                                      @{theory} ))),
                                             close
                                               (var_b"b",
                                                ite(var_b"b",
                                                    mb(itb([(eq(var_w("firstcond",4),lw(15,4)),
                                                             mu(lt,qTy)),
                                                            (bop(And,
                                                                 eq(var_w("firstcond",4),lw(14,4)),
                                                                 mop(Not,
                                                                     eq(call
                                                                          ("BitCount",HOLogic.natT,
                                                                           var_w("mask",4),@{theory} ),
                                                                        ln 1))),mu(lt,qTy))],
                                                           call
                                                             ("InITBlock",
                                                              @{typ
                                                              "'b state_scheme \<Rightarrow>
                                                               (bool \<times> 'b state_scheme)"},lu,@{theory} )),
                                                       close
                                                         (var_b"v",
                                                          mb(ite(var_b"v",
                                                                 call
                                                                   ("DECODE_UNPREDICTABLE",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (unit \<times> 'b state_scheme)"},
                                                                    tp[var("mc",@{typ MachineCode}),
                                                                       ls"IfThen"],@{theory} ),
                                                                 mu(lu,qTy)),
                                                             close
                                                               (var_a HOLogic.unitT,
                                                                mu(call
                                                                     ("instruction.IfThen",
                                                                      @{typ instruction},
                                                                      tp[var_w("firstcond",4),
                                                                         var_w("mask",4)],@{theory} ),
                                                                   qTy))))),
                                                    call
                                                      ("Skip",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow>
                                                        (instruction \<times> 'b state_scheme)"},lu,@{theory} ))))))))),
                             (bop(And,var_b"b'14",bop(And,mop(Not,var_b"b'12"),mop(Not,var_b"b'11"))),
                              mb(call
                                   ("ThumbCondition",
                                    @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                    @{theory} ),
                                 close
                                   (var_w("v",4),
                                    mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                          close
                                            (var("v",@{typ "4 word \<times> bool"}),
                                             call
                                               ("Do",
                                                @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                       close
                                         (var_b"b",
                                          ite(var_b"b",
                                              mb(call
                                                   ("InITBlock",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                                    @{theory} ),
                                                 close
                                                   (var_b"v",
                                                    mb(mb(ite(var_b"v",
                                                              mb(call
                                                                   ("LastInITBlock",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (bool \<times> 'b state_scheme)"},lu,
                                                                    @{theory} ),
                                                                 close
                                                                   (var_b"v",
                                                                    mu(mop(Not,var_b"v"),qTy))),
                                                              mu(lf,qTy)),
                                                          close
                                                            (var_b"b",
                                                             ite(var_b"b",
                                                                 call
                                                                   ("DECODE_UNPREDICTABLE",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (unit \<times> 'b state_scheme)"},
                                                                    tp[var("mc",@{typ MachineCode}),
                                                                       ls"BranchTarget"],@{theory} ),
                                                                 mu(lu,qTy)))),
                                                       close
                                                         (var_a HOLogic.unitT,
                                                          mu(call
                                                               ("instruction.Branch",
                                                                @{typ instruction},
                                                                call
                                                                  ("Branch.BranchTarget",
                                                                   @{typ Branch},
                                                                   mop(SE w32,
                                                                       cc[mop(Cast
                                                                                (Word_Lib.mk_wordT 11),
                                                                              ll[var_b"b'10",
                                                                                 var_b"b'9",
                                                                                 var_b"b'8",
                                                                                 var_b"b'7",
                                                                                 var_b"b'6",
                                                                                 var_b"b'5",
                                                                                 var_b"b'4",
                                                                                 var_b"b'3",
                                                                                 var_b"b'2",
                                                                                 var_b"b'1",
                                                                                 var_b"b'0"]),
                                                                          lw(0,1)]),@{theory} ),
                                                                @{theory} ),qTy))))),
                                              call
                                                ("Skip",
                                                 @{typ
                                                 "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                 lu,@{theory} )))))))],
                            call
                              ("UndefinedThumb",
                               @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                               @{theory} ))),
                       (bop(And,mop(Not,var_b"b'14"),
                            bop(And,mop(Not,var_b"b'12"),mop(Not,var_b"b'11"))),
                        mb(call
                             ("ThumbCondition",@{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                              lu,@{theory} ),
                           close
                             (var_w("v",4),
                              mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                    close
                                      (var("v",@{typ "4 word \<times> bool"}),
                                       call
                                         ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                          var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                 close
                                   (var_b"b",
                                    ite(var_b"b",
                                        mb(call
                                             ("InITBlock",
                                              @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                              @{theory} ),
                                           close
                                             (var_b"v",
                                              mb(mu(mop(Not,var_b"v"),qTy),
                                                 close
                                                   (var_b"setflags",
                                                    mu(call
                                                         ("instruction.Data",@{typ instruction},
                                                          call
                                                            ("Data.Move",@{typ Data},
                                                             tp[var_b"setflags",lf,
                                                                mop(Cast w4,
                                                                    mop(Cast (Word_Lib.mk_wordT 3),
                                                                        ll[var_b"b'10",var_b"b'9",
                                                                           var_b"b'8"])),
                                                                mop(Cast (Word_Lib.mk_wordT 12),
                                                                    mop(Cast w8,
                                                                        ll[var_b"b'7",var_b"b'6",
                                                                           var_b"b'5",var_b"b'4",
                                                                           var_b"b'3",var_b"b'2",
                                                                           var_b"b'1",var_b"b'0"]))],
                                                             @{theory} ),@{theory} ),qTy))))),
                                        call
                                          ("Skip",
                                           @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                           lu,@{theory} ))))))),
                       (bop(And,mop(Not,var_b"b'14"),bop(And,mop(Not,var_b"b'12"),var_b"b'11")),
                        mb(call
                             ("ThumbCondition",@{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                              lu,@{theory} ),
                           close
                             (var_w("v",4),
                              mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                    close
                                      (var("v",@{typ "4 word \<times> bool"}),
                                       call
                                         ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                          var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                 close
                                   (var_b"b",
                                    ite(var_b"b",
                                        mu(call
                                             ("instruction.Data",@{typ instruction},
                                              call
                                                ("Data.TestCompareImmediate",@{typ Data},
                                                 tp[lw(2,2),
                                                    mop(Cast w4,
                                                        mop(Cast (Word_Lib.mk_wordT 3),
                                                            ll[var_b"b'10",var_b"b'9",var_b"b'8"])),
                                                    mop(Cast (Word_Lib.mk_wordT 12),
                                                        mop(Cast w8,
                                                            ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                               var_b"b'4",var_b"b'3",var_b"b'2",
                                                               var_b"b'1",var_b"b'0"]))],@{theory} ),
                                              @{theory} ),qTy),
                                        call
                                          ("Skip",
                                           @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                           lu,@{theory} ))))))),
                       (bop(And,mop(Not,var_b"b'14"),var_b"b'12"),
                        mb(call
                             ("ThumbCondition",@{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                              lu,@{theory} ),
                           close
                             (var_w("v",4),
                              mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                    close
                                      (var("v",@{typ "4 word \<times> bool"}),
                                       call
                                         ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                          var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                 close
                                   (var_b"b",
                                    ite(var_b"b",
                                        let'
                                          (var_w("d",4),
                                           mop(Cast w4,
                                               mop(Cast (Word_Lib.mk_wordT 3),
                                                   ll[var_b"b'10",var_b"b'9",var_b"b'8"])),
                                           mb(call
                                                ("InITBlock",
                                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                 lu,@{theory} ),
                                              close
                                                (var_b"v",
                                                 mb(mu(mop(Not,var_b"v"),qTy),
                                                    close
                                                      (var_b"setflags",
                                                       mu(call
                                                            ("instruction.Data",@{typ instruction},
                                                             call
                                                               ("Data.ArithLogicImmediate",
                                                                @{typ Data},
                                                                tp[ite(eq(mop(Cast w1,
                                                                              ll[var_b"b'11"]),
                                                                          lw(1,1)),lw(2,4),lw(4,4)),
                                                                   var_b"setflags",var_w("d",4),
                                                                   var_w("d",4),
                                                                   mop(Cast (Word_Lib.mk_wordT 12),
                                                                       mop(Cast w8,
                                                                           ll[var_b"b'7",var_b"b'6",
                                                                              var_b"b'5",var_b"b'4",
                                                                              var_b"b'3",var_b"b'2",
                                                                              var_b"b'1",var_b"b'0"]))],
                                                                @{theory} ),@{theory} ),qTy)))))),
                                        call
                                          ("Skip",
                                           @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                           lu,@{theory} ))))))),
                       (bop(And,var_b"b'14",mop(Not,var_b"b'12")),
                        let'
                          (var_w("Rt",3),
                           mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'2",var_b"b'1",var_b"b'0"]),
                           let'
                             (var_w("Rn",3),
                              mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'5",var_b"b'4",var_b"b'3"]),
                              mb(call
                                   ("ThumbCondition",
                                    @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                    @{theory} ),
                                 close
                                   (var_w("v",4),
                                    mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                          close
                                            (var("v",@{typ "4 word \<times> bool"}),
                                             call
                                               ("Do",
                                                @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                       close
                                         (var_b"b",
                                          ite(var_b"b",
                                              mu(let'
                                                   (var("m",@{typ offset1}),
                                                    call
                                                      ("offset1.immediate_form1",@{typ offset1},
                                                       mop(Cast w32,
                                                           cc[mop(Cast (Word_Lib.mk_wordT 5),
                                                                  ll[var_b"b'10",var_b"b'9",
                                                                     var_b"b'8",var_b"b'7",
                                                                     var_b"b'6"]),lw(0,2)]),
                                                       @{theory} ),
                                                    ite(eq(mop(Cast w1,ll[var_b"b'11"]),lw(1,1)),
                                                        call
                                                          ("instruction.Load",@{typ instruction},
                                                           call
                                                             ("Load.LoadWord",@{typ Load},
                                                              tp[lt,lt,lf,
                                                                 mop(Cast w4,var_w("Rt",3)),
                                                                 mop(Cast w4,var_w("Rn",3)),
                                                                 var("m",@{typ offset1})],@{theory} ),
                                                           @{theory} ),
                                                        call
                                                          ("instruction.Store",@{typ instruction},
                                                           call
                                                             ("Store.StoreWord",@{typ Store},
                                                              tp[lt,lt,lf,
                                                                 mop(Cast w4,var_w("Rt",3)),
                                                                 mop(Cast w4,var_w("Rn",3)),
                                                                 var("m",@{typ offset1})],@{theory} ),
                                                           @{theory} ))),qTy),
                                              call
                                                ("Skip",
                                                 @{typ
                                                 "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                 lu,@{theory} ))))))))),
                       (bop(And,var_b"b'14",var_b"b'12"),
                        let'
                          (var_w("Rt",3),
                           mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'2",var_b"b'1",var_b"b'0"]),
                           let'
                             (var_w("Rn",3),
                              mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'5",var_b"b'4",var_b"b'3"]),
                              mb(call
                                   ("ThumbCondition",
                                    @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                    @{theory} ),
                                 close
                                   (var_w("v",4),
                                    mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                          close
                                            (var("v",@{typ "4 word \<times> bool"}),
                                             call
                                               ("Do",
                                                @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                       close
                                         (var_b"b",
                                          ite(var_b"b",
                                              mu(let'
                                                   (var("m",@{typ offset1}),
                                                    call
                                                      ("offset1.immediate_form1",@{typ offset1},
                                                       mop(Cast w32,
                                                           mop(Cast (Word_Lib.mk_wordT 5),
                                                               ll[var_b"b'10",var_b"b'9",var_b"b'8",
                                                                  var_b"b'7",var_b"b'6"])),@{theory} ),
                                                    ite(eq(mop(Cast w1,ll[var_b"b'11"]),lw(1,1)),
                                                        call
                                                          ("instruction.Load",@{typ instruction},
                                                           call
                                                             ("Load.LoadByte",@{typ Load},
                                                              tp[lt,lt,lt,lf,
                                                                 mop(Cast w4,var_w("Rt",3)),
                                                                 mop(Cast w4,var_w("Rn",3)),
                                                                 var("m",@{typ offset1})],@{theory} ),
                                                           @{theory} ),
                                                        call
                                                          ("instruction.Store",@{typ instruction},
                                                           call
                                                             ("Store.StoreByte",@{typ Store},
                                                              tp[lt,lt,lf,
                                                                 mop(Cast w4,var_w("Rt",3)),
                                                                 mop(Cast w4,var_w("Rn",3)),
                                                                 var("m",@{typ offset1})],@{theory} ),
                                                           @{theory} ))),qTy),
                                              call
                                                ("Skip",
                                                 @{typ
                                                 "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                 lu,@{theory} )))))))))],
                      call
                        ("UndefinedThumb",@{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                         lu,@{theory} ))),
                 (var_b"b'15",
                  itb([(bop(And,mop(Not,var_b"b'14"),mop(Not,var_b"b'12")),
                        let'
                          (var_w("Rt",3),
                           mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'2",var_b"b'1",var_b"b'0"]),
                           let'
                             (var_w("Rn",3),
                              mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'5",var_b"b'4",var_b"b'3"]),
                              mb(call
                                   ("ThumbCondition",
                                    @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                    @{theory} ),
                                 close
                                   (var_w("v",4),
                                    mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                          close
                                            (var("v",@{typ "4 word \<times> bool"}),
                                             call
                                               ("Do",
                                                @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                       close
                                         (var_b"b",
                                          ite(var_b"b",
                                              mu(let'
                                                   (var("m",@{typ offset1}),
                                                    call
                                                      ("offset1.immediate_form1",@{typ offset1},
                                                       mop(Cast w32,
                                                           cc[mop(Cast (Word_Lib.mk_wordT 5),
                                                                  ll[var_b"b'10",var_b"b'9",
                                                                     var_b"b'8",var_b"b'7",
                                                                     var_b"b'6"]),lw(0,1)]),
                                                       @{theory} ),
                                                    ite(eq(mop(Cast w1,ll[var_b"b'11"]),lw(1,1)),
                                                        call
                                                          ("instruction.Load",@{typ instruction},
                                                           call
                                                             ("Load.LoadHalf",@{typ Load},
                                                              tp[lt,lt,lt,lf,
                                                                 mop(Cast w4,var_w("Rt",3)),
                                                                 mop(Cast w4,var_w("Rn",3)),
                                                                 var("m",@{typ offset1})],@{theory} ),
                                                           @{theory} ),
                                                        call
                                                          ("instruction.Store",@{typ instruction},
                                                           call
                                                             ("Store.StoreHalf",@{typ Store},
                                                              tp[lt,lt,lf,
                                                                 mop(Cast w4,var_w("Rt",3)),
                                                                 mop(Cast w4,var_w("Rn",3)),
                                                                 var("m",@{typ offset1})],@{theory} ),
                                                           @{theory} ))),qTy),
                                              call
                                                ("Skip",
                                                 @{typ
                                                 "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                 lu,@{theory} ))))))))),
                       (bop(And,mop(Not,var_b"b'14"),var_b"b'12"),
                        let'
                          (var_w("Rt",3),
                           mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'10",var_b"b'9",var_b"b'8"]),
                           mb(call
                                ("ThumbCondition",
                                 @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,@{theory} ),
                              close
                                (var_w("v",4),
                                 mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                       close
                                         (var("v",@{typ "4 word \<times> bool"}),
                                          call
                                            ("Do",
                                             @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                             var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                    close
                                      (var_b"b",
                                       ite(var_b"b",
                                           mu(let'
                                                (var("m",@{typ offset1}),
                                                 call
                                                   ("offset1.immediate_form1",@{typ offset1},
                                                    mop(Cast w32,
                                                        cc[mop(Cast w8,
                                                               ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                                  var_b"b'4",var_b"b'3",var_b"b'2",
                                                                  var_b"b'1",var_b"b'0"]),lw(0,2)]),
                                                    @{theory} ),
                                                 ite(eq(mop(Cast w1,ll[var_b"b'11"]),lw(1,1)),
                                                     call
                                                       ("instruction.Load",@{typ instruction},
                                                        call
                                                          ("Load.LoadWord",@{typ Load},
                                                           tp[lt,lt,lf,mop(Cast w4,var_w("Rt",3)),
                                                              lw(13,4),var("m",@{typ offset1})],
                                                           @{theory} ),@{theory} ),
                                                     call
                                                       ("instruction.Store",@{typ instruction},
                                                        call
                                                          ("Store.StoreWord",@{typ Store},
                                                           tp[lt,lt,lf,mop(Cast w4,var_w("Rt",3)),
                                                              lw(13,4),var("m",@{typ offset1})],
                                                           @{theory} ),@{theory} ))),qTy),
                                           call
                                             ("Skip",
                                              @{typ
                                              "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                              lu,@{theory} )))))))),
                       (bop(And,var_b"b'14",bop(And,mop(Not,var_b"b'12"),mop(Not,var_b"b'11"))),
                        mb(call
                             ("ThumbCondition",@{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                              lu,@{theory} ),
                           close
                             (var_w("v",4),
                              mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                    close
                                      (var("v",@{typ "4 word \<times> bool"}),
                                       call
                                         ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                          var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                 close
                                   (var_b"b",
                                    ite(var_b"b",
                                        let'
                                          (var_w("registers",16),
                                           mop(Cast w16,
                                               mop(Cast w8,
                                                   ll[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                                      var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"])),
                                           mb(ite(bop(Lt,
                                                      call
                                                        ("BitCount",HOLogic.natT,
                                                         var_w("registers",16),@{theory} ),ln 1),
                                                  call
                                                    ("DECODE_UNPREDICTABLE",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                     tp[var("mc",@{typ MachineCode}),
                                                        ls"StoreMultiple"],@{theory} ),mu(lu,qTy)),
                                              close
                                                (var_a HOLogic.unitT,
                                                 mu(call
                                                      ("instruction.Store",@{typ instruction},
                                                       call
                                                         ("Store.StoreMultiple",@{typ Store},
                                                          tp[lt,lf,lt,
                                                             mop(Cast w4,
                                                                 mop(Cast (Word_Lib.mk_wordT 3),
                                                                     ll[var_b"b'10",var_b"b'9",
                                                                        var_b"b'8"])),
                                                             var_w("registers",16)],@{theory} ),
                                                       @{theory} ),qTy)))),
                                        call
                                          ("Skip",
                                           @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                           lu,@{theory} ))))))),
                       (bop(And,var_b"b'14",bop(And,mop(Not,var_b"b'12"),var_b"b'11")),
                        let'
                          (var_w("Rn",3),
                           mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'10",var_b"b'9",var_b"b'8"]),
                           mb(call
                                ("ThumbCondition",
                                 @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,@{theory} ),
                              close
                                (var_w("v",4),
                                 mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                       close
                                         (var("v",@{typ "4 word \<times> bool"}),
                                          call
                                            ("Do",
                                             @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                             var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                    close
                                      (var_b"b",
                                       ite(var_b"b",
                                           let'
                                             (var_w("registers",16),
                                              mop(Cast w16,
                                                  mop(Cast w8,
                                                      ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                         var_b"b'4",var_b"b'3",var_b"b'2",
                                                         var_b"b'1",var_b"b'0"])),
                                              mb(ite(bop(Lt,
                                                         call
                                                           ("BitCount",HOLogic.natT,
                                                            var_w("registers",16),@{theory} ),ln 1),
                                                     call
                                                       ("DECODE_UNPREDICTABLE",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                        tp[var("mc",@{typ MachineCode}),
                                                           ls"LoadMultiple"],@{theory} ),mu(lu,qTy)),
                                                 close
                                                   (var_a HOLogic.unitT,
                                                    mu(call
                                                         ("instruction.Load",@{typ instruction},
                                                          call
                                                            ("Load.LoadMultiple",@{typ Load},
                                                             tp[lt,lf,
                                                                mop(Not,
                                                                    bop(Bit,var_w("registers",16),
                                                                        mop(Cast HOLogic.natT,
                                                                            var_w("Rn",3)))),
                                                                mop(Cast w4,var_w("Rn",3)),
                                                                var_w("registers",16)],@{theory} ),
                                                          @{theory} ),qTy)))),
                                           call
                                             ("Skip",
                                              @{typ
                                              "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                              lu,@{theory} )))))))),
                       (bop(And,var_b"b'14",
                            bop(And,var_b"b'12",
                                bop(And,var_b"b'11",
                                    bop(And,var_b"b'10",bop(And,var_b"b'9",mop(Not,var_b"b'8")))))),
                        mb(call
                             ("ThumbCondition",@{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                              lu,@{theory} ),
                           close
                             (var_w("v",4),
                              mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                    close
                                      (var("v",@{typ "4 word \<times> bool"}),
                                       call
                                         ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                          var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                 close
                                   (var_b"b",
                                    ite(var_b"b",
                                        mu(call
                                             ("instruction.Undefined",@{typ instruction},
                                              mop(Cast w32,
                                                  mop(Cast w8,
                                                      ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                         var_b"b'4",var_b"b'3",var_b"b'2",
                                                         var_b"b'1",var_b"b'0"])),@{theory} ),qTy),
                                        call
                                          ("Skip",
                                           @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                           lu,@{theory} ))))))),
                       (bop(And,var_b"b'14",
                            bop(And,var_b"b'12",
                                bop(And,var_b"b'11",
                                    bop(And,var_b"b'10",bop(And,var_b"b'9",var_b"b'8"))))),
                        mb(call
                             ("ThumbCondition",@{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                              lu,@{theory} ),
                           close
                             (var_w("v",4),
                              mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                    close
                                      (var("v",@{typ "4 word \<times> bool"}),
                                       call
                                         ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                          var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                 close
                                   (var_b"b",
                                    ite(var_b"b",
                                        mu(call
                                             ("instruction.System",@{typ instruction},
                                              call
                                                ("System.SupervisorCall",@{typ System},
                                                 mop(Cast w32,
                                                     mop(Cast w8,
                                                         ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                            var_b"b'4",var_b"b'3",var_b"b'2",
                                                            var_b"b'1",var_b"b'0"])),@{theory} ),
                                              @{theory} ),qTy),
                                        call
                                          ("Skip",
                                           @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                           lu,@{theory} ))))))),
                       (bop(And,var_b"b'14",var_b"b'12"),
                        mb(call
                             ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                              tp[mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),lt],
                              @{theory} ),
                           close
                             (var_b"b",
                              ite(var_b"b",
                                  mb(call
                                       ("InITBlock",
                                        @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                        @{theory} ),
                                     close
                                       (var_b"v",
                                        mb(ite(var_b"v",
                                               call
                                                 ("DECODE_UNPREDICTABLE",
                                                  @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                  tp[var("mc",@{typ MachineCode}),ls"BranchTarget"],
                                                  @{theory} ),mu(lu,qTy)),
                                           close
                                             (var_a HOLogic.unitT,
                                              mu(call
                                                   ("instruction.Branch",@{typ instruction},
                                                    call
                                                      ("Branch.BranchTarget",@{typ Branch},
                                                       mop(SE w32,
                                                           cc[mop(Cast w8,
                                                                  ll[var_b"b'7",var_b"b'6",
                                                                     var_b"b'5",var_b"b'4",
                                                                     var_b"b'3",var_b"b'2",
                                                                     var_b"b'1",var_b"b'0"]),lw(0,1)]),
                                                       @{theory} ),@{theory} ),qTy))))),
                                  call
                                    ("Skip",
                                     @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                                     @{theory} )))))],
                      call
                        ("UndefinedThumb",@{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                         lu,@{theory} ))),
                 (bop(And,mop(Not,var_b"b'14"),
                      bop(And,var_b"b'12",bop(And,var_b"b'11",mop(Not,var_b"b'10")))),
                  mb(call
                       ("ThumbCondition",@{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                        @{theory} ),
                     close
                       (var_w("v",4),
                        mb(mb(mu(tp[var_w("v",4),lt],qTy),
                              close
                                (var("v",@{typ "4 word \<times> bool"}),
                                 call
                                   ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                    var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                           close
                             (var_b"b",
                              ite(var_b"b",
                                  mb(call
                                       ("InITBlock",
                                        @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                        @{theory} ),
                                     close
                                       (var_b"v",
                                        mb(mu(mop(Not,var_b"v"),qTy),
                                           close
                                             (var_b"setflags",
                                              mu(call
                                                   ("instruction.Data",@{typ instruction},
                                                    call
                                                      ("Data.Register",@{typ Data},
                                                       tp[ite(eq(mop(Cast w1,ll[var_b"b'9"]),lw(1,1)),
                                                              lw(2,4),lw(4,4)),var_b"setflags",
                                                          mop(Cast w4,
                                                              mop(Cast (Word_Lib.mk_wordT 3),
                                                                  ll[var_b"b'2",var_b"b'1",
                                                                     var_b"b'0"])),
                                                          mop(Cast w4,
                                                              mop(Cast (Word_Lib.mk_wordT 3),
                                                                  ll[var_b"b'5",var_b"b'4",
                                                                     var_b"b'3"])),
                                                          mop(Cast w4,
                                                              mop(Cast (Word_Lib.mk_wordT 3),
                                                                  ll[var_b"b'8",var_b"b'7",
                                                                     var_b"b'6"])),
                                                          lc("SRType_LSL","SRType",@{theory} ),ln 0],
                                                       @{theory} ),@{theory} ),qTy))))),
                                  call
                                    ("Skip",
                                     @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                                     @{theory} ))))))),
                 (bop(And,mop(Not,var_b"b'14"),bop(And,var_b"b'12",bop(And,var_b"b'11",var_b"b'10"))),
                  mb(call
                       ("ThumbCondition",@{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                        @{theory} ),
                     close
                       (var_w("v",4),
                        mb(mb(mu(tp[var_w("v",4),lt],qTy),
                              close
                                (var("v",@{typ "4 word \<times> bool"}),
                                 call
                                   ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                    var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                           close
                             (var_b"b",
                              ite(var_b"b",
                                  mb(call
                                       ("InITBlock",
                                        @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                        @{theory} ),
                                     close
                                       (var_b"v",
                                        mb(mu(mop(Not,var_b"v"),qTy),
                                           close
                                             (var_b"setflags",
                                              mu(call
                                                   ("instruction.Data",@{typ instruction},
                                                    call
                                                      ("Data.ArithLogicImmediate",@{typ Data},
                                                       tp[ite(eq(mop(Cast w1,ll[var_b"b'9"]),lw(1,1)),
                                                              lw(2,4),lw(4,4)),var_b"setflags",
                                                          mop(Cast w4,
                                                              mop(Cast (Word_Lib.mk_wordT 3),
                                                                  ll[var_b"b'2",var_b"b'1",
                                                                     var_b"b'0"])),
                                                          mop(Cast w4,
                                                              mop(Cast (Word_Lib.mk_wordT 3),
                                                                  ll[var_b"b'5",var_b"b'4",
                                                                     var_b"b'3"])),
                                                          mop(Cast (Word_Lib.mk_wordT 12),
                                                              mop(Cast (Word_Lib.mk_wordT 3),
                                                                  ll[var_b"b'8",var_b"b'7",
                                                                     var_b"b'6"]))],@{theory} ),
                                                    @{theory} ),qTy))))),
                                  call
                                    ("Skip",
                                     @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                                     @{theory} ))))))),
                 (mop(Not,var_b"b'14"),
                  mb(call
                       ("ThumbCondition",@{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                        @{theory} ),
                     close
                       (var_w("v",4),
                        mb(mb(mu(tp[var_w("v",4),lt],qTy),
                              close
                                (var("v",@{typ "4 word \<times> bool"}),
                                 call
                                   ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                    var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                           close
                             (var_b"b",
                              ite(var_b"b",
                                  mb(call
                                       ("InITBlock",
                                        @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                        @{theory} ),
                                     close
                                       (var_b"v",
                                        mb(mu(mop(Not,var_b"v"),qTy),
                                           close
                                             (var_b"setflags",
                                              mu(let'
                                                   (tp[var("shift_t",@{typ SRType}),var_n"shift_n"],
                                                    call
                                                      ("DecodeImmShift",
                                                       @{typ "SRType \<times> nat"},
                                                       tp[mop(Cast (Word_Lib.mk_wordT 2),
                                                              ll[var_b"b'12",var_b"b'11"]),
                                                          mop(Cast (Word_Lib.mk_wordT 5),
                                                              ll[var_b"b'10",var_b"b'9",var_b"b'8",
                                                                 var_b"b'7",var_b"b'6"])],@{theory} ),
                                                    call
                                                      ("instruction.Data",@{typ instruction},
                                                       call
                                                         ("Data.ShiftImmediate",@{typ Data},
                                                          tp[lf,var_b"setflags",
                                                             mop(Cast w4,
                                                                 mop(Cast (Word_Lib.mk_wordT 3),
                                                                     ll[var_b"b'2",var_b"b'1",
                                                                        var_b"b'0"])),
                                                             mop(Cast w4,
                                                                 mop(Cast (Word_Lib.mk_wordT 3),
                                                                     ll[var_b"b'5",var_b"b'4",
                                                                        var_b"b'3"])),
                                                             var("shift_t",@{typ SRType}),
                                                             var_n"shift_n"],@{theory} ),@{theory} )),
                                                 qTy))))),
                                  call
                                    ("Skip",
                                     @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                                     @{theory} ))))))),
                 (bop(And,var_b"b'14",
                      bop(And,mop(Not,var_b"b'12"),
                          bop(And,mop(Not,var_b"b'11"),mop(Not,var_b"b'10")))),
                  let'
                    (var_w("Ry",3),
                     mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'2",var_b"b'1",var_b"b'0"]),
                     let'
                       (var_w("Rx",3),
                        mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'5",var_b"b'4",var_b"b'3"]),
                        let'
                          (var_w("opc",4),
                           mop(Cast w4,ll[var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6"]),
                           mb(call
                                ("ThumbCondition",
                                 @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,@{theory} ),
                              close
                                (var_w("v",4),
                                 mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                       close
                                         (var("v",@{typ "4 word \<times> bool"}),
                                          call
                                            ("Do",
                                             @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                             var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                    close
                                      (var_b"b",
                                       ite(var_b"b",
                                           itb([(eq(var_w("opc",4),lw(0,4)),
                                                 let'
                                                   (var_w("d",4),mop(Cast w4,var_w("Ry",3)),
                                                    mb(call
                                                         ("InITBlock",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          lu,@{theory} ),
                                                       close
                                                         (var_b"v",
                                                          mb(mu(mop(Not,var_b"v"),qTy),
                                                             close
                                                               (var_b"setflags",
                                                                mu(call
                                                                     ("instruction.Data",
                                                                      @{typ instruction},
                                                                      call
                                                                        ("Data.Register",
                                                                         @{typ Data},
                                                                         tp[var_w("opc",4),
                                                                            var_b"setflags",
                                                                            var_w("d",4),
                                                                            var_w("d",4),
                                                                            mop(Cast w4,
                                                                                var_w("Rx",3)),
                                                                            lc("SRType_LSL",
                                                                               "SRType",@{theory} ),
                                                                            ln 0],@{theory} ),
                                                                      @{theory} ),qTy))))))),
                                                (eq(var_w("opc",4),lw(1,4)),
                                                 let'
                                                   (var_w("d",4),mop(Cast w4,var_w("Ry",3)),
                                                    mb(call
                                                         ("InITBlock",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          lu,@{theory} ),
                                                       close
                                                         (var_b"v",
                                                          mb(mu(mop(Not,var_b"v"),qTy),
                                                             close
                                                               (var_b"setflags",
                                                                mu(call
                                                                     ("instruction.Data",
                                                                      @{typ instruction},
                                                                      call
                                                                        ("Data.Register",
                                                                         @{typ Data},
                                                                         tp[var_w("opc",4),
                                                                            var_b"setflags",
                                                                            var_w("d",4),
                                                                            var_w("d",4),
                                                                            mop(Cast w4,
                                                                                var_w("Rx",3)),
                                                                            lc("SRType_LSL",
                                                                               "SRType",@{theory} ),
                                                                            ln 0],@{theory} ),
                                                                      @{theory} ),qTy))))))),
                                                (eq(var_w("opc",4),lw(5,4)),
                                                 let'
                                                   (var_w("d",4),mop(Cast w4,var_w("Ry",3)),
                                                    mb(call
                                                         ("InITBlock",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          lu,@{theory} ),
                                                       close
                                                         (var_b"v",
                                                          mb(mu(mop(Not,var_b"v"),qTy),
                                                             close
                                                               (var_b"setflags",
                                                                mu(call
                                                                     ("instruction.Data",
                                                                      @{typ instruction},
                                                                      call
                                                                        ("Data.Register",
                                                                         @{typ Data},
                                                                         tp[var_w("opc",4),
                                                                            var_b"setflags",
                                                                            var_w("d",4),
                                                                            var_w("d",4),
                                                                            mop(Cast w4,
                                                                                var_w("Rx",3)),
                                                                            lc("SRType_LSL",
                                                                               "SRType",@{theory} ),
                                                                            ln 0],@{theory} ),
                                                                      @{theory} ),qTy))))))),
                                                (eq(var_w("opc",4),lw(6,4)),
                                                 let'
                                                   (var_w("d",4),mop(Cast w4,var_w("Ry",3)),
                                                    mb(call
                                                         ("InITBlock",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          lu,@{theory} ),
                                                       close
                                                         (var_b"v",
                                                          mb(mu(mop(Not,var_b"v"),qTy),
                                                             close
                                                               (var_b"setflags",
                                                                mu(call
                                                                     ("instruction.Data",
                                                                      @{typ instruction},
                                                                      call
                                                                        ("Data.Register",
                                                                         @{typ Data},
                                                                         tp[var_w("opc",4),
                                                                            var_b"setflags",
                                                                            var_w("d",4),
                                                                            var_w("d",4),
                                                                            mop(Cast w4,
                                                                                var_w("Rx",3)),
                                                                            lc("SRType_LSL",
                                                                               "SRType",@{theory} ),
                                                                            ln 0],@{theory} ),
                                                                      @{theory} ),qTy))))))),
                                                (eq(var_w("opc",4),lw(12,4)),
                                                 let'
                                                   (var_w("d",4),mop(Cast w4,var_w("Ry",3)),
                                                    mb(call
                                                         ("InITBlock",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          lu,@{theory} ),
                                                       close
                                                         (var_b"v",
                                                          mb(mu(mop(Not,var_b"v"),qTy),
                                                             close
                                                               (var_b"setflags",
                                                                mu(call
                                                                     ("instruction.Data",
                                                                      @{typ instruction},
                                                                      call
                                                                        ("Data.Register",
                                                                         @{typ Data},
                                                                         tp[var_w("opc",4),
                                                                            var_b"setflags",
                                                                            var_w("d",4),
                                                                            var_w("d",4),
                                                                            mop(Cast w4,
                                                                                var_w("Rx",3)),
                                                                            lc("SRType_LSL",
                                                                               "SRType",@{theory} ),
                                                                            ln 0],@{theory} ),
                                                                      @{theory} ),qTy))))))),
                                                (eq(var_w("opc",4),lw(14,4)),
                                                 let'
                                                   (var_w("d",4),mop(Cast w4,var_w("Ry",3)),
                                                    mb(call
                                                         ("InITBlock",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          lu,@{theory} ),
                                                       close
                                                         (var_b"v",
                                                          mb(mu(mop(Not,var_b"v"),qTy),
                                                             close
                                                               (var_b"setflags",
                                                                mu(call
                                                                     ("instruction.Data",
                                                                      @{typ instruction},
                                                                      call
                                                                        ("Data.Register",
                                                                         @{typ Data},
                                                                         tp[var_w("opc",4),
                                                                            var_b"setflags",
                                                                            var_w("d",4),
                                                                            var_w("d",4),
                                                                            mop(Cast w4,
                                                                                var_w("Rx",3)),
                                                                            lc("SRType_LSL",
                                                                               "SRType",@{theory} ),
                                                                            ln 0],@{theory} ),
                                                                      @{theory} ),qTy))))))),
                                                (eq(var_w("opc",4),lw(2,4)),
                                                 let'
                                                   (var_w("d",4),mop(Cast w4,var_w("Ry",3)),
                                                    mb(call
                                                         ("InITBlock",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          lu,@{theory} ),
                                                       close
                                                         (var_b"v",
                                                          mb(mu(mop(Not,var_b"v"),qTy),
                                                             close
                                                               (var_b"setflags",
                                                                mu(call
                                                                     ("instruction.Data",
                                                                      @{typ instruction},
                                                                      call
                                                                        ("Data.ShiftRegister",
                                                                         @{typ Data},
                                                                         tp[lf,var_b"setflags",
                                                                            var_w("d",4),
                                                                            var_w("d",4),
                                                                            call
                                                                              ("DecodeRegShift",
                                                                               @{typ SRType},
                                                                               mop(Cast
                                                                                     (Word_Lib.mk_wordT 2),
                                                                                   bop(Sub,
                                                                                       var_w("opc",4),
                                                                                       lw(2,4))),
                                                                               @{theory} ),
                                                                            mop(Cast w4,
                                                                                var_w("Rx",3))],
                                                                         @{theory} ),@{theory} ),qTy))))))),
                                                (eq(var_w("opc",4),lw(3,4)),
                                                 let'
                                                   (var_w("d",4),mop(Cast w4,var_w("Ry",3)),
                                                    mb(call
                                                         ("InITBlock",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          lu,@{theory} ),
                                                       close
                                                         (var_b"v",
                                                          mb(mu(mop(Not,var_b"v"),qTy),
                                                             close
                                                               (var_b"setflags",
                                                                mu(call
                                                                     ("instruction.Data",
                                                                      @{typ instruction},
                                                                      call
                                                                        ("Data.ShiftRegister",
                                                                         @{typ Data},
                                                                         tp[lf,var_b"setflags",
                                                                            var_w("d",4),
                                                                            var_w("d",4),
                                                                            call
                                                                              ("DecodeRegShift",
                                                                               @{typ SRType},
                                                                               mop(Cast
                                                                                     (Word_Lib.mk_wordT 2),
                                                                                   bop(Sub,
                                                                                       var_w("opc",4),
                                                                                       lw(2,4))),
                                                                               @{theory} ),
                                                                            mop(Cast w4,
                                                                                var_w("Rx",3))],
                                                                         @{theory} ),@{theory} ),qTy))))))),
                                                (eq(var_w("opc",4),lw(4,4)),
                                                 let'
                                                   (var_w("d",4),mop(Cast w4,var_w("Ry",3)),
                                                    mb(call
                                                         ("InITBlock",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          lu,@{theory} ),
                                                       close
                                                         (var_b"v",
                                                          mb(mu(mop(Not,var_b"v"),qTy),
                                                             close
                                                               (var_b"setflags",
                                                                mu(call
                                                                     ("instruction.Data",
                                                                      @{typ instruction},
                                                                      call
                                                                        ("Data.ShiftRegister",
                                                                         @{typ Data},
                                                                         tp[lf,var_b"setflags",
                                                                            var_w("d",4),
                                                                            var_w("d",4),
                                                                            call
                                                                              ("DecodeRegShift",
                                                                               @{typ SRType},
                                                                               mop(Cast
                                                                                     (Word_Lib.mk_wordT 2),
                                                                                   bop(Sub,
                                                                                       var_w("opc",4),
                                                                                       lw(2,4))),
                                                                               @{theory} ),
                                                                            mop(Cast w4,
                                                                                var_w("Rx",3))],
                                                                         @{theory} ),@{theory} ),qTy))))))),
                                                (eq(var_w("opc",4),lw(7,4)),
                                                 let'
                                                   (var_w("d",4),mop(Cast w4,var_w("Ry",3)),
                                                    mb(call
                                                         ("InITBlock",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          lu,@{theory} ),
                                                       close
                                                         (var_b"v",
                                                          mb(mu(mop(Not,var_b"v"),qTy),
                                                             close
                                                               (var_b"setflags",
                                                                mu(call
                                                                     ("instruction.Data",
                                                                      @{typ instruction},
                                                                      call
                                                                        ("Data.ShiftRegister",
                                                                         @{typ Data},
                                                                         tp[lf,var_b"setflags",
                                                                            var_w("d",4),
                                                                            var_w("d",4),
                                                                            lc("SRType_ROR",
                                                                               "SRType",@{theory} ),
                                                                            mop(Cast w4,
                                                                                var_w("Rx",3))],
                                                                         @{theory} ),@{theory} ),qTy))))))),
                                                (eq(var_w("opc",4),lw(8,4)),
                                                 mu(call
                                                      ("instruction.Data",@{typ instruction},
                                                       call
                                                         ("Data.TestCompareRegister",@{typ Data},
                                                          tp[ex(var_w("opc",4),ln 1,ln 0,
                                                                (Word_Lib.mk_wordT 2)),
                                                             mop(Cast w4,var_w("Ry",3)),
                                                             mop(Cast w4,var_w("Rx",3)),
                                                             lc("SRType_LSL","SRType",@{theory} ),
                                                             ln 0],@{theory} ),@{theory} ),qTy)),
                                                (eq(var_w("opc",4),lw(10,4)),
                                                 mu(call
                                                      ("instruction.Data",@{typ instruction},
                                                       call
                                                         ("Data.TestCompareRegister",@{typ Data},
                                                          tp[ex(var_w("opc",4),ln 1,ln 0,
                                                                (Word_Lib.mk_wordT 2)),
                                                             mop(Cast w4,var_w("Ry",3)),
                                                             mop(Cast w4,var_w("Rx",3)),
                                                             lc("SRType_LSL","SRType",@{theory} ),
                                                             ln 0],@{theory} ),@{theory} ),qTy)),
                                                (eq(var_w("opc",4),lw(11,4)),
                                                 mu(call
                                                      ("instruction.Data",@{typ instruction},
                                                       call
                                                         ("Data.TestCompareRegister",@{typ Data},
                                                          tp[ex(var_w("opc",4),ln 1,ln 0,
                                                                (Word_Lib.mk_wordT 2)),
                                                             mop(Cast w4,var_w("Ry",3)),
                                                             mop(Cast w4,var_w("Rx",3)),
                                                             lc("SRType_LSL","SRType",@{theory} ),
                                                             ln 0],@{theory} ),@{theory} ),qTy)),
                                                (eq(var_w("opc",4),lw(9,4)),
                                                 mb(call
                                                      ("InITBlock",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                       lu,@{theory} ),
                                                    close
                                                      (var_b"v",
                                                       mb(mu(mop(Not,var_b"v"),qTy),
                                                          close
                                                            (var_b"setflags",
                                                             mu(call
                                                                  ("instruction.Data",
                                                                   @{typ instruction},
                                                                   call
                                                                     ("Data.ArithLogicImmediate",
                                                                      @{typ Data},
                                                                      tp[lw(3,4),var_b"setflags",
                                                                         mop(Cast w4,var_w("Ry",3)),
                                                                         mop(Cast w4,var_w("Rx",3)),
                                                                         lw(0,12)],@{theory} ),
                                                                   @{theory} ),qTy)))))),
                                                (eq(var_w("opc",4),lw(13,4)),
                                                 let'
                                                   (var_w("d",4),mop(Cast w4,var_w("Ry",3)),
                                                    let'
                                                      (var_w("n",4),mop(Cast w4,var_w("Rx",3)),
                                                       mb(call
                                                            ("ArchVersion",
                                                             @{typ
                                                             "'b state_scheme \<Rightarrow>
                                                              (nat \<times> 'b state_scheme)"},lu,@{theory} ),
                                                          close
                                                            (var_n"v",
                                                             mb(mb(mb(mu(bop(Lt,var_n"v",ln 6),qTy),
                                                                      close
                                                                        (var_b"b",
                                                                         mu(bop(And,var_b"b",
                                                                                eq(var_w("d",4),
                                                                                   var_w("n",4))),
                                                                            qTy))),
                                                                   close
                                                                     (var_b"b",
                                                                      ite(var_b"b",
                                                                          call
                                                                            ("DECODE_UNPREDICTABLE",
                                                                             @{typ
                                                                             "'b state_scheme \<Rightarrow>
                                                                              (unit \<times> 'b state_scheme)"},
                                                                             tp[var("mc",
                                                                                    @{typ MachineCode}),
                                                                                ls"Multiply"],
                                                                             @{theory} ),mu(lu,qTy)))),
                                                                close
                                                                  (var_a HOLogic.unitT,
                                                                   mb(call
                                                                        ("InITBlock",
                                                                         @{typ
                                                                         "'b state_scheme \<Rightarrow>
                                                                          (bool \<times> 'b state_scheme)"},
                                                                         lu,@{theory} ),
                                                                      close
                                                                        (var_b"v",
                                                                         mb(mu(mop(Not,var_b"v"),qTy),
                                                                            close
                                                                              (var_b"setflags",
                                                                               mu(call
                                                                                    ("instruction.Multiply",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Multiply.Multiply32",
                                                                                        @{typ Multiply},
                                                                                        tp[var_b"setflags",
                                                                                           var_w("d",4),
                                                                                           var_w("n",4),
                                                                                           var_w("d",4)],
                                                                                        @{theory} ),
                                                                                     @{theory} ),qTy)))))))))))),
                                                (eq(var_w("opc",4),lw(15,4)),
                                                 mb(call
                                                      ("InITBlock",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                       lu,@{theory} ),
                                                    close
                                                      (var_b"v",
                                                       mb(mu(mop(Not,var_b"v"),qTy),
                                                          close
                                                            (var_b"setflags",
                                                             mu(call
                                                                  ("instruction.Data",
                                                                   @{typ instruction},
                                                                   call
                                                                     ("Data.ShiftImmediate",
                                                                      @{typ Data},
                                                                      tp[lt,var_b"setflags",
                                                                         mop(Cast w4,var_w("Ry",3)),
                                                                         mop(Cast w4,var_w("Rx",3)),
                                                                         lc("SRType_LSL","SRType",
                                                                            @{theory} ),ln 0],
                                                                      @{theory} ),@{theory} ),qTy))))))],
                                               lx(@{typ
                                                  "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"})),
                                           call
                                             ("Skip",
                                              @{typ
                                              "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                              lu,@{theory} )))))))))),
                 (bop(And,var_b"b'14",
                      bop(And,mop(Not,var_b"b'12"),
                          bop(And,mop(Not,var_b"b'11"),
                              bop(And,var_b"b'10",bop(And,mop(Not,var_b"b'9"),mop(Not,var_b"b'8")))))),
                  let'
                    (var_w("Rm",4),mop(Cast w4,ll[var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3"]),
                     let'
                       (var_w("DN",1),mop(Cast w1,ll[var_b"b'7"]),
                        mb(call
                             ("ThumbCondition",@{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                              lu,@{theory} ),
                           close
                             (var_w("v",4),
                              mb(mb(mb(itb([(mop(Msb,var_w("Rm",4)),mu(lt,qTy)),
                                            (eq(var_w("DN",1),lw(1,1)),mu(lt,qTy))],
                                           call
                                             ("HaveThumb2",
                                              @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                              @{theory} )),
                                       close(var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                    close
                                      (var("v",@{typ "4 word \<times> bool"}),
                                       call
                                         ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                          var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                 close
                                   (var_b"b",
                                    ite(var_b"b",
                                        let'
                                          (var_w("d",4),
                                           cc[var_w("DN",1),
                                              mop(Cast (Word_Lib.mk_wordT 3),
                                                  ll[var_b"b'2",var_b"b'1",var_b"b'0"])],
                                           mb(itb([(bop(And,eq(var_w("d",4),lw(15,4)),
                                                        eq(var_w("Rm",4),lw(15,4))),mu(lt,qTy)),
                                                   (eq(var_w("d",4),lw(15,4)),
                                                    mb(call
                                                         ("InITBlock",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          lu,@{theory} ),
                                                       close
                                                         (var_b"b",
                                                          ite(var_b"b",
                                                              mb(call
                                                                   ("LastInITBlock",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (bool \<times> 'b state_scheme)"},lu,
                                                                    @{theory} ),
                                                                 close
                                                                   (var_b"v",
                                                                    mu(mop(Not,var_b"v"),qTy))),
                                                              mu(lf,qTy)))))],mu(lf,qTy)),
                                              close
                                                (var_b"v",
                                                 mb(ite(var_b"v",
                                                        call
                                                          ("DECODE_UNPREDICTABLE",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (unit \<times> 'b state_scheme)"},
                                                           tp[var("mc",@{typ MachineCode}),ls"ADD"],
                                                           @{theory} ),mu(lu,qTy)),
                                                    close
                                                      (var_a HOLogic.unitT,
                                                       mu(call
                                                            ("instruction.Data",@{typ instruction},
                                                             call
                                                               ("Data.Register",@{typ Data},
                                                                tp[lw(4,4),lf,var_w("d",4),
                                                                   var_w("d",4),var_w("Rm",4),
                                                                   lc("SRType_LSL","SRType",
                                                                      @{theory} ),ln 0],@{theory} ),
                                                             @{theory} ),qTy)))))),
                                        call
                                          ("Skip",
                                           @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                           lu,@{theory} ))))))))),
                 (bop(And,var_b"b'14",
                      bop(And,mop(Not,var_b"b'12"),
                          bop(And,mop(Not,var_b"b'11"),
                              bop(And,var_b"b'10",
                                  bop(And,mop(Not,var_b"b'9"),
                                      bop(And,var_b"b'8",
                                          bop(And,mop(Not,var_b"b'7"),mop(Not,var_b"b'6")))))))),
                  call
                    ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                     call
                       ("exception.UNPREDICTABLE",@{typ exception},ls"Thumb: 010001 0100 _",
                        @{theory ARM_Monadic}),@{theory ARM_Monadic})),
                 (bop(And,var_b"b'14",
                      bop(And,mop(Not,var_b"b'12"),
                          bop(And,mop(Not,var_b"b'11"),
                              bop(And,var_b"b'10",bop(And,mop(Not,var_b"b'9"),var_b"b'8"))))),
                  let'
                    (var_w("Rm",4),mop(Cast w4,ll[var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3"]),
                     mb(call
                          ("ThumbCondition",@{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                           @{theory} ),
                        close
                          (var_w("v",4),
                           mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                 close
                                   (var("v",@{typ "4 word \<times> bool"}),
                                    call
                                      ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                       var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                              close
                                (var_b"b",
                                 ite(var_b"b",
                                     let'
                                       (var_w("n",4),
                                        cc[mop(Cast w1,ll[var_b"b'7"]),
                                           mop(Cast (Word_Lib.mk_wordT 3),
                                               ll[var_b"b'2",var_b"b'1",var_b"b'0"])],
                                        mb(ite(bop(Or,
                                                   bop(And,bop(Ult,var_w("n",4),lw(8,4)),
                                                       bop(Ult,var_w("Rm",4),lw(8,4))),
                                                   bop(Or,eq(var_w("n",4),lw(15,4)),
                                                       eq(var_w("Rm",4),lw(15,4)))),
                                               call
                                                 ("DECODE_UNPREDICTABLE",
                                                  @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                  tp[var("mc",@{typ MachineCode}),ls"CMP"],@{theory} ),
                                               mu(lu,qTy)),
                                           close
                                             (var_a HOLogic.unitT,
                                              mu(call
                                                   ("instruction.Data",@{typ instruction},
                                                    call
                                                      ("Data.TestCompareRegister",@{typ Data},
                                                       tp[lw(2,2),var_w("n",4),var_w("Rm",4),
                                                          lc("SRType_LSL","SRType",@{theory} ),ln 0],
                                                       @{theory} ),@{theory} ),qTy)))),
                                     call
                                       ("Skip",
                                        @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                        lu,@{theory} )))))))),
                 (bop(And,var_b"b'14",
                      bop(And,mop(Not,var_b"b'12"),
                          bop(And,mop(Not,var_b"b'11"),
                              bop(And,var_b"b'10",bop(And,var_b"b'9",mop(Not,var_b"b'8")))))),
                  let'
                    (var_w("Rm",4),mop(Cast w4,ll[var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3"]),
                     let'
                       (var_w("D",1),mop(Cast w1,ll[var_b"b'7"]),
                        mb(call
                             ("ThumbCondition",@{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                              lu,@{theory} ),
                           close
                             (var_w("v",4),
                              mb(mb(mb(itb([(mop(Msb,var_w("Rm",4)),mu(lt,qTy)),
                                            (eq(var_w("D",1),lw(1,1)),mu(lt,qTy))],
                                           mb(call
                                                ("ArchVersion",
                                                 @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},
                                                 lu,@{theory} ),
                                              close(var_n"v",mu(bop(Ge,var_n"v",ln 6),qTy)))),
                                       close(var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                    close
                                      (var("v",@{typ "4 word \<times> bool"}),
                                       call
                                         ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                          var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                 close
                                   (var_b"b",
                                    ite(var_b"b",
                                        let'
                                          (var_w("d",4),
                                           cc[var_w("D",1),
                                              mop(Cast (Word_Lib.mk_wordT 3),
                                                  ll[var_b"b'2",var_b"b'1",var_b"b'0"])],
                                           mb(ite(eq(var_w("d",4),lw(15,4)),
                                                  mb(call
                                                       ("InITBlock",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                        lu,@{theory} ),
                                                     close
                                                       (var_b"b",
                                                        ite(var_b"b",
                                                            mb(call
                                                                 ("LastInITBlock",
                                                                  @{typ
                                                                  "'b state_scheme \<Rightarrow>
                                                                   (bool \<times> 'b state_scheme)"},lu,
                                                                  @{theory} ),
                                                               close
                                                                 (var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                                            mu(lf,qTy)))),mu(lf,qTy)),
                                              close
                                                (var_b"v",
                                                 mb(ite(var_b"v",
                                                        call
                                                          ("DECODE_UNPREDICTABLE",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (unit \<times> 'b state_scheme)"},
                                                           tp[var("mc",@{typ MachineCode}),ls"MOV"],
                                                           @{theory} ),mu(lu,qTy)),
                                                    close
                                                      (var_a HOLogic.unitT,
                                                       mu(call
                                                            ("instruction.Data",@{typ instruction},
                                                             call
                                                               ("Data.ShiftImmediate",@{typ Data},
                                                                tp[lf,lf,var_w("d",4),var_w("Rm",4),
                                                                   lc("SRType_LSL","SRType",
                                                                      @{theory} ),ln 0],@{theory} ),
                                                             @{theory} ),qTy)))))),
                                        call
                                          ("Skip",
                                           @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                           lu,@{theory} ))))))))),
                 (bop(And,var_b"b'14",
                      bop(And,mop(Not,var_b"b'12"),
                          bop(And,mop(Not,var_b"b'11"),
                              bop(And,var_b"b'10",
                                  bop(And,var_b"b'9",bop(And,var_b"b'8",mop(Not,var_b"b'7"))))))),
                  mb(call
                       ("ThumbCondition",@{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                        @{theory} ),
                     close
                       (var_w("v",4),
                        mb(mb(mu(tp[var_w("v",4),lt],qTy),
                              close
                                (var("v",@{typ "4 word \<times> bool"}),
                                 call
                                   ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                    var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                           close
                             (var_b"b",
                              ite(var_b"b",
                                  mb(call
                                       ("InITBlock",
                                        @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                        @{theory} ),
                                     close
                                       (var_b"v",
                                        mb(mb(ite(var_b"v",
                                                  mb(call
                                                       ("LastInITBlock",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                        lu,@{theory} ),
                                                     close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                                  mu(lf,qTy)),
                                              close
                                                (var_b"b",
                                                 ite(var_b"b",
                                                     call
                                                       ("DECODE_UNPREDICTABLE",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                        tp[var("mc",@{typ MachineCode}),
                                                           ls"BranchExchange"],@{theory} ),mu(lu,qTy)))),
                                           close
                                             (var_a HOLogic.unitT,
                                              mu(call
                                                   ("instruction.Branch",@{typ instruction},
                                                    call
                                                      ("Branch.BranchExchange",@{typ Branch},
                                                       mop(Cast w4,
                                                           ll[var_b"b'6",var_b"b'5",var_b"b'4",
                                                              var_b"b'3"]),@{theory} ),@{theory} ),qTy))))),
                                  call
                                    ("Skip",
                                     @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                                     @{theory} ))))))),
                 (bop(And,var_b"b'14",
                      bop(And,mop(Not,var_b"b'12"),
                          bop(And,mop(Not,var_b"b'11"),
                              bop(And,var_b"b'10",bop(And,var_b"b'9",bop(And,var_b"b'8",var_b"b'7")))))),
                  let'
                    (var_w("Rm",4),mop(Cast w4,ll[var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3"]),
                     mb(call
                          ("ThumbCondition",@{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                           @{theory} ),
                        close
                          (var_w("v",4),
                           mb(mb(mb(call
                                      ("ArchVersion",
                                       @{typ "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},lu,
                                       @{theory} ),
                                    close
                                      (var_n"v0",
                                       mb(mu(bop(Ge,var_n"v0",ln 5),qTy),
                                          close(var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))))),
                                 close
                                   (var("v",@{typ "4 word \<times> bool"}),
                                    call
                                      ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                       var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                              close
                                (var_b"b",
                                 ite(var_b"b",
                                     mb(ite(eq(var_w("Rm",4),lw(15,4)),mu(lt,qTy),
                                            mb(call
                                                 ("InITBlock",
                                                  @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                  lu,@{theory} ),
                                               close
                                                 (var_b"b",
                                                  ite(var_b"b",
                                                      mb(call
                                                           ("LastInITBlock",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (bool \<times> 'b state_scheme)"},lu,@{theory} ),
                                                         close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                                      mu(lf,qTy))))),
                                        close
                                          (var_b"v",
                                           mb(ite(var_b"v",
                                                  call
                                                    ("DECODE_UNPREDICTABLE",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                     tp[var("mc",@{typ MachineCode}),
                                                        ls"BranchLinkExchangeRegister"],@{theory} ),
                                                  mu(lu,qTy)),
                                              close
                                                (var_a HOLogic.unitT,
                                                 mu(call
                                                      ("instruction.Branch",@{typ instruction},
                                                       call
                                                         ("Branch.BranchLinkExchangeRegister",
                                                          @{typ Branch},var_w("Rm",4),@{theory} ),
                                                       @{theory} ),qTy))))),
                                     call
                                       ("Skip",
                                        @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                        lu,@{theory} )))))))),
                 (bop(And,var_b"b'14",bop(And,mop(Not,var_b"b'12"),var_b"b'11")),
                  mb(call
                       ("ThumbCondition",@{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                        @{theory} ),
                     close
                       (var_w("v",4),
                        mb(mb(mu(tp[var_w("v",4),lt],qTy),
                              close
                                (var("v",@{typ "4 word \<times> bool"}),
                                 call
                                   ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                    var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                           close
                             (var_b"b",
                              ite(var_b"b",
                                  mu(call
                                       ("instruction.Load",@{typ instruction},
                                        call
                                          ("Load.LoadLiteral",@{typ Load},
                                           tp[lt,
                                              mop(Cast w4,
                                                  mop(Cast (Word_Lib.mk_wordT 3),
                                                      ll[var_b"b'10",var_b"b'9",var_b"b'8"])),
                                              mop(Cast w32,
                                                  cc[mop(Cast w8,
                                                         ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                            var_b"b'4",var_b"b'3",var_b"b'2",
                                                            var_b"b'1",var_b"b'0"]),lw(0,2)])],
                                           @{theory} ),@{theory} ),qTy),
                                  call
                                    ("Skip",
                                     @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                                     @{theory} ))))))),
                 (bop(And,var_b"b'14",var_b"b'12"),
                  let'
                    (var_w("Rt",3),
                     mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'2",var_b"b'1",var_b"b'0"]),
                     let'
                       (var_w("Rn",3),
                        mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'5",var_b"b'4",var_b"b'3"]),
                        mb(call
                             ("ThumbCondition",@{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                              lu,@{theory} ),
                           close
                             (var_w("v",4),
                              mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                    close
                                      (var("v",@{typ "4 word \<times> bool"}),
                                       call
                                         ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                          var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                 close
                                   (var_b"b",
                                    ite(var_b"b",
                                        mu(let'
                                             (var("m",@{typ offset1}),
                                              call
                                                ("offset1.register_form1",@{typ offset1},
                                                 tp[mop(Cast w4,
                                                        mop(Cast (Word_Lib.mk_wordT 3),
                                                            ll[var_b"b'8",var_b"b'7",var_b"b'6"])),
                                                    lc("SRType_LSL","SRType",@{theory} ),ln 0],
                                                 prev_thy  ),
                                              cs(mop(Cast (Word_Lib.mk_wordT 3),
                                                     ll[var_b"b'11",var_b"b'10",var_b"b'9"]),
                                                 [(var_w("v",3),
                                                   itb([(eq(var_w("v",3),lw(0,3)),
                                                         call
                                                           ("instruction.Store",@{typ instruction},
                                                            call
                                                              ("Store.StoreWord",@{typ Store},
                                                               tp[lt,lt,lf,
                                                                  mop(Cast w4,var_w("Rt",3)),
                                                                  mop(Cast w4,var_w("Rn",3)),
                                                                  var("m",@{typ offset1})],@{theory} ),
                                                            @{theory} )),
                                                        (eq(var_w("v",3),lw(1,3)),
                                                         call
                                                           ("instruction.Store",@{typ instruction},
                                                            call
                                                              ("Store.StoreHalf",@{typ Store},
                                                               tp[lt,lt,lf,
                                                                  mop(Cast w4,var_w("Rt",3)),
                                                                  mop(Cast w4,var_w("Rn",3)),
                                                                  var("m",@{typ offset1})],@{theory} ),
                                                            @{theory} )),
                                                        (eq(var_w("v",3),lw(2,3)),
                                                         call
                                                           ("instruction.Store",@{typ instruction},
                                                            call
                                                              ("Store.StoreByte",@{typ Store},
                                                               tp[lt,lt,lf,
                                                                  mop(Cast w4,var_w("Rt",3)),
                                                                  mop(Cast w4,var_w("Rn",3)),
                                                                  var("m",@{typ offset1})],@{theory} ),
                                                            @{theory} )),
                                                        (eq(var_w("v",3),lw(3,3)),
                                                         call
                                                           ("instruction.Load",@{typ instruction},
                                                            call
                                                              ("Load.LoadByte",@{typ Load},
                                                               tp[lf,lt,lt,lf,
                                                                  mop(Cast w4,var_w("Rt",3)),
                                                                  mop(Cast w4,var_w("Rn",3)),
                                                                  var("m",@{typ offset1})],@{theory} ),
                                                            @{theory} )),
                                                        (eq(var_w("v",3),lw(4,3)),
                                                         call
                                                           ("instruction.Load",@{typ instruction},
                                                            call
                                                              ("Load.LoadWord",@{typ Load},
                                                               tp[lt,lt,lf,
                                                                  mop(Cast w4,var_w("Rt",3)),
                                                                  mop(Cast w4,var_w("Rn",3)),
                                                                  var("m",@{typ offset1})],@{theory} ),
                                                            @{theory} )),
                                                        (eq(var_w("v",3),lw(5,3)),
                                                         call
                                                           ("instruction.Load",@{typ instruction},
                                                            call
                                                              ("Load.LoadHalf",@{typ Load},
                                                               tp[lt,lt,lt,lf,
                                                                  mop(Cast w4,var_w("Rt",3)),
                                                                  mop(Cast w4,var_w("Rn",3)),
                                                                  var("m",@{typ offset1})],@{theory} ),
                                                            @{theory} )),
                                                        (eq(var_w("v",3),lw(6,3)),
                                                         call
                                                           ("instruction.Load",@{typ instruction},
                                                            call
                                                              ("Load.LoadByte",@{typ Load},
                                                               tp[lt,lt,lt,lf,
                                                                  mop(Cast w4,var_w("Rt",3)),
                                                                  mop(Cast w4,var_w("Rn",3)),
                                                                  var("m",@{typ offset1})],@{theory} ),
                                                            @{theory} )),
                                                        (eq(var_w("v",3),lw(7,3)),
                                                         call
                                                           ("instruction.Load",@{typ instruction},
                                                            call
                                                              ("Load.LoadHalf",@{typ Load},
                                                               tp[lf,lt,lt,lf,
                                                                  mop(Cast w4,var_w("Rt",3)),
                                                                  mop(Cast w4,var_w("Rn",3)),
                                                                  var("m",@{typ offset1})],@{theory} ),
                                                            @{theory} ))],lx @{typ instruction}))],
                                                 @{context})),qTy),
                                        call
                                          ("Skip",
                                           @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                           lu,@{theory} )))))))))],
                call
                  ("UndefinedThumb",@{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                   @{theory} ))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("DecodeThumbEE",
   close
     (var_w("h",16),
      let'
        (var("mc",@{typ MachineCode}),
         call("MachineCode.Thumb",@{typ MachineCode},var_w("h",16),@{theory} ),
         let'
           (tp[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",var_b"b'10",var_b"b'9",
               var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",
               var_b"b'1",var_b"b'0"],
            call
              ("boolify'16",
               @{typ
               "bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times>
                bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
               var_w("h",16),@{theory} ),
            ite(bop(And,var_b"b'14",mop(Not,var_b"b'13")),
                itb([(bop(And,mop(Not,var_b"b'15"),var_b"b'12"),
                      let'
                        (var_w("Rt",3),
                         mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'2",var_b"b'1",var_b"b'0"]),
                         let'
                           (var_w("Rn",3),
                            mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'5",var_b"b'4",var_b"b'3"]),
                            mb(call
                                 ("ThumbCondition",
                                  @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,@{theory} ),
                               close
                                 (var_w("v",4),
                                  mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                        close
                                          (var("v",@{typ "4 word \<times> bool"}),
                                           call
                                             ("Do",
                                              @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                              var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                     close
                                       (var_b"b",
                                        ite(var_b"b",
                                            let'
                                              (var_w("m",4),
                                               mop(Cast w4,
                                                   mop(Cast (Word_Lib.mk_wordT 3),
                                                       ll[var_b"b'8",var_b"b'7",var_b"b'6"])),
                                               let'
                                                 (var("m1",@{typ offset1}),
                                                  call
                                                    ("offset1.register_form1",@{typ offset1},
                                                     tp[var_w("m",4),
                                                        lc("SRType_LSL","SRType",@{theory} ),ln 1],
                                                    prev_thy  ),
                                                  let'
                                                    (var("m2",@{typ offset1}),
                                                     call
                                                       ("offset1.register_form1",@{typ offset1},
                                                        tp[var_w("m",4),
                                                           lc("SRType_LSL","SRType",@{theory} ),ln 2],
                                                       prev_thy ),
                                                     cs(mop(Cast (Word_Lib.mk_wordT 3),
                                                            ll[var_b"b'11",var_b"b'10",var_b"b'9"]),
                                                        [(var_w("v",3),
                                                          itb([(eq(var_w("v",3),lw(0,3)),
                                                                mu(call
                                                                     ("instruction.Store",
                                                                      @{typ instruction},
                                                                      call
                                                                        ("Store.StoreWord",
                                                                         @{typ Store},
                                                                         tp[lt,lt,lf,
                                                                            mop(Cast w4,
                                                                                var_w("Rt",3)),
                                                                            mop(Cast w4,
                                                                                var_w("Rn",3)),
                                                                            var("m2",@{typ offset1})],
                                                                         @{theory} ),@{theory} ),qTy)),
                                                               (eq(var_w("v",3),lw(1,3)),
                                                                mu(call
                                                                     ("instruction.Store",
                                                                      @{typ instruction},
                                                                      call
                                                                        ("Store.StoreHalf",
                                                                         @{typ Store},
                                                                         tp[lt,lt,lf,
                                                                            mop(Cast w4,
                                                                                var_w("Rt",3)),
                                                                            mop(Cast w4,
                                                                                var_w("Rn",3)),
                                                                            var("m1",@{typ offset1})],
                                                                         @{theory} ),@{theory} ),qTy)),
                                                               (eq(var_w("v",3),lw(4,3)),
                                                                mu(call
                                                                     ("instruction.Load",
                                                                      @{typ instruction},
                                                                      call
                                                                        ("Load.LoadWord",
                                                                         @{typ Load},
                                                                         tp[lt,lt,lf,
                                                                            mop(Cast w4,
                                                                                var_w("Rt",3)),
                                                                            mop(Cast w4,
                                                                                var_w("Rn",3)),
                                                                            var("m2",@{typ offset1})],
                                                                         @{theory} ),@{theory} ),qTy)),
                                                               (eq(var_w("v",3),lw(5,3)),
                                                                mu(call
                                                                     ("instruction.Load",
                                                                      @{typ instruction},
                                                                      call
                                                                        ("Load.LoadHalf",
                                                                         @{typ Load},
                                                                         tp[lt,lt,lt,lf,
                                                                            mop(Cast w4,
                                                                                var_w("Rt",3)),
                                                                            mop(Cast w4,
                                                                                var_w("Rn",3)),
                                                                            var("m1",@{typ offset1})],
                                                                         @{theory} ),@{theory} ),qTy)),
                                                               (eq(var_w("v",3),lw(7,3)),
                                                                mu(call
                                                                     ("instruction.Load",
                                                                      @{typ instruction},
                                                                      call
                                                                        ("Load.LoadHalf",
                                                                         @{typ Load},
                                                                         tp[lf,lt,lt,lf,
                                                                            mop(Cast w4,
                                                                                var_w("Rt",3)),
                                                                            mop(Cast w4,
                                                                                var_w("Rn",3)),
                                                                            var("m1",@{typ offset1})],
                                                                         @{theory} ),@{theory} ),qTy))],
                                                              call
                                                                ("DecodeThumb",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (instruction \<times> 'b state_scheme)"},
                                                                 var_w("h",16),@{theory} )))],
                                                        @{context})))),
                                            call
                                              ("Skip",
                                               @{typ
                                               "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                               lu,@{theory} ))))))))),
                     (bop(And,var_b"b'15",
                          bop(And,mop(Not,var_b"b'12"),
                              bop(And,mop(Not,var_b"b'11"),
                                  bop(And,mop(Not,var_b"b'10"),
                                      bop(And,mop(Not,var_b"b'9"),mop(Not,var_b"b'8")))))),
                      mb(call
                           ("ThumbCondition",@{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                            lu,@{theory} ),
                         close
                           (var_w("v",4),
                            mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                  close
                                    (var("v",@{typ "4 word \<times> bool"}),
                                     call
                                       ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                        var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                               close
                                 (var_b"b",
                                  ite(var_b"b",
                                      mb(call
                                           ("InITBlock",
                                            @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                            @{theory} ),
                                         close
                                           (var_b"v",
                                            mb(mb(ite(var_b"v",
                                                      mb(call
                                                           ("LastInITBlock",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (bool \<times> 'b state_scheme)"},lu,@{theory} ),
                                                         close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                                      mu(lf,qTy)),
                                                  close
                                                    (var_b"b",
                                                     ite(var_b"b",
                                                         call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (unit \<times> 'b state_scheme)"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"HandlerBranchParameter"],@{theory} ),
                                                         mu(lu,qTy)))),
                                               close
                                                 (var_a HOLogic.unitT,
                                                  mu(call
                                                       ("instruction.Branch",@{typ instruction},
                                                        call
                                                          ("Branch.HandlerBranchParameter",
                                                           @{typ Branch},
                                                           tp[mop(Cast w32,
                                                                  mop(Cast (Word_Lib.mk_wordT 3),
                                                                      ll[var_b"b'7",var_b"b'6",
                                                                         var_b"b'5"])),
                                                              mop(Cast w32,
                                                                  cc[mop(Cast (Word_Lib.mk_wordT 5),
                                                                         ll[var_b"b'4",var_b"b'3",
                                                                            var_b"b'2",var_b"b'1",
                                                                            var_b"b'0"]),lw(0,5)])],
                                                           @{theory} ),@{theory} ),qTy))))),
                                      call
                                        ("Skip",
                                         @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                         lu,@{theory} ))))))),
                     (bop(And,var_b"b'15",
                          bop(And,mop(Not,var_b"b'12"),
                              bop(And,mop(Not,var_b"b'11"),
                                  bop(And,mop(Not,var_b"b'10"),
                                      bop(And,mop(Not,var_b"b'9"),var_b"b'8"))))),
                      mu(call("instruction.Undefined",@{typ instruction},lw(0,32),@{theory} ),qTy)),
                     (bop(And,var_b"b'15",
                          bop(And,mop(Not,var_b"b'12"),
                              bop(And,mop(Not,var_b"b'11"),bop(And,mop(Not,var_b"b'10"),var_b"b'9")))),
                      mb(call
                           ("ThumbCondition",@{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                            lu,@{theory} ),
                         close
                           (var_w("v",4),
                            mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                  close
                                    (var("v",@{typ "4 word \<times> bool"}),
                                     call
                                       ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                        var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                               close
                                 (var_b"b",
                                  ite(var_b"b",
                                      mb(call
                                           ("InITBlock",
                                            @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                            @{theory} ),
                                         close
                                           (var_b"v",
                                            mb(mb(ite(var_b"v",
                                                      mb(call
                                                           ("LastInITBlock",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (bool \<times> 'b state_scheme)"},lu,@{theory} ),
                                                         close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                                      mu(lf,qTy)),
                                                  close
                                                    (var_b"b",
                                                     ite(var_b"b",
                                                         call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (unit \<times> 'b state_scheme)"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"HandlerBranchLink"],@{theory} ),
                                                         mu(lu,qTy)))),
                                               close
                                                 (var_a HOLogic.unitT,
                                                  mu(call
                                                       ("instruction.Branch",@{typ instruction},
                                                        call
                                                          ("Branch.HandlerBranchLink",@{typ Branch},
                                                           tp[eq(mop(Cast w1,ll[var_b"b'8"]),lw(1,1)),
                                                              mop(Cast w32,
                                                                  cc[mop(Cast w8,
                                                                         ll[var_b"b'7",var_b"b'6",
                                                                            var_b"b'5",var_b"b'4",
                                                                            var_b"b'3",var_b"b'2",
                                                                            var_b"b'1",var_b"b'0"]),
                                                                     lw(0,5)])],@{theory} ),@{theory} ),
                                                     qTy))))),
                                      call
                                        ("Skip",
                                         @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                         lu,@{theory} ))))))),
                     (bop(And,var_b"b'15",
                          bop(And,mop(Not,var_b"b'12"),bop(And,mop(Not,var_b"b'11"),var_b"b'10"))),
                      mb(call
                           ("ThumbCondition",@{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                            lu,@{theory} ),
                         close
                           (var_w("v",4),
                            mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                  close
                                    (var("v",@{typ "4 word \<times> bool"}),
                                     call
                                       ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                        var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                               close
                                 (var_b"b",
                                  ite(var_b"b",
                                      mb(call
                                           ("InITBlock",
                                            @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                            @{theory} ),
                                         close
                                           (var_b"v",
                                            mb(mb(ite(var_b"v",
                                                      mb(call
                                                           ("LastInITBlock",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (bool \<times> 'b state_scheme)"},lu,@{theory} ),
                                                         close(var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                                      mu(lf,qTy)),
                                                  close
                                                    (var_b"b",
                                                     ite(var_b"b",
                                                         call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (unit \<times> 'b state_scheme)"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"HandlerBranchLinkParameter"],
                                                            @{theory} ),mu(lu,qTy)))),
                                               close
                                                 (var_a HOLogic.unitT,
                                                  mu(call
                                                       ("instruction.Branch",@{typ instruction},
                                                        call
                                                          ("Branch.HandlerBranchLinkParameter",
                                                           @{typ Branch},
                                                           tp[mop(Cast w32,
                                                                  mop(Cast (Word_Lib.mk_wordT 5),
                                                                      ll[var_b"b'9",var_b"b'8",
                                                                         var_b"b'7",var_b"b'6",
                                                                         var_b"b'5"])),
                                                              mop(Cast w32,
                                                                  cc[mop(Cast (Word_Lib.mk_wordT 5),
                                                                         ll[var_b"b'4",var_b"b'3",
                                                                            var_b"b'2",var_b"b'1",
                                                                            var_b"b'0"]),lw(0,5)])],
                                                           @{theory} ),@{theory} ),qTy))))),
                                      call
                                        ("Skip",
                                         @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                         lu,@{theory} ))))))),
                     (bop(And,var_b"b'15",
                          bop(And,mop(Not,var_b"b'12"),
                              bop(And,var_b"b'11",bop(And,mop(Not,var_b"b'10"),mop(Not,var_b"b'9"))))),
                      mb(call
                           ("ThumbCondition",@{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                            lu,@{theory} ),
                         close
                           (var_w("v",4),
                            mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                  close
                                    (var("v",@{typ "4 word \<times> bool"}),
                                     call
                                       ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                        var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                               close
                                 (var_b"b",
                                  ite(var_b"b",
                                      mu(call
                                           ("instruction.Load",@{typ instruction},
                                            call
                                              ("Load.LoadWord",@{typ Load},
                                               tp[lf,lt,lf,
                                                  mop(Cast w4,
                                                      mop(Cast (Word_Lib.mk_wordT 3),
                                                          ll[var_b"b'2",var_b"b'1",var_b"b'0"])),
                                                  mop(Cast w4,
                                                      mop(Cast (Word_Lib.mk_wordT 3),
                                                          ll[var_b"b'5",var_b"b'4",var_b"b'3"])),
                                                  call
                                                    ("offset1.immediate_form1",@{typ offset1},
                                                     mop(Cast w32,
                                                         cc[mop(Cast (Word_Lib.mk_wordT 3),
                                                                ll[var_b"b'8",var_b"b'7",var_b"b'6"]),
                                                            lw(0,2)]),@{theory} )],@{theory} ),
                                            @{theory} ),qTy),
                                      call
                                        ("Skip",
                                         @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                         lu,@{theory} ))))))),
                     (bop(And,var_b"b'15",
                          bop(And,mop(Not,var_b"b'12"),
                              bop(And,var_b"b'11",
                                  bop(And,mop(Not,var_b"b'10"),
                                      bop(And,var_b"b'9",mop(Not,var_b"b'8")))))),
                      let'
                        (var_w("Rm",4),mop(Cast w4,ll[var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3"]),
                         mb(call
                              ("ThumbCondition",
                               @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,@{theory} ),
                            close
                              (var_w("v",4),
                               mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                     close
                                       (var("v",@{typ "4 word \<times> bool"}),
                                        call
                                          ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                           var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                  close
                                    (var_b"b",
                                     ite(var_b"b",
                                         let'
                                           (var_w("n",4),
                                            cc[mop(Cast w1,ll[var_b"b'7"]),
                                               mop(Cast (Word_Lib.mk_wordT 3),
                                                   ll[var_b"b'2",var_b"b'1",var_b"b'0"])],
                                            mb(ite(bop(Or,eq(var_w("n",4),lw(15,4)),
                                                       bop(In,var_w("Rm",4),sl[lw(13,4),lw(15,4)])),
                                                   call
                                                     ("DECODE_UNPREDICTABLE",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                      tp[var("mc",@{typ MachineCode}),ls"CheckArray"],
                                                      @{theory} ),mu(lu,qTy)),
                                               close
                                                 (var_a HOLogic.unitT,
                                                  mu(call
                                                       ("instruction.Branch",@{typ instruction},
                                                        call
                                                          ("Branch.CheckArray",@{typ Branch},
                                                           tp[var_w("Rm",4),var_w("n",4)],@{theory} ),
                                                        @{theory} ),qTy)))),
                                         call
                                           ("Skip",
                                            @{typ
                                            "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                                            @{theory} )))))))),
                     (bop(And,var_b"b'15",
                          bop(And,mop(Not,var_b"b'12"),
                              bop(And,var_b"b'11",
                                  bop(And,mop(Not,var_b"b'10"),bop(And,var_b"b'9",var_b"b'8"))))),
                      mb(call
                           ("ThumbCondition",@{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                            lu,@{theory} ),
                         close
                           (var_w("v",4),
                            mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                  close
                                    (var("v",@{typ "4 word \<times> bool"}),
                                     call
                                       ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                        var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                               close
                                 (var_b"b",
                                  ite(var_b"b",
                                      mu(call
                                           ("instruction.Load",@{typ instruction},
                                            call
                                              ("Load.LoadWord",@{typ Load},
                                               tp[lt,lt,lf,
                                                  mop(Cast w4,
                                                      mop(Cast (Word_Lib.mk_wordT 3),
                                                          ll[var_b"b'2",var_b"b'1",var_b"b'0"])),
                                                  lw(10,4),
                                                  call
                                                    ("offset1.immediate_form1",@{typ offset1},
                                                     mop(Cast w32,
                                                         cc[mop(Cast (Word_Lib.mk_wordT 5),
                                                                ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                                   var_b"b'4",var_b"b'3"]),lw(0,2)]),
                                                     @{theory} )],@{theory} ),@{theory} ),qTy),
                                      call
                                        ("Skip",
                                         @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                         lu,@{theory} ))))))),
                     (bop(And,var_b"b'15",
                          bop(And,mop(Not,var_b"b'12"),bop(And,var_b"b'11",var_b"b'10"))),
                      let'
                        (var_w("Rt",3),
                         mop(Cast (Word_Lib.mk_wordT 3),ll[var_b"b'2",var_b"b'1",var_b"b'0"]),
                         mb(call
                              ("ThumbCondition",
                               @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,@{theory} ),
                            close
                              (var_w("v",4),
                               mb(mb(mu(tp[var_w("v",4),lt],qTy),
                                     close
                                       (var("v",@{typ "4 word \<times> bool"}),
                                        call
                                          ("Do",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                           var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                  close
                                    (var_b"b",
                                     ite(var_b"b",
                                         mu(let'
                                              (var("m",@{typ offset1}),
                                               call
                                                 ("offset1.immediate_form1",@{typ offset1},
                                                  mop(Cast w32,
                                                      cc[mop(Cast (Word_Lib.mk_wordT 6),
                                                             ll[var_b"b'8",var_b"b'7",var_b"b'6",
                                                                var_b"b'5",var_b"b'4",var_b"b'3"]),
                                                         lw(0,2)]),@{theory} ),
                                               ite(eq(mop(Cast w1,ll[var_b"b'9"]),lw(1,1)),
                                                   call
                                                     ("instruction.Store",@{typ instruction},
                                                      call
                                                        ("Store.StoreWord",@{typ Store},
                                                         tp[lt,lt,lf,mop(Cast w4,var_w("Rt",3)),
                                                            lw(9,4),var("m",@{typ offset1})],
                                                         @{theory} ),@{theory} ),
                                                   call
                                                     ("instruction.Load",@{typ instruction},
                                                      call
                                                        ("Load.LoadWord",@{typ Load},
                                                         tp[lt,lt,lf,mop(Cast w4,var_w("Rt",3)),
                                                            lw(9,4),var("m",@{typ offset1})],
                                                         @{theory} ),@{theory} ))),qTy),
                                         call
                                           ("Skip",
                                            @{typ
                                            "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                                            @{theory} ))))))))],
                    call
                      ("DecodeThumb",@{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                       mop(Cast w16,
                           ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",
                              var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",
                              var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),@{theory} )),
                call
                  ("DecodeThumb",@{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                   mop(Cast w16,
                       ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12",var_b"b'11",var_b"b'10",
                          var_b"b'9",var_b"b'8",var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                          var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),@{theory} ))))))
end
\<close>

ML \<open>
local 
open L3 
val qTy = @{typ "'b state_scheme"} 
in
val () = def
  ("DecodeThumb2",
   close
     (var("h",@{typ "16 word \<times> 16 word"}),
      let'
        (var("mc",@{typ MachineCode}),
         call
           ("MachineCode.Thumb2",@{typ MachineCode},var("h",@{typ "16 word \<times> 16 word"}),
            @{theory} ),
         let'
           (tp[tp[var_b"b'31",var_b"b'30",var_b"b'29",var_b"b'28",var_b"b'27",var_b"b'26",
                  var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22",var_b"b'21",var_b"b'20",
                  var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"],var_b"b'15",var_b"b'14",
               var_b"b'13",var_b"b'12",var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8",var_b"b'7",
               var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"],
            tp[call
                 ("boolify'16",
                  @{typ
                  "bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
                  mop(Fst,var("h",@{typ "16 word \<times> 16 word"})),@{theory} ),
               call
                 ("boolify'16",
                  @{typ
                  "bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times>
                   bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"},
                  mop(Snd,var("h",@{typ "16 word \<times> 16 word"})),@{theory} )],
            itb([(var_b"b'27",
                  itb([(var_b"b'28",
                        itb([(var_b"b'25",
                              ite(bop(And,var_b"b'31",
                                      bop(And,var_b"b'30",bop(And,var_b"b'29",mop(Not,var_b"b'26")))),
                                  itb([(bop(And,mop(Not,var_b"b'24"),
                                            bop(And,mop(Not,var_b"b'23"),
                                                bop(And,var_b"b'15",
                                                    bop(And,var_b"b'14",
                                                        bop(And,var_b"b'13",
                                                            bop(And,var_b"b'12",
                                                                bop(And,mop(Not,var_b"b'7"),
                                                                    bop(And,mop(Not,var_b"b'6"),
                                                                        bop(And,mop(Not,var_b"b'5"),
                                                                            mop(Not,var_b"b'4")))))))))),
                                        let'
                                          (var_w("Rn",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (var_w("Rm",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                              let'
                                                (var_w("Rd",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                        var_b"b'8"]),
                                                 mb(call
                                                      ("ThumbCondition",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                                       lu,@{theory} ),
                                                    close
                                                      (var_w("v",4),
                                                       mb(mb(mb(call
                                                                  ("HaveThumb2",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (bool \<times> 'b state_scheme)"},lu,
                                                                   @{theory} ),
                                                                close
                                                                  (var_b"v0",
                                                                   mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                             close
                                                               (var("v",
                                                                    @{typ "4 word \<times> bool"}),
                                                                call
                                                                  ("Do",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (bool \<times> 'b state_scheme)"},
                                                                   var("v",
                                                                       @{typ "4 word \<times> bool"}),
                                                                   @{theory} ))),
                                                          close
                                                            (var_b"b",
                                                             ite(var_b"b",
                                                                 mb(ite(bop(Or,
                                                                            bop(In,var_w("Rd",4),
                                                                                sl[lw(13,4),lw(15,4)]),
                                                                            bop(Or,
                                                                                bop(In,
                                                                                    var_w("Rn",4),
                                                                                    sl[lw(13,4),
                                                                                       lw(15,4)]),
                                                                                bop(In,
                                                                                    var_w("Rm",4),
                                                                                    sl[lw(13,4),
                                                                                       lw(15,4)]))),
                                                                        call
                                                                          ("DECODE_UNPREDICTABLE",
                                                                           @{typ
                                                                           "'b state_scheme \<Rightarrow>
                                                                            (unit \<times> 'b state_scheme)"},
                                                                           tp[var("mc",
                                                                                  @{typ MachineCode}),
                                                                              ls"Shift (register)"],
                                                                           @{theory} ),mu(lu,qTy)),
                                                                    close
                                                                      (var_a HOLogic.unitT,
                                                                       mu(call
                                                                            ("instruction.Data",
                                                                             @{typ instruction},
                                                                             call
                                                                               ("Data.ShiftRegister",
                                                                                @{typ Data},
                                                                                tp[lf,
                                                                                   eq(mop(Cast w1,
                                                                                          ll[var_b"b'20"]),
                                                                                      lw(1,1)),
                                                                                   var_w("Rd",4),
                                                                                   var_w("Rn",4),
                                                                                   call
                                                                                     ("DecodeRegShift",
                                                                                      @{typ SRType},
                                                                                      mop(Cast
                                                                                            (Word_Lib.mk_wordT 2),
                                                                                          ll[var_b"b'22",
                                                                                             var_b"b'21"]),
                                                                                      @{theory} ),
                                                                                   var_w("Rm",4)],
                                                                                @{theory} ),@{theory} ),
                                                                          qTy))),
                                                                 call
                                                                   ("Skip",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (instruction \<times> 'b state_scheme)"},
                                                                    lu,@{theory} )))))))))),
                                       (bop(And,mop(Not,var_b"b'24"),
                                            bop(And,mop(Not,var_b"b'23"),
                                                bop(And,var_b"b'15",
                                                    bop(And,var_b"b'14",
                                                        bop(And,var_b"b'13",
                                                            bop(And,var_b"b'12",var_b"b'7")))))),
                                        let'
                                          (var_w("Rn",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (var_w("Rm",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                              let'
                                                (var_w("Rd",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                        var_b"b'8"]),
                                                 mb(call
                                                      ("ThumbCondition",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                                       lu,@{theory} ),
                                                    close
                                                      (var_w("v",4),
                                                       mb(mb(mb(call
                                                                  ("HaveThumb2",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (bool \<times> 'b state_scheme)"},lu,
                                                                   @{theory} ),
                                                                close
                                                                  (var_b"v0",
                                                                   mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                             close
                                                               (var("v",
                                                                    @{typ "4 word \<times> bool"}),
                                                                call
                                                                  ("Do",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (bool \<times> 'b state_scheme)"},
                                                                   var("v",
                                                                       @{typ "4 word \<times> bool"}),
                                                                   @{theory} ))),
                                                          close
                                                            (var_b"b",
                                                             ite(var_b"b",
                                                                 mb(ite(bop(Or,
                                                                            bop(In,var_w("Rd",4),
                                                                                sl[lw(13,4),lw(15,4)]),
                                                                            bop(Or,
                                                                                eq(var_w("Rn",4),
                                                                                   lw(13,4)),
                                                                                bop(In,
                                                                                    var_w("Rm",4),
                                                                                    sl[lw(13,4),
                                                                                       lw(15,4)]))),
                                                                        call
                                                                          ("DECODE_UNPREDICTABLE",
                                                                           @{typ
                                                                           "'b state_scheme \<Rightarrow>
                                                                            (unit \<times> 'b state_scheme)"},
                                                                           tp[var("mc",
                                                                                  @{typ MachineCode}),
                                                                              ls"Extend (register)"],
                                                                           @{theory} ),mu(lu,qTy)),
                                                                    close
                                                                      (var_a HOLogic.unitT,
                                                                       mu(let'
                                                                            (tp[var_b"args0",
                                                                                var_n"args4"],
                                                                             tp[eq(mop(Cast w1,
                                                                                       ll[var_b"b'20"]),
                                                                                   lw(1,1)),
                                                                                mop(Cast
                                                                                      HOLogic.natT,
                                                                                    cc[mop(Cast
                                                                                             (Word_Lib.mk_wordT 2),
                                                                                           ll[var_b"b'5",
                                                                                              var_b"b'4"]),
                                                                                       lw(0,3)])],
                                                                             cs(mop(Cast
                                                                                      (Word_Lib.mk_wordT 2),
                                                                                    ll[var_b"b'22",
                                                                                       var_b"b'21"]),
                                                                                [(var_w("v",2),
                                                                                  itb([(eq(var_w("v",2),
                                                                                           lw(0,2)),
                                                                                        call
                                                                                          ("instruction.Media",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Media.ExtendHalfword",
                                                                                              @{typ Media},
                                                                                              tp[var_b"args0",
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var_n"args4"],
                                                                                              @{theory} ),
                                                                                           @{theory} )),
                                                                                       (eq(var_w("v",2),
                                                                                           lw(1,2)),
                                                                                        call
                                                                                          ("instruction.Media",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Media.ExtendByte16",
                                                                                              @{typ Media},
                                                                                              tp[var_b"args0",
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var_n"args4"],
                                                                                              @{theory} ),
                                                                                           @{theory} )),
                                                                                       (eq(var_w("v",2),
                                                                                           lw(2,2)),
                                                                                        call
                                                                                          ("instruction.Media",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Media.ExtendByte",
                                                                                              @{typ Media},
                                                                                              tp[var_b"args0",
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var_n"args4"],
                                                                                              @{theory} ),
                                                                                           @{theory} )),
                                                                                       (eq(var_w("v",2),
                                                                                           lw(3,2)),
                                                                                        call
                                                                                          ("instruction.Undefined",
                                                                                           @{typ instruction},
                                                                                           lw(0,32),
                                                                                           @{theory} ))],
                                                                                      lx @{typ instruction}))],
                                                                                @{context})),qTy))),
                                                                 call
                                                                   ("Skip",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (instruction \<times> 'b state_scheme)"},
                                                                    lu,@{theory} )))))))))),
                                       (bop(And,mop(Not,var_b"b'24"),
                                            bop(And,var_b"b'23",
                                                bop(And,var_b"b'15",
                                                    bop(And,var_b"b'14",
                                                        bop(And,var_b"b'13",
                                                            bop(And,var_b"b'12",mop(Not,var_b"b'7"))))))),
                                        let'
                                          (var_w("Rn",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (var_w("Rm",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                              let'
                                                (var_w("Rd",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                        var_b"b'8"]),
                                                 mb(call
                                                      ("ThumbCondition",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                                       lu,@{theory} ),
                                                    close
                                                      (var_w("v",4),
                                                       mb(mb(mb(call
                                                                  ("HaveThumb2",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (bool \<times> 'b state_scheme)"},lu,
                                                                   @{theory} ),
                                                                close
                                                                  (var_b"v0",
                                                                   mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                             close
                                                               (var("v",
                                                                    @{typ "4 word \<times> bool"}),
                                                                call
                                                                  ("Do",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (bool \<times> 'b state_scheme)"},
                                                                   var("v",
                                                                       @{typ "4 word \<times> bool"}),
                                                                   @{theory} ))),
                                                          close
                                                            (var_b"b",
                                                             ite(var_b"b",
                                                                 mb(ite(bop(Or,
                                                                            bop(In,var_w("Rd",4),
                                                                                sl[lw(13,4),lw(15,4)]),
                                                                            bop(Or,
                                                                                bop(In,
                                                                                    var_w("Rn",4),
                                                                                    sl[lw(13,4),
                                                                                       lw(15,4)]),
                                                                                bop(In,
                                                                                    var_w("Rm",4),
                                                                                    sl[lw(13,4),
                                                                                       lw(15,4)]))),
                                                                        call
                                                                          ("DECODE_UNPREDICTABLE",
                                                                           @{typ
                                                                           "'b state_scheme \<Rightarrow>
                                                                            (unit \<times> 'b state_scheme)"},
                                                                           tp[var("mc",
                                                                                  @{typ MachineCode}),
                                                                              ls
                                                                               "Parallel addition and subtraction"],
                                                                           @{theory} ),mu(lu,qTy)),
                                                                    close
                                                                      (var_u"_0",
                                                                       mu(call
                                                                            ("DecodeParallelAdditionSubtraction",
                                                                             @{typ instruction},
                                                                             tp[bop(Add,
                                                                                    mop(Cast
                                                                                          (Word_Lib.mk_wordT 2),
                                                                                        ll[var_b"b'5",
                                                                                           var_b"b'4"]),
                                                                                    lw(1,2)),
                                                                                cs(mop(Cast
                                                                                         (Word_Lib.mk_wordT 3),
                                                                                       ll[var_b"b'22",
                                                                                          var_b"b'21",
                                                                                          var_b"b'20"]),
                                                                                   [(var_w("v",3),
                                                                                     itb([(eq(var_w("v",3),
                                                                                              lw(1,3)),
                                                                                           lw(0,3)),
                                                                                          (eq(var_w("v",3),
                                                                                              lw(2,3)),
                                                                                           lw(1,3)),
                                                                                          (eq(var_w("v",3),
                                                                                              lw(6,3)),
                                                                                           lw(2,3)),
                                                                                          (eq(var_w("v",3),
                                                                                              lw(5,3)),
                                                                                           lw(3,3)),
                                                                                          (eq(var_w("v",3),
                                                                                              lw(0,3)),
                                                                                           lw(4,3)),
                                                                                          (eq(var_w("v",3),
                                                                                              lw(4,3)),
                                                                                           lw(7,3))],
                                                                                         lw(5,3)))],
                                                                                   @{context}),
                                                                                mop(Cast w1,
                                                                                    ll[var_b"b'6"]),
                                                                                var_w("Rd",4),
                                                                                var_w("Rn",4),
                                                                                var_w("Rm",4)],
                                                                             @{theory} ),qTy))),
                                                                 call
                                                                   ("Skip",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (instruction \<times> 'b state_scheme)"},
                                                                    lu,@{theory} )))))))))),
                                       (bop(And,mop(Not,var_b"b'24"),
                                            bop(And,var_b"b'23",
                                                bop(And,mop(Not,var_b"b'22"),
                                                    bop(And,mop(Not,var_b"b'21"),
                                                        bop(And,mop(Not,var_b"b'20"),
                                                            bop(And,var_b"b'15",
                                                                bop(And,var_b"b'14",
                                                                    bop(And,var_b"b'13",
                                                                        bop(And,var_b"b'12",
                                                                            bop(And,var_b"b'7",
                                                                                mop(Not,var_b"b'6"))))))))))),
                                        let'
                                          (var_w("Rn",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (var_w("Rm",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                              let'
                                                (var_w("Rd",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                        var_b"b'8"]),
                                                 mb(call
                                                      ("ThumbCondition",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                                       lu,@{theory} ),
                                                    close
                                                      (var_w("v",4),
                                                       mb(mb(mb(call
                                                                  ("HaveThumb2",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (bool \<times> 'b state_scheme)"},lu,
                                                                   @{theory} ),
                                                                close
                                                                  (var_b"v0",
                                                                   mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                             close
                                                               (var("v",
                                                                    @{typ "4 word \<times> bool"}),
                                                                call
                                                                  ("Do",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (bool \<times> 'b state_scheme)"},
                                                                   var("v",
                                                                       @{typ "4 word \<times> bool"}),
                                                                   @{theory} ))),
                                                          close
                                                            (var_b"b",
                                                             ite(var_b"b",
                                                                 mb(ite(bop(Or,
                                                                            bop(In,var_w("Rd",4),
                                                                                sl[lw(13,4),lw(15,4)]),
                                                                            bop(Or,
                                                                                bop(In,
                                                                                    var_w("Rn",4),
                                                                                    sl[lw(13,4),
                                                                                       lw(15,4)]),
                                                                                bop(In,
                                                                                    var_w("Rm",4),
                                                                                    sl[lw(13,4),
                                                                                       lw(15,4)]))),
                                                                        call
                                                                          ("DECODE_UNPREDICTABLE",
                                                                           @{typ
                                                                           "'b state_scheme \<Rightarrow>
                                                                            (unit \<times> 'b state_scheme)"},
                                                                           tp[var("mc",
                                                                                  @{typ MachineCode}),
                                                                              ls
                                                                               "SaturatingAddSubtract"],
                                                                           @{theory} ),mu(lu,qTy)),
                                                                    close
                                                                      (var_a HOLogic.unitT,
                                                                       mu(call
                                                                            ("instruction.Media",
                                                                             @{typ instruction},
                                                                             call
                                                                               ("Media.SaturatingAddSubtract",
                                                                                @{typ Media},
                                                                                tp[mop(Rev,
                                                                                       mop(Cast
                                                                                             (Word_Lib.mk_wordT 2),
                                                                                           ll[var_b"b'5",
                                                                                              var_b"b'4"])),
                                                                                   var_w("Rd",4),
                                                                                   var_w("Rm",4),
                                                                                   var_w("Rn",4)],
                                                                                @{theory} ),@{theory} ),
                                                                          qTy))),
                                                                 call
                                                                   ("Skip",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (instruction \<times> 'b state_scheme)"},
                                                                    lu,@{theory} )))))))))),
                                       (bop(And,mop(Not,var_b"b'24"),
                                            bop(And,var_b"b'23",
                                                bop(And,mop(Not,var_b"b'22"),
                                                    bop(And,mop(Not,var_b"b'21"),
                                                        bop(And,var_b"b'20",
                                                            bop(And,var_b"b'15",
                                                                bop(And,var_b"b'14",
                                                                    bop(And,var_b"b'13",
                                                                        bop(And,var_b"b'12",
                                                                            bop(And,var_b"b'7",
                                                                                mop(Not,var_b"b'6"))))))))))),
                                        let'
                                          (var_w("Rm",4),
                                           mop(Cast w4,
                                               ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                           let'
                                             (var_w("Rd",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                              mb(call
                                                   ("ThumbCondition",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                                    lu,@{theory} ),
                                                 close
                                                   (var_w("v",4),
                                                    mb(mb(mb(call
                                                               ("HaveThumb2",
                                                                @{typ
                                                                "'b state_scheme \<Rightarrow>
                                                                 (bool \<times> 'b state_scheme)"},lu,
                                                                @{theory} ),
                                                             close
                                                               (var_b"v0",
                                                                mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                          close
                                                            (var("v",@{typ "4 word \<times> bool"}),
                                                             call
                                                               ("Do",
                                                                @{typ
                                                                "'b state_scheme \<Rightarrow>
                                                                 (bool \<times> 'b state_scheme)"},
                                                                var("v",
                                                                    @{typ "4 word \<times> bool"}),
                                                                @{theory} ))),
                                                       close
                                                         (var_b"b",
                                                          ite(var_b"b",
                                                              mb(ite(bop(Or,
                                                                         mop(Not,
                                                                             eq(mop(Cast w4,
                                                                                    ll[var_b"b'19",
                                                                                       var_b"b'18",
                                                                                       var_b"b'17",
                                                                                       var_b"b'16"]),
                                                                                var_w("Rm",4))),
                                                                         bop(Or,
                                                                             bop(In,var_w("Rd",4),
                                                                                 sl[lw(13,4),
                                                                                    lw(15,4)]),
                                                                             bop(In,var_w("Rm",4),
                                                                                 sl[lw(13,4),
                                                                                    lw(15,4)]))),
                                                                     call
                                                                       ("DECODE_UNPREDICTABLE",
                                                                        @{typ
                                                                        "'b state_scheme \<Rightarrow>
                                                                         (unit \<times> 'b state_scheme)"},
                                                                        tp[var("mc",
                                                                               @{typ MachineCode}),
                                                                           ls"Reverses"],@{theory} ),
                                                                     mu(lu,qTy)),
                                                                 close
                                                                   (var_a HOLogic.unitT,
                                                                    mu(cs(mop(Cast
                                                                                (Word_Lib.mk_wordT 2),
                                                                              ll[var_b"b'5",
                                                                                 var_b"b'4"]),
                                                                          [(var_w("v",2),
                                                                            itb([(eq(var_w("v",2),
                                                                                     lw(0,2)),
                                                                                  call
                                                                                    ("instruction.Media",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Media.ByteReverse",
                                                                                        @{typ Media},
                                                                                        tp[var_w("Rd",4),
                                                                                           var_w("Rm",4)],
                                                                                        @{theory} ),
                                                                                     @{theory} )),
                                                                                 (eq(var_w("v",2),
                                                                                     lw(1,2)),
                                                                                  call
                                                                                    ("instruction.Media",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Media.ByteReversePackedHalfword",
                                                                                        @{typ Media},
                                                                                        tp[var_w("Rd",4),
                                                                                           var_w("Rm",4)],
                                                                                        @{theory} ),
                                                                                     @{theory} )),
                                                                                 (eq(var_w("v",2),
                                                                                     lw(2,2)),
                                                                                  call
                                                                                    ("instruction.Media",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Media.ReverseBits",
                                                                                        @{typ Media},
                                                                                        tp[var_w("Rd",4),
                                                                                           var_w("Rm",4)],
                                                                                        @{theory} ),
                                                                                     @{theory} )),
                                                                                 (eq(var_w("v",2),
                                                                                     lw(3,2)),
                                                                                  call
                                                                                    ("instruction.Media",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Media.ByteReverseSignedHalfword",
                                                                                        @{typ Media},
                                                                                        tp[var_w("Rd",4),
                                                                                           var_w("Rm",4)],
                                                                                        @{theory} ),
                                                                                     @{theory} ))],
                                                                                lx @{typ instruction}))],
                                                                          @{context}),qTy))),
                                                              call
                                                                ("Skip",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (instruction \<times> 'b state_scheme)"},lu,
                                                                 @{theory} ))))))))),
                                       (bop(And,mop(Not,var_b"b'24"),
                                            bop(And,var_b"b'23",
                                                bop(And,mop(Not,var_b"b'22"),
                                                    bop(And,var_b"b'21",
                                                        bop(And,mop(Not,var_b"b'20"),
                                                            bop(And,var_b"b'15",
                                                                bop(And,var_b"b'14",
                                                                    bop(And,var_b"b'13",
                                                                        bop(And,var_b"b'12",
                                                                            bop(And,var_b"b'7",
                                                                                bop(And,
                                                                                    mop(Not,
                                                                                        var_b"b'6"),
                                                                                    bop(And,
                                                                                        mop(Not,
                                                                                            var_b"b'5"),
                                                                                        mop(Not,
                                                                                            var_b"b'4"))))))))))))),
                                        let'
                                          (var_w("Rn",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (var_w("Rm",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                              let'
                                                (var_w("Rd",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                        var_b"b'8"]),
                                                 mb(call
                                                      ("ThumbCondition",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                                       lu,@{theory} ),
                                                    close
                                                      (var_w("v",4),
                                                       mb(mb(mb(call
                                                                  ("HaveThumb2",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (bool \<times> 'b state_scheme)"},lu,
                                                                   @{theory} ),
                                                                close
                                                                  (var_b"v0",
                                                                   mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                             close
                                                               (var("v",
                                                                    @{typ "4 word \<times> bool"}),
                                                                call
                                                                  ("Do",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (bool \<times> 'b state_scheme)"},
                                                                   var("v",
                                                                       @{typ "4 word \<times> bool"}),
                                                                   @{theory} ))),
                                                          close
                                                            (var_b"b",
                                                             ite(var_b"b",
                                                                 mb(ite(bop(Or,
                                                                            bop(In,var_w("Rd",4),
                                                                                sl[lw(13,4),lw(15,4)]),
                                                                            bop(Or,
                                                                                bop(In,
                                                                                    var_w("Rn",4),
                                                                                    sl[lw(13,4),
                                                                                       lw(15,4)]),
                                                                                bop(In,
                                                                                    var_w("Rm",4),
                                                                                    sl[lw(13,4),
                                                                                       lw(15,4)]))),
                                                                        call
                                                                          ("DECODE_UNPREDICTABLE",
                                                                           @{typ
                                                                           "'b state_scheme \<Rightarrow>
                                                                            (unit \<times> 'b state_scheme)"},
                                                                           tp[var("mc",
                                                                                  @{typ MachineCode}),
                                                                              ls"SelectBytes"],
                                                                           @{theory} ),mu(lu,qTy)),
                                                                    close
                                                                      (var_a HOLogic.unitT,
                                                                       mu(call
                                                                            ("instruction.Media",
                                                                             @{typ instruction},
                                                                             call
                                                                               ("Media.SelectBytes",
                                                                                @{typ Media},
                                                                                tp[var_w("Rd",4),
                                                                                   var_w("Rn",4),
                                                                                   var_w("Rm",4)],
                                                                                @{theory} ),@{theory} ),
                                                                          qTy))),
                                                                 call
                                                                   ("Skip",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (instruction \<times> 'b state_scheme)"},
                                                                    lu,@{theory} )))))))))),
                                       (bop(And,mop(Not,var_b"b'24"),
                                            bop(And,var_b"b'23",
                                                bop(And,mop(Not,var_b"b'22"),
                                                    bop(And,var_b"b'21",
                                                        bop(And,var_b"b'20",
                                                            bop(And,var_b"b'15",
                                                                bop(And,var_b"b'14",
                                                                    bop(And,var_b"b'13",
                                                                        bop(And,var_b"b'12",
                                                                            bop(And,var_b"b'7",
                                                                                bop(And,
                                                                                    mop(Not,
                                                                                        var_b"b'6"),
                                                                                    bop(And,
                                                                                        mop(Not,
                                                                                            var_b"b'5"),
                                                                                        mop(Not,
                                                                                            var_b"b'4"))))))))))))),
                                        let'
                                          (var_w("Rm",4),
                                           mop(Cast w4,
                                               ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                           let'
                                             (var_w("Rd",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                              mb(call
                                                   ("ThumbCondition",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                                    lu,@{theory} ),
                                                 close
                                                   (var_w("v",4),
                                                    mb(mb(mb(call
                                                               ("HaveThumb2",
                                                                @{typ
                                                                "'b state_scheme \<Rightarrow>
                                                                 (bool \<times> 'b state_scheme)"},lu,
                                                                @{theory} ),
                                                             close
                                                               (var_b"v0",
                                                                mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                          close
                                                            (var("v",@{typ "4 word \<times> bool"}),
                                                             call
                                                               ("Do",
                                                                @{typ
                                                                "'b state_scheme \<Rightarrow>
                                                                 (bool \<times> 'b state_scheme)"},
                                                                var("v",
                                                                    @{typ "4 word \<times> bool"}),
                                                                @{theory} ))),
                                                       close
                                                         (var_b"b",
                                                          ite(var_b"b",
                                                              mb(ite(bop(Or,
                                                                         mop(Not,
                                                                             eq(mop(Cast w4,
                                                                                    ll[var_b"b'19",
                                                                                       var_b"b'18",
                                                                                       var_b"b'17",
                                                                                       var_b"b'16"]),
                                                                                var_w("Rm",4))),
                                                                         bop(Or,
                                                                             bop(In,var_w("Rd",4),
                                                                                 sl[lw(13,4),
                                                                                    lw(15,4)]),
                                                                             bop(In,var_w("Rm",4),
                                                                                 sl[lw(13,4),
                                                                                    lw(15,4)]))),
                                                                     call
                                                                       ("DECODE_UNPREDICTABLE",
                                                                        @{typ
                                                                        "'b state_scheme \<Rightarrow>
                                                                         (unit \<times> 'b state_scheme)"},
                                                                        tp[var("mc",
                                                                               @{typ MachineCode}),
                                                                           ls"CountLeadingZeroes"],
                                                                        @{theory} ),mu(lu,qTy)),
                                                                 close
                                                                   (var_a HOLogic.unitT,
                                                                    mu(call
                                                                         ("instruction.Data",
                                                                          @{typ instruction},
                                                                          call
                                                                            ("Data.CountLeadingZeroes",
                                                                             @{typ Data},
                                                                             tp[var_w("Rd",4),
                                                                                var_w("Rm",4)],
                                                                             @{theory} ),@{theory} ),
                                                                       qTy))),
                                                              call
                                                                ("Skip",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (instruction \<times> 'b state_scheme)"},lu,
                                                                 @{theory} ))))))))),
                                       (bop(And,var_b"b'24",
                                            bop(And,mop(Not,var_b"b'23"),
                                                bop(And,mop(Not,var_b"b'7"),mop(Not,var_b"b'6")))),
                                        let'
                                          (var_w("Rn",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (var_w("Rm",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                              let'
                                                (var_w("Rd",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                        var_b"b'8"]),
                                                 let'
                                                   (var_w("Ra",4),
                                                    mop(Cast w4,
                                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                           var_b"b'12"]),
                                                    mb(call
                                                         ("ThumbCondition",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow>
                                                           (4 word \<times> 'b state_scheme)"},lu,@{theory} ),
                                                       close
                                                         (var_w("v",4),
                                                          mb(mb(mb(call
                                                                     ("HaveThumb2",
                                                                      @{typ
                                                                      "'b state_scheme \<Rightarrow>
                                                                       (bool \<times> 'b state_scheme)"},lu,
                                                                      @{theory} ),
                                                                   close
                                                                     (var_b"v0",
                                                                      mu(tp[var_w("v",4),var_b"v0"],
                                                                         qTy))),
                                                                close
                                                                  (var("v",
                                                                       @{typ "4 word \<times> bool"}),
                                                                   call
                                                                     ("Do",
                                                                      @{typ
                                                                      "'b state_scheme \<Rightarrow>
                                                                       (bool \<times> 'b state_scheme)"},
                                                                      var("v",
                                                                          @{typ
                                                                          "4 word \<times> bool"}),
                                                                      @{theory} ))),
                                                             close
                                                               (var_b"b",
                                                                ite(var_b"b",
                                                                    mb(ite(bop(Or,
                                                                               bop(In,var_w("Rd",4),
                                                                                   sl[lw(13,4),
                                                                                      lw(15,4)]),
                                                                               bop(Or,
                                                                                   bop(In,
                                                                                       var_w("Rn",4),
                                                                                       sl[lw(13,4),
                                                                                          lw(15,4)]),
                                                                                   bop(Or,
                                                                                       bop(In,
                                                                                           var_w("Rm",4),
                                                                                           sl[lw(13,
                                                                                                 4),
                                                                                              lw(15,
                                                                                                 4)]),
                                                                                       eq(var_w("Ra",4),
                                                                                          lw(13,4))))),
                                                                           call
                                                                             ("DECODE_UNPREDICTABLE",
                                                                              @{typ
                                                                              "'b state_scheme \<Rightarrow>
                                                                               (unit \<times> 'b state_scheme)"},
                                                                              tp[var("mc",
                                                                                     @{typ MachineCode}),
                                                                                 ls
                                                                                  "Multiplies and absolute difference"],
                                                                              @{theory} ),mu(lu,qTy)),
                                                                       close
                                                                         (var_u"_0",
                                                                          cs(tp[mop(Cast
                                                                                      (Word_Lib.mk_wordT 3),
                                                                                    ll[var_b"b'22",
                                                                                       var_b"b'21",
                                                                                       var_b"b'20"]),
                                                                                var_w("Ra",4),
                                                                                eq(mop(Cast w1,
                                                                                       ll[var_b"b'5"]),
                                                                                   lw(1,1)),
                                                                                eq(mop(Cast w1,
                                                                                       ll[var_b"b'4"]),
                                                                                   lw(1,1))],
                                                                             [(tp[var_w("v",3),
                                                                                  var_w("v0",4),lf,
                                                                                  lt],
                                                                               itb([(bop(And,
                                                                                         eq(var_w("v",3),
                                                                                            lw(0,3)),
                                                                                         eq(var_w("v0",4),
                                                                                            lw(15,4))),
                                                                                     mb(call
                                                                                          ("DECODE_UNPREDICTABLE",
                                                                                           @{typ
                                                                                           "'b state_scheme \<Rightarrow>
                                                                                            (unit \<times>
                                                                                             'b state_scheme)"},
                                                                                           tp[var("mc",
                                                                                                  @{typ MachineCode}),
                                                                                              ls
                                                                                               "MultiplySubtract"],
                                                                                           @{theory} ),
                                                                                        close
                                                                                          (var_a
                                                                                             HOLogic.unitT,
                                                                                           mu(lx @{typ instruction},
                                                                                              qTy)))),
                                                                                    (eq(var_w("v",3),
                                                                                        lw(0,3)),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.MultiplySubtract",
                                                                                              @{typ Multiply},
                                                                                              tp[var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var_w("Ra",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)),
                                                                                    (bop(And,
                                                                                         eq(var_w("v",3),
                                                                                            lw(1,3)),
                                                                                         eq(var_w("v0",4),
                                                                                            lw(15,4))),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.Signed16Multiply32Result",
                                                                                              @{typ Multiply},
                                                                                              tp[lt,
                                                                                                 lf,
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)),
                                                                                    (eq(var_w("v",3),
                                                                                        lw(1,3)),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.Signed16Multiply32Accumulate",
                                                                                              @{typ Multiply},
                                                                                              tp[lt,
                                                                                                 lf,
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var_w("Ra",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)),
                                                                                    (eq(var_w("v",3),
                                                                                        lw(2,3)),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.SignedMultiplyDual",
                                                                                              @{typ Multiply},
                                                                                              tp[lf,
                                                                                                 lt,
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var_w("Ra",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)),
                                                                                    (bop(And,
                                                                                         eq(var_w("v",3),
                                                                                            lw(3,3)),
                                                                                         eq(var_w("v0",4),
                                                                                            lw(15,4))),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.Signed16x32Multiply32Result",
                                                                                              @{typ Multiply},
                                                                                              tp[lt,
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)),
                                                                                    (eq(var_w("v",3),
                                                                                        lw(3,3)),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.Signed16x32Multiply32Accumulate",
                                                                                              @{typ Multiply},
                                                                                              tp[lt,
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var_w("Ra",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)),
                                                                                    (eq(var_w("v",3),
                                                                                        lw(4,3)),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.SignedMultiplyDual",
                                                                                              @{typ Multiply},
                                                                                              tp[lt,
                                                                                                 lt,
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var_w("Ra",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)),
                                                                                    (eq(var_w("v",3),
                                                                                        lw(5,3)),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.SignedMostSignificantMultiply",
                                                                                              @{typ Multiply},
                                                                                              tp[lt,
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var_w("Ra",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)),
                                                                                    (bop(And,
                                                                                         eq(var_w("v",3),
                                                                                            lw(6,3)),
                                                                                         eq(var_w("v0",4),
                                                                                            lw(15,4))),
                                                                                     mb(call
                                                                                          ("DECODE_UNPREDICTABLE",
                                                                                           @{typ
                                                                                           "'b state_scheme \<Rightarrow>
                                                                                            (unit \<times>
                                                                                             'b state_scheme)"},
                                                                                           tp[var("mc",
                                                                                                  @{typ MachineCode}),
                                                                                              ls
                                                                                               "SignedMostSignificantMultiplySubtract"],
                                                                                           @{theory} ),
                                                                                        close
                                                                                          (var_a
                                                                                             HOLogic.unitT,
                                                                                           mu(lx @{typ instruction},
                                                                                              qTy)))),
                                                                                    (eq(var_w("v",3),
                                                                                        lw(6,3)),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.SignedMostSignificantMultiplySubtract",
                                                                                              @{typ Multiply},
                                                                                              tp[lt,
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var_w("Ra",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy))],
                                                                                   mu(call
                                                                                        ("instruction.Undefined",
                                                                                         @{typ instruction},
                                                                                         lw(0,32),
                                                                                         @{theory} ),
                                                                                      qTy))),
                                                                              (tp[var_w("v",3),
                                                                                  var_w("v0",4),lf,
                                                                                  lf],
                                                                               itb([(bop(And,
                                                                                         eq(var_w("v",3),
                                                                                            lw(0,3)),
                                                                                         eq(var_w("v0",4),
                                                                                            lw(15,4))),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.Multiply32",
                                                                                              @{typ Multiply},
                                                                                              tp[lf,
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)),
                                                                                    (eq(var_w("v",3),
                                                                                        lw(0,3)),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.MultiplyAccumulate",
                                                                                              @{typ Multiply},
                                                                                              tp[lf,
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var_w("Ra",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)),
                                                                                    (bop(And,
                                                                                         eq(var_w("v",3),
                                                                                            lw(1,3)),
                                                                                         eq(var_w("v0",4),
                                                                                            lw(15,4))),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.Signed16Multiply32Result",
                                                                                              @{typ Multiply},
                                                                                              tp[lf,
                                                                                                 lf,
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)),
                                                                                    (eq(var_w("v",3),
                                                                                        lw(1,3)),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.Signed16Multiply32Accumulate",
                                                                                              @{typ Multiply},
                                                                                              tp[lf,
                                                                                                 lf,
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var_w("Ra",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)),
                                                                                    (eq(var_w("v",3),
                                                                                        lw(2,3)),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.SignedMultiplyDual",
                                                                                              @{typ Multiply},
                                                                                              tp[lf,
                                                                                                 lf,
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var_w("Ra",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)),
                                                                                    (bop(And,
                                                                                         eq(var_w("v",3),
                                                                                            lw(3,3)),
                                                                                         eq(var_w("v0",4),
                                                                                            lw(15,4))),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.Signed16x32Multiply32Result",
                                                                                              @{typ Multiply},
                                                                                              tp[lf,
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)),
                                                                                    (eq(var_w("v",3),
                                                                                        lw(3,3)),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.Signed16x32Multiply32Accumulate",
                                                                                              @{typ Multiply},
                                                                                              tp[lf,
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var_w("Ra",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)),
                                                                                    (eq(var_w("v",3),
                                                                                        lw(4,3)),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.SignedMultiplyDual",
                                                                                              @{typ Multiply},
                                                                                              tp[lt,
                                                                                                 lf,
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var_w("Ra",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)),
                                                                                    (eq(var_w("v",3),
                                                                                        lw(5,3)),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.SignedMostSignificantMultiply",
                                                                                              @{typ Multiply},
                                                                                              tp[lf,
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var_w("Ra",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)),
                                                                                    (bop(And,
                                                                                         eq(var_w("v",3),
                                                                                            lw(6,3)),
                                                                                         eq(var_w("v0",4),
                                                                                            lw(15,4))),
                                                                                     mb(call
                                                                                          ("DECODE_UNPREDICTABLE",
                                                                                           @{typ
                                                                                           "'b state_scheme \<Rightarrow>
                                                                                            (unit \<times>
                                                                                             'b state_scheme)"},
                                                                                           tp[var("mc",
                                                                                                  @{typ MachineCode}),
                                                                                              ls
                                                                                               "SignedMostSignificantMultiplySubtract"],
                                                                                           @{theory} ),
                                                                                        close
                                                                                          (var_a
                                                                                             HOLogic.unitT,
                                                                                           mu(lx @{typ instruction},
                                                                                              qTy)))),
                                                                                    (eq(var_w("v",3),
                                                                                        lw(6,3)),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.SignedMostSignificantMultiplySubtract",
                                                                                              @{typ Multiply},
                                                                                              tp[lf,
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var_w("Ra",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)),
                                                                                    (eq(var_w("v",3),
                                                                                        lw(7,3)),
                                                                                     mu(call
                                                                                          ("instruction.SIMD",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("SIMD.UnsignedSumAbsoluteDifferences",
                                                                                              @{typ SIMD},
                                                                                              tp[var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var_w("Ra",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy))],
                                                                                   mu(call
                                                                                        ("instruction.Undefined",
                                                                                         @{typ instruction},
                                                                                         lw(0,32),
                                                                                         @{theory} ),
                                                                                      qTy))),
                                                                              (tp[var_w("v",3),
                                                                                  var_w("v0",4),lf,
                                                                                  var_b"round"],
                                                                               itb([(bop(And,
                                                                                         eq(var_w("v",3),
                                                                                            lw(1,3)),
                                                                                         eq(var_w("v0",4),
                                                                                            lw(15,4))),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.Signed16Multiply32Result",
                                                                                              @{typ Multiply},
                                                                                              tp[var_b"round",
                                                                                                 lf,
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)),
                                                                                    (eq(var_w("v",3),
                                                                                        lw(1,3)),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.Signed16Multiply32Accumulate",
                                                                                              @{typ Multiply},
                                                                                              tp[var_b"round",
                                                                                                 lf,
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var_w("Ra",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)),
                                                                                    (eq(var_w("v",3),
                                                                                        lw(2,3)),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.SignedMultiplyDual",
                                                                                              @{typ Multiply},
                                                                                              tp[lf,
                                                                                                 var_b"round",
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var_w("Ra",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)),
                                                                                    (bop(And,
                                                                                         eq(var_w("v",3),
                                                                                            lw(3,3)),
                                                                                         eq(var_w("v0",4),
                                                                                            lw(15,4))),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.Signed16x32Multiply32Result",
                                                                                              @{typ Multiply},
                                                                                              tp[var_b"round",
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)),
                                                                                    (eq(var_w("v",3),
                                                                                        lw(3,3)),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.Signed16x32Multiply32Accumulate",
                                                                                              @{typ Multiply},
                                                                                              tp[var_b"round",
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var_w("Ra",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)),
                                                                                    (eq(var_w("v",3),
                                                                                        lw(4,3)),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.SignedMultiplyDual",
                                                                                              @{typ Multiply},
                                                                                              tp[lt,
                                                                                                 var_b"round",
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var_w("Ra",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)),
                                                                                    (eq(var_w("v",3),
                                                                                        lw(5,3)),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.SignedMostSignificantMultiply",
                                                                                              @{typ Multiply},
                                                                                              tp[var_b"round",
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var_w("Ra",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)),
                                                                                    (bop(And,
                                                                                         eq(var_w("v",3),
                                                                                            lw(6,3)),
                                                                                         eq(var_w("v0",4),
                                                                                            lw(15,4))),
                                                                                     mb(call
                                                                                          ("DECODE_UNPREDICTABLE",
                                                                                           @{typ
                                                                                           "'b state_scheme \<Rightarrow>
                                                                                            (unit \<times>
                                                                                             'b state_scheme)"},
                                                                                           tp[var("mc",
                                                                                                  @{typ MachineCode}),
                                                                                              ls
                                                                                               "SignedMostSignificantMultiplySubtract"],
                                                                                           @{theory} ),
                                                                                        close
                                                                                          (var_a
                                                                                             HOLogic.unitT,
                                                                                           mu(lx @{typ instruction},
                                                                                              qTy)))),
                                                                                    (eq(var_w("v",3),
                                                                                        lw(6,3)),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.SignedMostSignificantMultiplySubtract",
                                                                                              @{typ Multiply},
                                                                                              tp[var_b"round",
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var_w("Ra",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy))],
                                                                                   mu(call
                                                                                        ("instruction.Undefined",
                                                                                         @{typ instruction},
                                                                                         lw(0,32),
                                                                                         @{theory} ),
                                                                                      qTy))),
                                                                              (tp[var_w("v",3),
                                                                                  var_w("v0",4),
                                                                                  var_b"v1",
                                                                                  var_b"v2"],
                                                                               itb([(bop(And,
                                                                                         eq(var_w("v",3),
                                                                                            lw(1,3)),
                                                                                         eq(var_w("v0",4),
                                                                                            lw(15,4))),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.Signed16Multiply32Result",
                                                                                              @{typ Multiply},
                                                                                              tp[var_b"v2",
                                                                                                 var_b"v1",
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)),
                                                                                    (eq(var_w("v",3),
                                                                                        lw(1,3)),
                                                                                     mu(call
                                                                                          ("instruction.Multiply",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Multiply.Signed16Multiply32Accumulate",
                                                                                              @{typ Multiply},
                                                                                              tp[var_b"v2",
                                                                                                 var_b"v1",
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var_w("Ra",4)],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy))],
                                                                                   mu(call
                                                                                        ("instruction.Undefined",
                                                                                         @{typ instruction},
                                                                                         lw(0,32),
                                                                                         @{theory} ),
                                                                                      qTy)))],
                                                                             @{context}))),
                                                                    call
                                                                      ("Skip",
                                                                       @{typ
                                                                       "'b state_scheme \<Rightarrow>
                                                                        (instruction \<times> 'b state_scheme)"},
                                                                       lu,@{theory} ))))))))))),
                                       (bop(And,var_b"b'24",
                                            bop(And,var_b"b'23",
                                                bop(And,mop(Not,var_b"b'22"),
                                                    bop(And,var_b"b'20",
                                                        bop(And,var_b"b'7",
                                                            bop(And,var_b"b'6",
                                                                bop(And,var_b"b'5",var_b"b'4"))))))),
                                        let'
                                          (var_w("Rn",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (var_w("Rm",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                              let'
                                                (var_w("Rd",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                        var_b"b'8"]),
                                                 mb(call
                                                      ("ThumbCondition",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                                       lu,@{theory} ),
                                                    close
                                                      (var_w("v",4),
                                                       mb(mb(mb(call
                                                                  ("HaveVirtExt",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (bool \<times> 'b state_scheme)"},lu,
                                                                   @{theory} ),
                                                                close
                                                                  (var_b"v0",
                                                                   mb(ite(var_b"v0",mu(lt,qTy),
                                                                          mb(mr(close
                                                                                  (var("s",qTy),
                                                                                   call
                                                                                     ("state.Architecture",
                                                                                      @{typ Architecture},
                                                                                      var("s",qTy),
                                                                                      @{theory} ))),
                                                                             close
                                                                               (var("v",
                                                                                    @{typ Architecture}),
                                                                                mu(eq(var("v",
                                                                                          @{typ Architecture}),
                                                                                      lc("ARMv7_R",
                                                                                         "Architecture",
                                                                                         @{theory} )),
                                                                                   qTy)))),
                                                                      close
                                                                        (var_b"v0",
                                                                         mu(tp[var_w("v",4),
                                                                               var_b"v0"],qTy))))),
                                                             close
                                                               (var("v",
                                                                    @{typ "4 word \<times> bool"}),
                                                                call
                                                                  ("Do",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (bool \<times> 'b state_scheme)"},
                                                                   var("v",
                                                                       @{typ "4 word \<times> bool"}),
                                                                   @{theory} ))),
                                                          close
                                                            (var_b"b",
                                                             ite(var_b"b",
                                                                 mb(ite(bop(Or,
                                                                            bop(In,var_w("Rd",4),
                                                                                sl[lw(13,4),lw(15,4)]),
                                                                            bop(Or,
                                                                                bop(In,
                                                                                    var_w("Rn",4),
                                                                                    sl[lw(13,4),
                                                                                       lw(15,4)]),
                                                                                bop(In,
                                                                                    var_w("Rm",4),
                                                                                    sl[lw(13,4),
                                                                                       lw(15,4)]))),
                                                                        call
                                                                          ("DECODE_UNPREDICTABLE",
                                                                           @{typ
                                                                           "'b state_scheme \<Rightarrow>
                                                                            (unit \<times> 'b state_scheme)"},
                                                                           tp[var("mc",
                                                                                  @{typ MachineCode}),
                                                                              ls"Divide"],@{theory} ),
                                                                        mu(lu,qTy)),
                                                                    close
                                                                      (var_a HOLogic.unitT,
                                                                       mu(call
                                                                            ("instruction.Divide",
                                                                             @{typ instruction},
                                                                             tp[eq(mop(Cast w1,
                                                                                       ll[var_b"b'21"]),
                                                                                   lw(1,1)),
                                                                                var_w("Rd",4),
                                                                                var_w("Rn",4),
                                                                                var_w("Rm",4)],
                                                                             @{theory} ),qTy))),
                                                                 call
                                                                   ("Skip",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (instruction \<times> 'b state_scheme)"},
                                                                    lu,@{theory} )))))))))),
                                       (bop(And,var_b"b'24",var_b"b'23"),
                                        let'
                                          (var_w("Rn",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (var_w("Rm",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                              let'
                                                (var_w("RdHi",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                        var_b"b'8"]),
                                                 let'
                                                   (var_w("RdLo",4),
                                                    mop(Cast w4,
                                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                           var_b"b'12"]),
                                                    mb(call
                                                         ("ThumbCondition",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow>
                                                           (4 word \<times> 'b state_scheme)"},lu,@{theory} ),
                                                       close
                                                         (var_w("v",4),
                                                          mb(mb(mb(call
                                                                     ("HaveThumb2",
                                                                      @{typ
                                                                      "'b state_scheme \<Rightarrow>
                                                                       (bool \<times> 'b state_scheme)"},lu,
                                                                      @{theory} ),
                                                                   close
                                                                     (var_b"v0",
                                                                      mu(tp[var_w("v",4),var_b"v0"],
                                                                         qTy))),
                                                                close
                                                                  (var("v",
                                                                       @{typ "4 word \<times> bool"}),
                                                                   call
                                                                     ("Do",
                                                                      @{typ
                                                                      "'b state_scheme \<Rightarrow>
                                                                       (bool \<times> 'b state_scheme)"},
                                                                      var("v",
                                                                          @{typ
                                                                          "4 word \<times> bool"}),
                                                                      @{theory} ))),
                                                             close
                                                               (var_b"b",
                                                                ite(var_b"b",
                                                                    mb(ite(bop(Or,
                                                                               bop(In,
                                                                                   var_w("RdLo",4),
                                                                                   sl[lw(13,4),
                                                                                      lw(15,4)]),
                                                                               bop(Or,
                                                                                   bop(In,
                                                                                       var_w("RdHi",4),
                                                                                       sl[lw(13,4),
                                                                                          lw(15,4)]),
                                                                                   bop(Or,
                                                                                       bop(In,
                                                                                           var_w("Rn",4),
                                                                                           sl[lw(13,
                                                                                                 4),
                                                                                              lw(15,
                                                                                                 4)]),
                                                                                       bop(Or,
                                                                                           bop(In,
                                                                                               var_w("Rm",4),
                                                                                               sl[lw(13,
                                                                                                     4),
                                                                                                  lw(15,
                                                                                                     4)]),
                                                                                           eq(var_w("RdHi",4),
                                                                                              var_w("RdLo",4)))))),
                                                                           call
                                                                             ("DECODE_UNPREDICTABLE",
                                                                              @{typ
                                                                              "'b state_scheme \<Rightarrow>
                                                                               (unit \<times> 'b state_scheme)"},
                                                                              tp[var("mc",
                                                                                     @{typ MachineCode}),
                                                                                 ls
                                                                                  "Long multiply, long multiply accumulate"],
                                                                              @{theory} ),mu(lu,qTy)),
                                                                       close
                                                                         (var_u"_0",
                                                                          mu(let'
                                                                               (tp[tp[var_b"b'6",
                                                                                      var_b"b'5",
                                                                                      var_b"b'4"],
                                                                                   var_b"b'3",
                                                                                   var_b"b'2",
                                                                                   var_b"b'1",
                                                                                   var_b"b'0"],
                                                                                tp[call
                                                                                     ("boolify'3",
                                                                                      @{typ
                                                                                      "bool \<times>
                                                                                       bool \<times>
                                                                                       bool"},
                                                                                      mop(Cast
                                                                                            (Word_Lib.mk_wordT 3),
                                                                                          ll[var_b"b'22",
                                                                                             var_b"b'21",
                                                                                             var_b"b'20"]),
                                                                                      @{theory} ),
                                                                                   call
                                                                                     ("boolify'4",
                                                                                      @{typ
                                                                                      "bool \<times>
                                                                                       bool \<times>
                                                                                       bool \<times>
                                                                                       bool"},
                                                                                      mop(Cast w4,
                                                                                          ll[var_b"b'7",
                                                                                             var_b"b'6",
                                                                                             var_b"b'5",
                                                                                             var_b"b'4"]),
                                                                                      @{theory} )],
                                                                                itb([(bop(And,
                                                                                          mop(Not,
                                                                                              var_b"b'4"),
                                                                                          bop(And,
                                                                                              mop(Not,
                                                                                                  var_b"b'3"),
                                                                                              bop(And,
                                                                                                  mop(Not,
                                                                                                      var_b"b'2"),
                                                                                                  bop(And,
                                                                                                      mop(Not,
                                                                                                          var_b"b'1"),
                                                                                                      mop(Not,
                                                                                                          var_b"b'0"))))),
                                                                                      call
                                                                                        ("instruction.Multiply",
                                                                                         @{typ instruction},
                                                                                         call
                                                                                           ("Multiply.MultiplyLong",
                                                                                            @{typ Multiply},
                                                                                            tp[eq(mop(Cast
                                                                                                        w1,
                                                                                                      ll[var_b"b'6"]),
                                                                                                  lw(1,
                                                                                                     1)),
                                                                                               eq(mop(Cast
                                                                                                        w1,
                                                                                                      ll[var_b"b'5"]),
                                                                                                  lw(0,
                                                                                                     1)),
                                                                                               lf,
                                                                                               var_w("RdHi",4),
                                                                                               var_w("RdLo",4),
                                                                                               var_w("Rn",4),
                                                                                               var_w("Rm",4)],
                                                                                            @{theory} ),
                                                                                         @{theory} )),
                                                                                     (bop(And,
                                                                                          var_b"b'6",
                                                                                          bop(And,
                                                                                              mop(Not,
                                                                                                  var_b"b'5"),
                                                                                              bop(And,
                                                                                                  mop(Not,
                                                                                                      var_b"b'4"),
                                                                                                  bop(And,
                                                                                                      var_b"b'3",
                                                                                                      mop(Not,
                                                                                                          var_b"b'2"))))),
                                                                                      call
                                                                                        ("instruction.Multiply",
                                                                                         @{typ instruction},
                                                                                         call
                                                                                           ("Multiply.Signed16Multiply64Accumulate",
                                                                                            @{typ Multiply},
                                                                                            tp[eq(mop(Cast
                                                                                                        w1,
                                                                                                      ll[var_b"b'0"]),
                                                                                                  lw(1,
                                                                                                     1)),
                                                                                               eq(mop(Cast
                                                                                                        w1,
                                                                                                      ll[var_b"b'1"]),
                                                                                                  lw(1,
                                                                                                     1)),
                                                                                               var_w("RdHi",4),
                                                                                               var_w("RdLo",4),
                                                                                               var_w("Rn",4),
                                                                                               var_w("Rm",4)],
                                                                                            @{theory} ),
                                                                                         @{theory} )),
                                                                                     (bop(And,
                                                                                          var_b"b'6",
                                                                                          bop(And,
                                                                                              mop(Not,
                                                                                                  var_b"b'5"),
                                                                                              bop(And,
                                                                                                  var_b"b'3",
                                                                                                  bop(And,
                                                                                                      var_b"b'2",
                                                                                                      mop(Not,
                                                                                                          var_b"b'1"))))),
                                                                                      call
                                                                                        ("instruction.Multiply",
                                                                                         @{typ instruction},
                                                                                         call
                                                                                           ("Multiply.SignedMultiplyLongDual",
                                                                                            @{typ Multiply},
                                                                                            tp[eq(mop(Cast
                                                                                                        w1,
                                                                                                      ll[var_b"b'4"]),
                                                                                                  lw(1,
                                                                                                     1)),
                                                                                               eq(mop(Cast
                                                                                                        w1,
                                                                                                      ll[var_b"b'0"]),
                                                                                                  lw(1,
                                                                                                     1)),
                                                                                               var_w("RdHi",4),
                                                                                               var_w("RdLo",4),
                                                                                               var_w("Rn",4),
                                                                                               var_w("Rm",4)],
                                                                                            @{theory} ),
                                                                                         @{theory} )),
                                                                                     (bop(And,
                                                                                          var_b"b'6",
                                                                                          bop(And,
                                                                                              var_b"b'5",
                                                                                              bop(And,
                                                                                                  mop(Not,
                                                                                                      var_b"b'4"),
                                                                                                  bop(And,
                                                                                                      mop(Not,
                                                                                                          var_b"b'3"),
                                                                                                      bop(And,
                                                                                                          var_b"b'2",
                                                                                                          bop(And,
                                                                                                              var_b"b'1",
                                                                                                              mop(Not,
                                                                                                                  var_b"b'0"))))))),
                                                                                      call
                                                                                        ("instruction.Multiply",
                                                                                         @{typ instruction},
                                                                                         call
                                                                                           ("Multiply.MultiplyAccumulateAccumulate",
                                                                                            @{typ Multiply},
                                                                                            tp[var_w("RdHi",4),
                                                                                               var_w("RdLo",4),
                                                                                               var_w("Rn",4),
                                                                                               var_w("Rm",4)],
                                                                                            @{theory} ),
                                                                                         @{theory} ))],
                                                                                    call
                                                                                      ("instruction.Undefined",
                                                                                       @{typ instruction},
                                                                                       lw(0,32),
                                                                                       @{theory} ))),
                                                                             qTy))),
                                                                    call
                                                                      ("Skip",
                                                                       @{typ
                                                                       "'b state_scheme \<Rightarrow>
                                                                        (instruction \<times> 'b state_scheme)"},
                                                                       lu,@{theory} )))))))))))],
                                      call
                                        ("UndefinedThumb",
                                         @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                         lu,@{theory} )),
                                  call
                                    ("UndefinedThumb",
                                     @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                                     @{theory} ))),
                             (var_b"b'22",
                              itb([(var_b"b'20",
                                    ite(bop(And,var_b"b'31",
                                            bop(And,var_b"b'30",
                                                bop(And,var_b"b'29",
                                                    bop(And,mop(Not,var_b"b'26"),
                                                        bop(And,mop(Not,var_b"b'24"),
                                                            mop(Not,var_b"b'21")))))),
                                        itb([(bop(And,var_b"b'19",
                                                  bop(And,var_b"b'18",
                                                      bop(And,var_b"b'17",var_b"b'16"))),
                                              let'
                                                (var_w("Rt",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                        var_b"b'12"]),
                                                 mb(call
                                                      ("ThumbCondition",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                                       lu,@{theory} ),
                                                    close
                                                      (var_w("v",4),
                                                       mb(mb(mb(call
                                                                  ("HaveThumb2",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (bool \<times> 'b state_scheme)"},lu,
                                                                   @{theory} ),
                                                                close
                                                                  (var_b"v0",
                                                                   mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                             close
                                                               (var("v",
                                                                    @{typ "4 word \<times> bool"}),
                                                                call
                                                                  ("Do",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (bool \<times> 'b state_scheme)"},
                                                                   var("v",
                                                                       @{typ "4 word \<times> bool"}),
                                                                   @{theory} ))),
                                                          close
                                                            (var_b"b",
                                                             ite(var_b"b",
                                                                 mb(ite(eq(var_w("Rt",4),lw(15,4)),
                                                                        mb(call
                                                                             ("InITBlock",
                                                                              @{typ
                                                                              "'b state_scheme \<Rightarrow>
                                                                               (bool \<times> 'b state_scheme)"},
                                                                              lu,@{theory} ),
                                                                           close
                                                                             (var_b"b",
                                                                              ite(var_b"b",
                                                                                  mb(call
                                                                                       ("LastInITBlock",
                                                                                        @{typ
                                                                                        "'b state_scheme \<Rightarrow>
                                                                                         (bool \<times>
                                                                                          'b state_scheme)"},
                                                                                        lu,@{theory} ),
                                                                                     close
                                                                                       (var_b"v",
                                                                                        mu(mop(Not,
                                                                                               var_b"v"),
                                                                                           qTy))),
                                                                                  mu(lf,qTy)))),
                                                                        mu(lf,qTy)),
                                                                    close
                                                                      (var_b"v",
                                                                       mb(ite(var_b"v",
                                                                              call
                                                                                ("DECODE_UNPREDICTABLE",
                                                                                 @{typ
                                                                                 "'b state_scheme \<Rightarrow>
                                                                                  (unit \<times>
                                                                                   'b state_scheme)"},
                                                                                 tp[var("mc",
                                                                                        @{typ MachineCode}),
                                                                                    ls"LoadLiteral"],
                                                                                 @{theory} ),
                                                                              mu(lu,qTy)),
                                                                          close
                                                                            (var_a HOLogic.unitT,
                                                                             mu(call
                                                                                  ("instruction.Load",
                                                                                   @{typ instruction},
                                                                                   call
                                                                                     ("Load.LoadLiteral",
                                                                                      @{typ Load},
                                                                                      tp[eq(mop(Cast
                                                                                                  w1,
                                                                                                ll[var_b"b'23"]),
                                                                                            lw(1,1)),
                                                                                         var_w("Rt",4),
                                                                                         mop(Cast
                                                                                               w32,
                                                                                             mop(Cast
                                                                                                   (Word_Lib.mk_wordT 12),
                                                                                                 ll[var_b"b'11",
                                                                                                    var_b"b'10",
                                                                                                    var_b"b'9",
                                                                                                    var_b"b'8",
                                                                                                    var_b"b'7",
                                                                                                    var_b"b'6",
                                                                                                    var_b"b'5",
                                                                                                    var_b"b'4",
                                                                                                    var_b"b'3",
                                                                                                    var_b"b'2",
                                                                                                    var_b"b'1",
                                                                                                    var_b"b'0"]))],
                                                                                      @{theory} ),
                                                                                   @{theory} ),qTy))))),
                                                                 call
                                                                   ("Skip",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (instruction \<times> 'b state_scheme)"},
                                                                    lu,@{theory} )))))))),
                                             (var_b"b'23",
                                              let'
                                                (var_w("Rt",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                        var_b"b'12"]),
                                                 mb(call
                                                      ("ThumbCondition",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                                       lu,@{theory} ),
                                                    close
                                                      (var_w("v",4),
                                                       mb(mb(mb(call
                                                                  ("HaveThumb2",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (bool \<times> 'b state_scheme)"},lu,
                                                                   @{theory} ),
                                                                close
                                                                  (var_b"v0",
                                                                   mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                             close
                                                               (var("v",
                                                                    @{typ "4 word \<times> bool"}),
                                                                call
                                                                  ("Do",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (bool \<times> 'b state_scheme)"},
                                                                   var("v",
                                                                       @{typ "4 word \<times> bool"}),
                                                                   @{theory} ))),
                                                          close
                                                            (var_b"b",
                                                             ite(var_b"b",
                                                                 mb(ite(eq(var_w("Rt",4),lw(15,4)),
                                                                        mb(call
                                                                             ("InITBlock",
                                                                              @{typ
                                                                              "'b state_scheme \<Rightarrow>
                                                                               (bool \<times> 'b state_scheme)"},
                                                                              lu,@{theory} ),
                                                                           close
                                                                             (var_b"b",
                                                                              ite(var_b"b",
                                                                                  mb(call
                                                                                       ("LastInITBlock",
                                                                                        @{typ
                                                                                        "'b state_scheme \<Rightarrow>
                                                                                         (bool \<times>
                                                                                          'b state_scheme)"},
                                                                                        lu,@{theory} ),
                                                                                     close
                                                                                       (var_b"v",
                                                                                        mu(mop(Not,
                                                                                               var_b"v"),
                                                                                           qTy))),
                                                                                  mu(lf,qTy)))),
                                                                        mu(lf,qTy)),
                                                                    close
                                                                      (var_b"v",
                                                                       mb(ite(var_b"v",
                                                                              call
                                                                                ("DECODE_UNPREDICTABLE",
                                                                                 @{typ
                                                                                 "'b state_scheme \<Rightarrow>
                                                                                  (unit \<times>
                                                                                   'b state_scheme)"},
                                                                                 tp[var("mc",
                                                                                        @{typ MachineCode}),
                                                                                    ls"LoadWord"],
                                                                                 @{theory} ),
                                                                              mu(lu,qTy)),
                                                                          close
                                                                            (var_a HOLogic.unitT,
                                                                             mu(call
                                                                                  ("instruction.Load",
                                                                                   @{typ instruction},
                                                                                   call
                                                                                     ("Load.LoadWord",
                                                                                      @{typ Load},
                                                                                      tp[lt,lt,lf,
                                                                                         var_w("Rt",4),
                                                                                         mop(Cast w4,
                                                                                             ll[var_b"b'19",
                                                                                                var_b"b'18",
                                                                                                var_b"b'17",
                                                                                                var_b"b'16"]),
                                                                                         call
                                                                                           ("offset1.immediate_form1",
                                                                                            @{typ offset1},
                                                                                            mop(Cast
                                                                                                  w32,
                                                                                                mop(Cast
                                                                                                      (Word_Lib.mk_wordT 12),
                                                                                                    ll[var_b"b'11",
                                                                                                       var_b"b'10",
                                                                                                       var_b"b'9",
                                                                                                       var_b"b'8",
                                                                                                       var_b"b'7",
                                                                                                       var_b"b'6",
                                                                                                       var_b"b'5",
                                                                                                       var_b"b'4",
                                                                                                       var_b"b'3",
                                                                                                       var_b"b'2",
                                                                                                       var_b"b'1",
                                                                                                       var_b"b'0"])),
                                                                                            @{theory} )],
                                                                                      @{theory} ),
                                                                                   @{theory} ),qTy))))),
                                                                 call
                                                                   ("Skip",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (instruction \<times> 'b state_scheme)"},
                                                                    lu,@{theory} )))))))),
                                             (bop(And,mop(Not,var_b"b'23"),
                                                  bop(And,var_b"b'11",
                                                      bop(And,var_b"b'10",
                                                          bop(And,var_b"b'9",mop(Not,var_b"b'8"))))),
                                              let'
                                                (var_w("Rt",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                        var_b"b'12"]),
                                                 mb(call
                                                      ("ThumbCondition",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                                       lu,@{theory} ),
                                                    close
                                                      (var_w("v",4),
                                                       mb(mb(mb(call
                                                                  ("HaveThumb2",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (bool \<times> 'b state_scheme)"},lu,
                                                                   @{theory} ),
                                                                close
                                                                  (var_b"v0",
                                                                   mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                             close
                                                               (var("v",
                                                                    @{typ "4 word \<times> bool"}),
                                                                call
                                                                  ("Do",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (bool \<times> 'b state_scheme)"},
                                                                   var("v",
                                                                       @{typ "4 word \<times> bool"}),
                                                                   @{theory} ))),
                                                          close
                                                            (var_b"b",
                                                             ite(var_b"b",
                                                                 mb(ite(bop(In,var_w("Rt",4),
                                                                            sl[lw(13,4),lw(15,4)]),
                                                                        call
                                                                          ("DECODE_UNPREDICTABLE",
                                                                           @{typ
                                                                           "'b state_scheme \<Rightarrow>
                                                                            (unit \<times> 'b state_scheme)"},
                                                                           tp[var("mc",
                                                                                  @{typ MachineCode}),
                                                                              ls"LoadUnprivileged"],
                                                                           @{theory} ),mu(lu,qTy)),
                                                                    close
                                                                      (var_a HOLogic.unitT,
                                                                       mu(call
                                                                            ("instruction.Load",
                                                                             @{typ instruction},
                                                                             call
                                                                               ("Load.LoadUnprivileged",
                                                                                @{typ Load},
                                                                                tp[lt,lf,
                                                                                   var_w("Rt",4),
                                                                                   mop(Cast w4,
                                                                                       ll[var_b"b'19",
                                                                                          var_b"b'18",
                                                                                          var_b"b'17",
                                                                                          var_b"b'16"]),
                                                                                   call
                                                                                     ("offset1.immediate_form1",
                                                                                      @{typ offset1},
                                                                                      mop(Cast w32,
                                                                                          mop(Cast
                                                                                                w8,
                                                                                              ll[var_b"b'7",
                                                                                                 var_b"b'6",
                                                                                                 var_b"b'5",
                                                                                                 var_b"b'4",
                                                                                                 var_b"b'3",
                                                                                                 var_b"b'2",
                                                                                                 var_b"b'1",
                                                                                                 var_b"b'0"])),
                                                                                      @{theory} )],
                                                                                @{theory} ),@{theory} ),
                                                                          qTy))),
                                                                 call
                                                                   ("Skip",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (instruction \<times> 'b state_scheme)"},
                                                                    lu,@{theory} )))))))),
                                             (bop(And,mop(Not,var_b"b'23"),var_b"b'11"),
                                              let'
                                                (var_w("Rn",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'19",var_b"b'18",var_b"b'17",
                                                        var_b"b'16"]),
                                                 let'
                                                   (var_w("W",1),mop(Cast w1,ll[var_b"b'8"]),
                                                    let'
                                                      (var_w("P",1),mop(Cast w1,ll[var_b"b'10"]),
                                                       let'
                                                         (var_w("Rt",4),
                                                          mop(Cast w4,
                                                              ll[var_b"b'15",var_b"b'14",
                                                                 var_b"b'13",var_b"b'12"]),
                                                          mb(call
                                                               ("ThumbCondition",
                                                                @{typ
                                                                "'b state_scheme \<Rightarrow>
                                                                 (4 word \<times> 'b state_scheme)"},lu,
                                                                @{theory} ),
                                                             close
                                                               (var_w("v",4),
                                                                mb(mb(mb(ite(bop(Or,
                                                                                 eq(var_w("P",1),
                                                                                    lw(1,1)),
                                                                                 eq(var_w("W",1),
                                                                                    lw(1,1))),
                                                                             call
                                                                               ("HaveThumb2",
                                                                                @{typ
                                                                                "'b state_scheme \<Rightarrow>
                                                                                 (bool \<times>
                                                                                  'b state_scheme)"},lu,
                                                                                @{theory} ),
                                                                             mu(lf,qTy)),
                                                                         close
                                                                           (var_b"v0",
                                                                            mu(tp[var_w("v",4),
                                                                                  var_b"v0"],qTy))),
                                                                      close
                                                                        (var("v",
                                                                             @{typ
                                                                             "4 word \<times> bool"}),
                                                                         call
                                                                           ("Do",
                                                                            @{typ
                                                                            "'b state_scheme \<Rightarrow>
                                                                             (bool \<times> 'b state_scheme)"},
                                                                            var("v",
                                                                                @{typ
                                                                                "4 word \<times>
                                                                                 bool"}),@{theory} ))),
                                                                   close
                                                                     (var_b"b",
                                                                      ite(var_b"b",
                                                                          let'
                                                                            (var_b"wback",
                                                                             eq(var_w("W",1),lw(1,1)),
                                                                             mb(itb([(bop(And,
                                                                                          var_b"wback",
                                                                                          eq(var_w("Rn",4),
                                                                                             var_w("Rt",4))),
                                                                                      mu(lt,qTy)),
                                                                                     (eq(var_w("Rt",4),
                                                                                         lw(15,4)),
                                                                                      mb(call
                                                                                           ("InITBlock",
                                                                                            @{typ
                                                                                            "'b state_scheme \<Rightarrow>
                                                                                             (bool \<times>
                                                                                              'b state_scheme)"},
                                                                                            lu,
                                                                                            @{theory} ),
                                                                                         close
                                                                                           (var_b"b",
                                                                                            ite(var_b"b",
                                                                                                mb(call
                                                                                                     ("LastInITBlock",
                                                                                                      @{typ
                                                                                                      "'b state_scheme \<Rightarrow>
                                                                                                       (bool \<times>
                                                                                                        'b state_scheme)"},
                                                                                                      lu,
                                                                                                      @{theory} ),
                                                                                                   close
                                                                                                     (var_b"v",
                                                                                                      mu(mop(Not,
                                                                                                             var_b"v"),
                                                                                                         qTy))),
                                                                                                mu(lf,
                                                                                                   qTy)))))],
                                                                                    mu(lf,qTy)),
                                                                                close
                                                                                  (var_b"v",
                                                                                   mb(ite(var_b"v",
                                                                                          call
                                                                                            ("DECODE_UNPREDICTABLE",
                                                                                             @{typ
                                                                                             "'b state_scheme \<Rightarrow>
                                                                                              (unit \<times>
                                                                                               'b state_scheme)"},
                                                                                             tp[var("mc",
                                                                                                    @{typ MachineCode}),
                                                                                                ls
                                                                                                 "LoadWord"],
                                                                                             @{theory} ),
                                                                                          mu(lu,qTy)),
                                                                                      close
                                                                                        (var_a
                                                                                           HOLogic.unitT,
                                                                                         mu(call
                                                                                              ("instruction.Load",
                                                                                               @{typ instruction},
                                                                                               call
                                                                                                 ("Load.LoadWord",
                                                                                                  @{typ Load},
                                                                                                  tp[eq(mop(Cast
                                                                                                              w1,
                                                                                                            ll[var_b"b'9"]),
                                                                                                        lw(1,
                                                                                                           1)),
                                                                                                     eq(var_w("P",1),
                                                                                                        lw(1,
                                                                                                           1)),
                                                                                                     var_b"wback",
                                                                                                     var_w("Rt",4),
                                                                                                     var_w("Rn",4),
                                                                                                     call
                                                                                                       ("offset1.immediate_form1",
                                                                                                        @{typ offset1},
                                                                                                        mop(Cast
                                                                                                              w32,
                                                                                                            mop(Cast
                                                                                                                  w8,
                                                                                                                ll[var_b"b'7",
                                                                                                                   var_b"b'6",
                                                                                                                   var_b"b'5",
                                                                                                                   var_b"b'4",
                                                                                                                   var_b"b'3",
                                                                                                                   var_b"b'2",
                                                                                                                   var_b"b'1",
                                                                                                                   var_b"b'0"])),
                                                                                                        @{theory} )],
                                                                                                  @{theory} ),
                                                                                               @{theory} ),
                                                                                            qTy)))))),
                                                                          call
                                                                            ("Skip",
                                                                             @{typ
                                                                             "'b state_scheme \<Rightarrow>
                                                                              (instruction \<times>
                                                                               'b state_scheme)"},lu,@{theory} ))))))))))),
                                             (bop(And,mop(Not,var_b"b'23"),
                                                  bop(And,mop(Not,var_b"b'11"),
                                                      bop(And,mop(Not,var_b"b'10"),
                                                          bop(And,mop(Not,var_b"b'9"),
                                                              bop(And,mop(Not,var_b"b'8"),
                                                                  bop(And,mop(Not,var_b"b'7"),
                                                                      mop(Not,var_b"b'6"))))))),
                                              let'
                                                (var_w("Rm",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                                 let'
                                                   (var_w("Rt",4),
                                                    mop(Cast w4,
                                                        ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                           var_b"b'12"]),
                                                    mb(call
                                                         ("ThumbCondition",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow>
                                                           (4 word \<times> 'b state_scheme)"},lu,@{theory} ),
                                                       close
                                                         (var_w("v",4),
                                                          mb(mb(mb(call
                                                                     ("HaveThumb2",
                                                                      @{typ
                                                                      "'b state_scheme \<Rightarrow>
                                                                       (bool \<times> 'b state_scheme)"},lu,
                                                                      @{theory} ),
                                                                   close
                                                                     (var_b"v0",
                                                                      mu(tp[var_w("v",4),var_b"v0"],
                                                                         qTy))),
                                                                close
                                                                  (var("v",
                                                                       @{typ "4 word \<times> bool"}),
                                                                   call
                                                                     ("Do",
                                                                      @{typ
                                                                      "'b state_scheme \<Rightarrow>
                                                                       (bool \<times> 'b state_scheme)"},
                                                                      var("v",
                                                                          @{typ
                                                                          "4 word \<times> bool"}),
                                                                      @{theory} ))),
                                                             close
                                                               (var_b"b",
                                                                ite(var_b"b",
                                                                    mb(ite(eq(var_w("Rt",4),lw(15,4)),
                                                                           mb(call
                                                                                ("InITBlock",
                                                                                 @{typ
                                                                                 "'b state_scheme \<Rightarrow>
                                                                                  (bool \<times>
                                                                                   'b state_scheme)"},lu,
                                                                                 @{theory} ),
                                                                              close
                                                                                (var_b"b",
                                                                                 ite(var_b"b",
                                                                                     mb(call
                                                                                          ("LastInITBlock",
                                                                                           @{typ
                                                                                           "'b state_scheme \<Rightarrow>
                                                                                            (bool \<times>
                                                                                             'b state_scheme)"},
                                                                                           lu,
                                                                                           @{theory} ),
                                                                                        close
                                                                                          (var_b"v",
                                                                                           mu(mop(Not,
                                                                                                  var_b"v"),
                                                                                              qTy))),
                                                                                     mu(lf,qTy)))),
                                                                           mu(lf,qTy)),
                                                                       close
                                                                         (var_b"v",
                                                                          mb(mb(mu(bop(Or,var_b"v",
                                                                                       bop(In,
                                                                                           var_w("Rm",4),
                                                                                           sl[lw(13,
                                                                                                 4),
                                                                                              lw(15,
                                                                                                 4)])),
                                                                                   qTy),
                                                                                close
                                                                                  (var_b"b",
                                                                                   ite(var_b"b",
                                                                                       call
                                                                                         ("DECODE_UNPREDICTABLE",
                                                                                          @{typ
                                                                                          "'b state_scheme \<Rightarrow>
                                                                                           (unit \<times>
                                                                                            'b state_scheme)"},
                                                                                          tp[var("mc",
                                                                                                 @{typ MachineCode}),
                                                                                             ls
                                                                                              "LoadWord"],
                                                                                          @{theory} ),
                                                                                       mu(lu,qTy)))),
                                                                             close
                                                                               (var_a HOLogic.unitT,
                                                                                mu(call
                                                                                     ("instruction.Load",
                                                                                      @{typ instruction},
                                                                                      call
                                                                                        ("Load.LoadWord",
                                                                                         @{typ Load},
                                                                                         tp[lt,lt,
                                                                                            lf,
                                                                                            var_w("Rt",4),
                                                                                            mop(Cast
                                                                                                  w4,
                                                                                                ll[var_b"b'19",
                                                                                                   var_b"b'18",
                                                                                                   var_b"b'17",
                                                                                                   var_b"b'16"]),
                                                                                            call
                                                                                              ("offset1.register_form1",
                                                                                               @{typ offset1},
                                                                                               tp[var_w("Rm",4),
                                                                                                  lc("SRType_LSL",
                                                                                                     "SRType",
                                                                                                    prev_thy ),
                                                                                                  mop(Cast
                                                                                                        HOLogic.natT,
                                                                                                      mop(Cast
                                                                                                            (Word_Lib.mk_wordT 2),
                                                                                                          ll[var_b"b'5",
                                                                                                             var_b"b'4"]))],
                                                                                               @{theory} )],
                                                                                         @{theory} ),
                                                                                      @{theory} ),qTy))))),
                                                                    call
                                                                      ("Skip",
                                                                       @{typ
                                                                       "'b state_scheme \<Rightarrow>
                                                                        (instruction \<times> 'b state_scheme)"},
                                                                       lu,@{theory} )))))))))],
                                            call
                                              ("UndefinedThumb",
                                               @{typ
                                               "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                               lu,@{theory} )),
                                        call
                                          ("UndefinedThumb",
                                           @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                           lu,@{theory} ))),
                                   (bop(And,var_b"b'31",
                                        bop(And,var_b"b'30",
                                            bop(And,var_b"b'29",
                                                bop(And,mop(Not,var_b"b'26"),
                                                    bop(And,mop(Not,var_b"b'24"),
                                                        mop(Not,var_b"b'21")))))),
                                    itb([(bop(And,mop(Not,var_b"b'23"),
                                              bop(And,mop(Not,var_b"b'11"),
                                                  bop(And,mop(Not,var_b"b'10"),
                                                      bop(And,mop(Not,var_b"b'9"),
                                                          bop(And,mop(Not,var_b"b'8"),
                                                              bop(And,mop(Not,var_b"b'7"),
                                                                  mop(Not,var_b"b'6"))))))),
                                          let'
                                            (var_w("Rn",4),
                                             mop(Cast w4,
                                                 ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                             let'
                                               (var_w("Rm",4),
                                                mop(Cast w4,
                                                    ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                                let'
                                                  (var_w("Rt",4),
                                                   mop(Cast w4,
                                                       ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                          var_b"b'12"]),
                                                   mb(call
                                                        ("ThumbCondition",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow>
                                                          (4 word \<times> 'b state_scheme)"},lu,@{theory} ),
                                                      close
                                                        (var_w("v",4),
                                                         mb(mb(mb(ite(mop(Not,
                                                                          eq(var_w("Rn",4),lw(15,4))),
                                                                      call
                                                                        ("HaveThumb2",
                                                                         @{typ
                                                                         "'b state_scheme \<Rightarrow>
                                                                          (bool \<times> 'b state_scheme)"},
                                                                         lu,@{theory} ),mu(lf,qTy)),
                                                                  close
                                                                    (var_b"v0",
                                                                     mu(tp[var_w("v",4),var_b"v0"],
                                                                        qTy))),
                                                               close
                                                                 (var("v",
                                                                      @{typ "4 word \<times> bool"}),
                                                                  call
                                                                    ("Do",
                                                                     @{typ
                                                                     "'b state_scheme \<Rightarrow>
                                                                      (bool \<times> 'b state_scheme)"},
                                                                     var("v",
                                                                         @{typ
                                                                         "4 word \<times> bool"}),
                                                                     @{theory} ))),
                                                            close
                                                              (var_b"b",
                                                               ite(var_b"b",
                                                                   mb(ite(bop(Or,
                                                                              eq(var_w("Rt",4),
                                                                                 lw(15,4)),
                                                                              bop(In,var_w("Rm",4),
                                                                                  sl[lw(13,4),
                                                                                     lw(15,4)])),
                                                                          call
                                                                            ("DECODE_UNPREDICTABLE",
                                                                             @{typ
                                                                             "'b state_scheme \<Rightarrow>
                                                                              (unit \<times> 'b state_scheme)"},
                                                                             tp[var("mc",
                                                                                    @{typ MachineCode}),
                                                                                ls"Store (register)"],
                                                                             @{theory} ),mu(lu,qTy)),
                                                                      close
                                                                        (var_a HOLogic.unitT,
                                                                         mu(call
                                                                              ("instruction.Store",
                                                                               @{typ instruction},
                                                                               call
                                                                                 ("Store.StoreWord",
                                                                                  @{typ Store},
                                                                                  tp[lt,lt,lf,
                                                                                     var_w("Rt",4),
                                                                                     var_w("Rn",4),
                                                                                     call
                                                                                       ("offset1.register_form1",
                                                                                        @{typ offset1},
                                                                                        tp[var_w("Rm",4),
                                                                                           lc("SRType_LSL",
                                                                                              "SRType",
                                                                                              @{theory} ),
                                                                                           mop(Cast
                                                                                                 HOLogic.natT,
                                                                                               mop(Cast
                                                                                                     (Word_Lib.mk_wordT 2),
                                                                                                   ll[var_b"b'5",
                                                                                                      var_b"b'4"]))],
                                                                                        @{theory} )],
                                                                                  @{theory} ),
                                                                               @{theory} ),qTy))),
                                                                   call
                                                                     ("Skip",
                                                                      @{typ
                                                                      "'b state_scheme \<Rightarrow>
                                                                       (instruction \<times> 'b state_scheme)"},
                                                                      lu,@{theory} )))))))))),
                                         (bop(And,mop(Not,var_b"b'23"),
                                              bop(And,var_b"b'11",
                                                  bop(And,var_b"b'10",
                                                      bop(And,var_b"b'9",mop(Not,var_b"b'8"))))),
                                          let'
                                            (var_w("Rn",4),
                                             mop(Cast w4,
                                                 ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                             let'
                                               (var_w("Rt",4),
                                                mop(Cast w4,
                                                    ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                       var_b"b'12"]),
                                                mb(call
                                                     ("ThumbCondition",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                                      lu,@{theory} ),
                                                   close
                                                     (var_w("v",4),
                                                      mb(mb(mb(ite(mop(Not,
                                                                       eq(var_w("Rn",4),lw(15,4))),
                                                                   call
                                                                     ("HaveThumb2",
                                                                      @{typ
                                                                      "'b state_scheme \<Rightarrow>
                                                                       (bool \<times> 'b state_scheme)"},lu,
                                                                      @{theory} ),mu(lf,qTy)),
                                                               close
                                                                 (var_b"v0",
                                                                  mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                            close
                                                              (var("v",@{typ "4 word \<times> bool"}),
                                                               call
                                                                 ("Do",
                                                                  @{typ
                                                                  "'b state_scheme \<Rightarrow>
                                                                   (bool \<times> 'b state_scheme)"},
                                                                  var("v",
                                                                      @{typ "4 word \<times> bool"}),
                                                                  @{theory} ))),
                                                         close
                                                           (var_b"b",
                                                            ite(var_b"b",
                                                                mb(ite(bop(In,var_w("Rt",4),
                                                                           sl[lw(13,4),lw(15,4)]),
                                                                       call
                                                                         ("DECODE_UNPREDICTABLE",
                                                                          @{typ
                                                                          "'b state_scheme \<Rightarrow>
                                                                           (unit \<times> 'b state_scheme)"},
                                                                          tp[var("mc",
                                                                                 @{typ MachineCode}),
                                                                             ls"StoreUnprivileged"],
                                                                          @{theory} ),mu(lu,qTy)),
                                                                   close
                                                                     (var_a HOLogic.unitT,
                                                                      mu(call
                                                                           ("instruction.Store",
                                                                            @{typ instruction},
                                                                            call
                                                                              ("Store.StoreUnprivileged",
                                                                               @{typ Store},
                                                                               tp[lt,lf,
                                                                                  var_w("Rt",4),
                                                                                  var_w("Rn",4),
                                                                                  call
                                                                                    ("offset1.immediate_form1",
                                                                                     @{typ offset1},
                                                                                     mop(Cast w32,
                                                                                         mop(Cast w8,
                                                                                             ll[var_b"b'7",
                                                                                                var_b"b'6",
                                                                                                var_b"b'5",
                                                                                                var_b"b'4",
                                                                                                var_b"b'3",
                                                                                                var_b"b'2",
                                                                                                var_b"b'1",
                                                                                                var_b"b'0"])),
                                                                                     @{theory} )],
                                                                               @{theory} ),@{theory} ),
                                                                         qTy))),
                                                                call
                                                                  ("Skip",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (instruction \<times> 'b state_scheme)"},
                                                                   lu,@{theory} ))))))))),
                                         (bop(And,mop(Not,var_b"b'23"),var_b"b'11"),
                                          let'
                                            (var_w("Rn",4),
                                             mop(Cast w4,
                                                 ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                             let'
                                               (var_w("W",1),mop(Cast w1,ll[var_b"b'8"]),
                                                let'
                                                  (var_w("P",1),mop(Cast w1,ll[var_b"b'10"]),
                                                   let'
                                                     (var_w("Rt",4),
                                                      mop(Cast w4,
                                                          ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                             var_b"b'12"]),
                                                      mb(call
                                                           ("ThumbCondition",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (4 word \<times> 'b state_scheme)"},lu,@{theory} ),
                                                         close
                                                           (var_w("v",4),
                                                            mb(mb(mb(ite(mop(Not,
                                                                             eq(var_w("Rn",4),
                                                                                lw(15,4))),
                                                                         ite(bop(Or,
                                                                                 eq(var_w("P",1),
                                                                                    lw(1,1)),
                                                                                 eq(var_w("W",1),
                                                                                    lw(1,1))),
                                                                             call
                                                                               ("HaveThumb2",
                                                                                @{typ
                                                                                "'b state_scheme \<Rightarrow>
                                                                                 (bool \<times>
                                                                                  'b state_scheme)"},lu,
                                                                                @{theory} ),
                                                                             mu(lf,qTy)),mu(lf,qTy)),
                                                                     close
                                                                       (var_b"v0",
                                                                        mu(tp[var_w("v",4),var_b"v0"],
                                                                           qTy))),
                                                                  close
                                                                    (var("v",
                                                                         @{typ
                                                                         "4 word \<times> bool"}),
                                                                     call
                                                                       ("Do",
                                                                        @{typ
                                                                        "'b state_scheme \<Rightarrow>
                                                                         (bool \<times> 'b state_scheme)"},
                                                                        var("v",
                                                                            @{typ
                                                                            "4 word \<times> bool"}),
                                                                        @{theory} ))),
                                                               close
                                                                 (var_b"b",
                                                                  ite(var_b"b",
                                                                      let'
                                                                        (var_b"wback",
                                                                         eq(var_w("W",1),lw(1,1)),
                                                                         mb(ite(bop(Or,
                                                                                    eq(var_w("Rt",4),
                                                                                       lw(15,4)),
                                                                                    bop(And,
                                                                                        var_b"wback",
                                                                                        eq(var_w("Rn",4),
                                                                                           var_w("Rt",4)))),
                                                                                call
                                                                                  ("DECODE_UNPREDICTABLE",
                                                                                   @{typ
                                                                                   "'b state_scheme \<Rightarrow>
                                                                                    (unit \<times>
                                                                                     'b state_scheme)"},
                                                                                   tp[var("mc",
                                                                                          @{typ MachineCode}),
                                                                                      ls
                                                                                       "Store (immediate)"],
                                                                                   @{theory} ),
                                                                                mu(lu,qTy)),
                                                                            close
                                                                              (var_a HOLogic.unitT,
                                                                               mu(call
                                                                                    ("instruction.Store",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Store.StoreWord",
                                                                                        @{typ Store},
                                                                                        tp[eq(mop(Cast
                                                                                                    w1,
                                                                                                  ll[var_b"b'9"]),
                                                                                              lw(1,1)),
                                                                                           eq(var_w("P",1),
                                                                                              lw(1,1)),
                                                                                           var_b"wback",
                                                                                           var_w("Rt",4),
                                                                                           var_w("Rn",4),
                                                                                           call
                                                                                             ("offset1.immediate_form1",
                                                                                              @{typ offset1},
                                                                                              mop(Cast
                                                                                                    w32,
                                                                                                  mop(Cast
                                                                                                        w8,
                                                                                                      ll[var_b"b'7",
                                                                                                         var_b"b'6",
                                                                                                         var_b"b'5",
                                                                                                         var_b"b'4",
                                                                                                         var_b"b'3",
                                                                                                         var_b"b'2",
                                                                                                         var_b"b'1",
                                                                                                         var_b"b'0"])),
                                                                                              @{theory} )],
                                                                                        @{theory} ),
                                                                                     @{theory} ),qTy)))),
                                                                      call
                                                                        ("Skip",
                                                                         @{typ
                                                                         "'b state_scheme \<Rightarrow>
                                                                          (instruction \<times>
                                                                           'b state_scheme)"},lu,@{theory} ))))))))))),
                                         (var_b"b'23",
                                          let'
                                            (var_w("Rn",4),
                                             mop(Cast w4,
                                                 ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                             let'
                                               (var_w("Rt",4),
                                                mop(Cast w4,
                                                    ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                       var_b"b'12"]),
                                                mb(call
                                                     ("ThumbCondition",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                                      lu,@{theory} ),
                                                   close
                                                     (var_w("v",4),
                                                      mb(mb(mb(ite(mop(Not,
                                                                       eq(var_w("Rn",4),lw(15,4))),
                                                                   call
                                                                     ("HaveThumb2",
                                                                      @{typ
                                                                      "'b state_scheme \<Rightarrow>
                                                                       (bool \<times> 'b state_scheme)"},lu,
                                                                      @{theory} ),mu(lf,qTy)),
                                                               close
                                                                 (var_b"v0",
                                                                  mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                            close
                                                              (var("v",@{typ "4 word \<times> bool"}),
                                                               call
                                                                 ("Do",
                                                                  @{typ
                                                                  "'b state_scheme \<Rightarrow>
                                                                   (bool \<times> 'b state_scheme)"},
                                                                  var("v",
                                                                      @{typ "4 word \<times> bool"}),
                                                                  @{theory} ))),
                                                         close
                                                           (var_b"b",
                                                            ite(var_b"b",
                                                                mb(ite(eq(var_w("Rt",4),lw(15,4)),
                                                                       call
                                                                         ("DECODE_UNPREDICTABLE",
                                                                          @{typ
                                                                          "'b state_scheme \<Rightarrow>
                                                                           (unit \<times> 'b state_scheme)"},
                                                                          tp[var("mc",
                                                                                 @{typ MachineCode}),
                                                                             ls"Store (immediate)"],
                                                                          @{theory} ),mu(lu,qTy)),
                                                                   close
                                                                     (var_a HOLogic.unitT,
                                                                      mu(call
                                                                           ("instruction.Store",
                                                                            @{typ instruction},
                                                                            call
                                                                              ("Store.StoreWord",
                                                                               @{typ Store},
                                                                               tp[lt,lt,lf,
                                                                                  var_w("Rt",4),
                                                                                  var_w("Rn",4),
                                                                                  call
                                                                                    ("offset1.immediate_form1",
                                                                                     @{typ offset1},
                                                                                     mop(Cast w32,
                                                                                         mop(Cast
                                                                                               (Word_Lib.mk_wordT 12),
                                                                                             ll[var_b"b'11",
                                                                                                var_b"b'10",
                                                                                                var_b"b'9",
                                                                                                var_b"b'8",
                                                                                                var_b"b'7",
                                                                                                var_b"b'6",
                                                                                                var_b"b'5",
                                                                                                var_b"b'4",
                                                                                                var_b"b'3",
                                                                                                var_b"b'2",
                                                                                                var_b"b'1",
                                                                                                var_b"b'0"])),
                                                                                     @{theory} )],
                                                                               @{theory} ),@{theory} ),
                                                                         qTy))),
                                                                call
                                                                  ("Skip",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (instruction \<times> 'b state_scheme)"},
                                                                   lu,@{theory} )))))))))],
                                        call
                                          ("UndefinedThumb",
                                           @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                           lu,@{theory} )))],
                                  call
                                    ("UndefinedThumb",
                                     @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                                     @{theory} ))),
                             (var_b"b'20",
                              ite(bop(And,var_b"b'31",
                                      bop(And,var_b"b'30",bop(And,var_b"b'29",mop(Not,var_b"b'26")))),
                                  itb([(bop(And,mop(Not,var_b"b'24"),
                                            bop(And,var_b"b'21",
                                                bop(And,var_b"b'19",
                                                    bop(And,var_b"b'18",
                                                        bop(And,var_b"b'17",
                                                            bop(And,var_b"b'16",
                                                                bop(And,var_b"b'15",
                                                                    bop(And,var_b"b'14",
                                                                        bop(And,var_b"b'13",
                                                                            var_b"b'12"))))))))),
                                        mb(call
                                             ("DECODE_UNPREDICTABLE",
                                              @{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                              tp[var("mc",@{typ MachineCode}),ls"PreloadDataLiteral"],
                                              @{theory} ),
                                           close(var_a HOLogic.unitT,mu(lx @{typ instruction},qTy)))),
                                       (bop(And,mop(Not,var_b"b'24"),
                                            bop(And,var_b"b'19",
                                                bop(And,var_b"b'18",
                                                    bop(And,var_b"b'17",
                                                        bop(And,var_b"b'16",
                                                            bop(And,var_b"b'15",
                                                                bop(And,var_b"b'14",
                                                                    bop(And,var_b"b'13",var_b"b'12")))))))),
                                        mb(call
                                             ("ThumbCondition",
                                              @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                              lu,@{theory} ),
                                           close
                                             (var_w("v",4),
                                              mb(mb(mb(call
                                                         ("HaveThumb2",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          lu,@{theory} ),
                                                       close
                                                         (var_b"v0",
                                                          mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                    close
                                                      (var("v",@{typ "4 word \<times> bool"}),
                                                       call
                                                         ("Do",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          var("v",@{typ "4 word \<times> bool"}),
                                                          @{theory} ))),
                                                 close
                                                   (var_b"b",
                                                    ite(var_b"b",
                                                        mu(call
                                                             ("instruction.Hint",@{typ instruction},
                                                              call
                                                                ("Hint.PreloadDataLiteral",
                                                                 @{typ Hint},
                                                                 tp[eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                       lw(1,1)),
                                                                    mop(Cast w32,
                                                                        mop(Cast
                                                                              (Word_Lib.mk_wordT 12),
                                                                            ll[var_b"b'11",
                                                                               var_b"b'10",
                                                                               var_b"b'9",
                                                                               var_b"b'8",
                                                                               var_b"b'7",
                                                                               var_b"b'6",
                                                                               var_b"b'5",
                                                                               var_b"b'4",
                                                                               var_b"b'3",
                                                                               var_b"b'2",
                                                                               var_b"b'1",var_b"b'0"]))],
                                                                 @{theory} ),@{theory} ),qTy),
                                                        call
                                                          ("Skip",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (instruction \<times> 'b state_scheme)"},lu,
                                                           @{theory} ))))))),
                                       (bop(And,var_b"b'24",
                                            bop(And,mop(Not,var_b"b'21"),
                                                bop(And,var_b"b'19",
                                                    bop(And,var_b"b'18",
                                                        bop(And,var_b"b'17",
                                                            bop(And,var_b"b'16",
                                                                bop(And,var_b"b'15",
                                                                    bop(And,var_b"b'14",
                                                                        bop(And,var_b"b'13",
                                                                            var_b"b'12"))))))))),
                                        mb(call
                                             ("ThumbCondition",
                                              @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                              lu,@{theory} ),
                                           close
                                             (var_w("v",4),
                                              mb(mb(mb(call
                                                         ("ArchVersion",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},
                                                          lu,@{theory} ),
                                                       close
                                                         (var_n"v0",
                                                          mb(mu(bop(Ge,var_n"v0",ln 7),qTy),
                                                             close
                                                               (var_b"v0",
                                                                mu(tp[var_w("v",4),var_b"v0"],qTy))))),
                                                    close
                                                      (var("v",@{typ "4 word \<times> bool"}),
                                                       call
                                                         ("Do",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          var("v",@{typ "4 word \<times> bool"}),
                                                          @{theory} ))),
                                                 close
                                                   (var_b"b",
                                                    ite(var_b"b",
                                                        mu(call
                                                             ("instruction.Hint",@{typ instruction},
                                                              call
                                                                ("Hint.PreloadInstruction",
                                                                 @{typ Hint},
                                                                 tp[eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                       lw(1,1)),lw(15,4),
                                                                    call
                                                                      ("offset1.immediate_form1",
                                                                       @{typ offset1},
                                                                       mop(Cast w32,
                                                                           mop(Cast
                                                                                 (Word_Lib.mk_wordT 12),
                                                                               ll[var_b"b'11",
                                                                                  var_b"b'10",
                                                                                  var_b"b'9",
                                                                                  var_b"b'8",
                                                                                  var_b"b'7",
                                                                                  var_b"b'6",
                                                                                  var_b"b'5",
                                                                                  var_b"b'4",
                                                                                  var_b"b'3",
                                                                                  var_b"b'2",
                                                                                  var_b"b'1",
                                                                                  var_b"b'0"])),
                                                                       @{theory} )],@{theory} ),
                                                              @{theory} ),qTy),
                                                        call
                                                          ("Skip",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (instruction \<times> 'b state_scheme)"},lu,
                                                           @{theory} ))))))),
                                       (bop(And,var_b"b'24",
                                            bop(And,var_b"b'23",
                                                bop(And,mop(Not,var_b"b'21"),
                                                    bop(And,var_b"b'15",
                                                        bop(And,var_b"b'14",
                                                            bop(And,var_b"b'13",var_b"b'12")))))),
                                        mb(call
                                             ("ThumbCondition",
                                              @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                              lu,@{theory} ),
                                           close
                                             (var_w("v",4),
                                              mb(mb(mb(call
                                                         ("ArchVersion",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},
                                                          lu,@{theory} ),
                                                       close
                                                         (var_n"v0",
                                                          mb(mu(bop(Ge,var_n"v0",ln 7),qTy),
                                                             close
                                                               (var_b"v0",
                                                                mu(tp[var_w("v",4),var_b"v0"],qTy))))),
                                                    close
                                                      (var("v",@{typ "4 word \<times> bool"}),
                                                       call
                                                         ("Do",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          var("v",@{typ "4 word \<times> bool"}),
                                                          @{theory} ))),
                                                 close
                                                   (var_b"b",
                                                    ite(var_b"b",
                                                        mu(call
                                                             ("instruction.Hint",@{typ instruction},
                                                              call
                                                                ("Hint.PreloadInstruction",
                                                                 @{typ Hint},
                                                                 tp[lt,
                                                                    mop(Cast w4,
                                                                        ll[var_b"b'19",var_b"b'18",
                                                                           var_b"b'17",var_b"b'16"]),
                                                                    call
                                                                      ("offset1.immediate_form1",
                                                                       @{typ offset1},
                                                                       mop(Cast w32,
                                                                           mop(Cast
                                                                                 (Word_Lib.mk_wordT 12),
                                                                               ll[var_b"b'11",
                                                                                  var_b"b'10",
                                                                                  var_b"b'9",
                                                                                  var_b"b'8",
                                                                                  var_b"b'7",
                                                                                  var_b"b'6",
                                                                                  var_b"b'5",
                                                                                  var_b"b'4",
                                                                                  var_b"b'3",
                                                                                  var_b"b'2",
                                                                                  var_b"b'1",
                                                                                  var_b"b'0"])),
                                                                       @{theory} )],@{theory} ),
                                                              @{theory} ),qTy),
                                                        call
                                                          ("Skip",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (instruction \<times> 'b state_scheme)"},lu,
                                                           @{theory} ))))))),
                                       (bop(And,mop(Not,var_b"b'24"),
                                            bop(And,var_b"b'23",
                                                bop(And,var_b"b'15",
                                                    bop(And,var_b"b'14",
                                                        bop(And,var_b"b'13",var_b"b'12"))))),
                                        let'
                                          (var_w("W",1),mop(Cast w1,ll[var_b"b'21"]),
                                           mb(call
                                                ("ThumbCondition",
                                                 @{typ
                                                 "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                                 @{theory} ),
                                              close
                                                (var_w("v",4),
                                                 mb(mb(mb(ite(eq(var_w("W",1),lw(1,1)),
                                                              call
                                                                ("HaveMPExt",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (bool \<times> 'b state_scheme)"},lu,
                                                                 @{theory} ),
                                                              call
                                                                ("HaveThumb2",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (bool \<times> 'b state_scheme)"},lu,
                                                                 @{theory} )),
                                                          close
                                                            (var_b"v0",
                                                             mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                       close
                                                         (var("v",@{typ "4 word \<times> bool"}),
                                                          call
                                                            ("Do",
                                                             @{typ
                                                             "'b state_scheme \<Rightarrow>
                                                              (bool \<times> 'b state_scheme)"},
                                                             var("v",@{typ "4 word \<times> bool"}),
                                                             @{theory} ))),
                                                    close
                                                      (var_b"b",
                                                       ite(var_b"b",
                                                           mu(call
                                                                ("instruction.Hint",
                                                                 @{typ instruction},
                                                                 call
                                                                   ("Hint.PreloadData",@{typ Hint},
                                                                    tp[lt,eq(var_w("W",1),lw(1,1)),
                                                                       mop(Cast w4,
                                                                           ll[var_b"b'19",
                                                                              var_b"b'18",
                                                                              var_b"b'17",
                                                                              var_b"b'16"]),
                                                                       call
                                                                         ("offset1.immediate_form1",
                                                                          @{typ offset1},
                                                                          mop(Cast w32,
                                                                              mop(Cast
                                                                                    (Word_Lib.mk_wordT 12),
                                                                                  ll[var_b"b'11",
                                                                                     var_b"b'10",
                                                                                     var_b"b'9",
                                                                                     var_b"b'8",
                                                                                     var_b"b'7",
                                                                                     var_b"b'6",
                                                                                     var_b"b'5",
                                                                                     var_b"b'4",
                                                                                     var_b"b'3",
                                                                                     var_b"b'2",
                                                                                     var_b"b'1",
                                                                                     var_b"b'0"])),
                                                                          @{theory} )],@{theory} ),
                                                                 @{theory} ),qTy),
                                                           call
                                                             ("Skip",
                                                              @{typ
                                                              "'b state_scheme \<Rightarrow>
                                                               (instruction \<times> 'b state_scheme)"},lu,
                                                              @{theory} )))))))),
                                       (bop(And,var_b"b'24",
                                            bop(And,var_b"b'21",
                                                bop(And,var_b"b'19",
                                                    bop(And,var_b"b'18",
                                                        bop(And,var_b"b'17",
                                                            bop(And,var_b"b'16",
                                                                bop(And,var_b"b'15",
                                                                    bop(And,var_b"b'14",
                                                                        bop(And,var_b"b'13",
                                                                            var_b"b'12"))))))))),
                                        mu(Term.Const
                                             (@{const_name "NoOperation"},@{typ instruction}),qTy)),
                                       (bop(And,var_b"b'19",
                                            bop(And,var_b"b'18",bop(And,var_b"b'17",var_b"b'16"))),
                                        let'
                                          (var_w("Rt",4),
                                           mop(Cast w4,
                                               ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                           mb(call
                                                ("ThumbCondition",
                                                 @{typ
                                                 "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                                 @{theory} ),
                                              close
                                                (var_w("v",4),
                                                 mb(mb(mb(call
                                                            ("HaveThumb2",
                                                             @{typ
                                                             "'b state_scheme \<Rightarrow>
                                                              (bool \<times> 'b state_scheme)"},lu,@{theory} ),
                                                          close
                                                            (var_b"v0",
                                                             mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                       close
                                                         (var("v",@{typ "4 word \<times> bool"}),
                                                          call
                                                            ("Do",
                                                             @{typ
                                                             "'b state_scheme \<Rightarrow>
                                                              (bool \<times> 'b state_scheme)"},
                                                             var("v",@{typ "4 word \<times> bool"}),
                                                             @{theory} ))),
                                                    close
                                                      (var_b"b",
                                                       ite(var_b"b",
                                                           mb(ite(eq(var_w("Rt",4),lw(13,4)),
                                                                  call
                                                                    ("DECODE_UNPREDICTABLE",
                                                                     @{typ
                                                                     "'b state_scheme \<Rightarrow>
                                                                      (unit \<times> 'b state_scheme)"},
                                                                     tp[var("mc",@{typ MachineCode}),
                                                                        ls
                                                                         "LoadByteLiteral/LoadHalfLiteral"],
                                                                     @{theory} ),mu(lu,qTy)),
                                                              close
                                                                (var_a HOLogic.unitT,
                                                                 mu(let'
                                                                      (var_w("imm32",32),
                                                                       mop(Cast w32,
                                                                           mop(Cast
                                                                                 (Word_Lib.mk_wordT 12),
                                                                               ll[var_b"b'11",
                                                                                  var_b"b'10",
                                                                                  var_b"b'9",
                                                                                  var_b"b'8",
                                                                                  var_b"b'7",
                                                                                  var_b"b'6",
                                                                                  var_b"b'5",
                                                                                  var_b"b'4",
                                                                                  var_b"b'3",
                                                                                  var_b"b'2",
                                                                                  var_b"b'1",
                                                                                  var_b"b'0"])),
                                                                       let'
                                                                         (var_b"add",
                                                                          eq(mop(Cast w1,
                                                                                 ll[var_b"b'23"]),
                                                                             lw(1,1)),
                                                                          let'
                                                                            (var_b"unsigned",
                                                                             eq(mop(Cast w1,
                                                                                    ll[var_b"b'24"]),
                                                                                lw(0,1)),
                                                                             ite(eq(mop(Cast w1,
                                                                                        ll[var_b"b'21"]),
                                                                                    lw(1,1)),
                                                                                 call
                                                                                   ("instruction.Load",
                                                                                    @{typ instruction},
                                                                                    call
                                                                                      ("Load.LoadHalfLiteral",
                                                                                       @{typ Load},
                                                                                       tp[var_b"unsigned",
                                                                                          var_b"add",
                                                                                          var_w("Rt",4),
                                                                                          var_w("imm32",32)],
                                                                                       @{theory} ),
                                                                                    @{theory} ),
                                                                                 call
                                                                                   ("instruction.Load",
                                                                                    @{typ instruction},
                                                                                    call
                                                                                      ("Load.LoadByteLiteral",
                                                                                       @{typ Load},
                                                                                       tp[var_b"unsigned",
                                                                                          var_b"add",
                                                                                          var_w("Rt",4),
                                                                                          var_w("imm32",32)],
                                                                                       @{theory} ),
                                                                                    @{theory} ))))),
                                                                    qTy))),
                                                           call
                                                             ("Skip",
                                                              @{typ
                                                              "'b state_scheme \<Rightarrow>
                                                               (instruction \<times> 'b state_scheme)"},lu,
                                                              @{theory} )))))))),
                                       (var_b"b'23",
                                        let'
                                          (var_w("Rn",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (var_w("Rt",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                              mb(call
                                                   ("ThumbCondition",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                                    lu,@{theory} ),
                                                 close
                                                   (var_w("v",4),
                                                    mb(mb(mb(call
                                                               ("HaveThumb2",
                                                                @{typ
                                                                "'b state_scheme \<Rightarrow>
                                                                 (bool \<times> 'b state_scheme)"},lu,
                                                                @{theory} ),
                                                             close
                                                               (var_b"v0",
                                                                mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                          close
                                                            (var("v",@{typ "4 word \<times> bool"}),
                                                             call
                                                               ("Do",
                                                                @{typ
                                                                "'b state_scheme \<Rightarrow>
                                                                 (bool \<times> 'b state_scheme)"},
                                                                var("v",
                                                                    @{typ "4 word \<times> bool"}),
                                                                @{theory} ))),
                                                       close
                                                         (var_b"b",
                                                          ite(var_b"b",
                                                              mb(ite(eq(var_w("Rt",4),lw(13,4)),
                                                                     call
                                                                       ("DECODE_UNPREDICTABLE",
                                                                        @{typ
                                                                        "'b state_scheme \<Rightarrow>
                                                                         (unit \<times> 'b state_scheme)"},
                                                                        tp[var("mc",
                                                                               @{typ MachineCode}),
                                                                           ls
                                                                            "LoadByte/LoadHalf (immediate)"],
                                                                        @{theory} ),mu(lu,qTy)),
                                                                 close
                                                                   (var_a HOLogic.unitT,
                                                                    mu(let'
                                                                         (var("m",@{typ offset1}),
                                                                          call
                                                                            ("offset1.immediate_form1",
                                                                             @{typ offset1},
                                                                             mop(Cast w32,
                                                                                 mop(Cast
                                                                                       (Word_Lib.mk_wordT 12),
                                                                                     ll[var_b"b'11",
                                                                                        var_b"b'10",
                                                                                        var_b"b'9",
                                                                                        var_b"b'8",
                                                                                        var_b"b'7",
                                                                                        var_b"b'6",
                                                                                        var_b"b'5",
                                                                                        var_b"b'4",
                                                                                        var_b"b'3",
                                                                                        var_b"b'2",
                                                                                        var_b"b'1",
                                                                                        var_b"b'0"])),
                                                                             @{theory} ),
                                                                          let'
                                                                            (var_b"unsigned",
                                                                             eq(mop(Cast w1,
                                                                                    ll[var_b"b'24"]),
                                                                                lw(0,1)),
                                                                             ite(eq(mop(Cast w1,
                                                                                        ll[var_b"b'21"]),
                                                                                    lw(1,1)),
                                                                                 call
                                                                                   ("instruction.Load",
                                                                                    @{typ instruction},
                                                                                    call
                                                                                      ("Load.LoadHalf",
                                                                                       @{typ Load},
                                                                                       tp[var_b"unsigned",
                                                                                          lt,lt,lf,
                                                                                          var_w("Rt",4),
                                                                                          var_w("Rn",4),
                                                                                          var("m",
                                                                                              @{typ offset1})],
                                                                                       @{theory} ),
                                                                                    @{theory} ),
                                                                                 call
                                                                                   ("instruction.Load",
                                                                                    @{typ instruction},
                                                                                    call
                                                                                      ("Load.LoadByte",
                                                                                       @{typ Load},
                                                                                       tp[var_b"unsigned",
                                                                                          lt,lt,lf,
                                                                                          var_w("Rt",4),
                                                                                          var_w("Rn",4),
                                                                                          var("m",
                                                                                              @{typ offset1})],
                                                                                       @{theory} ),
                                                                                    @{theory} )))),
                                                                       qTy))),
                                                              call
                                                                ("Skip",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (instruction \<times> 'b state_scheme)"},lu,
                                                                 @{theory} ))))))))),
                                       (bop(And,mop(Not,var_b"b'24"),
                                            bop(And,mop(Not,var_b"b'23"),
                                                bop(And,var_b"b'15",
                                                    bop(And,var_b"b'14",
                                                        bop(And,var_b"b'13",
                                                            bop(And,var_b"b'12",
                                                                bop(And,var_b"b'11",
                                                                    bop(And,var_b"b'10",
                                                                        bop(And,mop(Not,var_b"b'9"),
                                                                            mop(Not,var_b"b'8")))))))))),
                                        let'
                                          (var_w("W",1),mop(Cast w1,ll[var_b"b'21"]),
                                           mb(call
                                                ("ThumbCondition",
                                                 @{typ
                                                 "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                                 @{theory} ),
                                              close
                                                (var_w("v",4),
                                                 mb(mb(mb(ite(eq(var_w("W",1),lw(1,1)),
                                                              call
                                                                ("HaveMPExt",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (bool \<times> 'b state_scheme)"},lu,
                                                                 @{theory} ),
                                                              call
                                                                ("HaveThumb2",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (bool \<times> 'b state_scheme)"},lu,
                                                                 @{theory} )),
                                                          close
                                                            (var_b"v0",
                                                             mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                       close
                                                         (var("v",@{typ "4 word \<times> bool"}),
                                                          call
                                                            ("Do",
                                                             @{typ
                                                             "'b state_scheme \<Rightarrow>
                                                              (bool \<times> 'b state_scheme)"},
                                                             var("v",@{typ "4 word \<times> bool"}),
                                                             @{theory} ))),
                                                    close
                                                      (var_b"b",
                                                       ite(var_b"b",
                                                           mu(call
                                                                ("instruction.Hint",
                                                                 @{typ instruction},
                                                                 call
                                                                   ("Hint.PreloadData",@{typ Hint},
                                                                    tp[lf,eq(var_w("W",1),lw(1,1)),
                                                                       mop(Cast w4,
                                                                           ll[var_b"b'19",
                                                                              var_b"b'18",
                                                                              var_b"b'17",
                                                                              var_b"b'16"]),
                                                                       call
                                                                         ("offset1.immediate_form1",
                                                                          @{typ offset1},
                                                                          mop(Cast w32,
                                                                              mop(Cast w8,
                                                                                  ll[var_b"b'7",
                                                                                     var_b"b'6",
                                                                                     var_b"b'5",
                                                                                     var_b"b'4",
                                                                                     var_b"b'3",
                                                                                     var_b"b'2",
                                                                                     var_b"b'1",
                                                                                     var_b"b'0"])),
                                                                          @{theory} )],@{theory} ),
                                                                 @{theory} ),qTy),
                                                           call
                                                             ("Skip",
                                                              @{typ
                                                              "'b state_scheme \<Rightarrow>
                                                               (instruction \<times> 'b state_scheme)"},lu,
                                                              @{theory} )))))))),
                                       (bop(And,var_b"b'24",
                                            bop(And,mop(Not,var_b"b'23"),
                                                bop(And,mop(Not,var_b"b'21"),
                                                    bop(And,var_b"b'15",
                                                        bop(And,var_b"b'14",
                                                            bop(And,var_b"b'13",
                                                                bop(And,var_b"b'12",
                                                                    bop(And,var_b"b'11",
                                                                        bop(And,var_b"b'10",
                                                                            bop(And,
                                                                                mop(Not,var_b"b'9"),
                                                                                mop(Not,var_b"b'8"))))))))))),
                                        mb(call
                                             ("ThumbCondition",
                                              @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                              lu,@{theory} ),
                                           close
                                             (var_w("v",4),
                                              mb(mb(mb(call
                                                         ("ArchVersion",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},
                                                          lu,@{theory} ),
                                                       close
                                                         (var_n"v0",
                                                          mb(mu(bop(Ge,var_n"v0",ln 7),qTy),
                                                             close
                                                               (var_b"v0",
                                                                mu(tp[var_w("v",4),var_b"v0"],qTy))))),
                                                    close
                                                      (var("v",@{typ "4 word \<times> bool"}),
                                                       call
                                                         ("Do",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          var("v",@{typ "4 word \<times> bool"}),
                                                          @{theory} ))),
                                                 close
                                                   (var_b"b",
                                                    ite(var_b"b",
                                                        mu(call
                                                             ("instruction.Hint",@{typ instruction},
                                                              call
                                                                ("Hint.PreloadInstruction",
                                                                 @{typ Hint},
                                                                 tp[lf,
                                                                    mop(Cast w4,
                                                                        ll[var_b"b'19",var_b"b'18",
                                                                           var_b"b'17",var_b"b'16"]),
                                                                    call
                                                                      ("offset1.immediate_form1",
                                                                       @{typ offset1},
                                                                       mop(Cast w32,
                                                                           mop(Cast w8,
                                                                               ll[var_b"b'7",
                                                                                  var_b"b'6",
                                                                                  var_b"b'5",
                                                                                  var_b"b'4",
                                                                                  var_b"b'3",
                                                                                  var_b"b'2",
                                                                                  var_b"b'1",
                                                                                  var_b"b'0"])),
                                                                       @{theory} )],@{theory} ),
                                                              @{theory} ),qTy),
                                                        call
                                                          ("Skip",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (instruction \<times> 'b state_scheme)"},lu,
                                                           @{theory} ))))))),
                                       (bop(And,mop(Not,var_b"b'23"),
                                            bop(And,var_b"b'11",
                                                bop(And,mop(Not,var_b"b'10"),mop(Not,var_b"b'8")))),
                                        mu(call
                                             ("instruction.Undefined",@{typ instruction},lw(0,32),
                                              @{theory} ),qTy)),
                                       (bop(And,mop(Not,var_b"b'23"),
                                            bop(And,var_b"b'11",
                                                bop(And,var_b"b'10",
                                                    bop(And,var_b"b'9",mop(Not,var_b"b'8"))))),
                                        let'
                                          (var_w("Rn",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (var_w("Rt",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                              mb(call
                                                   ("ThumbCondition",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                                    lu,@{theory} ),
                                                 close
                                                   (var_w("v",4),
                                                    mb(mb(mb(call
                                                               ("HaveThumb2",
                                                                @{typ
                                                                "'b state_scheme \<Rightarrow>
                                                                 (bool \<times> 'b state_scheme)"},lu,
                                                                @{theory} ),
                                                             close
                                                               (var_b"v0",
                                                                mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                          close
                                                            (var("v",@{typ "4 word \<times> bool"}),
                                                             call
                                                               ("Do",
                                                                @{typ
                                                                "'b state_scheme \<Rightarrow>
                                                                 (bool \<times> 'b state_scheme)"},
                                                                var("v",
                                                                    @{typ "4 word \<times> bool"}),
                                                                @{theory} ))),
                                                       close
                                                         (var_b"b",
                                                          ite(var_b"b",
                                                              mb(ite(bop(In,var_w("Rt",4),
                                                                         sl[lw(13,4),lw(15,4)]),
                                                                     call
                                                                       ("DECODE_UNPREDICTABLE",
                                                                        @{typ
                                                                        "'b state_scheme \<Rightarrow>
                                                                         (unit \<times> 'b state_scheme)"},
                                                                        tp[var("mc",
                                                                               @{typ MachineCode}),
                                                                           ls"LoadUnprivileged"],
                                                                        @{theory} ),mu(lu,qTy)),
                                                                 close
                                                                   (var_a HOLogic.unitT,
                                                                    mu(let'
                                                                         (var_b"unsigned",
                                                                          eq(mop(Cast w1,
                                                                                 ll[var_b"b'24"]),
                                                                             lw(0,1)),
                                                                          let'
                                                                            (var_w("imm32",32),
                                                                             mop(Cast w32,
                                                                                 mop(Cast w8,
                                                                                     ll[var_b"b'7",
                                                                                        var_b"b'6",
                                                                                        var_b"b'5",
                                                                                        var_b"b'4",
                                                                                        var_b"b'3",
                                                                                        var_b"b'2",
                                                                                        var_b"b'1",
                                                                                        var_b"b'0"])),
                                                                             let'
                                                                               (var("m",
                                                                                    @{typ offset2}),
                                                                                call
                                                                                  ("offset2.immediate_form2",
                                                                                   @{typ offset2},
                                                                                   var_w("imm32",32),
                                                                                   @{theory} ),
                                                                                itb([(eq(mop(Cast w1,
                                                                                             ll[var_b"b'21"]),
                                                                                         lw(1,1)),
                                                                                      call
                                                                                        ("instruction.Load",
                                                                                         @{typ instruction},
                                                                                         call
                                                                                           ("Load.LoadHalfUnprivileged",
                                                                                            @{typ Load},
                                                                                            tp[var_b"unsigned",
                                                                                               lt,
                                                                                               lf,
                                                                                               var_w("Rt",4),
                                                                                               var_w("Rn",4),
                                                                                               var("m",
                                                                                                   @{typ offset2})],
                                                                                            @{theory} ),
                                                                                         @{theory} )),
                                                                                     (var_b"unsigned",
                                                                                      call
                                                                                        ("instruction.Load",
                                                                                         @{typ instruction},
                                                                                         call
                                                                                           ("Load.LoadByteUnprivileged",
                                                                                            @{typ Load},
                                                                                            tp[lt,
                                                                                               lf,
                                                                                               var_w("Rt",4),
                                                                                               var_w("Rn",4),
                                                                                               call
                                                                                                 ("offset1.immediate_form1",
                                                                                                  @{typ offset1},
                                                                                                  var_w("imm32",32),
                                                                                                  @{theory} )],
                                                                                            @{theory} ),
                                                                                         @{theory} ))],
                                                                                    call
                                                                                      ("instruction.Load",
                                                                                       @{typ instruction},
                                                                                       call
                                                                                         ("Load.LoadSignedByteUnprivileged",
                                                                                          @{typ Load},
                                                                                          tp[lt,lf,
                                                                                             var_w("Rt",4),
                                                                                             var_w("Rn",4),
                                                                                             var("m",
                                                                                                 @{typ offset2})],
                                                                                          @{theory} ),
                                                                                       @{theory} ))))),
                                                                       qTy))),
                                                              call
                                                                ("Skip",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (instruction \<times> 'b state_scheme)"},lu,
                                                                 @{theory} ))))))))),
                                       (bop(And,var_b"b'24",
                                            bop(And,mop(Not,var_b"b'23"),
                                                bop(And,var_b"b'21",
                                                    bop(And,var_b"b'15",
                                                        bop(And,var_b"b'14",
                                                            bop(And,var_b"b'13",
                                                                bop(And,var_b"b'12",
                                                                    bop(And,var_b"b'11",
                                                                        bop(And,var_b"b'10",
                                                                            bop(And,
                                                                                mop(Not,var_b"b'9"),
                                                                                mop(Not,var_b"b'8"))))))))))),
                                        mu(Term.Const
                                             (@{const_name "NoOperation"},@{typ instruction}),qTy)),
                                       (bop(And,mop(Not,var_b"b'23"),var_b"b'11"),
                                        let'
                                          (var_w("Rn",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (var_w("Rt",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                              mb(call
                                                   ("ThumbCondition",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                                    lu,@{theory} ),
                                                 close
                                                   (var_w("v",4),
                                                    mb(mb(mb(call
                                                               ("HaveThumb2",
                                                                @{typ
                                                                "'b state_scheme \<Rightarrow>
                                                                 (bool \<times> 'b state_scheme)"},lu,
                                                                @{theory} ),
                                                             close
                                                               (var_b"v0",
                                                                mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                          close
                                                            (var("v",@{typ "4 word \<times> bool"}),
                                                             call
                                                               ("Do",
                                                                @{typ
                                                                "'b state_scheme \<Rightarrow>
                                                                 (bool \<times> 'b state_scheme)"},
                                                                var("v",
                                                                    @{typ "4 word \<times> bool"}),
                                                                @{theory} ))),
                                                       close
                                                         (var_b"b",
                                                          ite(var_b"b",
                                                              let'
                                                                (var_b"wback",
                                                                 eq(mop(Cast w1,ll[var_b"b'8"]),
                                                                    lw(1,1)),
                                                                 mb(ite(bop(Or,
                                                                            eq(var_w("Rt",4),
                                                                               lw(13,4)),
                                                                            bop(Or,
                                                                                bop(And,
                                                                                    eq(var_w("Rt",4),
                                                                                       lw(15,4)),
                                                                                    var_b"wback"),
                                                                                bop(And,
                                                                                    var_b"wback",
                                                                                    eq(var_w("Rn",4),
                                                                                       var_w("Rt",4))))),
                                                                        call
                                                                          ("DECODE_UNPREDICTABLE",
                                                                           @{typ
                                                                           "'b state_scheme \<Rightarrow>
                                                                            (unit \<times> 'b state_scheme)"},
                                                                           tp[var("mc",
                                                                                  @{typ MachineCode}),
                                                                              ls"Load (immediate)"],
                                                                           @{theory} ),mu(lu,qTy)),
                                                                    close
                                                                      (var_a HOLogic.unitT,
                                                                       mu(let'
                                                                            (var_b"add",
                                                                             eq(mop(Cast w1,
                                                                                    ll[var_b"b'9"]),
                                                                                lw(1,1)),
                                                                             let'
                                                                               (var_b"index",
                                                                                eq(mop(Cast w1,
                                                                                       ll[var_b"b'10"]),
                                                                                   lw(1,1)),
                                                                                let'
                                                                                  (var_b"unsigned",
                                                                                   eq(mop(Cast w1,
                                                                                          ll[var_b"b'24"]),
                                                                                      lw(0,1)),
                                                                                   let'
                                                                                     (var("m",
                                                                                          @{typ offset1}),
                                                                                      call
                                                                                        ("offset1.immediate_form1",
                                                                                         @{typ offset1},
                                                                                         mop(Cast
                                                                                               w32,
                                                                                             mop(Cast
                                                                                                   w8,
                                                                                                 ll[var_b"b'7",
                                                                                                    var_b"b'6",
                                                                                                    var_b"b'5",
                                                                                                    var_b"b'4",
                                                                                                    var_b"b'3",
                                                                                                    var_b"b'2",
                                                                                                    var_b"b'1",
                                                                                                    var_b"b'0"])),
                                                                                         @{theory} ),
                                                                                      ite(eq(mop(Cast
                                                                                                   w1,
                                                                                                 ll[var_b"b'21"]),
                                                                                             lw(1,1)),
                                                                                          call
                                                                                            ("instruction.Load",
                                                                                             @{typ instruction},
                                                                                             call
                                                                                               ("Load.LoadHalf",
                                                                                                @{typ Load},
                                                                                                tp[var_b"unsigned",
                                                                                                   var_b"add",
                                                                                                   var_b"index",
                                                                                                   var_b"wback",
                                                                                                   var_w("Rt",4),
                                                                                                   var_w("Rn",4),
                                                                                                   var("m",
                                                                                                       @{typ offset1})],
                                                                                                @{theory} ),
                                                                                             @{theory} ),
                                                                                          call
                                                                                            ("instruction.Load",
                                                                                             @{typ instruction},
                                                                                             call
                                                                                               ("Load.LoadByte",
                                                                                                @{typ Load},
                                                                                                tp[var_b"unsigned",
                                                                                                   var_b"add",
                                                                                                   var_b"index",
                                                                                                   var_b"wback",
                                                                                                   var_w("Rt",4),
                                                                                                   var_w("Rn",4),
                                                                                                   var("m",
                                                                                                       @{typ offset1})],
                                                                                                @{theory} ),
                                                                                             @{theory} )))))),
                                                                          qTy)))),
                                                              call
                                                                ("Skip",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (instruction \<times> 'b state_scheme)"},lu,
                                                                 @{theory} ))))))))),
                                       (bop(And,mop(Not,var_b"b'24"),
                                            bop(And,mop(Not,var_b"b'23"),
                                                bop(And,var_b"b'15",
                                                    bop(And,var_b"b'14",
                                                        bop(And,var_b"b'13",
                                                            bop(And,var_b"b'12",
                                                                bop(And,mop(Not,var_b"b'11"),
                                                                    bop(And,mop(Not,var_b"b'10"),
                                                                        bop(And,mop(Not,var_b"b'9"),
                                                                            bop(And,
                                                                                mop(Not,var_b"b'8"),
                                                                                bop(And,
                                                                                    mop(Not,
                                                                                        var_b"b'7"),
                                                                                    mop(Not,
                                                                                        var_b"b'6")))))))))))),
                                        let'
                                          (var_w("W",1),mop(Cast w1,ll[var_b"b'21"]),
                                           let'
                                             (var_w("Rm",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                              mb(call
                                                   ("ThumbCondition",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                                    lu,@{theory} ),
                                                 close
                                                   (var_w("v",4),
                                                    mb(mb(mb(ite(eq(var_w("W",1),lw(1,1)),
                                                                 call
                                                                   ("HaveMPExt",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (bool \<times> 'b state_scheme)"},lu,
                                                                    @{theory} ),
                                                                 call
                                                                   ("HaveThumb2",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (bool \<times> 'b state_scheme)"},lu,
                                                                    @{theory} )),
                                                             close
                                                               (var_b"v0",
                                                                mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                          close
                                                            (var("v",@{typ "4 word \<times> bool"}),
                                                             call
                                                               ("Do",
                                                                @{typ
                                                                "'b state_scheme \<Rightarrow>
                                                                 (bool \<times> 'b state_scheme)"},
                                                                var("v",
                                                                    @{typ "4 word \<times> bool"}),
                                                                @{theory} ))),
                                                       close
                                                         (var_b"b",
                                                          ite(var_b"b",
                                                              mb(ite(bop(In,var_w("Rm",4),
                                                                         sl[lw(13,4),lw(15,4)]),
                                                                     call
                                                                       ("DECODE_UNPREDICTABLE",
                                                                        @{typ
                                                                        "'b state_scheme \<Rightarrow>
                                                                         (unit \<times> 'b state_scheme)"},
                                                                        tp[var("mc",
                                                                               @{typ MachineCode}),
                                                                           ls"PreloadData"],
                                                                        @{theory} ),mu(lu,qTy)),
                                                                 close
                                                                   (var_a HOLogic.unitT,
                                                                    mu(call
                                                                         ("instruction.Hint",
                                                                          @{typ instruction},
                                                                          call
                                                                            ("Hint.PreloadData",
                                                                             @{typ Hint},
                                                                             tp[lt,
                                                                                eq(var_w("W",1),
                                                                                   lw(1,1)),
                                                                                mop(Cast w4,
                                                                                    ll[var_b"b'19",
                                                                                       var_b"b'18",
                                                                                       var_b"b'17",
                                                                                       var_b"b'16"]),
                                                                                call
                                                                                  ("offset1.register_form1",
                                                                                   @{typ offset1},
                                                                                   tp[var_w("Rm",4),
                                                                                      lc("SRType_LSL",
                                                                                         "SRType",
                                                                                         @{theory} ),
                                                                                      mop(Cast
                                                                                            HOLogic.natT,
                                                                                          mop(Cast
                                                                                                (Word_Lib.mk_wordT 2),
                                                                                              ll[var_b"b'5",
                                                                                                 var_b"b'4"]))],
                                                                                   @{theory} )],
                                                                             @{theory} ),@{theory} ),
                                                                       qTy))),
                                                              call
                                                                ("Skip",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (instruction \<times> 'b state_scheme)"},lu,
                                                                 @{theory} ))))))))),
                                       (bop(And,var_b"b'24",
                                            bop(And,mop(Not,var_b"b'23"),
                                                bop(And,mop(Not,var_b"b'21"),
                                                    bop(And,var_b"b'15",
                                                        bop(And,var_b"b'14",
                                                            bop(And,var_b"b'13",
                                                                bop(And,var_b"b'12",
                                                                    bop(And,mop(Not,var_b"b'11"),
                                                                        bop(And,
                                                                            mop(Not,var_b"b'10"),
                                                                            bop(And,
                                                                                mop(Not,var_b"b'9"),
                                                                                bop(And,
                                                                                    mop(Not,
                                                                                        var_b"b'8"),
                                                                                    bop(And,
                                                                                        mop(Not,
                                                                                            var_b"b'7"),
                                                                                        mop(Not,
                                                                                            var_b"b'6"))))))))))))),
                                        let'
                                          (var_w("Rm",4),
                                           mop(Cast w4,
                                               ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                           mb(call
                                                ("ThumbCondition",
                                                 @{typ
                                                 "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                                 @{theory} ),
                                              close
                                                (var_w("v",4),
                                                 mb(mb(mb(call
                                                            ("ArchVersion",
                                                             @{typ
                                                             "'b state_scheme \<Rightarrow>
                                                              (nat \<times> 'b state_scheme)"},lu,@{theory} ),
                                                          close
                                                            (var_n"v0",
                                                             mb(mu(bop(Ge,var_n"v0",ln 7),qTy),
                                                                close
                                                                  (var_b"v0",
                                                                   mu(tp[var_w("v",4),var_b"v0"],qTy))))),
                                                       close
                                                         (var("v",@{typ "4 word \<times> bool"}),
                                                          call
                                                            ("Do",
                                                             @{typ
                                                             "'b state_scheme \<Rightarrow>
                                                              (bool \<times> 'b state_scheme)"},
                                                             var("v",@{typ "4 word \<times> bool"}),
                                                             @{theory} ))),
                                                    close
                                                      (var_b"b",
                                                       ite(var_b"b",
                                                           mb(ite(bop(In,var_w("Rm",4),
                                                                      sl[lw(13,4),lw(15,4)]),
                                                                  call
                                                                    ("DECODE_UNPREDICTABLE",
                                                                     @{typ
                                                                     "'b state_scheme \<Rightarrow>
                                                                      (unit \<times> 'b state_scheme)"},
                                                                     tp[var("mc",@{typ MachineCode}),
                                                                        ls"PreloadInstruction"],
                                                                     @{theory} ),mu(lu,qTy)),
                                                              close
                                                                (var_a HOLogic.unitT,
                                                                 mu(call
                                                                      ("instruction.Hint",
                                                                       @{typ instruction},
                                                                       call
                                                                         ("Hint.PreloadInstruction",
                                                                          @{typ Hint},
                                                                          tp[lt,
                                                                             mop(Cast w4,
                                                                                 ll[var_b"b'19",
                                                                                    var_b"b'18",
                                                                                    var_b"b'17",
                                                                                    var_b"b'16"]),
                                                                             call
                                                                               ("offset1.register_form1",
                                                                                @{typ offset1},
                                                                                tp[var_w("Rm",4),
                                                                                   lc("SRType_LSL",
                                                                                      "SRType",
                                                                                      @{theory} ),
                                                                                   mop(Cast
                                                                                         HOLogic.natT,
                                                                                       mop(Cast
                                                                                             (Word_Lib.mk_wordT 2),
                                                                                           ll[var_b"b'5",
                                                                                              var_b"b'4"]))],
                                                                                @{theory} )],
                                                                          @{theory} ),@{theory} ),qTy))),
                                                           call
                                                             ("Skip",
                                                              @{typ
                                                              "'b state_scheme \<Rightarrow>
                                                               (instruction \<times> 'b state_scheme)"},lu,
                                                              @{theory} )))))))),
                                       (bop(And,var_b"b'24",
                                            bop(And,mop(Not,var_b"b'23"),
                                                bop(And,var_b"b'21",
                                                    bop(And,var_b"b'15",
                                                        bop(And,var_b"b'14",
                                                            bop(And,var_b"b'13",
                                                                bop(And,var_b"b'12",
                                                                    bop(And,mop(Not,var_b"b'11"),
                                                                        bop(And,
                                                                            mop(Not,var_b"b'10"),
                                                                            bop(And,
                                                                                mop(Not,var_b"b'9"),
                                                                                bop(And,
                                                                                    mop(Not,
                                                                                        var_b"b'8"),
                                                                                    bop(And,
                                                                                        mop(Not,
                                                                                            var_b"b'7"),
                                                                                        mop(Not,
                                                                                            var_b"b'6"))))))))))))),
                                        mu(Term.Const
                                             (@{const_name "NoOperation"},@{typ instruction}),qTy)),
                                       (bop(And,mop(Not,var_b"b'23"),
                                            bop(And,mop(Not,var_b"b'11"),
                                                bop(And,mop(Not,var_b"b'10"),
                                                    bop(And,mop(Not,var_b"b'9"),
                                                        bop(And,mop(Not,var_b"b'8"),
                                                            bop(And,mop(Not,var_b"b'7"),
                                                                mop(Not,var_b"b'6"))))))),
                                        let'
                                          (var_w("Rn",4),
                                           mop(Cast w4,
                                               ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                           let'
                                             (var_w("Rm",4),
                                              mop(Cast w4,
                                                  ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                              let'
                                                (var_w("Rt",4),
                                                 mop(Cast w4,
                                                     ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                        var_b"b'12"]),
                                                 mb(call
                                                      ("ThumbCondition",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                                       lu,@{theory} ),
                                                    close
                                                      (var_w("v",4),
                                                       mb(mb(mb(call
                                                                  ("HaveThumb2",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (bool \<times> 'b state_scheme)"},lu,
                                                                   @{theory} ),
                                                                close
                                                                  (var_b"v0",
                                                                   mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                             close
                                                               (var("v",
                                                                    @{typ "4 word \<times> bool"}),
                                                                call
                                                                  ("Do",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (bool \<times> 'b state_scheme)"},
                                                                   var("v",
                                                                       @{typ "4 word \<times> bool"}),
                                                                   @{theory} ))),
                                                          close
                                                            (var_b"b",
                                                             ite(var_b"b",
                                                                 mb(ite(bop(Or,
                                                                            eq(var_w("Rt",4),
                                                                               lw(13,4)),
                                                                            bop(In,var_w("Rm",4),
                                                                                sl[lw(13,4),lw(15,4)])),
                                                                        call
                                                                          ("DECODE_UNPREDICTABLE",
                                                                           @{typ
                                                                           "'b state_scheme \<Rightarrow>
                                                                            (unit \<times> 'b state_scheme)"},
                                                                           tp[var("mc",
                                                                                  @{typ MachineCode}),
                                                                              ls"Load (register)"],
                                                                           @{theory} ),mu(lu,qTy)),
                                                                    close
                                                                      (var_a HOLogic.unitT,
                                                                       mu(let'
                                                                            (var_b"unsigned",
                                                                             eq(mop(Cast w1,
                                                                                    ll[var_b"b'24"]),
                                                                                lw(0,1)),
                                                                             let'
                                                                               (var("m",
                                                                                    @{typ offset1}),
                                                                                call
                                                                                  ("offset1.register_form1",
                                                                                   @{typ offset1},
                                                                                   tp[var_w("Rm",4),
                                                                                      lc("SRType_LSL",
                                                                                         "SRType",
                                                                                         @{theory} ),
                                                                                      mop(Cast
                                                                                            HOLogic.natT,
                                                                                          mop(Cast
                                                                                                (Word_Lib.mk_wordT 2),
                                                                                              ll[var_b"b'5",
                                                                                                 var_b"b'4"]))],
                                                                                   @{theory} ),
                                                                                ite(eq(mop(Cast w1,
                                                                                           ll[var_b"b'21"]),
                                                                                       lw(1,1)),
                                                                                    call
                                                                                      ("instruction.Load",
                                                                                       @{typ instruction},
                                                                                       call
                                                                                         ("Load.LoadHalf",
                                                                                          @{typ Load},
                                                                                          tp[var_b"unsigned",
                                                                                             lt,lt,
                                                                                             lf,
                                                                                             var_w("Rt",4),
                                                                                             var_w("Rn",4),
                                                                                             var("m",
                                                                                                 @{typ offset1})],
                                                                                          @{theory} ),
                                                                                       @{theory} ),
                                                                                    call
                                                                                      ("instruction.Load",
                                                                                       @{typ instruction},
                                                                                       call
                                                                                         ("Load.LoadByte",
                                                                                          @{typ Load},
                                                                                          tp[var_b"unsigned",
                                                                                             lt,lt,
                                                                                             lf,
                                                                                             var_w("Rt",4),
                                                                                             var_w("Rn",4),
                                                                                             var("m",
                                                                                                 @{typ offset1})],
                                                                                          @{theory} ),
                                                                                       @{theory} )))),
                                                                          qTy))),
                                                                 call
                                                                   ("Skip",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (instruction \<times> 'b state_scheme)"},
                                                                    lu,@{theory} ))))))))))],
                                      call
                                        ("UndefinedThumb",
                                         @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                         lu,@{theory} )),
                                  call
                                    ("UndefinedThumb",
                                     @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                                     @{theory} ))),
                             (bop(And,var_b"b'31",
                                  bop(And,var_b"b'30",
                                      bop(And,var_b"b'29",
                                          bop(And,mop(Not,var_b"b'26"),mop(Not,var_b"b'24"))))),
                              itb([(bop(And,mop(Not,var_b"b'23"),
                                        bop(And,mop(Not,var_b"b'11"),
                                            bop(And,mop(Not,var_b"b'10"),
                                                bop(And,mop(Not,var_b"b'9"),
                                                    bop(And,mop(Not,var_b"b'8"),
                                                        bop(And,mop(Not,var_b"b'7"),
                                                            mop(Not,var_b"b'6"))))))),
                                    let'
                                      (var_w("Rn",4),
                                       mop(Cast w4,
                                           ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                       let'
                                         (var_w("Rm",4),
                                          mop(Cast w4,
                                              ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                          let'
                                            (var_w("Rt",4),
                                             mop(Cast w4,
                                                 ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                             mb(call
                                                  ("ThumbCondition",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                                   lu,@{theory} ),
                                                close
                                                  (var_w("v",4),
                                                   mb(mb(mb(ite(mop(Not,eq(var_w("Rn",4),lw(15,4))),
                                                                call
                                                                  ("HaveThumb2",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (bool \<times> 'b state_scheme)"},lu,
                                                                   @{theory} ),mu(lf,qTy)),
                                                            close
                                                              (var_b"v0",
                                                               mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                         close
                                                           (var("v",@{typ "4 word \<times> bool"}),
                                                            call
                                                              ("Do",
                                                               @{typ
                                                               "'b state_scheme \<Rightarrow>
                                                                (bool \<times> 'b state_scheme)"},
                                                               var("v",@{typ "4 word \<times> bool"}),
                                                               @{theory} ))),
                                                      close
                                                        (var_b"b",
                                                         ite(var_b"b",
                                                             mb(ite(bop(Or,
                                                                        bop(In,var_w("Rt",4),
                                                                            sl[lw(13,4),lw(15,4)]),
                                                                        bop(In,var_w("Rm",4),
                                                                            sl[lw(13,4),lw(15,4)])),
                                                                    call
                                                                      ("DECODE_UNPREDICTABLE",
                                                                       @{typ
                                                                       "'b state_scheme \<Rightarrow>
                                                                        (unit \<times> 'b state_scheme)"},
                                                                       tp[var("mc",
                                                                              @{typ MachineCode}),
                                                                          ls
                                                                           "StoreByte/Half (register)"],
                                                                       @{theory} ),mu(lu,qTy)),
                                                                close
                                                                  (var_a HOLogic.unitT,
                                                                   mu(let'
                                                                        (var("m",@{typ offset1}),
                                                                         call
                                                                           ("offset1.register_form1",
                                                                            @{typ offset1},
                                                                            tp[var_w("Rm",4),
                                                                               lc("SRType_LSL",
                                                                                  "SRType",@{theory} ),
                                                                               mop(Cast HOLogic.natT,
                                                                                   mop(Cast
                                                                                         (Word_Lib.mk_wordT 2),
                                                                                       ll[var_b"b'5",
                                                                                          var_b"b'4"]))],
                                                                            @{theory} ),
                                                                         ite(eq(mop(Cast w1,
                                                                                    ll[var_b"b'21"]),
                                                                                lw(1,1)),
                                                                             call
                                                                               ("instruction.Store",
                                                                                @{typ instruction},
                                                                                call
                                                                                  ("Store.StoreHalf",
                                                                                   @{typ Store},
                                                                                   tp[lt,lt,lf,
                                                                                      var_w("Rt",4),
                                                                                      var_w("Rn",4),
                                                                                      var("m",
                                                                                          @{typ offset1})],
                                                                                   @{theory} ),
                                                                                @{theory} ),
                                                                             call
                                                                               ("instruction.Store",
                                                                                @{typ instruction},
                                                                                call
                                                                                  ("Store.StoreByte",
                                                                                   @{typ Store},
                                                                                   tp[lt,lt,lf,
                                                                                      var_w("Rt",4),
                                                                                      var_w("Rn",4),
                                                                                      var("m",
                                                                                          @{typ offset1})],
                                                                                   @{theory} ),
                                                                                @{theory} ))),qTy))),
                                                             call
                                                               ("Skip",
                                                                @{typ
                                                                "'b state_scheme \<Rightarrow>
                                                                 (instruction \<times> 'b state_scheme)"},lu,
                                                                @{theory} )))))))))),
                                   (bop(And,mop(Not,var_b"b'23"),
                                        bop(And,var_b"b'11",
                                            bop(And,var_b"b'10",
                                                bop(And,var_b"b'9",mop(Not,var_b"b'8"))))),
                                    let'
                                      (var_w("Rn",4),
                                       mop(Cast w4,
                                           ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                       let'
                                         (var_w("Rt",4),
                                          mop(Cast w4,
                                              ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                          mb(call
                                               ("ThumbCondition",
                                                @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                                lu,@{theory} ),
                                             close
                                               (var_w("v",4),
                                                mb(mb(mb(ite(mop(Not,eq(var_w("Rn",4),lw(15,4))),
                                                             call
                                                               ("HaveThumb2",
                                                                @{typ
                                                                "'b state_scheme \<Rightarrow>
                                                                 (bool \<times> 'b state_scheme)"},lu,
                                                                @{theory} ),mu(lf,qTy)),
                                                         close
                                                           (var_b"v0",
                                                            mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                      close
                                                        (var("v",@{typ "4 word \<times> bool"}),
                                                         call
                                                           ("Do",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (bool \<times> 'b state_scheme)"},
                                                            var("v",@{typ "4 word \<times> bool"}),
                                                            @{theory} ))),
                                                   close
                                                     (var_b"b",
                                                      ite(var_b"b",
                                                          mb(ite(bop(In,var_w("Rt",4),
                                                                     sl[lw(13,4),lw(15,4)]),
                                                                 call
                                                                   ("DECODE_UNPREDICTABLE",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (unit \<times> 'b state_scheme)"},
                                                                    tp[var("mc",@{typ MachineCode}),
                                                                       ls
                                                                        "StoreByte/HalfUnprivileged"],
                                                                    @{theory} ),mu(lu,qTy)),
                                                             close
                                                               (var_a HOLogic.unitT,
                                                                mu(let'
                                                                     (var_w("imm32",32),
                                                                      mop(Cast w32,
                                                                          mop(Cast w8,
                                                                              ll[var_b"b'7",
                                                                                 var_b"b'6",
                                                                                 var_b"b'5",
                                                                                 var_b"b'4",
                                                                                 var_b"b'3",
                                                                                 var_b"b'2",
                                                                                 var_b"b'1",
                                                                                 var_b"b'0"])),
                                                                      ite(eq(mop(Cast w1,
                                                                                 ll[var_b"b'21"]),
                                                                             lw(1,1)),
                                                                          call
                                                                            ("instruction.Store",
                                                                             @{typ instruction},
                                                                             call
                                                                               ("Store.StoreHalfUnprivileged",
                                                                                @{typ Store},
                                                                                tp[lt,lf,
                                                                                   var_w("Rt",4),
                                                                                   var_w("Rn",4),
                                                                                   call
                                                                                     ("offset2.immediate_form2",
                                                                                      @{typ offset2},
                                                                                      var_w("imm32",32),
                                                                                      @{theory} )],
                                                                                @{theory} ),@{theory} ),
                                                                          call
                                                                            ("instruction.Store",
                                                                             @{typ instruction},
                                                                             call
                                                                               ("Store.StoreByteUnprivileged",
                                                                                @{typ Store},
                                                                                tp[lt,lf,
                                                                                   var_w("Rt",4),
                                                                                   var_w("Rn",4),
                                                                                   call
                                                                                     ("offset1.immediate_form1",
                                                                                      @{typ offset1},
                                                                                      var_w("imm32",32),
                                                                                      @{theory} )],
                                                                                @{theory} ),@{theory} ))),
                                                                   qTy))),
                                                          call
                                                            ("Skip",
                                                             @{typ
                                                             "'b state_scheme \<Rightarrow>
                                                              (instruction \<times> 'b state_scheme)"},lu,
                                                             @{theory} ))))))))),
                                   (bop(And,mop(Not,var_b"b'23"),var_b"b'11"),
                                    let'
                                      (var_w("Rn",4),
                                       mop(Cast w4,
                                           ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                       let'
                                         (var_w("W",1),mop(Cast w1,ll[var_b"b'8"]),
                                          let'
                                            (var_w("P",1),mop(Cast w1,ll[var_b"b'10"]),
                                             let'
                                               (var_w("Rt",4),
                                                mop(Cast w4,
                                                    ll[var_b"b'15",var_b"b'14",var_b"b'13",
                                                       var_b"b'12"]),
                                                mb(call
                                                     ("ThumbCondition",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                                      lu,@{theory} ),
                                                   close
                                                     (var_w("v",4),
                                                      mb(mb(mb(ite(mop(Not,
                                                                       eq(var_w("Rn",4),lw(15,4))),
                                                                   ite(bop(Or,
                                                                           eq(var_w("P",1),lw(1,1)),
                                                                           eq(var_w("W",1),lw(1,1))),
                                                                       call
                                                                         ("HaveThumb2",
                                                                          @{typ
                                                                          "'b state_scheme \<Rightarrow>
                                                                           (bool \<times> 'b state_scheme)"},
                                                                          lu,@{theory} ),mu(lf,qTy)),
                                                                   mu(lf,qTy)),
                                                               close
                                                                 (var_b"v0",
                                                                  mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                            close
                                                              (var("v",@{typ "4 word \<times> bool"}),
                                                               call
                                                                 ("Do",
                                                                  @{typ
                                                                  "'b state_scheme \<Rightarrow>
                                                                   (bool \<times> 'b state_scheme)"},
                                                                  var("v",
                                                                      @{typ "4 word \<times> bool"}),
                                                                  @{theory} ))),
                                                         close
                                                           (var_b"b",
                                                            ite(var_b"b",
                                                                let'
                                                                  (var_b"wback",
                                                                   eq(var_w("W",1),lw(1,1)),
                                                                   mb(ite(bop(Or,
                                                                              bop(In,var_w("Rt",4),
                                                                                  sl[lw(13,4),
                                                                                     lw(15,4)]),
                                                                              bop(And,var_b"wback",
                                                                                  eq(var_w("Rn",4),
                                                                                     var_w("Rt",4)))),
                                                                          call
                                                                            ("DECODE_UNPREDICTABLE",
                                                                             @{typ
                                                                             "'b state_scheme \<Rightarrow>
                                                                              (unit \<times> 'b state_scheme)"},
                                                                             tp[var("mc",
                                                                                    @{typ MachineCode}),
                                                                                ls
                                                                                 "StoreByte/Half (immediate)"],
                                                                             @{theory} ),mu(lu,qTy)),
                                                                      close
                                                                        (var_a HOLogic.unitT,
                                                                         mu(let'
                                                                              (var_b"add",
                                                                               eq(mop(Cast w1,
                                                                                      ll[var_b"b'9"]),
                                                                                  lw(1,1)),
                                                                               let'
                                                                                 (var_b"index",
                                                                                  eq(var_w("P",1),
                                                                                     lw(1,1)),
                                                                                  let'
                                                                                    (var("m",
                                                                                         @{typ offset1}),
                                                                                     call
                                                                                       ("offset1.immediate_form1",
                                                                                        @{typ offset1},
                                                                                        mop(Cast w32,
                                                                                            mop(Cast
                                                                                                  w8,
                                                                                                ll[var_b"b'7",
                                                                                                   var_b"b'6",
                                                                                                   var_b"b'5",
                                                                                                   var_b"b'4",
                                                                                                   var_b"b'3",
                                                                                                   var_b"b'2",
                                                                                                   var_b"b'1",
                                                                                                   var_b"b'0"])),
                                                                                        @{theory} ),
                                                                                     ite(eq(mop(Cast
                                                                                                  w1,
                                                                                                ll[var_b"b'21"]),
                                                                                            lw(1,1)),
                                                                                         call
                                                                                           ("instruction.Store",
                                                                                            @{typ instruction},
                                                                                            call
                                                                                              ("Store.StoreHalf",
                                                                                               @{typ Store},
                                                                                               tp[var_b"add",
                                                                                                  var_b"index",
                                                                                                  var_b"wback",
                                                                                                  var_w("Rt",4),
                                                                                                  var_w("Rn",4),
                                                                                                  var("m",
                                                                                                      @{typ offset1})],
                                                                                               @{theory} ),
                                                                                            @{theory} ),
                                                                                         call
                                                                                           ("instruction.Store",
                                                                                            @{typ instruction},
                                                                                            call
                                                                                              ("Store.StoreByte",
                                                                                               @{typ Store},
                                                                                               tp[var_b"add",
                                                                                                  var_b"index",
                                                                                                  var_b"wback",
                                                                                                  var_w("Rt",4),
                                                                                                  var_w("Rn",4),
                                                                                                  var("m",
                                                                                                      @{typ offset1})],
                                                                                               @{theory} ),
                                                                                            @{theory} ))))),
                                                                            qTy)))),
                                                                call
                                                                  ("Skip",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (instruction \<times> 'b state_scheme)"},
                                                                   lu,@{theory} ))))))))))),
                                   (var_b"b'23",
                                    let'
                                      (var_w("Rn",4),
                                       mop(Cast w4,
                                           ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                       let'
                                         (var_w("Rt",4),
                                          mop(Cast w4,
                                              ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                          mb(call
                                               ("ThumbCondition",
                                                @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                                lu,@{theory} ),
                                             close
                                               (var_w("v",4),
                                                mb(mb(mb(ite(mop(Not,eq(var_w("Rn",4),lw(15,4))),
                                                             call
                                                               ("HaveThumb2",
                                                                @{typ
                                                                "'b state_scheme \<Rightarrow>
                                                                 (bool \<times> 'b state_scheme)"},lu,
                                                                @{theory} ),mu(lf,qTy)),
                                                         close
                                                           (var_b"v0",
                                                            mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                      close
                                                        (var("v",@{typ "4 word \<times> bool"}),
                                                         call
                                                           ("Do",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (bool \<times> 'b state_scheme)"},
                                                            var("v",@{typ "4 word \<times> bool"}),
                                                            @{theory} ))),
                                                   close
                                                     (var_b"b",
                                                      ite(var_b"b",
                                                          mb(ite(bop(In,var_w("Rt",4),
                                                                     sl[lw(13,4),lw(15,4)]),
                                                                 call
                                                                   ("DECODE_UNPREDICTABLE",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (unit \<times> 'b state_scheme)"},
                                                                    tp[var("mc",@{typ MachineCode}),
                                                                       ls
                                                                        "StoreByte/Half (immediate)"],
                                                                    @{theory} ),mu(lu,qTy)),
                                                             close
                                                               (var_a HOLogic.unitT,
                                                                mu(let'
                                                                     (var("m",@{typ offset1}),
                                                                      call
                                                                        ("offset1.immediate_form1",
                                                                         @{typ offset1},
                                                                         mop(Cast w32,
                                                                             mop(Cast
                                                                                   (Word_Lib.mk_wordT 12),
                                                                                 ll[var_b"b'11",
                                                                                    var_b"b'10",
                                                                                    var_b"b'9",
                                                                                    var_b"b'8",
                                                                                    var_b"b'7",
                                                                                    var_b"b'6",
                                                                                    var_b"b'5",
                                                                                    var_b"b'4",
                                                                                    var_b"b'3",
                                                                                    var_b"b'2",
                                                                                    var_b"b'1",
                                                                                    var_b"b'0"])),
                                                                         @{theory} ),
                                                                      ite(eq(mop(Cast w1,
                                                                                 ll[var_b"b'21"]),
                                                                             lw(1,1)),
                                                                          call
                                                                            ("instruction.Store",
                                                                             @{typ instruction},
                                                                             call
                                                                               ("Store.StoreHalf",
                                                                                @{typ Store},
                                                                                tp[lt,lt,lf,
                                                                                   var_w("Rt",4),
                                                                                   var_w("Rn",4),
                                                                                   var("m",
                                                                                       @{typ offset1})],
                                                                                @{theory} ),@{theory} ),
                                                                          call
                                                                            ("instruction.Store",
                                                                             @{typ instruction},
                                                                             call
                                                                               ("Store.StoreByte",
                                                                                @{typ Store},
                                                                                tp[lt,lt,lf,
                                                                                   var_w("Rt",4),
                                                                                   var_w("Rn",4),
                                                                                   var("m",
                                                                                       @{typ offset1})],
                                                                                @{theory} ),@{theory} ))),
                                                                   qTy))),
                                                          call
                                                            ("Skip",
                                                             @{typ
                                                             "'b state_scheme \<Rightarrow>
                                                              (instruction \<times> 'b state_scheme)"},lu,
                                                             @{theory} )))))))))],
                                  call
                                    ("UndefinedThumb",
                                     @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                                     @{theory} )))],
                            call
                              ("UndefinedThumb",
                               @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                               @{theory} ))),
                       (bop(And,var_b"b'31",
                            bop(And,var_b"b'30",bop(And,var_b"b'29",mop(Not,var_b"b'26")))),
                        itb([(bop(And,mop(Not,var_b"b'25"),
                                  bop(And,mop(Not,var_b"b'24"),
                                      bop(And,var_b"b'23",
                                          bop(And,mop(Not,var_b"b'22"),mop(Not,var_b"b'20"))))),
                              let'
                                (var_w("Rn",4),
                                 mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                 mb(call
                                      ("ThumbCondition",
                                       @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                       @{theory} ),
                                    close
                                      (var_w("v",4),
                                       mb(mb(mb(call
                                                  ("HaveThumb2",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                                   @{theory} ),
                                                close(var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                             close
                                               (var("v",@{typ "4 word \<times> bool"}),
                                                call
                                                  ("Do",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                   var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                          close
                                            (var_b"b",
                                             ite(var_b"b",
                                                 let'
                                                   (var_w("registers",16),
                                                    cc[lw(0,1),mop(Cast w1,ll[var_b"b'14"]),lw(0,1),
                                                       mop(Cast (Word_Lib.mk_wordT 13),
                                                           ll[var_b"b'12",var_b"b'11",var_b"b'10",
                                                              var_b"b'9",var_b"b'8",var_b"b'7",
                                                              var_b"b'6",var_b"b'5",var_b"b'4",
                                                              var_b"b'3",var_b"b'2",var_b"b'1",
                                                              var_b"b'0"])],
                                                    let'
                                                      (var_b"wback",
                                                       eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1)),
                                                       mb(ite(bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                  bop(Or,
                                                                      bop(Lt,
                                                                          call
                                                                            ("BitCount",
                                                                             HOLogic.natT,
                                                                             var_w("registers",16),
                                                                             @{theory} ),ln 2),
                                                                      bop(And,var_b"wback",
                                                                          bop(Bit,
                                                                              var_w("registers",16),
                                                                              mop(Cast HOLogic.natT,
                                                                                  var_w("Rn",4)))))),
                                                              call
                                                                ("DECODE_UNPREDICTABLE",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (unit \<times> 'b state_scheme)"},
                                                                 tp[var("mc",@{typ MachineCode}),
                                                                    ls"StoreMultiple"],@{theory} ),
                                                              mu(lu,qTy)),
                                                          close
                                                            (var_a HOLogic.unitT,
                                                             mu(call
                                                                  ("instruction.Store",
                                                                   @{typ instruction},
                                                                   call
                                                                     ("Store.StoreMultiple",
                                                                      @{typ Store},
                                                                      tp[lt,lf,var_b"wback",
                                                                         var_w("Rn",4),
                                                                         var_w("registers",16)],
                                                                      @{theory} ),@{theory} ),qTy))))),
                                                 call
                                                   ("Skip",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow>
                                                     (instruction \<times> 'b state_scheme)"},lu,@{theory} )))))))),
                             (bop(And,mop(Not,var_b"b'25"),
                                  bop(And,var_b"b'24",
                                      bop(And,mop(Not,var_b"b'23"),
                                          bop(And,mop(Not,var_b"b'22"),mop(Not,var_b"b'20"))))),
                              let'
                                (var_w("Rn",4),
                                 mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                 mb(call
                                      ("ThumbCondition",
                                       @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                       @{theory} ),
                                    close
                                      (var_w("v",4),
                                       mb(mb(mb(call
                                                  ("HaveThumb2",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                                   @{theory} ),
                                                close(var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                             close
                                               (var("v",@{typ "4 word \<times> bool"}),
                                                call
                                                  ("Do",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                   var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                          close
                                            (var_b"b",
                                             ite(var_b"b",
                                                 let'
                                                   (var_w("registers",16),
                                                    cc[lw(0,1),mop(Cast w1,ll[var_b"b'14"]),lw(0,1),
                                                       mop(Cast (Word_Lib.mk_wordT 13),
                                                           ll[var_b"b'12",var_b"b'11",var_b"b'10",
                                                              var_b"b'9",var_b"b'8",var_b"b'7",
                                                              var_b"b'6",var_b"b'5",var_b"b'4",
                                                              var_b"b'3",var_b"b'2",var_b"b'1",
                                                              var_b"b'0"])],
                                                    let'
                                                      (var_b"wback",
                                                       eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1)),
                                                       mb(ite(bop(Or,eq(var_w("Rn",4),lw(15,4)),
                                                                  bop(Or,
                                                                      bop(Lt,
                                                                          call
                                                                            ("BitCount",
                                                                             HOLogic.natT,
                                                                             var_w("registers",16),
                                                                             @{theory} ),ln 2),
                                                                      bop(And,var_b"wback",
                                                                          bop(Bit,
                                                                              var_w("registers",16),
                                                                              mop(Cast HOLogic.natT,
                                                                                  var_w("Rn",4)))))),
                                                              call
                                                                ("DECODE_UNPREDICTABLE",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (unit \<times> 'b state_scheme)"},
                                                                 tp[var("mc",@{typ MachineCode}),
                                                                    ls"StoreMultiple"],@{theory} ),
                                                              mu(lu,qTy)),
                                                          close
                                                            (var_a HOLogic.unitT,
                                                             mu(call
                                                                  ("instruction.Store",
                                                                   @{typ instruction},
                                                                   call
                                                                     ("Store.StoreMultiple",
                                                                      @{typ Store},
                                                                      tp[lf,lt,var_b"wback",
                                                                         var_w("Rn",4),
                                                                         var_w("registers",16)],
                                                                      @{theory} ),@{theory} ),qTy))))),
                                                 call
                                                   ("Skip",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow>
                                                     (instruction \<times> 'b state_scheme)"},lu,@{theory} )))))))),
                             (bop(And,mop(Not,var_b"b'25"),
                                  bop(And,mop(Not,var_b"b'24"),
                                      bop(And,var_b"b'23",bop(And,mop(Not,var_b"b'22"),var_b"b'20")))),
                              let'
                                (var_w("Rn",4),
                                 mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                 let'
                                   (var_w("M",1),mop(Cast w1,ll[var_b"b'14"]),
                                    let'
                                      (var_w("P",1),mop(Cast w1,ll[var_b"b'15"]),
                                       mb(call
                                            ("ThumbCondition",
                                             @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                             lu,@{theory} ),
                                          close
                                            (var_w("v",4),
                                             mb(mb(mb(call
                                                        ("HaveThumb2",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                         lu,@{theory} ),
                                                      close
                                                        (var_b"v0",
                                                         mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                   close
                                                     (var("v",@{typ "4 word \<times> bool"}),
                                                      call
                                                        ("Do",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                         var("v",@{typ "4 word \<times> bool"}),
                                                         @{theory} ))),
                                                close
                                                  (var_b"b",
                                                   ite(var_b"b",
                                                       let'
                                                         (var_w("registers",16),
                                                          cc[var_w("P",1),var_w("M",1),lw(0,1),
                                                             mop(Cast (Word_Lib.mk_wordT 13),
                                                                 ll[var_b"b'12",var_b"b'11",
                                                                    var_b"b'10",var_b"b'9",
                                                                    var_b"b'8",var_b"b'7",
                                                                    var_b"b'6",var_b"b'5",
                                                                    var_b"b'4",var_b"b'3",
                                                                    var_b"b'2",var_b"b'1",var_b"b'0"])],
                                                          let'
                                                            (var_b"wback",
                                                             eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1)),
                                                             mb(itb([(eq(var_w("Rn",4),lw(15,4)),
                                                                      mu(lt,qTy)),
                                                                     (bop(Lt,
                                                                          call
                                                                            ("BitCount",
                                                                             HOLogic.natT,
                                                                             var_w("registers",16),
                                                                             @{theory} ),ln 2),
                                                                      mu(lt,qTy)),
                                                                     (bop(And,
                                                                          eq(var_w("P",1),lw(1,1)),
                                                                          eq(var_w("M",1),lw(1,1))),
                                                                      mu(lt,qTy))],
                                                                    mb(ite(bop(Bit,
                                                                               var_w("registers",16),
                                                                               ln 15),
                                                                           mb(call
                                                                                ("InITBlock",
                                                                                 @{typ
                                                                                 "'b state_scheme \<Rightarrow>
                                                                                  (bool \<times>
                                                                                   'b state_scheme)"},lu,
                                                                                 @{theory} ),
                                                                              close
                                                                                (var_b"b",
                                                                                 ite(var_b"b",
                                                                                     mb(call
                                                                                          ("LastInITBlock",
                                                                                           @{typ
                                                                                           "'b state_scheme \<Rightarrow>
                                                                                            (bool \<times>
                                                                                             'b state_scheme)"},
                                                                                           lu,
                                                                                           @{theory} ),
                                                                                        close
                                                                                          (var_b"v",
                                                                                           mu(mop(Not,
                                                                                                  var_b"v"),
                                                                                              qTy))),
                                                                                     mu(lf,qTy)))),
                                                                           mu(lf,qTy)),
                                                                       close
                                                                         (var_b"b",
                                                                          mu(bop(Or,var_b"b",
                                                                                 bop(And,
                                                                                     var_b"wback",
                                                                                     bop(Bit,
                                                                                         var_w("registers",16),
                                                                                         mop(Cast
                                                                                               HOLogic.natT,
                                                                                             var_w("Rn",4))))),
                                                                             qTy)))),
                                                                close
                                                                  (var_b"v",
                                                                   mb(ite(var_b"v",
                                                                          call
                                                                            ("DECODE_UNPREDICTABLE",
                                                                             @{typ
                                                                             "'b state_scheme \<Rightarrow>
                                                                              (unit \<times> 'b state_scheme)"},
                                                                             tp[var("mc",
                                                                                    @{typ MachineCode}),
                                                                                ls"LoadMultiple"],
                                                                             @{theory} ),mu(lu,qTy)),
                                                                      close
                                                                        (var_a HOLogic.unitT,
                                                                         mu(call
                                                                              ("instruction.Load",
                                                                               @{typ instruction},
                                                                               call
                                                                                 ("Load.LoadMultiple",
                                                                                  @{typ Load},
                                                                                  tp[lt,lf,
                                                                                     var_b"wback",
                                                                                     var_w("Rn",4),
                                                                                     var_w("registers",16)],
                                                                                  @{theory} ),
                                                                               @{theory} ),qTy))))))),
                                                       call
                                                         ("Skip",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow>
                                                           (instruction \<times> 'b state_scheme)"},lu,
                                                          @{theory} )))))))))),
                             (bop(And,mop(Not,var_b"b'25"),
                                  bop(And,var_b"b'24",
                                      bop(And,mop(Not,var_b"b'23"),
                                          bop(And,mop(Not,var_b"b'22"),var_b"b'20")))),
                              let'
                                (var_w("Rn",4),
                                 mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                 let'
                                   (var_w("M",1),mop(Cast w1,ll[var_b"b'14"]),
                                    let'
                                      (var_w("P",1),mop(Cast w1,ll[var_b"b'15"]),
                                       mb(call
                                            ("ThumbCondition",
                                             @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                             lu,@{theory} ),
                                          close
                                            (var_w("v",4),
                                             mb(mb(mb(call
                                                        ("HaveThumb2",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                         lu,@{theory} ),
                                                      close
                                                        (var_b"v0",
                                                         mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                   close
                                                     (var("v",@{typ "4 word \<times> bool"}),
                                                      call
                                                        ("Do",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                         var("v",@{typ "4 word \<times> bool"}),
                                                         @{theory} ))),
                                                close
                                                  (var_b"b",
                                                   ite(var_b"b",
                                                       let'
                                                         (var_w("registers",16),
                                                          cc[var_w("P",1),var_w("M",1),lw(0,1),
                                                             mop(Cast (Word_Lib.mk_wordT 13),
                                                                 ll[var_b"b'12",var_b"b'11",
                                                                    var_b"b'10",var_b"b'9",
                                                                    var_b"b'8",var_b"b'7",
                                                                    var_b"b'6",var_b"b'5",
                                                                    var_b"b'4",var_b"b'3",
                                                                    var_b"b'2",var_b"b'1",var_b"b'0"])],
                                                          let'
                                                            (var_b"wback",
                                                             eq(mop(Cast w1,ll[var_b"b'21"]),lw(1,1)),
                                                             mb(itb([(eq(var_w("Rn",4),lw(15,4)),
                                                                      mu(lt,qTy)),
                                                                     (bop(Lt,
                                                                          call
                                                                            ("BitCount",
                                                                             HOLogic.natT,
                                                                             var_w("registers",16),
                                                                             @{theory} ),ln 2),
                                                                      mu(lt,qTy)),
                                                                     (bop(And,
                                                                          eq(var_w("P",1),lw(1,1)),
                                                                          eq(var_w("M",1),lw(1,1))),
                                                                      mu(lt,qTy))],
                                                                    mb(ite(bop(Bit,
                                                                               var_w("registers",16),
                                                                               ln 15),
                                                                           mb(call
                                                                                ("InITBlock",
                                                                                 @{typ
                                                                                 "'b state_scheme \<Rightarrow>
                                                                                  (bool \<times>
                                                                                   'b state_scheme)"},lu,
                                                                                 @{theory} ),
                                                                              close
                                                                                (var_b"b",
                                                                                 ite(var_b"b",
                                                                                     mb(call
                                                                                          ("LastInITBlock",
                                                                                           @{typ
                                                                                           "'b state_scheme \<Rightarrow>
                                                                                            (bool \<times>
                                                                                             'b state_scheme)"},
                                                                                           lu,
                                                                                           @{theory} ),
                                                                                        close
                                                                                          (var_b"v",
                                                                                           mu(mop(Not,
                                                                                                  var_b"v"),
                                                                                              qTy))),
                                                                                     mu(lf,qTy)))),
                                                                           mu(lf,qTy)),
                                                                       close
                                                                         (var_b"b",
                                                                          mu(bop(Or,var_b"b",
                                                                                 bop(And,
                                                                                     var_b"wback",
                                                                                     bop(Bit,
                                                                                         var_w("registers",16),
                                                                                         mop(Cast
                                                                                               HOLogic.natT,
                                                                                             var_w("Rn",4))))),
                                                                             qTy)))),
                                                                close
                                                                  (var_b"v",
                                                                   mb(ite(var_b"v",
                                                                          call
                                                                            ("DECODE_UNPREDICTABLE",
                                                                             @{typ
                                                                             "'b state_scheme \<Rightarrow>
                                                                              (unit \<times> 'b state_scheme)"},
                                                                             tp[var("mc",
                                                                                    @{typ MachineCode}),
                                                                                ls"LoadMultiple"],
                                                                             @{theory} ),mu(lu,qTy)),
                                                                      close
                                                                        (var_a HOLogic.unitT,
                                                                         mu(call
                                                                              ("instruction.Load",
                                                                               @{typ instruction},
                                                                               call
                                                                                 ("Load.LoadMultiple",
                                                                                  @{typ Load},
                                                                                  tp[lf,lt,
                                                                                     var_b"wback",
                                                                                     var_w("Rn",4),
                                                                                     var_w("registers",16)],
                                                                                  @{theory} ),
                                                                               @{theory} ),qTy))))))),
                                                       call
                                                         ("Skip",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow>
                                                           (instruction \<times> 'b state_scheme)"},lu,
                                                          @{theory} )))))))))),
                             (bop(And,mop(Not,var_b"b'25"),
                                  bop(And,mop(Not,var_b"b'22"),mop(Not,var_b"b'20"))),
                              let'
                                (var_w("op",2),
                                 mop(Cast (Word_Lib.mk_wordT 2),ll[var_b"b'24",var_b"b'23"]),
                                 mb(call
                                      ("ThumbCondition",
                                       @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                       @{theory} ),
                                    close
                                      (var_w("v",4),
                                       mb(mb(mb(ite(bop(In,var_w("op",2),sl[lw(0,2),lw(3,2)]),
                                                    call
                                                      ("HaveThumb2",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                       lu,@{theory} ),mu(lf,qTy)),
                                                close(var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                             close
                                               (var("v",@{typ "4 word \<times> bool"}),
                                                call
                                                  ("Do",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                   var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                          close
                                            (var_b"b",
                                             ite(var_b"b",
                                                 mb(call
                                                      ("CurrentInstrSet",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow>
                                                        (InstrSet \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic}),
                                                    close
                                                      (var("v",@{typ InstrSet}),
                                                       mb(mb(mu(eq(var("v",@{typ InstrSet}),
                                                                   lc("InstrSet_ThumbEE","InstrSet",
                                                                      @{theory})),qTy),
                                                             close
                                                               (var_b"b",
                                                                ite(var_b"b",
                                                                    call
                                                                      ("DECODE_UNPREDICTABLE",
                                                                       @{typ
                                                                       "'b state_scheme \<Rightarrow>
                                                                        (unit \<times> 'b state_scheme)"},
                                                                       tp[var("mc",
                                                                              @{typ MachineCode}),
                                                                          ls"StoreReturnState"],
                                                                       @{theory} ),mu(lu,qTy)))),
                                                          close
                                                            (var_a HOLogic.unitT,
                                                             mu(call
                                                                  ("instruction.System",
                                                                   @{typ instruction},
                                                                   call
                                                                     ("System.StoreReturnState",
                                                                      @{typ System},
                                                                      tp[eq(var_w("op",2),lw(3,2)),
                                                                         lf,
                                                                         eq(mop(Cast w1,
                                                                                ll[var_b"b'21"]),
                                                                            lw(1,1)),
                                                                         mop(Cast
                                                                               (Word_Lib.mk_wordT 5),
                                                                             ll[var_b"b'4",
                                                                                var_b"b'3",
                                                                                var_b"b'2",
                                                                                var_b"b'1",
                                                                                var_b"b'0"])],
                                                                      @{theory} ),@{theory} ),qTy))))),
                                                 call
                                                   ("Skip",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow>
                                                     (instruction \<times> 'b state_scheme)"},lu,@{theory} )))))))),
                             (bop(And,mop(Not,var_b"b'25"),bop(And,mop(Not,var_b"b'22"),var_b"b'20")),
                              let'
                                (var_w("Rn",4),
                                 mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                 let'
                                   (var_w("op",2),
                                    mop(Cast (Word_Lib.mk_wordT 2),ll[var_b"b'24",var_b"b'23"]),
                                    mb(call
                                         ("ThumbCondition",
                                          @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                          @{theory} ),
                                       close
                                         (var_w("v",4),
                                          mb(mb(mb(ite(bop(In,var_w("op",2),sl[lw(0,2),lw(3,2)]),
                                                       call
                                                         ("HaveThumb2",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          lu,@{theory} ),mu(lf,qTy)),
                                                   close
                                                     (var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                close
                                                  (var("v",@{typ "4 word \<times> bool"}),
                                                   call
                                                     ("Do",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                      var("v",@{typ "4 word \<times> bool"}),
                                                      @{theory} ))),
                                             close
                                               (var_b"b",
                                                ite(var_b"b",
                                                    mb(call
                                                         ("CurrentInstrSet",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow>
                                                           (InstrSet \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic}),
                                                       close
                                                         (var("v",@{typ InstrSet}),
                                                          mb(mb(mb(mu(eq(var("v",@{typ InstrSet}),
                                                                         lc("InstrSet_ThumbEE",
                                                                            "InstrSet",@{theory})),
                                                                      qTy),
                                                                   close
                                                                     (var_b"b",
                                                                      itb([(var_b"b",mu(lt,qTy)),
                                                                           (eq(var_w("Rn",4),
                                                                               lw(15,4)),mu(lt,qTy))],
                                                                          mb(call
                                                                               ("InITBlock",
                                                                                @{typ
                                                                                "'b state_scheme \<Rightarrow>
                                                                                 (bool \<times>
                                                                                  'b state_scheme)"},lu,
                                                                                @{theory} ),
                                                                             close
                                                                               (var_b"b",
                                                                                ite(var_b"b",
                                                                                    mb(call
                                                                                         ("LastInITBlock",
                                                                                          @{typ
                                                                                          "'b state_scheme \<Rightarrow>
                                                                                           (bool \<times>
                                                                                            'b state_scheme)"},
                                                                                          lu,
                                                                                          @{theory} ),
                                                                                       close
                                                                                         (var_b"v",
                                                                                          mu(mop(Not,
                                                                                                 var_b"v"),
                                                                                             qTy))),
                                                                                    mu(lf,qTy))))))),
                                                                close
                                                                  (var_b"b",
                                                                   ite(var_b"b",
                                                                       call
                                                                         ("DECODE_UNPREDICTABLE",
                                                                          @{typ
                                                                          "'b state_scheme \<Rightarrow>
                                                                           (unit \<times> 'b state_scheme)"},
                                                                          tp[var("mc",
                                                                                 @{typ MachineCode}),
                                                                             ls"ReturnFromException"],
                                                                          @{theory} ),mu(lu,qTy)))),
                                                             close
                                                               (var_a HOLogic.unitT,
                                                                mu(call
                                                                     ("instruction.System",
                                                                      @{typ instruction},
                                                                      call
                                                                        ("System.ReturnFromException",
                                                                         @{typ System},
                                                                         tp[eq(var_w("op",2),lw(3,2)),
                                                                            lf,
                                                                            eq(mop(Cast w1,
                                                                                   ll[var_b"b'21"]),
                                                                               lw(1,1)),
                                                                            var_w("Rn",4)],@{theory} ),
                                                                      @{theory} ),qTy))))),
                                                    call
                                                      ("Skip",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow>
                                                        (instruction \<times> 'b state_scheme)"},lu,@{theory} ))))))))),
                             (bop(And,mop(Not,var_b"b'25"),
                                  bop(And,mop(Not,var_b"b'24"),
                                      bop(And,mop(Not,var_b"b'23"),
                                          bop(And,var_b"b'22",
                                              bop(And,mop(Not,var_b"b'21"),mop(Not,var_b"b'20")))))),
                              let'
                                (var_w("Rn",4),
                                 mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                 let'
                                   (var_w("Rd",4),
                                    mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                    let'
                                      (var_w("Rt",4),
                                       mop(Cast w4,
                                           ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                       mb(call
                                            ("ThumbCondition",
                                             @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                             lu,@{theory} ),
                                          close
                                            (var_w("v",4),
                                             mb(mb(mb(call
                                                        ("HaveThumb2",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                         lu,@{theory} ),
                                                      close
                                                        (var_b"v0",
                                                         mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                   close
                                                     (var("v",@{typ "4 word \<times> bool"}),
                                                      call
                                                        ("Do",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                         var("v",@{typ "4 word \<times> bool"}),
                                                         @{theory} ))),
                                                close
                                                  (var_b"b",
                                                   ite(var_b"b",
                                                       mb(ite(bop(Or,
                                                                  bop(In,var_w("Rd",4),
                                                                      sl[lw(13,4),lw(15,4)]),
                                                                  bop(Or,
                                                                      bop(In,var_w("Rt",4),
                                                                          sl[lw(13,4),lw(15,4)]),
                                                                      bop(Or,
                                                                          eq(var_w("Rn",4),lw(15,4)),
                                                                          bop(Or,
                                                                              eq(var_w("Rd",4),
                                                                                 var_w("Rn",4)),
                                                                              eq(var_w("Rd",4),
                                                                                 var_w("Rt",4)))))),
                                                              call
                                                                ("DECODE_UNPREDICTABLE",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (unit \<times> 'b state_scheme)"},
                                                                 tp[var("mc",@{typ MachineCode}),
                                                                    ls"StoreExclusive"],@{theory} ),
                                                              mu(lu,qTy)),
                                                          close
                                                            (var_a HOLogic.unitT,
                                                             mu(call
                                                                  ("instruction.Store",
                                                                   @{typ instruction},
                                                                   call
                                                                     ("Store.StoreExclusive",
                                                                      @{typ Store},
                                                                      tp[var_w("Rd",4),
                                                                         var_w("Rt",4),
                                                                         var_w("Rn",4),
                                                                         mop(Cast w32,
                                                                             cc[mop(Cast w8,
                                                                                    ll[var_b"b'7",
                                                                                       var_b"b'6",
                                                                                       var_b"b'5",
                                                                                       var_b"b'4",
                                                                                       var_b"b'3",
                                                                                       var_b"b'2",
                                                                                       var_b"b'1",
                                                                                       var_b"b'0"]),
                                                                                lw(0,2)])],@{theory} ),
                                                                   @{theory} ),qTy))),
                                                       call
                                                         ("Skip",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow>
                                                           (instruction \<times> 'b state_scheme)"},lu,
                                                          @{theory} )))))))))),
                             (bop(And,mop(Not,var_b"b'25"),
                                  bop(And,mop(Not,var_b"b'24"),
                                      bop(And,mop(Not,var_b"b'23"),
                                          bop(And,var_b"b'22",
                                              bop(And,mop(Not,var_b"b'21"),var_b"b'20"))))),
                              let'
                                (var_w("Rn",4),
                                 mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                 let'
                                   (var_w("Rt",4),
                                    mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                    mb(call
                                         ("ThumbCondition",
                                          @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                          @{theory} ),
                                       close
                                         (var_w("v",4),
                                          mb(mb(mb(call
                                                     ("HaveThumb2",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                      lu,@{theory} ),
                                                   close
                                                     (var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                close
                                                  (var("v",@{typ "4 word \<times> bool"}),
                                                   call
                                                     ("Do",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                      var("v",@{typ "4 word \<times> bool"}),
                                                      @{theory} ))),
                                             close
                                               (var_b"b",
                                                ite(var_b"b",
                                                    mb(ite(bop(Or,
                                                               bop(In,var_w("Rt",4),
                                                                   sl[lw(13,4),lw(15,4)]),
                                                               eq(var_w("Rn",4),lw(15,4))),
                                                           call
                                                             ("DECODE_UNPREDICTABLE",
                                                              @{typ
                                                              "'b state_scheme \<Rightarrow>
                                                               (unit \<times> 'b state_scheme)"},
                                                              tp[var("mc",@{typ MachineCode}),
                                                                 ls"StoreExclusive"],@{theory} ),
                                                           mu(lu,qTy)),
                                                       close
                                                         (var_a HOLogic.unitT,
                                                          mu(call
                                                               ("instruction.Load",
                                                                @{typ instruction},
                                                                call
                                                                  ("Load.LoadExclusive",@{typ Load},
                                                                   tp[var_w("Rt",4),var_w("Rn",4),
                                                                      mop(Cast w32,
                                                                          cc[mop(Cast w8,
                                                                                 ll[var_b"b'7",
                                                                                    var_b"b'6",
                                                                                    var_b"b'5",
                                                                                    var_b"b'4",
                                                                                    var_b"b'3",
                                                                                    var_b"b'2",
                                                                                    var_b"b'1",
                                                                                    var_b"b'0"]),
                                                                             lw(0,2)])],@{theory} ),
                                                                @{theory} ),qTy))),
                                                    call
                                                      ("Skip",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow>
                                                        (instruction \<times> 'b state_scheme)"},lu,@{theory} ))))))))),
                             (bop(And,mop(Not,var_b"b'25"),
                                  bop(And,mop(Not,var_b"b'24"),
                                      bop(And,var_b"b'23",
                                          bop(And,var_b"b'22",
                                              bop(And,mop(Not,var_b"b'21"),
                                                  bop(And,mop(Not,var_b"b'20"),
                                                      bop(And,mop(Not,var_b"b'7"),
                                                          bop(And,var_b"b'6",mop(Not,var_b"b'5"))))))))),
                              let'
                                (var_w("Rn",4),
                                 mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                 let'
                                   (var_w("Rd",4),
                                    mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                    let'
                                      (var_w("Rt",4),
                                       mop(Cast w4,
                                           ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                       mb(call
                                            ("ThumbCondition",
                                             @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                             lu,@{theory} ),
                                          close
                                            (var_w("v",4),
                                             mb(mb(mb(call
                                                        ("ArchVersion",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},
                                                         lu,@{theory} ),
                                                      close
                                                        (var_n"v0",
                                                         mb(mu(bop(Ge,var_n"v0",ln 7),qTy),
                                                            close
                                                              (var_b"v0",
                                                               mu(tp[var_w("v",4),var_b"v0"],qTy))))),
                                                   close
                                                     (var("v",@{typ "4 word \<times> bool"}),
                                                      call
                                                        ("Do",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                         var("v",@{typ "4 word \<times> bool"}),
                                                         @{theory} ))),
                                                close
                                                  (var_b"b",
                                                   ite(var_b"b",
                                                       mb(ite(bop(Or,
                                                                  bop(In,var_w("Rd",4),
                                                                      sl[lw(13,4),lw(15,4)]),
                                                                  bop(Or,
                                                                      bop(In,var_w("Rt",4),
                                                                          sl[lw(13,4),lw(15,4)]),
                                                                      bop(Or,
                                                                          eq(var_w("Rn",4),lw(15,4)),
                                                                          bop(Or,
                                                                              eq(var_w("Rd",4),
                                                                                 var_w("Rn",4)),
                                                                              eq(var_w("Rd",4),
                                                                                 var_w("Rt",4)))))),
                                                              call
                                                                ("DECODE_UNPREDICTABLE",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (unit \<times> 'b state_scheme)"},
                                                                 tp[var("mc",@{typ MachineCode}),
                                                                    ls
                                                                     "StoreExclusive: Byte or Halfword"],
                                                                 @{theory} ),mu(lu,qTy)),
                                                          close
                                                            (var_a HOLogic.unitT,
                                                             mu(ite(eq(mop(Cast w1,ll[var_b"b'4"]),
                                                                       lw(1,1)),
                                                                    call
                                                                      ("instruction.Store",
                                                                       @{typ instruction},
                                                                       call
                                                                         ("Store.StoreExclusiveHalf",
                                                                          @{typ Store},
                                                                          tp[var_w("Rd",4),
                                                                             var_w("Rt",4),
                                                                             var_w("Rn",4)],
                                                                          @{theory} ),@{theory} ),
                                                                    call
                                                                      ("instruction.Store",
                                                                       @{typ instruction},
                                                                       call
                                                                         ("Store.StoreExclusiveByte",
                                                                          @{typ Store},
                                                                          tp[var_w("Rd",4),
                                                                             var_w("Rt",4),
                                                                             var_w("Rn",4)],
                                                                          @{theory} ),@{theory} )),qTy))),
                                                       call
                                                         ("Skip",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow>
                                                           (instruction \<times> 'b state_scheme)"},lu,
                                                          @{theory} )))))))))),
                             (bop(And,mop(Not,var_b"b'25"),
                                  bop(And,mop(Not,var_b"b'24"),
                                      bop(And,var_b"b'23",
                                          bop(And,var_b"b'22",
                                              bop(And,mop(Not,var_b"b'21"),
                                                  bop(And,mop(Not,var_b"b'20"),
                                                      bop(And,mop(Not,var_b"b'7"),
                                                          bop(And,var_b"b'6",
                                                              bop(And,var_b"b'5",var_b"b'4"))))))))),
                              let'
                                (var_w("Rn",4),
                                 mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                 let'
                                   (var_w("Rd",4),
                                    mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                    let'
                                      (var_w("Rt2",4),
                                       mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                       let'
                                         (var_w("Rt",4),
                                          mop(Cast w4,
                                              ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                          mb(call
                                               ("ThumbCondition",
                                                @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                                lu,@{theory} ),
                                             close
                                               (var_w("v",4),
                                                mb(mb(mb(call
                                                           ("ArchVersion",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (nat \<times> 'b state_scheme)"},lu,@{theory} ),
                                                         close
                                                           (var_n"v0",
                                                            mb(mu(bop(Ge,var_n"v0",ln 7),qTy),
                                                               close
                                                                 (var_b"v0",
                                                                  mu(tp[var_w("v",4),var_b"v0"],qTy))))),
                                                      close
                                                        (var("v",@{typ "4 word \<times> bool"}),
                                                         call
                                                           ("Do",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (bool \<times> 'b state_scheme)"},
                                                            var("v",@{typ "4 word \<times> bool"}),
                                                            @{theory} ))),
                                                   close
                                                     (var_b"b",
                                                      ite(var_b"b",
                                                          mb(ite(bop(Or,
                                                                     bop(In,var_w("Rd",4),
                                                                         sl[lw(13,4),lw(15,4)]),
                                                                     bop(Or,
                                                                         bop(In,var_w("Rt",4),
                                                                             sl[lw(13,4),lw(15,4)]),
                                                                         bop(Or,
                                                                             bop(In,var_w("Rt2",4),
                                                                                 sl[lw(13,4),
                                                                                    lw(15,4)]),
                                                                             bop(Or,
                                                                                 eq(var_w("Rn",4),
                                                                                    lw(15,4)),
                                                                                 bop(Or,
                                                                                     eq(var_w("Rd",4),
                                                                                        var_w("Rn",4)),
                                                                                     eq(var_w("Rd",4),
                                                                                        var_w("Rt",4))))))),
                                                                 call
                                                                   ("DECODE_UNPREDICTABLE",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (unit \<times> 'b state_scheme)"},
                                                                    tp[var("mc",@{typ MachineCode}),
                                                                       ls"StoreExclusivDoubleword"],
                                                                    @{theory} ),mu(lu,qTy)),
                                                             close
                                                               (var_a HOLogic.unitT,
                                                                mu(call
                                                                     ("instruction.Store",
                                                                      @{typ instruction},
                                                                      call
                                                                        ("Store.StoreExclusiveDoubleword",
                                                                         @{typ Store},
                                                                         tp[var_w("Rd",4),
                                                                            var_w("Rt",4),
                                                                            var_w("Rt2",4),
                                                                            var_w("Rn",4)],@{theory} ),
                                                                      @{theory} ),qTy))),
                                                          call
                                                            ("Skip",
                                                             @{typ
                                                             "'b state_scheme \<Rightarrow>
                                                              (instruction \<times> 'b state_scheme)"},lu,
                                                             @{theory} ))))))))))),
                             (bop(And,mop(Not,var_b"b'25"),
                                  bop(And,mop(Not,var_b"b'24"),
                                      bop(And,var_b"b'23",
                                          bop(And,var_b"b'22",
                                              bop(And,mop(Not,var_b"b'21"),
                                                  bop(And,var_b"b'20",
                                                      bop(And,mop(Not,var_b"b'7"),
                                                          bop(And,mop(Not,var_b"b'6"),
                                                              mop(Not,var_b"b'5"))))))))),
                              let'
                                (var_w("Rn",4),
                                 mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                 let'
                                   (var_w("Rm",4),
                                    mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                    mb(call
                                         ("ThumbCondition",
                                          @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                          @{theory} ),
                                       close
                                         (var_w("v",4),
                                          mb(mb(mb(call
                                                     ("HaveThumb2",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                      lu,@{theory} ),
                                                   close
                                                     (var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                close
                                                  (var("v",@{typ "4 word \<times> bool"}),
                                                   call
                                                     ("Do",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                      var("v",@{typ "4 word \<times> bool"}),
                                                      @{theory} ))),
                                             close
                                               (var_b"b",
                                                ite(var_b"b",
                                                    mb(itb([(eq(var_w("Rn",4),lw(13,4)),mu(lt,qTy)),
                                                            (bop(In,var_w("Rm",4),
                                                                 sl[lw(13,4),lw(15,4)]),mu(lt,qTy))],
                                                           mb(call
                                                                ("InITBlock",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (bool \<times> 'b state_scheme)"},lu,
                                                                 @{theory} ),
                                                              close
                                                                (var_b"b",
                                                                 ite(var_b"b",
                                                                     mb(call
                                                                          ("LastInITBlock",
                                                                           @{typ
                                                                           "'b state_scheme \<Rightarrow>
                                                                            (bool \<times> 'b state_scheme)"},
                                                                           lu,@{theory} ),
                                                                        close
                                                                          (var_b"v",
                                                                           mu(mop(Not,var_b"v"),qTy))),
                                                                     mu(lf,qTy))))),
                                                       close
                                                         (var_b"v",
                                                          mb(ite(var_b"v",
                                                                 call
                                                                   ("DECODE_UNPREDICTABLE",
                                                                    @{typ
                                                                    "'b state_scheme \<Rightarrow>
                                                                     (unit \<times> 'b state_scheme)"},
                                                                    tp[var("mc",@{typ MachineCode}),
                                                                       ls"TableBranchByte"],
                                                                    @{theory} ),mu(lu,qTy)),
                                                             close
                                                               (var_a HOLogic.unitT,
                                                                mu(call
                                                                     ("instruction.Branch",
                                                                      @{typ instruction},
                                                                      call
                                                                        ("Branch.TableBranchByte",
                                                                         @{typ Branch},
                                                                         tp[eq(mop(Cast w1,
                                                                                   ll[var_b"b'4"]),
                                                                               lw(1,1)),
                                                                            var_w("Rm",4),
                                                                            var_w("Rn",4)],@{theory} ),
                                                                      @{theory} ),qTy))))),
                                                    call
                                                      ("Skip",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow>
                                                        (instruction \<times> 'b state_scheme)"},lu,@{theory} ))))))))),
                             (bop(And,mop(Not,var_b"b'25"),
                                  bop(And,mop(Not,var_b"b'24"),
                                      bop(And,var_b"b'23",
                                          bop(And,var_b"b'22",
                                              bop(And,mop(Not,var_b"b'21"),
                                                  bop(And,var_b"b'20",
                                                      bop(And,mop(Not,var_b"b'7"),
                                                          bop(And,var_b"b'6",mop(Not,var_b"b'5"))))))))),
                              let'
                                (var_w("Rn",4),
                                 mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                 let'
                                   (var_w("Rt",4),
                                    mop(Cast w4,ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                    mb(call
                                         ("ThumbCondition",
                                          @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                          @{theory} ),
                                       close
                                         (var_w("v",4),
                                          mb(mb(mb(call
                                                     ("ArchVersion",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},
                                                      lu,@{theory} ),
                                                   close
                                                     (var_n"v0",
                                                      mb(mu(bop(Ge,var_n"v0",ln 7),qTy),
                                                         close
                                                           (var_b"v0",
                                                            mu(tp[var_w("v",4),var_b"v0"],qTy))))),
                                                close
                                                  (var("v",@{typ "4 word \<times> bool"}),
                                                   call
                                                     ("Do",
                                                      @{typ
                                                      "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                      var("v",@{typ "4 word \<times> bool"}),
                                                      @{theory} ))),
                                             close
                                               (var_b"b",
                                                ite(var_b"b",
                                                    mb(ite(bop(Or,
                                                               bop(In,var_w("Rt",4),
                                                                   sl[lw(13,4),lw(15,4)]),
                                                               eq(var_w("Rn",4),lw(15,4))),
                                                           call
                                                             ("DECODE_UNPREDICTABLE",
                                                              @{typ
                                                              "'b state_scheme \<Rightarrow>
                                                               (unit \<times> 'b state_scheme)"},
                                                              tp[var("mc",@{typ MachineCode}),
                                                                 ls"LoadExclusive: Byte or Halfword"],
                                                              @{theory} ),mu(lu,qTy)),
                                                       close
                                                         (var_a HOLogic.unitT,
                                                          mu(ite(eq(mop(Cast w1,ll[var_b"b'4"]),
                                                                    lw(1,1)),
                                                                 call
                                                                   ("instruction.Load",
                                                                    @{typ instruction},
                                                                    call
                                                                      ("Load.LoadExclusiveHalf",
                                                                       @{typ Load},
                                                                       tp[var_w("Rt",4),
                                                                          var_w("Rn",4)],@{theory} ),
                                                                    @{theory} ),
                                                                 call
                                                                   ("instruction.Load",
                                                                    @{typ instruction},
                                                                    call
                                                                      ("Load.LoadExclusiveByte",
                                                                       @{typ Load},
                                                                       tp[var_w("Rt",4),
                                                                          var_w("Rn",4)],@{theory} ),
                                                                    @{theory} )),qTy))),
                                                    call
                                                      ("Skip",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow>
                                                        (instruction \<times> 'b state_scheme)"},lu,@{theory} ))))))))),
                             (bop(And,mop(Not,var_b"b'25"),
                                  bop(And,mop(Not,var_b"b'24"),
                                      bop(And,var_b"b'23",
                                          bop(And,var_b"b'22",
                                              bop(And,mop(Not,var_b"b'21"),
                                                  bop(And,var_b"b'20",
                                                      bop(And,mop(Not,var_b"b'7"),
                                                          bop(And,var_b"b'6",
                                                              bop(And,var_b"b'5",var_b"b'4"))))))))),
                              let'
                                (var_w("Rn",4),
                                 mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                 let'
                                   (var_w("Rt2",4),
                                    mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                    let'
                                      (var_w("Rt",4),
                                       mop(Cast w4,
                                           ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                       mb(call
                                            ("ThumbCondition",
                                             @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                             lu,@{theory} ),
                                          close
                                            (var_w("v",4),
                                             mb(mb(mb(call
                                                        ("ArchVersion",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (nat \<times> 'b state_scheme)"},
                                                         lu,@{theory} ),
                                                      close
                                                        (var_n"v0",
                                                         mb(mu(bop(Ge,var_n"v0",ln 7),qTy),
                                                            close
                                                              (var_b"v0",
                                                               mu(tp[var_w("v",4),var_b"v0"],qTy))))),
                                                   close
                                                     (var("v",@{typ "4 word \<times> bool"}),
                                                      call
                                                        ("Do",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                         var("v",@{typ "4 word \<times> bool"}),
                                                         @{theory} ))),
                                                close
                                                  (var_b"b",
                                                   ite(var_b"b",
                                                       mb(ite(bop(Or,
                                                                  bop(In,var_w("Rt",4),
                                                                      sl[lw(13,4),lw(15,4)]),
                                                                  bop(Or,
                                                                      bop(In,var_w("Rt2",4),
                                                                          sl[lw(13,4),lw(15,4)]),
                                                                      bop(Or,
                                                                          eq(var_w("Rt",4),
                                                                             var_w("Rt2",4)),
                                                                          eq(var_w("Rn",4),lw(15,4))))),
                                                              call
                                                                ("DECODE_UNPREDICTABLE",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (unit \<times> 'b state_scheme)"},
                                                                 tp[var("mc",@{typ MachineCode}),
                                                                    ls"LoadExclusiveDoubleword"],
                                                                 @{theory} ),mu(lu,qTy)),
                                                          close
                                                            (var_a HOLogic.unitT,
                                                             mu(call
                                                                  ("instruction.Load",
                                                                   @{typ instruction},
                                                                   call
                                                                     ("Load.LoadExclusiveDoubleword",
                                                                      @{typ Load},
                                                                      tp[var_w("Rt",4),
                                                                         var_w("Rt2",4),
                                                                         var_w("Rn",4)],@{theory} ),
                                                                   @{theory} ),qTy))),
                                                       call
                                                         ("Skip",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow>
                                                           (instruction \<times> 'b state_scheme)"},lu,
                                                          @{theory} )))))))))),
                             (bop(And,mop(Not,var_b"b'25"),bop(And,var_b"b'22",mop(Not,var_b"b'20"))),
                              let'
                                (var_w("Rn",4),
                                 mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                 let'
                                   (var_w("W",1),mop(Cast w1,ll[var_b"b'21"]),
                                    let'
                                      (var_w("P",1),mop(Cast w1,ll[var_b"b'24"]),
                                       let'
                                         (var_w("Rt2",4),
                                          mop(Cast w4,
                                              ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                          let'
                                            (var_w("Rt",4),
                                             mop(Cast w4,
                                                 ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                             mb(call
                                                  ("ThumbCondition",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                                   lu,@{theory} ),
                                                close
                                                  (var_w("v",4),
                                                   mb(mb(mb(ite(bop(Or,eq(var_w("P",1),lw(1,1)),
                                                                    eq(var_w("W",1),lw(1,1))),
                                                                call
                                                                  ("HaveThumb2",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (bool \<times> 'b state_scheme)"},lu,
                                                                   @{theory} ),mu(lf,qTy)),
                                                            close
                                                              (var_b"v0",
                                                               mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                         close
                                                           (var("v",@{typ "4 word \<times> bool"}),
                                                            call
                                                              ("Do",
                                                               @{typ
                                                               "'b state_scheme \<Rightarrow>
                                                                (bool \<times> 'b state_scheme)"},
                                                               var("v",@{typ "4 word \<times> bool"}),
                                                               @{theory} ))),
                                                      close
                                                        (var_b"b",
                                                         ite(var_b"b",
                                                             let'
                                                               (var_b"wback",
                                                                eq(var_w("W",1),lw(1,1)),
                                                                mb(ite(bop(Or,
                                                                           bop(And,var_b"wback",
                                                                               bop(Or,
                                                                                   eq(var_w("Rn",4),
                                                                                      var_w("Rt",4)),
                                                                                   eq(var_w("Rn",4),
                                                                                      var_w("Rt2",4)))),
                                                                           bop(Or,
                                                                               eq(var_w("Rn",4),
                                                                                  lw(15,4)),
                                                                               bop(Or,
                                                                                   bop(In,
                                                                                       var_w("Rt",4),
                                                                                       sl[lw(13,4),
                                                                                          lw(15,4)]),
                                                                                   bop(In,
                                                                                       var_w("Rt2",4),
                                                                                       sl[lw(13,4),
                                                                                          lw(15,4)])))),
                                                                       call
                                                                         ("DECODE_UNPREDICTABLE",
                                                                          @{typ
                                                                          "'b state_scheme \<Rightarrow>
                                                                           (unit \<times> 'b state_scheme)"},
                                                                          tp[var("mc",
                                                                                 @{typ MachineCode}),
                                                                             ls"StoreDual"],
                                                                          @{theory} ),mu(lu,qTy)),
                                                                   close
                                                                     (var_a HOLogic.unitT,
                                                                      mu(call
                                                                           ("instruction.Store",
                                                                            @{typ instruction},
                                                                            call
                                                                              ("Store.StoreDual",
                                                                               @{typ Store},
                                                                               tp[eq(mop(Cast w1,
                                                                                         ll[var_b"b'23"]),
                                                                                     lw(1,1)),
                                                                                  eq(var_w("P",1),
                                                                                     lw(1,1)),
                                                                                  var_b"wback",
                                                                                  var_w("Rt",4),
                                                                                  var_w("Rt2",4),
                                                                                  var_w("Rn",4),
                                                                                  call
                                                                                    ("offset2.immediate_form2",
                                                                                     @{typ offset2},
                                                                                     mop(Cast w32,
                                                                                         cc[mop(Cast
                                                                                                  w8,
                                                                                                ll[var_b"b'7",
                                                                                                   var_b"b'6",
                                                                                                   var_b"b'5",
                                                                                                   var_b"b'4",
                                                                                                   var_b"b'3",
                                                                                                   var_b"b'2",
                                                                                                   var_b"b'1",
                                                                                                   var_b"b'0"]),
                                                                                            lw(0,2)]),
                                                                                     @{theory} )],
                                                                               @{theory} ),@{theory} ),
                                                                         qTy)))),
                                                             call
                                                               ("Skip",
                                                                @{typ
                                                                "'b state_scheme \<Rightarrow>
                                                                 (instruction \<times> 'b state_scheme)"},lu,
                                                                @{theory} )))))))))))),
                             (bop(And,mop(Not,var_b"b'25"),
                                  bop(And,var_b"b'22",
                                      bop(And,var_b"b'20",
                                          bop(And,var_b"b'19",
                                              bop(And,var_b"b'18",bop(And,var_b"b'17",var_b"b'16")))))),
                              let'
                                (var_w("W",1),mop(Cast w1,ll[var_b"b'21"]),
                                 let'
                                   (var_w("Rt2",4),
                                    mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                    let'
                                      (var_w("Rt",4),
                                       mop(Cast w4,
                                           ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                       mb(call
                                            ("ThumbCondition",
                                             @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                             lu,@{theory} ),
                                          close
                                            (var_w("v",4),
                                             mb(mb(mb(ite(bop(Or,
                                                              eq(mop(Cast w1,ll[var_b"b'24"]),
                                                                 lw(1,1)),eq(var_w("W",1),lw(1,1))),
                                                          call
                                                            ("HaveThumb2",
                                                             @{typ
                                                             "'b state_scheme \<Rightarrow>
                                                              (bool \<times> 'b state_scheme)"},lu,@{theory} ),
                                                          mu(lf,qTy)),
                                                      close
                                                        (var_b"v0",
                                                         mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                   close
                                                     (var("v",@{typ "4 word \<times> bool"}),
                                                      call
                                                        ("Do",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                         var("v",@{typ "4 word \<times> bool"}),
                                                         @{theory} ))),
                                                close
                                                  (var_b"b",
                                                   ite(var_b"b",
                                                       mb(ite(bop(Or,
                                                                  bop(In,var_w("Rt",4),
                                                                      sl[lw(13,4),lw(15,4)]),
                                                                  bop(Or,
                                                                      bop(In,var_w("Rt2",4),
                                                                          sl[lw(13,4),lw(15,4)]),
                                                                      bop(Or,
                                                                          eq(var_w("Rt",4),
                                                                             var_w("Rt2",4)),
                                                                          eq(var_w("W",1),lw(1,1))))),
                                                              call
                                                                ("DECODE_UNPREDICTABLE",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (unit \<times> 'b state_scheme)"},
                                                                 tp[var("mc",@{typ MachineCode}),
                                                                    ls"LoadDual: literal"],@{theory} ),
                                                              mu(lu,qTy)),
                                                          close
                                                            (var_a HOLogic.unitT,
                                                             mu(call
                                                                  ("instruction.Load",
                                                                   @{typ instruction},
                                                                   call
                                                                     ("Load.LoadDualLiteral",
                                                                      @{typ Load},
                                                                      tp[eq(mop(Cast w1,
                                                                                ll[var_b"b'23"]),
                                                                            lw(1,1)),var_w("Rt",4),
                                                                         var_w("Rt2",4),
                                                                         mop(Cast w32,
                                                                             cc[mop(Cast w8,
                                                                                    ll[var_b"b'7",
                                                                                       var_b"b'6",
                                                                                       var_b"b'5",
                                                                                       var_b"b'4",
                                                                                       var_b"b'3",
                                                                                       var_b"b'2",
                                                                                       var_b"b'1",
                                                                                       var_b"b'0"]),
                                                                                lw(0,2)])],@{theory} ),
                                                                   @{theory} ),qTy))),
                                                       call
                                                         ("Skip",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow>
                                                           (instruction \<times> 'b state_scheme)"},lu,
                                                          @{theory} )))))))))),
                             (bop(And,mop(Not,var_b"b'25"),bop(And,var_b"b'22",var_b"b'20")),
                              let'
                                (var_w("Rn",4),
                                 mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                 let'
                                   (var_w("W",1),mop(Cast w1,ll[var_b"b'21"]),
                                    let'
                                      (var_w("P",1),mop(Cast w1,ll[var_b"b'24"]),
                                       let'
                                         (var_w("Rt2",4),
                                          mop(Cast w4,
                                              ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                          let'
                                            (var_w("Rt",4),
                                             mop(Cast w4,
                                                 ll[var_b"b'15",var_b"b'14",var_b"b'13",var_b"b'12"]),
                                             mb(call
                                                  ("ThumbCondition",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                                   lu,@{theory} ),
                                                close
                                                  (var_w("v",4),
                                                   mb(mb(mb(ite(bop(Or,eq(var_w("P",1),lw(1,1)),
                                                                    eq(var_w("W",1),lw(1,1))),
                                                                call
                                                                  ("HaveThumb2",
                                                                   @{typ
                                                                   "'b state_scheme \<Rightarrow>
                                                                    (bool \<times> 'b state_scheme)"},lu,
                                                                   @{theory} ),mu(lf,qTy)),
                                                            close
                                                              (var_b"v0",
                                                               mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                         close
                                                           (var("v",@{typ "4 word \<times> bool"}),
                                                            call
                                                              ("Do",
                                                               @{typ
                                                               "'b state_scheme \<Rightarrow>
                                                                (bool \<times> 'b state_scheme)"},
                                                               var("v",@{typ "4 word \<times> bool"}),
                                                               @{theory} ))),
                                                      close
                                                        (var_b"b",
                                                         ite(var_b"b",
                                                             let'
                                                               (var_b"wback",
                                                                eq(var_w("W",1),lw(1,1)),
                                                                mb(ite(bop(Or,
                                                                           bop(And,var_b"wback",
                                                                               bop(Or,
                                                                                   eq(var_w("Rn",4),
                                                                                      var_w("Rt",4)),
                                                                                   eq(var_w("Rn",4),
                                                                                      var_w("Rt2",4)))),
                                                                           bop(Or,
                                                                               bop(In,var_w("Rt",4),
                                                                                   sl[lw(13,4),
                                                                                      lw(15,4)]),
                                                                               bop(Or,
                                                                                   bop(In,
                                                                                       var_w("Rt2",4),
                                                                                       sl[lw(13,4),
                                                                                          lw(15,4)]),
                                                                                   eq(var_w("Rt",4),
                                                                                      var_w("Rt2",4))))),
                                                                       call
                                                                         ("DECODE_UNPREDICTABLE",
                                                                          @{typ
                                                                          "'b state_scheme \<Rightarrow>
                                                                           (unit \<times> 'b state_scheme)"},
                                                                          tp[var("mc",
                                                                                 @{typ MachineCode}),
                                                                             ls"LoadDual"],@{theory} ),
                                                                       mu(lu,qTy)),
                                                                   close
                                                                     (var_a HOLogic.unitT,
                                                                      mu(call
                                                                           ("instruction.Load",
                                                                            @{typ instruction},
                                                                            call
                                                                              ("Load.LoadDual",
                                                                               @{typ Load},
                                                                               tp[eq(mop(Cast w1,
                                                                                         ll[var_b"b'23"]),
                                                                                     lw(1,1)),
                                                                                  eq(var_w("P",1),
                                                                                     lw(1,1)),
                                                                                  var_b"wback",
                                                                                  var_w("Rt",4),
                                                                                  var_w("Rt2",4),
                                                                                  var_w("Rn",4),
                                                                                  call
                                                                                    ("offset2.immediate_form2",
                                                                                     @{typ offset2},
                                                                                     mop(Cast w32,
                                                                                         cc[mop(Cast
                                                                                                  w8,
                                                                                                ll[var_b"b'7",
                                                                                                   var_b"b'6",
                                                                                                   var_b"b'5",
                                                                                                   var_b"b'4",
                                                                                                   var_b"b'3",
                                                                                                   var_b"b'2",
                                                                                                   var_b"b'1",
                                                                                                   var_b"b'0"]),
                                                                                            lw(0,2)]),
                                                                                     @{theory} )],
                                                                               @{theory} ),@{theory} ),
                                                                         qTy)))),
                                                             call
                                                               ("Skip",
                                                                @{typ
                                                                "'b state_scheme \<Rightarrow>
                                                                 (instruction \<times> 'b state_scheme)"},lu,
                                                                @{theory} )))))))))))),
                             (var_b"b'25",
                              let'
                                (var_w("Rn",4),
                                 mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                                 let'
                                   (var_w("S",1),mop(Cast w1,ll[var_b"b'20"]),
                                    let'
                                      (var_w("Rm",4),
                                       mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                                       let'
                                         (var_w("typ",2),
                                          mop(Cast (Word_Lib.mk_wordT 2),ll[var_b"b'5",var_b"b'4"]),
                                          let'
                                            (var_w("imm2",2),
                                             mop(Cast (Word_Lib.mk_wordT 2),
                                                 ll[var_b"b'7",var_b"b'6"]),
                                             let'
                                               (var_w("Rd",4),
                                                mop(Cast w4,
                                                    ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                                let'
                                                  (var_w("imm3",3),
                                                   mop(Cast (Word_Lib.mk_wordT 3),
                                                       ll[var_b"b'14",var_b"b'13",var_b"b'12"]),
                                                   mb(call
                                                        ("ThumbCondition",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow>
                                                          (4 word \<times> 'b state_scheme)"},lu,@{theory} ),
                                                      close
                                                        (var_w("v",4),
                                                         mb(mb(mb(call
                                                                    ("HaveThumb2",
                                                                     @{typ
                                                                     "'b state_scheme \<Rightarrow>
                                                                      (bool \<times> 'b state_scheme)"},lu,
                                                                     @{theory} ),
                                                                  close
                                                                    (var_b"v0",
                                                                     mu(tp[var_w("v",4),var_b"v0"],
                                                                        qTy))),
                                                               close
                                                                 (var("v",
                                                                      @{typ "4 word \<times> bool"}),
                                                                  call
                                                                    ("Do",
                                                                     @{typ
                                                                     "'b state_scheme \<Rightarrow>
                                                                      (bool \<times> 'b state_scheme)"},
                                                                     var("v",
                                                                         @{typ
                                                                         "4 word \<times> bool"}),
                                                                     @{theory} ))),
                                                            close
                                                              (var_b"b",
                                                               ite(var_b"b",
                                                                   let'
                                                                     (tp[var("shift_t",@{typ SRType}),
                                                                         var_n"shift_n"],
                                                                      call
                                                                        ("DecodeImmShift",
                                                                         @{typ
                                                                         "SRType \<times> nat"},
                                                                         tp[var_w("typ",2),
                                                                            cc[var_w("imm3",3),
                                                                               var_w("imm2",2)]],
                                                                         @{theory} ),
                                                                      let'
                                                                        (var_b"setflags",
                                                                         eq(var_w("S",1),lw(1,1)),
                                                                         itb([(bop(And,
                                                                                   eq(mop(Cast w4,
                                                                                          ll[var_b"b'24",
                                                                                             var_b"b'23",
                                                                                             var_b"b'22",
                                                                                             var_b"b'21"]),
                                                                                      lw(0,4)),
                                                                                   bop(And,
                                                                                       eq(var_w("Rd",4),
                                                                                          lw(15,4)),
                                                                                       eq(var_w("S",1),
                                                                                          lw(1,1)))),
                                                                               mb(ite(bop(Or,
                                                                                          bop(In,
                                                                                              var_w("Rn",4),
                                                                                              sl[lw(13,
                                                                                                    4),
                                                                                                 lw(15,
                                                                                                    4)]),
                                                                                          bop(In,
                                                                                              var_w("Rm",4),
                                                                                              sl[lw(13,
                                                                                                    4),
                                                                                                 lw(15,
                                                                                                    4)])),
                                                                                      call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "'b state_scheme \<Rightarrow>
                                                                                          (unit \<times>
                                                                                           'b state_scheme)"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "TST (register)"],
                                                                                         @{theory} ),
                                                                                      mu(lu,qTy)),
                                                                                  close
                                                                                    (var_a
                                                                                       HOLogic.unitT,
                                                                                     mu(call
                                                                                          ("instruction.Data",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Data.TestCompareRegister",
                                                                                              @{typ Data},
                                                                                              tp[lw(0,
                                                                                                    2),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var("shift_t",
                                                                                                     @{typ SRType}),
                                                                                                 var_n"shift_n"],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)))),
                                                                              (eq(mop(Cast w4,
                                                                                      ll[var_b"b'24",
                                                                                         var_b"b'23",
                                                                                         var_b"b'22",
                                                                                         var_b"b'21"]),
                                                                                  lw(0,4)),
                                                                               mb(ite(bop(Or,
                                                                                          eq(var_w("Rd",4),
                                                                                             lw(13,4)),
                                                                                          bop(Or,
                                                                                              bop(And,
                                                                                                  eq(var_w("Rd",4),
                                                                                                     lw(15,
                                                                                                        4)),
                                                                                                  mop(Not,
                                                                                                      var_b"setflags")),
                                                                                              bop(Or,
                                                                                                  bop(In,
                                                                                                      var_w("Rn",4),
                                                                                                      sl[lw(13,
                                                                                                            4),
                                                                                                         lw(15,
                                                                                                            4)]),
                                                                                                  bop(In,
                                                                                                      var_w("Rm",4),
                                                                                                      sl[lw(13,
                                                                                                            4),
                                                                                                         lw(15,
                                                                                                            4)])))),
                                                                                      call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "'b state_scheme \<Rightarrow>
                                                                                          (unit \<times>
                                                                                           'b state_scheme)"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "AND (register)"],
                                                                                         @{theory} ),
                                                                                      mu(lu,qTy)),
                                                                                  close
                                                                                    (var_a
                                                                                       HOLogic.unitT,
                                                                                     mu(call
                                                                                          ("instruction.Data",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Data.Register",
                                                                                              @{typ Data},
                                                                                              tp[lw(0,
                                                                                                    4),
                                                                                                 var_b"setflags",
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var("shift_t",
                                                                                                     @{typ SRType}),
                                                                                                 var_n"shift_n"],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)))),
                                                                              (eq(mop(Cast w4,
                                                                                      ll[var_b"b'24",
                                                                                         var_b"b'23",
                                                                                         var_b"b'22",
                                                                                         var_b"b'21"]),
                                                                                  lw(1,4)),
                                                                               mb(ite(bop(Or,
                                                                                          bop(In,
                                                                                              var_w("Rd",4),
                                                                                              sl[lw(13,
                                                                                                    4),
                                                                                                 lw(15,
                                                                                                    4)]),
                                                                                          bop(Or,
                                                                                              bop(In,
                                                                                                  var_w("Rn",4),
                                                                                                  sl[lw(13,
                                                                                                        4),
                                                                                                     lw(15,
                                                                                                        4)]),
                                                                                              bop(In,
                                                                                                  var_w("Rm",4),
                                                                                                  sl[lw(13,
                                                                                                        4),
                                                                                                     lw(15,
                                                                                                        4)]))),
                                                                                      call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "'b state_scheme \<Rightarrow>
                                                                                          (unit \<times>
                                                                                           'b state_scheme)"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "BIC (register)"],
                                                                                         @{theory} ),
                                                                                      mu(lu,qTy)),
                                                                                  close
                                                                                    (var_a
                                                                                       HOLogic.unitT,
                                                                                     mu(call
                                                                                          ("instruction.Data",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Data.Register",
                                                                                              @{typ Data},
                                                                                              tp[lw(14,
                                                                                                    4),
                                                                                                 var_b"setflags",
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var("shift_t",
                                                                                                     @{typ SRType}),
                                                                                                 var_n"shift_n"],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)))),
                                                                              (bop(And,
                                                                                   eq(mop(Cast w4,
                                                                                          ll[var_b"b'24",
                                                                                             var_b"b'23",
                                                                                             var_b"b'22",
                                                                                             var_b"b'21"]),
                                                                                      lw(2,4)),
                                                                                   eq(var_w("Rn",4),
                                                                                      lw(15,4))),
                                                                               mb(itb([(bop(And,
                                                                                            eq(var_w("typ",2),
                                                                                               lw(0,
                                                                                                  2)),
                                                                                            bop(And,
                                                                                                eq(var_w("imm3",3),
                                                                                                   lw(0,
                                                                                                      3)),
                                                                                                eq(var_w("imm2",2),
                                                                                                   lw(0,
                                                                                                      2)))),
                                                                                        ite(bop(Or,
                                                                                                bop(And,
                                                                                                    var_b"setflags",
                                                                                                    bop(Or,
                                                                                                        bop(In,
                                                                                                            var_w("Rd",4),
                                                                                                            sl[lw(13,
                                                                                                                  4),
                                                                                                               lw(15,
                                                                                                                  4)]),
                                                                                                        bop(In,
                                                                                                            var_w("Rm",4),
                                                                                                            sl[lw(13,
                                                                                                                  4),
                                                                                                               lw(15,
                                                                                                                  4)]))),
                                                                                                bop(And,
                                                                                                    mop(Not,
                                                                                                        var_b"setflags"),
                                                                                                    bop(Or,
                                                                                                        eq(var_w("Rd",4),
                                                                                                           lw(15,
                                                                                                              4)),
                                                                                                        bop(Or,
                                                                                                            eq(var_w("Rm",4),
                                                                                                               lw(15,
                                                                                                                  4)),
                                                                                                            bop(And,
                                                                                                                eq(var_w("Rd",4),
                                                                                                                   lw(13,
                                                                                                                      4)),
                                                                                                                eq(var_w("Rm",4),
                                                                                                                   lw(13,
                                                                                                                      4))))))),
                                                                                            call
                                                                                              ("DECODE_UNPREDICTABLE",
                                                                                               @{typ
                                                                                               "'b state_scheme \<Rightarrow>
                                                                                                (unit \<times>
                                                                                                 'b state_scheme)"},
                                                                                               tp[var("mc",
                                                                                                      @{typ MachineCode}),
                                                                                                  ls
                                                                                                   "MOV (register)"],
                                                                                               @{theory} ),
                                                                                            mu(lu,
                                                                                               qTy))),
                                                                                       (bop(Or,
                                                                                            bop(In,
                                                                                                var_w("Rd",4),
                                                                                                sl[lw(13,
                                                                                                      4),
                                                                                                   lw(15,
                                                                                                      4)]),
                                                                                            bop(In,
                                                                                                var_w("Rm",4),
                                                                                                sl[lw(13,
                                                                                                      4),
                                                                                                   lw(15,
                                                                                                      4)])),
                                                                                        call
                                                                                          ("DECODE_UNPREDICTABLE",
                                                                                           @{typ
                                                                                           "'b state_scheme \<Rightarrow>
                                                                                            (unit \<times>
                                                                                             'b state_scheme)"},
                                                                                           tp[var("mc",
                                                                                                  @{typ MachineCode}),
                                                                                              ls
                                                                                               "SHIFT (register)"],
                                                                                           @{theory} ))],
                                                                                      mu(lu,qTy)),
                                                                                  close
                                                                                    (var_a
                                                                                       HOLogic.unitT,
                                                                                     mu(call
                                                                                          ("instruction.Data",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Data.ShiftImmediate",
                                                                                              @{typ Data},
                                                                                              tp[lf,
                                                                                                 var_b"setflags",
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var("shift_t",
                                                                                                     @{typ SRType}),
                                                                                                 var_n"shift_n"],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)))),
                                                                              (eq(mop(Cast w4,
                                                                                      ll[var_b"b'24",
                                                                                         var_b"b'23",
                                                                                         var_b"b'22",
                                                                                         var_b"b'21"]),
                                                                                  lw(2,4)),
                                                                               mb(ite(bop(Or,
                                                                                          bop(In,
                                                                                              var_w("Rd",4),
                                                                                              sl[lw(13,
                                                                                                    4),
                                                                                                 lw(15,
                                                                                                    4)]),
                                                                                          bop(Or,
                                                                                              eq(var_w("Rn",4),
                                                                                                 lw(13,
                                                                                                    4)),
                                                                                              bop(In,
                                                                                                  var_w("Rm",4),
                                                                                                  sl[lw(13,
                                                                                                        4),
                                                                                                     lw(15,
                                                                                                        4)]))),
                                                                                      call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "'b state_scheme \<Rightarrow>
                                                                                          (unit \<times>
                                                                                           'b state_scheme)"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "ORR (register)"],
                                                                                         @{theory} ),
                                                                                      mu(lu,qTy)),
                                                                                  close
                                                                                    (var_a
                                                                                       HOLogic.unitT,
                                                                                     mu(call
                                                                                          ("instruction.Data",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Data.Register",
                                                                                              @{typ Data},
                                                                                              tp[lw(12,
                                                                                                    4),
                                                                                                 var_b"setflags",
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var("shift_t",
                                                                                                     @{typ SRType}),
                                                                                                 var_n"shift_n"],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)))),
                                                                              (bop(And,
                                                                                   eq(mop(Cast w4,
                                                                                          ll[var_b"b'24",
                                                                                             var_b"b'23",
                                                                                             var_b"b'22",
                                                                                             var_b"b'21"]),
                                                                                      lw(3,4)),
                                                                                   eq(var_w("Rn",4),
                                                                                      lw(15,4))),
                                                                               mb(ite(bop(Or,
                                                                                          bop(In,
                                                                                              var_w("Rd",4),
                                                                                              sl[lw(13,
                                                                                                    4),
                                                                                                 lw(15,
                                                                                                    4)]),
                                                                                          bop(In,
                                                                                              var_w("Rm",4),
                                                                                              sl[lw(13,
                                                                                                    4),
                                                                                                 lw(15,
                                                                                                    4)])),
                                                                                      call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "'b state_scheme \<Rightarrow>
                                                                                          (unit \<times>
                                                                                           'b state_scheme)"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "MVN (register)"],
                                                                                         @{theory} ),
                                                                                      mu(lu,qTy)),
                                                                                  close
                                                                                    (var_a
                                                                                       HOLogic.unitT,
                                                                                     mu(call
                                                                                          ("instruction.Data",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Data.ShiftImmediate",
                                                                                              @{typ Data},
                                                                                              tp[lt,
                                                                                                 var_b"setflags",
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var("shift_t",
                                                                                                     @{typ SRType}),
                                                                                                 var_n"shift_n"],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)))),
                                                                              (eq(mop(Cast w4,
                                                                                      ll[var_b"b'24",
                                                                                         var_b"b'23",
                                                                                         var_b"b'22",
                                                                                         var_b"b'21"]),
                                                                                  lw(3,4)),
                                                                               mb(ite(bop(Or,
                                                                                          bop(In,
                                                                                              var_w("Rd",4),
                                                                                              sl[lw(13,
                                                                                                    4),
                                                                                                 lw(15,
                                                                                                    4)]),
                                                                                          bop(Or,
                                                                                              eq(var_w("Rn",4),
                                                                                                 lw(13,
                                                                                                    4)),
                                                                                              bop(In,
                                                                                                  var_w("Rm",4),
                                                                                                  sl[lw(13,
                                                                                                        4),
                                                                                                     lw(15,
                                                                                                        4)]))),
                                                                                      call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "'b state_scheme \<Rightarrow>
                                                                                          (unit \<times>
                                                                                           'b state_scheme)"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "ORN (register)"],
                                                                                         @{theory} ),
                                                                                      mu(lu,qTy)),
                                                                                  close
                                                                                    (var_a
                                                                                       HOLogic.unitT,
                                                                                     mu(call
                                                                                          ("instruction.Data",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Data.Register",
                                                                                              @{typ Data},
                                                                                              tp[lw(15,
                                                                                                    4),
                                                                                                 var_b"setflags",
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var("shift_t",
                                                                                                     @{typ SRType}),
                                                                                                 var_n"shift_n"],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)))),
                                                                              (bop(And,
                                                                                   eq(mop(Cast w4,
                                                                                          ll[var_b"b'24",
                                                                                             var_b"b'23",
                                                                                             var_b"b'22",
                                                                                             var_b"b'21"]),
                                                                                      lw(4,4)),
                                                                                   bop(And,
                                                                                       eq(var_w("Rd",4),
                                                                                          lw(15,4)),
                                                                                       eq(var_w("S",1),
                                                                                          lw(1,1)))),
                                                                               mb(ite(bop(Or,
                                                                                          bop(In,
                                                                                              var_w("Rn",4),
                                                                                              sl[lw(13,
                                                                                                    4),
                                                                                                 lw(15,
                                                                                                    4)]),
                                                                                          bop(In,
                                                                                              var_w("Rm",4),
                                                                                              sl[lw(13,
                                                                                                    4),
                                                                                                 lw(15,
                                                                                                    4)])),
                                                                                      call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "'b state_scheme \<Rightarrow>
                                                                                          (unit \<times>
                                                                                           'b state_scheme)"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "TEQ (register)"],
                                                                                         @{theory} ),
                                                                                      mu(lu,qTy)),
                                                                                  close
                                                                                    (var_a
                                                                                       HOLogic.unitT,
                                                                                     mu(call
                                                                                          ("instruction.Data",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Data.TestCompareRegister",
                                                                                              @{typ Data},
                                                                                              tp[lw(1,
                                                                                                    2),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var("shift_t",
                                                                                                     @{typ SRType}),
                                                                                                 var_n"shift_n"],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)))),
                                                                              (eq(mop(Cast w4,
                                                                                      ll[var_b"b'24",
                                                                                         var_b"b'23",
                                                                                         var_b"b'22",
                                                                                         var_b"b'21"]),
                                                                                  lw(4,4)),
                                                                               mb(ite(bop(Or,
                                                                                          eq(var_w("Rd",4),
                                                                                             lw(13,4)),
                                                                                          bop(Or,
                                                                                              bop(And,
                                                                                                  eq(var_w("Rd",4),
                                                                                                     lw(15,
                                                                                                        4)),
                                                                                                  mop(Not,
                                                                                                      var_b"setflags")),
                                                                                              bop(Or,
                                                                                                  bop(In,
                                                                                                      var_w("Rn",4),
                                                                                                      sl[lw(13,
                                                                                                            4),
                                                                                                         lw(15,
                                                                                                            4)]),
                                                                                                  bop(In,
                                                                                                      var_w("Rm",4),
                                                                                                      sl[lw(13,
                                                                                                            4),
                                                                                                         lw(15,
                                                                                                            4)])))),
                                                                                      call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "'b state_scheme \<Rightarrow>
                                                                                          (unit \<times>
                                                                                           'b state_scheme)"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "EOR (register)"],
                                                                                         @{theory} ),
                                                                                      mu(lu,qTy)),
                                                                                  close
                                                                                    (var_a
                                                                                       HOLogic.unitT,
                                                                                     mu(call
                                                                                          ("instruction.Data",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Data.Register",
                                                                                              @{typ Data},
                                                                                              tp[lw(1,
                                                                                                    4),
                                                                                                 var_b"setflags",
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var("shift_t",
                                                                                                     @{typ SRType}),
                                                                                                 var_n"shift_n"],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)))),
                                                                              (bop(And,
                                                                                   eq(mop(Cast w4,
                                                                                          ll[var_b"b'24",
                                                                                             var_b"b'23",
                                                                                             var_b"b'22",
                                                                                             var_b"b'21"]),
                                                                                      lw(6,4)),
                                                                                   eq(var_w("S",1),
                                                                                      lw(0,1))),
                                                                               ite(bop(Bit,
                                                                                       var_w("typ",2),
                                                                                       ln 0),
                                                                                   mu(call
                                                                                        ("instruction.Undefined",
                                                                                         @{typ instruction},
                                                                                         lw(0,32),
                                                                                         @{theory} ),
                                                                                      qTy),
                                                                                   mb(ite(bop(Or,
                                                                                              bop(In,
                                                                                                  var_w("Rd",4),
                                                                                                  sl[lw(13,
                                                                                                        4),
                                                                                                     lw(15,
                                                                                                        4)]),
                                                                                              bop(Or,
                                                                                                  bop(In,
                                                                                                      var_w("Rn",4),
                                                                                                      sl[lw(13,
                                                                                                            4),
                                                                                                         lw(15,
                                                                                                            4)]),
                                                                                                  bop(In,
                                                                                                      var_w("Rm",4),
                                                                                                      sl[lw(13,
                                                                                                            4),
                                                                                                         lw(15,
                                                                                                            4)]))),
                                                                                          call
                                                                                            ("DECODE_UNPREDICTABLE",
                                                                                             @{typ
                                                                                             "'b state_scheme \<Rightarrow>
                                                                                              (unit \<times>
                                                                                               'b state_scheme)"},
                                                                                             tp[var("mc",
                                                                                                    @{typ MachineCode}),
                                                                                                ls
                                                                                                 "PackHalfword"],
                                                                                             @{theory} ),
                                                                                          mu(lu,qTy)),
                                                                                      close
                                                                                        (var_a
                                                                                           HOLogic.unitT,
                                                                                         mu(call
                                                                                              ("instruction.Media",
                                                                                               @{typ instruction},
                                                                                               call
                                                                                                 ("Media.PackHalfword",
                                                                                                  @{typ Media},
                                                                                                  tp[var("shift_t",
                                                                                                         @{typ SRType}),
                                                                                                     var_n"shift_n",
                                                                                                     bop(Bit,
                                                                                                         var_w("typ",2),
                                                                                                         ln
                                                                                                          1),
                                                                                                     var_w("Rd",4),
                                                                                                     var_w("Rn",4),
                                                                                                     var_w("Rm",4)],
                                                                                                  @{theory} ),
                                                                                               @{theory} ),
                                                                                            qTy))))),
                                                                              (bop(And,
                                                                                   eq(mop(Cast w4,
                                                                                          ll[var_b"b'24",
                                                                                             var_b"b'23",
                                                                                             var_b"b'22",
                                                                                             var_b"b'21"]),
                                                                                      lw(8,4)),
                                                                                   bop(And,
                                                                                       eq(var_w("Rd",4),
                                                                                          lw(15,4)),
                                                                                       eq(var_w("S",1),
                                                                                          lw(1,1)))),
                                                                               mb(ite(bop(Or,
                                                                                          eq(var_w("Rn",4),
                                                                                             lw(15,4)),
                                                                                          bop(In,
                                                                                              var_w("Rm",4),
                                                                                              sl[lw(13,
                                                                                                    4),
                                                                                                 lw(15,
                                                                                                    4)])),
                                                                                      call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "'b state_scheme \<Rightarrow>
                                                                                          (unit \<times>
                                                                                           'b state_scheme)"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "CMN (register)"],
                                                                                         @{theory} ),
                                                                                      mu(lu,qTy)),
                                                                                  close
                                                                                    (var_a
                                                                                       HOLogic.unitT,
                                                                                     mu(call
                                                                                          ("instruction.Data",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Data.TestCompareRegister",
                                                                                              @{typ Data},
                                                                                              tp[lw(3,
                                                                                                    2),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var("shift_t",
                                                                                                     @{typ SRType}),
                                                                                                 var_n"shift_n"],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)))),
                                                                              (eq(mop(Cast w4,
                                                                                      ll[var_b"b'24",
                                                                                         var_b"b'23",
                                                                                         var_b"b'22",
                                                                                         var_b"b'21"]),
                                                                                  lw(8,4)),
                                                                               mb(ite(bop(Or,
                                                                                          eq(var_w("Rd",4),
                                                                                             lw(13,4)),
                                                                                          bop(Or,
                                                                                              bop(And,
                                                                                                  eq(var_w("Rd",4),
                                                                                                     lw(15,
                                                                                                        4)),
                                                                                                  mop(Not,
                                                                                                      var_b"setflags")),
                                                                                              bop(Or,
                                                                                                  eq(var_w("Rn",4),
                                                                                                     lw(15,
                                                                                                        4)),
                                                                                                  bop(In,
                                                                                                      var_w("Rm",4),
                                                                                                      sl[lw(13,
                                                                                                            4),
                                                                                                         lw(15,
                                                                                                            4)])))),
                                                                                      call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "'b state_scheme \<Rightarrow>
                                                                                          (unit \<times>
                                                                                           'b state_scheme)"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "ADD (register)"],
                                                                                         @{theory} ),
                                                                                      mu(lu,qTy)),
                                                                                  close
                                                                                    (var_a
                                                                                       HOLogic.unitT,
                                                                                     mu(let'
                                                                                          (tp[var("shift_t",
                                                                                                  @{typ SRType}),
                                                                                              var_n"shift_n"],
                                                                                           call
                                                                                             ("DecodeImmShift",
                                                                                              @{typ
                                                                                              "SRType \<times>
                                                                                               nat"},
                                                                                              tp[var_w("typ",2),
                                                                                                 cc[var_w("imm3",3),
                                                                                                    var_w("imm2",2)]],
                                                                                              @{theory} ),
                                                                                           call
                                                                                             ("instruction.Data",
                                                                                              @{typ instruction},
                                                                                              call
                                                                                                ("Data.Register",
                                                                                                 @{typ Data},
                                                                                                 tp[lw(4,
                                                                                                       4),
                                                                                                    var_b"setflags",
                                                                                                    var_w("Rd",4),
                                                                                                    var_w("Rn",4),
                                                                                                    var_w("Rm",4),
                                                                                                    var("shift_t",
                                                                                                        @{typ SRType}),
                                                                                                    var_n"shift_n"],
                                                                                                 @{theory} ),
                                                                                              @{theory} )),
                                                                                        qTy)))),
                                                                              (eq(mop(Cast w4,
                                                                                      ll[var_b"b'24",
                                                                                         var_b"b'23",
                                                                                         var_b"b'22",
                                                                                         var_b"b'21"]),
                                                                                  lw(10,4)),
                                                                               mb(ite(bop(Or,
                                                                                          bop(In,
                                                                                              var_w("Rd",4),
                                                                                              sl[lw(13,
                                                                                                    4),
                                                                                                 lw(15,
                                                                                                    4)]),
                                                                                          bop(Or,
                                                                                              bop(In,
                                                                                                  var_w("Rn",4),
                                                                                                  sl[lw(13,
                                                                                                        4),
                                                                                                     lw(15,
                                                                                                        4)]),
                                                                                              bop(In,
                                                                                                  var_w("Rm",4),
                                                                                                  sl[lw(13,
                                                                                                        4),
                                                                                                     lw(15,
                                                                                                        4)]))),
                                                                                      call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "'b state_scheme \<Rightarrow>
                                                                                          (unit \<times>
                                                                                           'b state_scheme)"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "ADC (register)"],
                                                                                         @{theory} ),
                                                                                      mu(lu,qTy)),
                                                                                  close
                                                                                    (var_a
                                                                                       HOLogic.unitT,
                                                                                     mu(call
                                                                                          ("instruction.Data",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Data.Register",
                                                                                              @{typ Data},
                                                                                              tp[lw(5,
                                                                                                    4),
                                                                                                 var_b"setflags",
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var("shift_t",
                                                                                                     @{typ SRType}),
                                                                                                 var_n"shift_n"],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)))),
                                                                              (eq(mop(Cast w4,
                                                                                      ll[var_b"b'24",
                                                                                         var_b"b'23",
                                                                                         var_b"b'22",
                                                                                         var_b"b'21"]),
                                                                                  lw(11,4)),
                                                                               mb(ite(bop(Or,
                                                                                          bop(In,
                                                                                              var_w("Rd",4),
                                                                                              sl[lw(13,
                                                                                                    4),
                                                                                                 lw(15,
                                                                                                    4)]),
                                                                                          bop(Or,
                                                                                              bop(In,
                                                                                                  var_w("Rn",4),
                                                                                                  sl[lw(13,
                                                                                                        4),
                                                                                                     lw(15,
                                                                                                        4)]),
                                                                                              bop(In,
                                                                                                  var_w("Rm",4),
                                                                                                  sl[lw(13,
                                                                                                        4),
                                                                                                     lw(15,
                                                                                                        4)]))),
                                                                                      call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "'b state_scheme \<Rightarrow>
                                                                                          (unit \<times>
                                                                                           'b state_scheme)"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "SBC (register)"],
                                                                                         @{theory} ),
                                                                                      mu(lu,qTy)),
                                                                                  close
                                                                                    (var_a
                                                                                       HOLogic.unitT,
                                                                                     mu(call
                                                                                          ("instruction.Data",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Data.Register",
                                                                                              @{typ Data},
                                                                                              tp[lw(6,
                                                                                                    4),
                                                                                                 var_b"setflags",
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var("shift_t",
                                                                                                     @{typ SRType}),
                                                                                                 var_n"shift_n"],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)))),
                                                                              (bop(And,
                                                                                   eq(mop(Cast w4,
                                                                                          ll[var_b"b'24",
                                                                                             var_b"b'23",
                                                                                             var_b"b'22",
                                                                                             var_b"b'21"]),
                                                                                      lw(13,4)),
                                                                                   bop(And,
                                                                                       eq(var_w("Rd",4),
                                                                                          lw(15,4)),
                                                                                       eq(var_w("S",1),
                                                                                          lw(1,1)))),
                                                                               mb(ite(bop(Or,
                                                                                          eq(var_w("Rn",4),
                                                                                             lw(15,4)),
                                                                                          bop(In,
                                                                                              var_w("Rm",4),
                                                                                              sl[lw(13,
                                                                                                    4),
                                                                                                 lw(15,
                                                                                                    4)])),
                                                                                      call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "'b state_scheme \<Rightarrow>
                                                                                          (unit \<times>
                                                                                           'b state_scheme)"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "CMP (register)"],
                                                                                         @{theory} ),
                                                                                      mu(lu,qTy)),
                                                                                  close
                                                                                    (var_a
                                                                                       HOLogic.unitT,
                                                                                     mu(call
                                                                                          ("instruction.Data",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Data.TestCompareRegister",
                                                                                              @{typ Data},
                                                                                              tp[lw(2,
                                                                                                    2),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var("shift_t",
                                                                                                     @{typ SRType}),
                                                                                                 var_n"shift_n"],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)))),
                                                                              (eq(mop(Cast w4,
                                                                                      ll[var_b"b'24",
                                                                                         var_b"b'23",
                                                                                         var_b"b'22",
                                                                                         var_b"b'21"]),
                                                                                  lw(13,4)),
                                                                               mb(ite(bop(Or,
                                                                                          eq(var_w("Rd",4),
                                                                                             lw(13,4)),
                                                                                          bop(Or,
                                                                                              bop(And,
                                                                                                  eq(var_w("Rd",4),
                                                                                                     lw(15,
                                                                                                        4)),
                                                                                                  mop(Not,
                                                                                                      var_b"setflags")),
                                                                                              bop(Or,
                                                                                                  eq(var_w("Rn",4),
                                                                                                     lw(15,
                                                                                                        4)),
                                                                                                  bop(In,
                                                                                                      var_w("Rm",4),
                                                                                                      sl[lw(13,
                                                                                                            4),
                                                                                                         lw(15,
                                                                                                            4)])))),
                                                                                      call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "'b state_scheme \<Rightarrow>
                                                                                          (unit \<times>
                                                                                           'b state_scheme)"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "SUB (register)"],
                                                                                         @{theory} ),
                                                                                      mu(lu,qTy)),
                                                                                  close
                                                                                    (var_a
                                                                                       HOLogic.unitT,
                                                                                     mu(call
                                                                                          ("instruction.Data",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Data.Register",
                                                                                              @{typ Data},
                                                                                              tp[lw(2,
                                                                                                    4),
                                                                                                 var_b"setflags",
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var("shift_t",
                                                                                                     @{typ SRType}),
                                                                                                 var_n"shift_n"],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy)))),
                                                                              (eq(mop(Cast w4,
                                                                                      ll[var_b"b'24",
                                                                                         var_b"b'23",
                                                                                         var_b"b'22",
                                                                                         var_b"b'21"]),
                                                                                  lw(14,4)),
                                                                               mb(ite(bop(Or,
                                                                                          bop(In,
                                                                                              var_w("Rd",4),
                                                                                              sl[lw(13,
                                                                                                    4),
                                                                                                 lw(15,
                                                                                                    4)]),
                                                                                          bop(Or,
                                                                                              bop(In,
                                                                                                  var_w("Rn",4),
                                                                                                  sl[lw(13,
                                                                                                        4),
                                                                                                     lw(15,
                                                                                                        4)]),
                                                                                              bop(In,
                                                                                                  var_w("Rm",4),
                                                                                                  sl[lw(13,
                                                                                                        4),
                                                                                                     lw(15,
                                                                                                        4)]))),
                                                                                      call
                                                                                        ("DECODE_UNPREDICTABLE",
                                                                                         @{typ
                                                                                         "'b state_scheme \<Rightarrow>
                                                                                          (unit \<times>
                                                                                           'b state_scheme)"},
                                                                                         tp[var("mc",
                                                                                                @{typ MachineCode}),
                                                                                            ls
                                                                                             "RSB (register)"],
                                                                                         @{theory} ),
                                                                                      mu(lu,qTy)),
                                                                                  close
                                                                                    (var_a
                                                                                       HOLogic.unitT,
                                                                                     mu(call
                                                                                          ("instruction.Data",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Data.Register",
                                                                                              @{typ Data},
                                                                                              tp[lw(3,
                                                                                                    4),
                                                                                                 var_b"setflags",
                                                                                                 var_w("Rd",4),
                                                                                                 var_w("Rn",4),
                                                                                                 var_w("Rm",4),
                                                                                                 var("shift_t",
                                                                                                     @{typ SRType}),
                                                                                                 var_n"shift_n"],
                                                                                              @{theory} ),
                                                                                           @{theory} ),
                                                                                        qTy))))],
                                                                             mu(call
                                                                                  ("instruction.Undefined",
                                                                                   @{typ instruction},
                                                                                   lw(0,32),
                                                                                   @{theory} ),qTy)))),
                                                                   call
                                                                     ("Skip",
                                                                      @{typ
                                                                      "'b state_scheme \<Rightarrow>
                                                                       (instruction \<times> 'b state_scheme)"},
                                                                      lu,@{theory} ))))))))))))))],
                            call
                              ("UndefinedThumb",
                               @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                               @{theory} )))],
                      call
                        ("UndefinedThumb",@{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                         lu,@{theory} ))),
                 (var_b"b'15",
                  ite(bop(And,var_b"b'31",bop(And,var_b"b'30",bop(And,var_b"b'29",var_b"b'28"))),
                      itb([(bop(And,mop(Not,var_b"b'26"),
                                bop(And,var_b"b'25",
                                    bop(And,var_b"b'24",
                                        bop(And,var_b"b'23",
                                            bop(And,mop(Not,var_b"b'22"),
                                                bop(And,mop(Not,var_b"b'21"),
                                                    bop(And,mop(Not,var_b"b'14"),
                                                        bop(And,mop(Not,var_b"b'12"),var_b"b'5")))))))),
                            let'
                              (var_w("Rn",4),
                               mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                               mb(call
                                    ("ThumbCondition",
                                     @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                     @{theory} ),
                                  close
                                    (var_w("v",4),
                                     mb(mb(mb(call
                                                ("HaveVirtExt",
                                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                 lu,@{theory} ),
                                              close(var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                           close
                                             (var("v",@{typ "4 word \<times> bool"}),
                                              call
                                                ("Do",
                                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                 var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                        close
                                          (var_b"b",
                                           ite(var_b"b",
                                               mb(ite(bop(In,var_w("Rn",4),sl[lw(13,4),lw(15,4)]),
                                                      call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"MoveToBankedOrSpecialRegister"],
                                                         @{theory} ),mu(lu,qTy)),
                                                  close
                                                    (var_a HOLogic.unitT,
                                                     mu(call
                                                          ("instruction.System",@{typ instruction},
                                                           call
                                                             ("System.MoveToBankedOrSpecialRegister",
                                                              @{typ System},
                                                              tp[eq(mop(Cast w1,ll[var_b"b'20"]),
                                                                    lw(1,1)),
                                                                 cc[mop(Cast w1,ll[var_b"b'4"]),
                                                                    mop(Cast w4,
                                                                        ll[var_b"b'11",var_b"b'10",
                                                                           var_b"b'9",var_b"b'8"])],
                                                                 var_w("Rn",4)],@{theory} ),@{theory} ),
                                                        qTy))),
                                               call
                                                 ("Skip",
                                                  @{typ
                                                  "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                  lu,@{theory} )))))))),
                           (bop(And,mop(Not,var_b"b'26"),
                                bop(And,var_b"b'25",
                                    bop(And,var_b"b'24",
                                        bop(And,var_b"b'23",
                                            bop(And,mop(Not,var_b"b'22"),
                                                bop(And,mop(Not,var_b"b'21"),
                                                    bop(And,mop(Not,var_b"b'14"),
                                                        bop(And,mop(Not,var_b"b'12"),
                                                            mop(Not,var_b"b'5"))))))))),
                            let'
                              (var_w("Rn",4),
                               mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                               let'
                                 (var_w("mask",4),
                                  mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                  mb(call
                                       ("ThumbCondition",
                                        @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                        @{theory} ),
                                     close
                                       (var_w("v",4),
                                        mb(mb(mb(call
                                                   ("HaveThumb2",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                                    @{theory} ),
                                                 close(var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                              close
                                                (var("v",@{typ "4 word \<times> bool"}),
                                                 call
                                                   ("Do",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                    var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                           close
                                             (var_b"b",
                                              ite(var_b"b",
                                                  mb(ite(bop(Or,eq(var_w("mask",4),lw(0,4)),
                                                             bop(In,var_w("Rn",4),
                                                                 sl[lw(13,4),lw(15,4)])),
                                                         call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (unit \<times> 'b state_scheme)"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"MoveToSpecialFromRegister"],
                                                            @{theory} ),mu(lu,qTy)),
                                                     close
                                                       (var_a HOLogic.unitT,
                                                        mu(call
                                                             ("instruction.System",
                                                              @{typ instruction},
                                                              call
                                                                ("System.MoveToSpecialFromRegister",
                                                                 @{typ System},
                                                                 tp[eq(mop(Cast w1,ll[var_b"b'20"]),
                                                                       lw(1,1)),var_w("Rn",4),
                                                                    var_w("mask",4)],@{theory} ),
                                                              @{theory} ),qTy))),
                                                  call
                                                    ("Skip",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow>
                                                      (instruction \<times> 'b state_scheme)"},lu,@{theory} ))))))))),
                           (bop(And,mop(Not,var_b"b'26"),
                                bop(And,var_b"b'25",
                                    bop(And,var_b"b'24",
                                        bop(And,var_b"b'23",
                                            bop(And,mop(Not,var_b"b'22"),
                                                bop(And,var_b"b'21",
                                                    bop(And,mop(Not,var_b"b'20"),
                                                        bop(And,mop(Not,var_b"b'14"),
                                                            bop(And,mop(Not,var_b"b'12"),
                                                                bop(And,mop(Not,var_b"b'10"),
                                                                    bop(And,mop(Not,var_b"b'9"),
                                                                        mop(Not,var_b"b'8")))))))))))),
                            mb(call
                                 ("ThumbCondition",
                                  @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,@{theory} ),
                               close
                                 (var_w("v",4),
                                  mb(mu(tp[var_w("v",4),
                                           mop(Cast w8,
                                               ll[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",
                                                  var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"])],qTy),
                                     close
                                       (var("v",@{typ "4 word \<times> 8 word"}),
                                        call
                                          ("DecodeHint",
                                           @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                           var("v",@{typ "4 word \<times> 8 word"}),@{theory} )))))),
                           (bop(And,mop(Not,var_b"b'26"),
                                bop(And,var_b"b'25",
                                    bop(And,var_b"b'24",
                                        bop(And,var_b"b'23",
                                            bop(And,mop(Not,var_b"b'22"),
                                                bop(And,var_b"b'21",
                                                    bop(And,mop(Not,var_b"b'20"),
                                                        bop(And,mop(Not,var_b"b'14"),
                                                            mop(Not,var_b"b'12"))))))))),
                            let'
                              (var_w("mode",5),
                               mop(Cast (Word_Lib.mk_wordT 5),
                                   ll[var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               let'
                                 (var_w("F",1),mop(Cast w1,ll[var_b"b'5"]),
                                  let'
                                    (var_w("I",1),mop(Cast w1,ll[var_b"b'6"]),
                                     let'
                                       (var_w("A",1),mop(Cast w1,ll[var_b"b'7"]),
                                        let'
                                          (var_w("M",1),mop(Cast w1,ll[var_b"b'8"]),
                                           let'
                                             (var_w("imod",2),
                                              mop(Cast (Word_Lib.mk_wordT 2),
                                                  ll[var_b"b'10",var_b"b'9"]),
                                              mb(call
                                                   ("ThumbCondition",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                                    lu,@{theory} ),
                                                 close
                                                   (var_w("v",4),
                                                    mb(mb(mb(call
                                                               ("HaveThumb2",
                                                                @{typ
                                                                "'b state_scheme \<Rightarrow>
                                                                 (bool \<times> 'b state_scheme)"},lu,
                                                                @{theory} ),
                                                             close
                                                               (var_b"v0",
                                                                mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                          close
                                                            (var("v",@{typ "4 word \<times> bool"}),
                                                             call
                                                               ("Do",
                                                                @{typ
                                                                "'b state_scheme \<Rightarrow>
                                                                 (bool \<times> 'b state_scheme)"},
                                                                var("v",
                                                                    @{typ "4 word \<times> bool"}),
                                                                @{theory} ))),
                                                       close
                                                         (var_b"b",
                                                          ite(var_b"b",
                                                              mb(itb([(bop(And,
                                                                           mop(Not,
                                                                               eq(var_w("mode",5),
                                                                                  lw(0,5))),
                                                                           eq(var_w("M",1),lw(0,1))),
                                                                       mu(lt,qTy)),
                                                                      (eq(bop(Bit,var_w("imod",2),
                                                                              ln 1),
                                                                          eq(cc[var_w("A",1),
                                                                                var_w("I",1),
                                                                                var_w("F",1)],
                                                                             lw(0,3))),mu(lt,qTy)),
                                                                      (eq(var_w("imod",2),lw(1,2)),
                                                                       mu(lt,qTy))],
                                                                     call
                                                                       ("InITBlock",
                                                                        @{typ
                                                                        "'b state_scheme \<Rightarrow>
                                                                         (bool \<times> 'b state_scheme)"},lu,
                                                                        @{theory} )),
                                                                 close
                                                                   (var_b"v",
                                                                    mb(ite(var_b"v",
                                                                           call
                                                                             ("DECODE_UNPREDICTABLE",
                                                                              @{typ
                                                                              "'b state_scheme \<Rightarrow>
                                                                               (unit \<times> 'b state_scheme)"},
                                                                              tp[var("mc",
                                                                                     @{typ MachineCode}),
                                                                                 ls
                                                                                  "ChangeProcessorState"],
                                                                              @{theory} ),mu(lu,qTy)),
                                                                       close
                                                                         (var_a HOLogic.unitT,
                                                                          mu(call
                                                                               ("instruction.System",
                                                                                @{typ instruction},
                                                                                call
                                                                                  ("System.ChangeProcessorState",
                                                                                   @{typ System},
                                                                                   tp[eq(var_w("imod",2),
                                                                                         lw(2,2)),
                                                                                      eq(var_w("imod",2),
                                                                                         lw(3,2)),
                                                                                      eq(var_w("A",1),
                                                                                         lw(1,1)),
                                                                                      eq(var_w("I",1),
                                                                                         lw(1,1)),
                                                                                      eq(var_w("F",1),
                                                                                         lw(1,1)),
                                                                                      ite(eq(var_w("M",1),
                                                                                             lw(1,1)),
                                                                                          mop(Some,
                                                                                              var_w("mode",5)),
                                                                                          lo (Word_Lib.mk_wordT 5))],
                                                                                   @{theory} ),
                                                                                @{theory} ),qTy))))),
                                                              call
                                                                ("Skip",
                                                                 @{typ
                                                                 "'b state_scheme \<Rightarrow>
                                                                  (instruction \<times> 'b state_scheme)"},lu,
                                                                 @{theory} ))))))))))))),
                           (bop(And,mop(Not,var_b"b'26"),
                                bop(And,var_b"b'25",
                                    bop(And,var_b"b'24",
                                        bop(And,var_b"b'23",
                                            bop(And,mop(Not,var_b"b'22"),
                                                bop(And,var_b"b'21",
                                                    bop(And,var_b"b'20",
                                                        bop(And,mop(Not,var_b"b'14"),
                                                            bop(And,mop(Not,var_b"b'12"),
                                                                bop(And,mop(Not,var_b"b'7"),
                                                                    bop(And,mop(Not,var_b"b'6"),
                                                                        mop(Not,var_b"b'5")))))))))))),
                            let'
                              (var_w("J",1),mop(Cast w1,ll[var_b"b'4"]),
                               mb(call
                                    ("ThumbCondition",
                                     @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                     @{theory} ),
                                  close
                                    (var_w("v",4),
                                     mb(mb(mb(mb(call
                                                   ("HaveThumbEE",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                                    @{theory} ),
                                                 close(var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                              close
                                                (var("v",@{typ "4 word \<times> bool"}),
                                                 call
                                                   ("Do",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                    var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                           close
                                             (var_b"b",
                                              ite(var_b"b",
                                                  mb(call
                                                       ("CurrentInstrSet",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow>
                                                         (InstrSet \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic}),
                                                     close
                                                       (var("v",@{typ InstrSet}),
                                                        mb(mb(mu(eq(var("v",@{typ InstrSet}),
                                                                    lc("InstrSet_Thumb","InstrSet",
                                                                       @{theory} )),qTy),
                                                              close
                                                                (var_b"b",
                                                                 mu(bop(And,var_b"b",
                                                                        eq(var_w("J",1),lw(0,1))),
                                                                    qTy))),
                                                           close(var_b"v",mu(mop(Not,var_b"v"),qTy))))),
                                                  mu(lf,qTy)))),
                                        close
                                          (var_b"b",
                                           ite(var_b"b",
                                               mb(call
                                                    ("InITBlock",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                     lu,@{theory} ),
                                                  close
                                                    (var_b"v",
                                                     mb(ite(var_b"v",
                                                            call
                                                              ("DECODE_UNPREDICTABLE",
                                                               @{typ
                                                               "'b state_scheme \<Rightarrow>
                                                                (unit \<times> 'b state_scheme)"},
                                                               tp[var("mc",@{typ MachineCode}),
                                                                  ls"EnterxLeavex"],@{theory} ),
                                                            mu(lu,qTy)),
                                                        close
                                                          (var_a HOLogic.unitT,
                                                           mu(call
                                                                ("instruction.System",
                                                                 @{typ instruction},
                                                                 call
                                                                   ("System.EnterxLeavex",
                                                                    @{typ System},
                                                                    eq(var_w("J",1),lw(1,1)),
                                                                    @{theory} ),@{theory} ),qTy))))),
                                               call
                                                 ("Skip",
                                                  @{typ
                                                  "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                  lu,@{theory} )))))))),
                           (bop(And,mop(Not,var_b"b'26"),
                                bop(And,var_b"b'25",
                                    bop(And,var_b"b'24",
                                        bop(And,var_b"b'23",
                                            bop(And,mop(Not,var_b"b'22"),
                                                bop(And,var_b"b'21",
                                                    bop(And,var_b"b'20",
                                                        bop(And,mop(Not,var_b"b'14"),
                                                            mop(Not,var_b"b'12"))))))))),
                            let'
                              (var_w("option",4),
                               mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                               mb(call
                                    ("ThumbCondition",
                                     @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                     @{theory} ),
                                  close
                                    (var_w("v",4),
                                     mb(mb(mb(call
                                                ("HaveThumb2",
                                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                 lu,@{theory} ),
                                              close(var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                           close
                                             (var("v",@{typ "4 word \<times> bool"}),
                                              call
                                                ("Do",
                                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                 var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                        close
                                          (var_b"b",
                                           ite(var_b"b",
                                               cs(mop(Cast w4,
                                                      ll[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4"]),
                                                  [(var_w("v",4),
                                                    itb([(eq(var_w("v",4),lw(2,4)),
                                                          mu(Term.Const
                                                               (@{const_name "ClearExclusive"},
                                                                @{typ instruction}),qTy)),
                                                         (eq(var_w("v",4),lw(4,4)),
                                                          mu(call
                                                               ("instruction.Hint",
                                                                @{typ instruction},
                                                                call
                                                                  ("Hint.DataSynchronizationBarrier",
                                                                   @{typ Hint},var_w("option",4),
                                                                   @{theory} ),@{theory} ),qTy)),
                                                         (eq(var_w("v",4),lw(5,4)),
                                                          mu(call
                                                               ("instruction.Hint",
                                                                @{typ instruction},
                                                                call
                                                                  ("Hint.DataMemoryBarrier",
                                                                   @{typ Hint},var_w("option",4),
                                                                   @{theory} ),@{theory} ),qTy)),
                                                         (eq(var_w("v",4),lw(6,4)),
                                                          mu(call
                                                               ("instruction.Hint",
                                                                @{typ instruction},
                                                                call
                                                                  ("Hint.InstructionSynchronizationBarrier",
                                                                   @{typ Hint},var_w("option",4),
                                                                   @{theory} ),@{theory} ),qTy))],
                                                        mb(call
                                                             ("ArchVersion",
                                                              @{typ
                                                              "'b state_scheme \<Rightarrow>
                                                               (nat \<times> 'b state_scheme)"},lu,@{theory} ),
                                                           close
                                                             (var_n"v",
                                                              mb(mu(bop(Ge,var_n"v",ln 7),qTy),
                                                                 close
                                                                   (var_b"b",
                                                                    ite(var_b"b",
                                                                        mu(call
                                                                             ("instruction.Undefined",
                                                                              @{typ instruction},
                                                                              lw(0,32),@{theory} ),
                                                                           qTy),
                                                                        mb(call
                                                                             ("DECODE_UNPREDICTABLE",
                                                                              @{typ
                                                                              "'b state_scheme \<Rightarrow>
                                                                               (unit \<times> 'b state_scheme)"},
                                                                              tp[var("mc",
                                                                                     @{typ MachineCode}),
                                                                                 ls
                                                                                  "Miscellaneous control"],
                                                                              @{theory} ),
                                                                           close
                                                                             (var_a HOLogic.unitT,
                                                                              mu(lx @{typ instruction},
                                                                                 qTy))))))))))],
                                                  @{context}),
                                               call
                                                 ("Skip",
                                                  @{typ
                                                  "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                  lu,@{theory} )))))))),
                           (bop(And,mop(Not,var_b"b'26"),
                                bop(And,var_b"b'25",
                                    bop(And,var_b"b'24",
                                        bop(And,var_b"b'23",
                                            bop(And,var_b"b'22",
                                                bop(And,mop(Not,var_b"b'21"),
                                                    bop(And,var_b"b'20",
                                                        bop(And,mop(Not,var_b"b'14"),
                                                            mop(Not,var_b"b'12"))))))))),
                            let'
                              (var_w("imm8",8),
                               mop(Cast w8,
                                   ll[var_b"b'7",var_b"b'6",var_b"b'5",var_b"b'4",var_b"b'3",
                                      var_b"b'2",var_b"b'1",var_b"b'0"]),
                               mb(call
                                    ("ThumbCondition",
                                     @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                     @{theory} ),
                                  close
                                    (var_w("v",4),
                                     mb(mb(mb(call
                                                ("HaveThumb2",
                                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                 lu,@{theory} ),
                                              close(var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                           close
                                             (var("v",@{typ "4 word \<times> bool"}),
                                              call
                                                ("Do",
                                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                 var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                        close
                                          (var_b"b",
                                           ite(var_b"b",
                                               mb(call
                                                    ("HaveVirtExt",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                     lu,@{theory} ),
                                                  close
                                                    (var_b"v",
                                                     mb(mu(bop(And,var_b"v",
                                                               eq(var_w("imm8",8),lw(0,8))),qTy),
                                                        close
                                                          (var_b"b",
                                                           ite(var_b"b",
                                                               mu(call
                                                                    ("instruction.System",
                                                                     @{typ instruction},
                                                                     Term.Const
                                                                       (@{const_name
                                                                        "ExceptionReturn"},
                                                                        @{typ System}),@{theory} ),
                                                                  qTy),
                                                               mb(call
                                                                    ("CurrentInstrSet",
                                                                     @{typ
                                                                     "'b state_scheme \<Rightarrow>
                                                                      (InstrSet \<times> 'b state_scheme)"},
                                                                     lu,@{theory ARM_Monadic}),
                                                                  close
                                                                    (var("v",@{typ InstrSet}),
                                                                     mb(mb(mb(mu(eq(var("v",
                                                                                        @{typ InstrSet}),
                                                                                    lc("InstrSet_ThumbEE",
                                                                                       "InstrSet",
                                                                                       @{theory} )),
                                                                                 qTy),
                                                                              close
                                                                                (var_b"b",
                                                                                 ite(var_b"b",
                                                                                     mu(lt,qTy),
                                                                                     mb(call
                                                                                          ("InITBlock",
                                                                                           @{typ
                                                                                           "'b state_scheme \<Rightarrow>
                                                                                            (bool \<times>
                                                                                             'b state_scheme)"},
                                                                                           lu,
                                                                                           @{theory} ),
                                                                                        close
                                                                                          (var_b"b",
                                                                                           ite(var_b"b",
                                                                                               mb(call
                                                                                                    ("LastInITBlock",
                                                                                                     @{typ
                                                                                                     "'b state_scheme \<Rightarrow>
                                                                                                      (bool \<times>
                                                                                                       'b state_scheme)"},
                                                                                                     lu,
                                                                                                     @{theory} ),
                                                                                                  close
                                                                                                    (var_b"v",
                                                                                                     mu(mop(Not,
                                                                                                            var_b"v"),
                                                                                                        qTy))),
                                                                                               mu(lf,
                                                                                                  qTy))))))),
                                                                           close
                                                                             (var_b"b",
                                                                              ite(var_b"b",
                                                                                  call
                                                                                    ("DECODE_UNPREDICTABLE",
                                                                                     @{typ
                                                                                     "'b state_scheme \<Rightarrow>
                                                                                      (unit \<times>
                                                                                       'b state_scheme)"},
                                                                                     tp[var("mc",
                                                                                            @{typ MachineCode}),
                                                                                        ls
                                                                                         "SUBS<c> PC, LR, #0"],
                                                                                     @{theory} ),
                                                                                  mu(lu,qTy)))),
                                                                        close
                                                                          (var_a HOLogic.unitT,
                                                                           mb(call
                                                                                ("CurrentModeIsHyp",
                                                                                 @{typ
                                                                                 "'b state_scheme \<Rightarrow>
                                                                                  (bool \<times>
                                                                                   'b state_scheme)"},lu,
                                                                                 @{theory} ),
                                                                              close
                                                                                (var_b"b",
                                                                                 mu(ite(var_b"b",
                                                                                        call
                                                                                          ("instruction.Undefined",
                                                                                           @{typ instruction},
                                                                                           lw(0,32),
                                                                                           @{theory} ),
                                                                                        call
                                                                                          ("instruction.Data",
                                                                                           @{typ instruction},
                                                                                           call
                                                                                             ("Data.ArithLogicImmediate",
                                                                                              @{typ Data},
                                                                                              tp[lw(2,
                                                                                                    4),
                                                                                                 lt,
                                                                                                 lw(15,
                                                                                                    4),
                                                                                                 lw(14,
                                                                                                    4),
                                                                                                 mop(Cast
                                                                                                       (Word_Lib.mk_wordT 12),
                                                                                                     var_w("imm8",8))],
                                                                                              @{theory} ),
                                                                                           @{theory} )),
                                                                                    qTy)))))))))))),
                                               call
                                                 ("Skip",
                                                  @{typ
                                                  "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                  lu,@{theory} )))))))),
                           (bop(And,mop(Not,var_b"b'26"),
                                bop(And,var_b"b'25",
                                    bop(And,var_b"b'24",
                                        bop(And,var_b"b'23",
                                            bop(And,var_b"b'22",
                                                bop(And,var_b"b'21",
                                                    bop(And,mop(Not,var_b"b'14"),
                                                        bop(And,mop(Not,var_b"b'12"),var_b"b'5")))))))),
                            let'
                              (var_w("Rd",4),
                               mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                               mb(call
                                    ("ThumbCondition",
                                     @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                     @{theory} ),
                                  close
                                    (var_w("v",4),
                                     mb(mb(mb(call
                                                ("HaveVirtExt",
                                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                 lu,@{theory} ),
                                              close(var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                           close
                                             (var("v",@{typ "4 word \<times> bool"}),
                                              call
                                                ("Do",
                                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                 var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                        close
                                          (var_b"b",
                                           ite(var_b"b",
                                               mb(ite(bop(In,var_w("Rd",4),sl[lw(13,4),lw(15,4)]),
                                                      call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"MoveToRegisterFromBankedOrSpecial"],
                                                         @{theory} ),mu(lu,qTy)),
                                                  close
                                                    (var_a HOLogic.unitT,
                                                     mu(call
                                                          ("instruction.System",@{typ instruction},
                                                           call
                                                             ("System.MoveToRegisterFromBankedOrSpecial",
                                                              @{typ System},
                                                              tp[eq(mop(Cast w1,ll[var_b"b'20"]),
                                                                    lw(1,1)),
                                                                 cc[mop(Cast w1,ll[var_b"b'4"]),
                                                                    mop(Cast w4,
                                                                        ll[var_b"b'19",var_b"b'18",
                                                                           var_b"b'17",var_b"b'16"])],
                                                                 var_w("Rd",4)],@{theory} ),@{theory} ),
                                                        qTy))),
                                               call
                                                 ("Skip",
                                                  @{typ
                                                  "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                  lu,@{theory} )))))))),
                           (bop(And,mop(Not,var_b"b'26"),
                                bop(And,var_b"b'25",
                                    bop(And,var_b"b'24",
                                        bop(And,var_b"b'23",
                                            bop(And,var_b"b'22",
                                                bop(And,var_b"b'21",
                                                    bop(And,mop(Not,var_b"b'14"),
                                                        bop(And,mop(Not,var_b"b'12"),
                                                            mop(Not,var_b"b'5"))))))))),
                            let'
                              (var_w("Rd",4),
                               mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                               mb(call
                                    ("ThumbCondition",
                                     @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                     @{theory} ),
                                  close
                                    (var_w("v",4),
                                     mb(mb(mb(call
                                                ("HaveThumb2",
                                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                 lu,@{theory} ),
                                              close(var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                           close
                                             (var("v",@{typ "4 word \<times> bool"}),
                                              call
                                                ("Do",
                                                 @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                 var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                        close
                                          (var_b"b",
                                           ite(var_b"b",
                                               mb(ite(bop(In,var_w("Rd",4),sl[lw(13,4),lw(15,4)]),
                                                      call
                                                        ("DECODE_UNPREDICTABLE",
                                                         @{typ
                                                         "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                         tp[var("mc",@{typ MachineCode}),
                                                            ls"MoveToRegisterFromSpecial"],@{theory} ),
                                                      mu(lu,qTy)),
                                                  close
                                                    (var_a HOLogic.unitT,
                                                     mu(call
                                                          ("instruction.System",@{typ instruction},
                                                           call
                                                             ("System.MoveToRegisterFromSpecial",
                                                              @{typ System},
                                                              tp[eq(mop(Cast w1,ll[var_b"b'20"]),
                                                                    lw(1,1)),var_w("Rd",4)],
                                                              @{theory} ),@{theory} ),qTy))),
                                               call
                                                 ("Skip",
                                                  @{typ
                                                  "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                  lu,@{theory} )))))))),
                           (bop(And,var_b"b'26",
                                bop(And,var_b"b'25",
                                    bop(And,var_b"b'24",
                                        bop(And,var_b"b'23",
                                            bop(And,var_b"b'22",
                                                bop(And,var_b"b'21",
                                                    bop(And,mop(Not,var_b"b'20"),
                                                        bop(And,mop(Not,var_b"b'14"),
                                                            bop(And,mop(Not,var_b"b'13"),
                                                                mop(Not,var_b"b'12")))))))))),
                            mb(call
                                 ("ThumbCondition",
                                  @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,@{theory} ),
                               close
                                 (var_w("v",4),
                                  mb(mb(mb(call
                                             ("HaveVirtExt",
                                              @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                              @{theory} ),
                                           close(var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                        close
                                          (var("v",@{typ "4 word \<times> bool"}),
                                           call
                                             ("Do",
                                              @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                              var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                     close
                                       (var_b"b",
                                        ite(var_b"b",
                                            mb(call
                                                 ("InITBlock",
                                                  @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                  lu,@{theory} ),
                                               close
                                                 (var_b"v",
                                                  mb(ite(var_b"v",
                                                         call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (unit \<times> 'b state_scheme)"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"HypervisorCall"],@{theory} ),
                                                         mu(lu,qTy)),
                                                     close
                                                       (var_a HOLogic.unitT,
                                                        mu(call
                                                             ("instruction.System",
                                                              @{typ instruction},
                                                              call
                                                                ("System.HypervisorCall",
                                                                 @{typ System},
                                                                 cc[mop(Cast w4,
                                                                        ll[var_b"b'19",var_b"b'18",
                                                                           var_b"b'17",var_b"b'16"]),
                                                                    mop(Cast (Word_Lib.mk_wordT 12),
                                                                        ll[var_b"b'11",var_b"b'10",
                                                                           var_b"b'9",var_b"b'8",
                                                                           var_b"b'7",var_b"b'6",
                                                                           var_b"b'5",var_b"b'4",
                                                                           var_b"b'3",var_b"b'2",
                                                                           var_b"b'1",var_b"b'0"])],
                                                                 @{theory} ),@{theory} ),qTy))))),
                                            call
                                              ("Skip",
                                               @{typ
                                               "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                               lu,@{theory} ))))))),
                           (bop(And,var_b"b'26",
                                bop(And,var_b"b'25",
                                    bop(And,var_b"b'24",
                                        bop(And,var_b"b'23",
                                            bop(And,var_b"b'22",
                                                bop(And,var_b"b'21",
                                                    bop(And,var_b"b'20",
                                                        bop(And,mop(Not,var_b"b'14"),
                                                            bop(And,mop(Not,var_b"b'13"),
                                                                mop(Not,var_b"b'12")))))))))),
                            mb(call
                                 ("ThumbCondition",
                                  @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,@{theory} ),
                               close
                                 (var_w("v",4),
                                  mb(mb(mb(call
                                             ("HaveSecurityExt",
                                              @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                              @{theory ARM_Monadic}),
                                           close
                                             (var_b"v0",
                                              mb(ite(var_b"v0",
                                                     mb(mr(close
                                                             (var("s",qTy),
                                                              call
                                                                ("state.Architecture",
                                                                 @{typ Architecture},var("s",qTy),
                                                                 @{theory} ))),
                                                        close
                                                          (var("v",@{typ Architecture}),
                                                           mb(mu(eq(var("v",@{typ Architecture}),
                                                                    lc("ARMv6K","Architecture",
                                                                       @{theory} )),qTy),
                                                              close
                                                                (var_b"v",mu(mop(Not,var_b"v"),qTy))))),
                                                     mu(lf,qTy)),
                                                 close(var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))))),
                                        close
                                          (var("v",@{typ "4 word \<times> bool"}),
                                           call
                                             ("Do",
                                              @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                              var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                     close
                                       (var_b"b",
                                        ite(var_b"b",
                                            mb(call
                                                 ("InITBlock",
                                                  @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                  lu,@{theory} ),
                                               close
                                                 (var_b"v",
                                                  mb(mb(ite(var_b"v",
                                                            mb(call
                                                                 ("LastInITBlock",
                                                                  @{typ
                                                                  "'b state_scheme \<Rightarrow>
                                                                   (bool \<times> 'b state_scheme)"},lu,
                                                                  @{theory} ),
                                                               close
                                                                 (var_b"v",mu(mop(Not,var_b"v"),qTy))),
                                                            mu(lf,qTy)),
                                                        close
                                                          (var_b"b",
                                                           ite(var_b"b",
                                                               call
                                                                 ("DECODE_UNPREDICTABLE",
                                                                  @{typ
                                                                  "'b state_scheme \<Rightarrow>
                                                                   (unit \<times> 'b state_scheme)"},
                                                                  tp[var("mc",@{typ MachineCode}),
                                                                     ls"SecureMonitorCall"],
                                                                  @{theory} ),mu(lu,qTy)))),
                                                     close
                                                       (var_a HOLogic.unitT,
                                                        mu(call
                                                             ("instruction.System",
                                                              @{typ instruction},
                                                              call
                                                                ("System.SecureMonitorCall",
                                                                 @{typ System},
                                                                 mop(Cast w4,
                                                                     ll[var_b"b'19",var_b"b'18",
                                                                        var_b"b'17",var_b"b'16"]),
                                                                 @{theory} ),@{theory} ),qTy))))),
                                            call
                                              ("Skip",
                                               @{typ
                                               "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                               lu,@{theory} ))))))),
                           (bop(And,var_b"b'26",
                                bop(And,var_b"b'25",
                                    bop(And,var_b"b'24",
                                        bop(And,var_b"b'23",
                                            bop(And,var_b"b'22",
                                                bop(And,var_b"b'21",
                                                    bop(And,var_b"b'20",
                                                        bop(And,mop(Not,var_b"b'14"),
                                                            bop(And,var_b"b'13",mop(Not,var_b"b'12")))))))))),
                            mb(call
                                 ("ThumbCondition",
                                  @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,@{theory} ),
                               close
                                 (var_w("v",4),
                                  mb(mb(mb(call
                                             ("HaveThumb2",
                                              @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                              @{theory} ),
                                           close(var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                        close
                                          (var("v",@{typ "4 word \<times> bool"}),
                                           call
                                             ("Do",
                                              @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                              var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                     close
                                       (var_b"b",
                                        ite(var_b"b",
                                            mu(call
                                                 ("instruction.Undefined",@{typ instruction},
                                                  mop(Cast w32,
                                                      cc[mop(Cast w4,
                                                             ll[var_b"b'19",var_b"b'18",var_b"b'17",
                                                                var_b"b'16"]),
                                                         mop(Cast (Word_Lib.mk_wordT 12),
                                                             ll[var_b"b'11",var_b"b'10",var_b"b'9",
                                                                var_b"b'8",var_b"b'7",var_b"b'6",
                                                                var_b"b'5",var_b"b'4",var_b"b'3",
                                                                var_b"b'2",var_b"b'1",var_b"b'0"])]),
                                                  @{theory} ),qTy),
                                            call
                                              ("Skip",
                                               @{typ
                                               "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                               lu,@{theory} ))))))),
                           (bop(And,mop(Not,var_b"b'14"),mop(Not,var_b"b'12")),
                            mb(call
                                 ("HaveThumb2",@{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                  lu,@{theory} ),
                               close
                                 (var_b"v",
                                  mb(mb(mu(tp[mop(Cast w4,
                                                  ll[var_b"b'25",var_b"b'24",var_b"b'23",var_b"b'22"]),
                                              var_b"v"],qTy),
                                        close
                                          (var("v",@{typ "4 word \<times> bool"}),
                                           call
                                             ("Do",
                                              @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                              var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                     close
                                       (var_b"b",
                                        ite(var_b"b",
                                            mb(call
                                                 ("InITBlock",
                                                  @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                  lu,@{theory} ),
                                               close
                                                 (var_b"v",
                                                  mb(ite(var_b"v",
                                                         call
                                                           ("DECODE_UNPREDICTABLE",
                                                            @{typ
                                                            "'b state_scheme \<Rightarrow>
                                                             (unit \<times> 'b state_scheme)"},
                                                            tp[var("mc",@{typ MachineCode}),
                                                               ls"BranchTarget"],@{theory} ),
                                                         mu(lu,qTy)),
                                                     close
                                                       (var_a HOLogic.unitT,
                                                        mu(call
                                                             ("instruction.Branch",
                                                              @{typ instruction},
                                                              call
                                                                ("Branch.BranchTarget",
                                                                 @{typ Branch},
                                                                 mop(SE w32,
                                                                     cc[mop(Cast w1,ll[var_b"b'26"]),
                                                                        mop(Cast w1,ll[var_b"b'11"]),
                                                                        mop(Cast w1,ll[var_b"b'13"]),
                                                                        mop(Cast
                                                                              (Word_Lib.mk_wordT 6),
                                                                            ll[var_b"b'21",
                                                                               var_b"b'20",
                                                                               var_b"b'19",
                                                                               var_b"b'18",
                                                                               var_b"b'17",
                                                                               var_b"b'16"]),
                                                                        mop(Cast
                                                                              (Word_Lib.mk_wordT 11),
                                                                            ll[var_b"b'10",
                                                                               var_b"b'9",
                                                                               var_b"b'8",
                                                                               var_b"b'7",
                                                                               var_b"b'6",
                                                                               var_b"b'5",
                                                                               var_b"b'4",
                                                                               var_b"b'3",
                                                                               var_b"b'2",
                                                                               var_b"b'1",var_b"b'0"]),
                                                                        lw(0,1)]),@{theory} ),
                                                              @{theory} ),qTy))))),
                                            call
                                              ("Skip",
                                               @{typ
                                               "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                               lu,@{theory} ))))))),
                           (var_b"b'12",
                            let'
                              (var_w("S",1),mop(Cast w1,ll[var_b"b'26"]),
                               let'
                                 (var_w("J2",1),mop(Cast w1,ll[var_b"b'11"]),
                                  let'
                                    (var_w("J1",1),mop(Cast w1,ll[var_b"b'13"]),
                                     let'
                                       (var_w("L",1),mop(Cast w1,ll[var_b"b'14"]),
                                        mb(call
                                             ("ThumbCondition",
                                              @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},
                                              lu,@{theory} ),
                                           close
                                             (var_w("v",4),
                                              mb(mb(mb(ite(bop(And,eq(var_w("L",1),lw(1,1)),
                                                               bop(And,eq(var_w("J1",1),lw(1,1)),
                                                                   eq(var_w("J1",1),var_w("J2",1)))),
                                                           mu(lt,qTy),
                                                           call
                                                             ("HaveThumb2",
                                                              @{typ
                                                              "'b state_scheme \<Rightarrow>
                                                               (bool \<times> 'b state_scheme)"},lu,@{theory} )),
                                                       close
                                                         (var_b"v0",
                                                          mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                                    close
                                                      (var("v",@{typ "4 word \<times> bool"}),
                                                       call
                                                         ("Do",
                                                          @{typ
                                                          "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                          var("v",@{typ "4 word \<times> bool"}),
                                                          @{theory} ))),
                                                 close
                                                   (var_b"b",
                                                    ite(var_b"b",
                                                        mb(call
                                                             ("InITBlock",
                                                              @{typ
                                                              "'b state_scheme \<Rightarrow>
                                                               (bool \<times> 'b state_scheme)"},lu,@{theory} ),
                                                           close
                                                             (var_b"v",
                                                              mb(mb(ite(var_b"v",
                                                                        mb(call
                                                                             ("LastInITBlock",
                                                                              @{typ
                                                                              "'b state_scheme \<Rightarrow>
                                                                               (bool \<times> 'b state_scheme)"},
                                                                              lu,@{theory} ),
                                                                           close
                                                                             (var_b"v",
                                                                              mu(mop(Not,var_b"v"),
                                                                                 qTy))),mu(lf,qTy)),
                                                                    close
                                                                      (var_b"b",
                                                                       ite(var_b"b",
                                                                           call
                                                                             ("DECODE_UNPREDICTABLE",
                                                                              @{typ
                                                                              "'b state_scheme \<Rightarrow>
                                                                               (unit \<times> 'b state_scheme)"},
                                                                              tp[var("mc",
                                                                                     @{typ MachineCode}),
                                                                                 ls
                                                                                  "BranchTarget or BranchLinkExchangeImmediate"],
                                                                              @{theory} ),mu(lu,qTy)))),
                                                                 close
                                                                   (var_a HOLogic.unitT,
                                                                    mu(let'
                                                                         (var_w("imm32",32),
                                                                          mop(SE w32,
                                                                              cc[var_w("S",1),
                                                                                 mop(BNot,
                                                                                     bop(BXor,
                                                                                         var_w("J1",1),
                                                                                         var_w("S",1))),
                                                                                 mop(BNot,
                                                                                     bop(BXor,
                                                                                         var_w("J2",1),
                                                                                         var_w("S",1))),
                                                                                 mop(Cast
                                                                                       (Word_Lib.mk_wordT 10),
                                                                                     ll[var_b"b'25",
                                                                                        var_b"b'24",
                                                                                        var_b"b'23",
                                                                                        var_b"b'22",
                                                                                        var_b"b'21",
                                                                                        var_b"b'20",
                                                                                        var_b"b'19",
                                                                                        var_b"b'18",
                                                                                        var_b"b'17",
                                                                                        var_b"b'16"]),
                                                                                 mop(Cast
                                                                                       (Word_Lib.mk_wordT 11),
                                                                                     ll[var_b"b'10",
                                                                                        var_b"b'9",
                                                                                        var_b"b'8",
                                                                                        var_b"b'7",
                                                                                        var_b"b'6",
                                                                                        var_b"b'5",
                                                                                        var_b"b'4",
                                                                                        var_b"b'3",
                                                                                        var_b"b'2",
                                                                                        var_b"b'1",
                                                                                        var_b"b'0"]),
                                                                                 lw(0,1)]),
                                                                          ite(eq(var_w("L",1),
                                                                                 lw(1,1)),
                                                                              call
                                                                                ("instruction.Branch",
                                                                                 @{typ instruction},
                                                                                 call
                                                                                   ("Branch.BranchLinkExchangeImmediate",
                                                                                    @{typ Branch},
                                                                                    tp[lc("InstrSet_Thumb",
                                                                                          "InstrSet",
                                                                                          @{theory} ),
                                                                                       var_w("imm32",32)],
                                                                                    @{theory} ),
                                                                                 @{theory} ),
                                                                              call
                                                                                ("instruction.Branch",
                                                                                 @{typ instruction},
                                                                                 call
                                                                                   ("Branch.BranchTarget",
                                                                                    @{typ Branch},
                                                                                    var_w("imm32",32),
                                                                                    @{theory} ),
                                                                                 @{theory} ))),qTy))))),
                                                        call
                                                          ("Skip",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (instruction \<times> 'b state_scheme)"},lu,
                                                           @{theory} ))))))))))),
                           (bop(And,var_b"b'14",mop(Not,var_b"b'12")),
                            let'
                              (var_w("S",1),mop(Cast w1,ll[var_b"b'26"]),
                               let'
                                 (var_w("J2",1),mop(Cast w1,ll[var_b"b'11"]),
                                  let'
                                    (var_w("J1",1),mop(Cast w1,ll[var_b"b'13"]),
                                     mb(call
                                          ("ThumbCondition",
                                           @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                           @{theory} ),
                                        close
                                          (var_w("v",4),
                                           mb(mb(mb(call
                                                      ("CurrentInstrSet",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow>
                                                        (InstrSet \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic}),
                                                    close
                                                      (var("v0",@{typ InstrSet}),
                                                       mb(mb(mb(mb(mu(eq(var("v0",@{typ InstrSet}),
                                                                         lc("InstrSet_ThumbEE",
                                                                            "InstrSet",@{theory} )),
                                                                      qTy),
                                                                   close
                                                                     (var_b"b",
                                                                      mu(bop(Or,var_b"b",
                                                                             eq(mop(Cast w1,
                                                                                    ll[var_b"b'0"]),
                                                                                lw(1,1))),qTy))),
                                                                close
                                                                  (var_b"v",
                                                                   mu(mop(Not,var_b"v"),qTy))),
                                                             close
                                                               (var_b"b",
                                                                ite(var_b"b",
                                                                    ite(bop(And,
                                                                            eq(var_w("J1",1),lw(1,1)),
                                                                            eq(var_w("J1",1),
                                                                               var_w("J2",1))),
                                                                        mb(call
                                                                             ("ArchVersion",
                                                                              @{typ
                                                                              "'b state_scheme \<Rightarrow>
                                                                               (nat \<times> 'b state_scheme)"},
                                                                              lu,@{theory} ),
                                                                           close
                                                                             (var_n"v",
                                                                              mu(bop(Ge,var_n"v",
                                                                                     ln 5),qTy))),
                                                                        call
                                                                          ("HaveThumb2",
                                                                           @{typ
                                                                           "'b state_scheme \<Rightarrow>
                                                                            (bool \<times> 'b state_scheme)"},
                                                                           lu,@{theory} )),mu(lf,qTy)))),
                                                          close
                                                            (var_b"v0",
                                                             mu(tp[var_w("v",4),var_b"v0"],qTy))))),
                                                 close
                                                   (var("v",@{typ "4 word \<times> bool"}),
                                                    call
                                                      ("Do",
                                                       @{typ
                                                       "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                       var("v",@{typ "4 word \<times> bool"}),
                                                       @{theory} ))),
                                              close
                                                (var_b"b",
                                                 ite(var_b"b",
                                                     mb(call
                                                          ("InITBlock",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (bool \<times> 'b state_scheme)"},lu,@{theory} ),
                                                        close
                                                          (var_b"v",
                                                           mb(mb(ite(var_b"v",
                                                                     mb(call
                                                                          ("LastInITBlock",
                                                                           @{typ
                                                                           "'b state_scheme \<Rightarrow>
                                                                            (bool \<times> 'b state_scheme)"},
                                                                           lu,@{theory} ),
                                                                        close
                                                                          (var_b"v",
                                                                           mu(mop(Not,var_b"v"),qTy))),
                                                                     mu(lf,qTy)),
                                                                 close
                                                                   (var_b"b",
                                                                    ite(var_b"b",
                                                                        call
                                                                          ("DECODE_UNPREDICTABLE",
                                                                           @{typ
                                                                           "'b state_scheme \<Rightarrow>
                                                                            (unit \<times> 'b state_scheme)"},
                                                                           tp[var("mc",
                                                                                  @{typ MachineCode}),
                                                                              ls
                                                                               "BranchLinkExchangeImmediate"],
                                                                           @{theory} ),mu(lu,qTy)))),
                                                              close
                                                                (var_a HOLogic.unitT,
                                                                 mu(call
                                                                      ("instruction.Branch",
                                                                       @{typ instruction},
                                                                       call
                                                                         ("Branch.BranchLinkExchangeImmediate",
                                                                          @{typ Branch},
                                                                          tp[lc("InstrSet_ARM",
                                                                                "InstrSet",@{theory} ),
                                                                             mop(SE w32,
                                                                                 cc[var_w("S",1),
                                                                                    mop(BNot,
                                                                                        bop(BXor,
                                                                                            var_w("J1",1),
                                                                                            var_w("S",1))),
                                                                                    mop(BNot,
                                                                                        bop(BXor,
                                                                                            var_w("J2",1),
                                                                                            var_w("S",1))),
                                                                                    mop(Cast
                                                                                          (Word_Lib.mk_wordT 10),
                                                                                        ll[var_b"b'25",
                                                                                           var_b"b'24",
                                                                                           var_b"b'23",
                                                                                           var_b"b'22",
                                                                                           var_b"b'21",
                                                                                           var_b"b'20",
                                                                                           var_b"b'19",
                                                                                           var_b"b'18",
                                                                                           var_b"b'17",
                                                                                           var_b"b'16"]),
                                                                                    mop(Cast
                                                                                          (Word_Lib.mk_wordT 10),
                                                                                        ll[var_b"b'10",
                                                                                           var_b"b'9",
                                                                                           var_b"b'8",
                                                                                           var_b"b'7",
                                                                                           var_b"b'6",
                                                                                           var_b"b'5",
                                                                                           var_b"b'4",
                                                                                           var_b"b'3",
                                                                                           var_b"b'2",
                                                                                           var_b"b'1"]),
                                                                                    lw(0,2)])],
                                                                          @{theory} ),@{theory} ),qTy))))),
                                                     call
                                                       ("Skip",
                                                        @{typ
                                                        "'b state_scheme \<Rightarrow>
                                                         (instruction \<times> 'b state_scheme)"},lu,@{theory} ))))))))))],
                          call
                            ("UndefinedThumb",
                             @{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,@{theory} )),
                      call
                        ("UndefinedThumb",@{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                         lu,@{theory} ))),
                 (bop(And,var_b"b'31",bop(And,var_b"b'30",bop(And,var_b"b'29",var_b"b'28"))),
                  itb([(mop(Not,var_b"b'25"),
                        let'
                          (var_w("Rn",4),
                           mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           let'
                             (var_w("S",1),mop(Cast w1,ll[var_b"b'20"]),
                              let'
                                (var_w("Rd",4),
                                 mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                 mb(call
                                      ("ThumbCondition",
                                       @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                       @{theory} ),
                                    close
                                      (var_w("v",4),
                                       mb(mb(mb(call
                                                  ("HaveThumb2",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                                   @{theory} ),
                                                close(var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                             close
                                               (var("v",@{typ "4 word \<times> bool"}),
                                                call
                                                  ("Do",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                   var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                          close
                                            (var_b"b",
                                             ite(var_b"b",
                                                 let'
                                                   (var_w("imm12",12),
                                                    cc[mop(Cast w1,ll[var_b"b'26"]),
                                                       mop(Cast (Word_Lib.mk_wordT 3),
                                                           ll[var_b"b'14",var_b"b'13",var_b"b'12"]),
                                                       mop(Cast w8,
                                                           ll[var_b"b'7",var_b"b'6",var_b"b'5",
                                                              var_b"b'4",var_b"b'3",var_b"b'2",
                                                              var_b"b'1",var_b"b'0"])],
                                                    mb(mr(close
                                                            (var("s",qTy),
                                                             call
                                                               ("state.CPSR",@{typ PSR},
                                                                var("s",qTy),@{theory} ))),
                                                       close
                                                         (var("v",@{typ PSR}),
                                                          mb(mb(mb(mu(call
                                                                        ("PSR.C",HOLogic.boolT,
                                                                         var("v",@{typ PSR}),
                                                                         @{theory} ),qTy),
                                                                   close
                                                                     (var_b"v",
                                                                      mu(tp[var_w("imm12",12),
                                                                            var_b"v"],qTy))),
                                                                close
                                                                  (var("v",
                                                                       @{typ
                                                                       "12 word \<times> bool"}),
                                                                   call
                                                                     ("ThumbExpandImm_C",
                                                                      @{typ
                                                                      "'b state_scheme \<Rightarrow>
                                                                       ((32 word \<times> bool) \<times>
                                                                        'b state_scheme)"},
                                                                      var("v",
                                                                          @{typ
                                                                          "12 word \<times> bool"}),
                                                                      @{theory} ))),
                                                             close
                                                               (var("x",
                                                                    @{typ "32 word \<times> bool"}),
                                                                let'
                                                                  (var_b"setflags",
                                                                   eq(var_w("S",1),lw(1,1)),
                                                                   itb([(bop(And,
                                                                             eq(mop(Cast w4,
                                                                                    ll[var_b"b'24",
                                                                                       var_b"b'23",
                                                                                       var_b"b'22",
                                                                                       var_b"b'21"]),
                                                                                lw(0,4)),
                                                                             bop(And,
                                                                                 eq(var_w("Rd",4),
                                                                                    lw(15,4)),
                                                                                 eq(var_w("S",1),
                                                                                    lw(1,1)))),
                                                                         mb(ite(bop(In,
                                                                                    var_w("Rn",4),
                                                                                    sl[lw(13,4),
                                                                                       lw(15,4)]),
                                                                                call
                                                                                  ("DECODE_UNPREDICTABLE",
                                                                                   @{typ
                                                                                   "'b state_scheme \<Rightarrow>
                                                                                    (unit \<times>
                                                                                     'b state_scheme)"},
                                                                                   tp[var("mc",
                                                                                          @{typ MachineCode}),
                                                                                      ls
                                                                                       "TST (immediate)"],
                                                                                   @{theory} ),
                                                                                mu(lu,qTy)),
                                                                            close
                                                                              (var_a HOLogic.unitT,
                                                                               mu(call
                                                                                    ("instruction.Data",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Data.TestCompareImmediate",
                                                                                        @{typ Data},
                                                                                        tp[lw(0,2),
                                                                                           var_w("Rn",4),
                                                                                           var_w("imm12",12)],
                                                                                        @{theory} ),
                                                                                     @{theory} ),qTy)))),
                                                                        (eq(mop(Cast w4,
                                                                                ll[var_b"b'24",
                                                                                   var_b"b'23",
                                                                                   var_b"b'22",
                                                                                   var_b"b'21"]),
                                                                            lw(0,4)),
                                                                         mb(ite(bop(Or,
                                                                                    eq(var_w("Rd",4),
                                                                                       lw(13,4)),
                                                                                    bop(Or,
                                                                                        bop(And,
                                                                                            eq(var_w("Rd",4),
                                                                                               lw(15,
                                                                                                  4)),
                                                                                            mop(Not,
                                                                                                var_b"setflags")),
                                                                                        bop(In,
                                                                                            var_w("Rn",4),
                                                                                            sl[lw(13,
                                                                                                  4),
                                                                                               lw(15,
                                                                                                  4)]))),
                                                                                call
                                                                                  ("DECODE_UNPREDICTABLE",
                                                                                   @{typ
                                                                                   "'b state_scheme \<Rightarrow>
                                                                                    (unit \<times>
                                                                                     'b state_scheme)"},
                                                                                   tp[var("mc",
                                                                                          @{typ MachineCode}),
                                                                                      ls
                                                                                       "AND (immediate)"],
                                                                                   @{theory} ),
                                                                                mu(lu,qTy)),
                                                                            close
                                                                              (var_a HOLogic.unitT,
                                                                               mu(call
                                                                                    ("instruction.Data",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Data.ArithLogicImmediate",
                                                                                        @{typ Data},
                                                                                        tp[lw(0,4),
                                                                                           var_b"setflags",
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("imm12",12)],
                                                                                        @{theory} ),
                                                                                     @{theory} ),qTy)))),
                                                                        (eq(mop(Cast w4,
                                                                                ll[var_b"b'24",
                                                                                   var_b"b'23",
                                                                                   var_b"b'22",
                                                                                   var_b"b'21"]),
                                                                            lw(1,4)),
                                                                         mb(ite(bop(Or,
                                                                                    bop(In,
                                                                                        var_w("Rd",4),
                                                                                        sl[lw(13,4),
                                                                                           lw(15,4)]),
                                                                                    bop(In,
                                                                                        var_w("Rn",4),
                                                                                        sl[lw(13,4),
                                                                                           lw(15,4)])),
                                                                                call
                                                                                  ("DECODE_UNPREDICTABLE",
                                                                                   @{typ
                                                                                   "'b state_scheme \<Rightarrow>
                                                                                    (unit \<times>
                                                                                     'b state_scheme)"},
                                                                                   tp[var("mc",
                                                                                          @{typ MachineCode}),
                                                                                      ls
                                                                                       "BIC (immediate)"],
                                                                                   @{theory} ),
                                                                                mu(lu,qTy)),
                                                                            close
                                                                              (var_a HOLogic.unitT,
                                                                               mu(call
                                                                                    ("instruction.Data",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Data.ArithLogicImmediate",
                                                                                        @{typ Data},
                                                                                        tp[lw(14,4),
                                                                                           var_b"setflags",
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("imm12",12)],
                                                                                        @{theory} ),
                                                                                     @{theory} ),qTy)))),
                                                                        (bop(And,
                                                                             eq(mop(Cast w4,
                                                                                    ll[var_b"b'24",
                                                                                       var_b"b'23",
                                                                                       var_b"b'22",
                                                                                       var_b"b'21"]),
                                                                                lw(2,4)),
                                                                             eq(var_w("Rn",4),
                                                                                lw(15,4))),
                                                                         mb(ite(bop(In,
                                                                                    var_w("Rd",4),
                                                                                    sl[lw(13,4),
                                                                                       lw(15,4)]),
                                                                                call
                                                                                  ("DECODE_UNPREDICTABLE",
                                                                                   @{typ
                                                                                   "'b state_scheme \<Rightarrow>
                                                                                    (unit \<times>
                                                                                     'b state_scheme)"},
                                                                                   tp[var("mc",
                                                                                          @{typ MachineCode}),
                                                                                      ls
                                                                                       "MOV (immediate)"],
                                                                                   @{theory} ),
                                                                                mu(lu,qTy)),
                                                                            close
                                                                              (var_a HOLogic.unitT,
                                                                               mu(call
                                                                                    ("instruction.Data",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Data.Move",
                                                                                        @{typ Data},
                                                                                        tp[var_b"setflags",
                                                                                           lf,
                                                                                           var_w("Rd",4),
                                                                                           var_w("imm12",12)],
                                                                                        @{theory} ),
                                                                                     @{theory} ),qTy)))),
                                                                        (eq(mop(Cast w4,
                                                                                ll[var_b"b'24",
                                                                                   var_b"b'23",
                                                                                   var_b"b'22",
                                                                                   var_b"b'21"]),
                                                                            lw(2,4)),
                                                                         mb(ite(bop(Or,
                                                                                    bop(In,
                                                                                        var_w("Rd",4),
                                                                                        sl[lw(13,4),
                                                                                           lw(15,4)]),
                                                                                    eq(var_w("Rn",4),
                                                                                       lw(13,4))),
                                                                                call
                                                                                  ("DECODE_UNPREDICTABLE",
                                                                                   @{typ
                                                                                   "'b state_scheme \<Rightarrow>
                                                                                    (unit \<times>
                                                                                     'b state_scheme)"},
                                                                                   tp[var("mc",
                                                                                          @{typ MachineCode}),
                                                                                      ls
                                                                                       "ORR (immediate)"],
                                                                                   @{theory} ),
                                                                                mu(lu,qTy)),
                                                                            close
                                                                              (var_a HOLogic.unitT,
                                                                               mu(call
                                                                                    ("instruction.Data",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Data.ArithLogicImmediate",
                                                                                        @{typ Data},
                                                                                        tp[lw(12,4),
                                                                                           var_b"setflags",
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("imm12",12)],
                                                                                        @{theory} ),
                                                                                     @{theory} ),qTy)))),
                                                                        (bop(And,
                                                                             eq(mop(Cast w4,
                                                                                    ll[var_b"b'24",
                                                                                       var_b"b'23",
                                                                                       var_b"b'22",
                                                                                       var_b"b'21"]),
                                                                                lw(3,4)),
                                                                             eq(var_w("Rn",4),
                                                                                lw(15,4))),
                                                                         mb(ite(bop(In,
                                                                                    var_w("Rd",4),
                                                                                    sl[lw(13,4),
                                                                                       lw(15,4)]),
                                                                                call
                                                                                  ("DECODE_UNPREDICTABLE",
                                                                                   @{typ
                                                                                   "'b state_scheme \<Rightarrow>
                                                                                    (unit \<times>
                                                                                     'b state_scheme)"},
                                                                                   tp[var("mc",
                                                                                          @{typ MachineCode}),
                                                                                      ls
                                                                                       "MVN (immediate)"],
                                                                                   @{theory} ),
                                                                                mu(lu,qTy)),
                                                                            close
                                                                              (var_a HOLogic.unitT,
                                                                               mu(call
                                                                                    ("instruction.Data",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Data.Move",
                                                                                        @{typ Data},
                                                                                        tp[var_b"setflags",
                                                                                           lt,
                                                                                           var_w("Rd",4),
                                                                                           var_w("imm12",12)],
                                                                                        @{theory} ),
                                                                                     @{theory} ),qTy)))),
                                                                        (eq(mop(Cast w4,
                                                                                ll[var_b"b'24",
                                                                                   var_b"b'23",
                                                                                   var_b"b'22",
                                                                                   var_b"b'21"]),
                                                                            lw(3,4)),
                                                                         mb(ite(bop(Or,
                                                                                    bop(In,
                                                                                        var_w("Rd",4),
                                                                                        sl[lw(13,4),
                                                                                           lw(15,4)]),
                                                                                    eq(var_w("Rn",4),
                                                                                       lw(13,4))),
                                                                                call
                                                                                  ("DECODE_UNPREDICTABLE",
                                                                                   @{typ
                                                                                   "'b state_scheme \<Rightarrow>
                                                                                    (unit \<times>
                                                                                     'b state_scheme)"},
                                                                                   tp[var("mc",
                                                                                          @{typ MachineCode}),
                                                                                      ls
                                                                                       "ORN (immediate)"],
                                                                                   @{theory} ),
                                                                                mu(lu,qTy)),
                                                                            close
                                                                              (var_a HOLogic.unitT,
                                                                               mu(call
                                                                                    ("instruction.Data",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Data.ArithLogicImmediate",
                                                                                        @{typ Data},
                                                                                        tp[lw(15,4),
                                                                                           var_b"setflags",
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("imm12",12)],
                                                                                        @{theory} ),
                                                                                     @{theory} ),qTy)))),
                                                                        (bop(And,
                                                                             eq(mop(Cast w4,
                                                                                    ll[var_b"b'24",
                                                                                       var_b"b'23",
                                                                                       var_b"b'22",
                                                                                       var_b"b'21"]),
                                                                                lw(4,4)),
                                                                             bop(And,
                                                                                 eq(var_w("Rd",4),
                                                                                    lw(15,4)),
                                                                                 eq(var_w("S",1),
                                                                                    lw(1,1)))),
                                                                         mb(ite(bop(In,
                                                                                    var_w("Rn",4),
                                                                                    sl[lw(13,4),
                                                                                       lw(15,4)]),
                                                                                call
                                                                                  ("DECODE_UNPREDICTABLE",
                                                                                   @{typ
                                                                                   "'b state_scheme \<Rightarrow>
                                                                                    (unit \<times>
                                                                                     'b state_scheme)"},
                                                                                   tp[var("mc",
                                                                                          @{typ MachineCode}),
                                                                                      ls
                                                                                       "TEQ (immediate)"],
                                                                                   @{theory} ),
                                                                                mu(lu,qTy)),
                                                                            close
                                                                              (var_a HOLogic.unitT,
                                                                               mu(call
                                                                                    ("instruction.Data",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Data.TestCompareImmediate",
                                                                                        @{typ Data},
                                                                                        tp[lw(1,2),
                                                                                           var_w("Rn",4),
                                                                                           var_w("imm12",12)],
                                                                                        @{theory} ),
                                                                                     @{theory} ),qTy)))),
                                                                        (eq(mop(Cast w4,
                                                                                ll[var_b"b'24",
                                                                                   var_b"b'23",
                                                                                   var_b"b'22",
                                                                                   var_b"b'21"]),
                                                                            lw(4,4)),
                                                                         mb(ite(bop(Or,
                                                                                    eq(var_w("Rd",4),
                                                                                       lw(13,4)),
                                                                                    bop(Or,
                                                                                        bop(And,
                                                                                            eq(var_w("Rd",4),
                                                                                               lw(15,
                                                                                                  4)),
                                                                                            mop(Not,
                                                                                                var_b"setflags")),
                                                                                        bop(In,
                                                                                            var_w("Rn",4),
                                                                                            sl[lw(13,
                                                                                                  4),
                                                                                               lw(15,
                                                                                                  4)]))),
                                                                                call
                                                                                  ("DECODE_UNPREDICTABLE",
                                                                                   @{typ
                                                                                   "'b state_scheme \<Rightarrow>
                                                                                    (unit \<times>
                                                                                     'b state_scheme)"},
                                                                                   tp[var("mc",
                                                                                          @{typ MachineCode}),
                                                                                      ls
                                                                                       "EOR (immediate)"],
                                                                                   @{theory} ),
                                                                                mu(lu,qTy)),
                                                                            close
                                                                              (var_a HOLogic.unitT,
                                                                               mu(call
                                                                                    ("instruction.Data",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Data.ArithLogicImmediate",
                                                                                        @{typ Data},
                                                                                        tp[lw(1,4),
                                                                                           var_b"setflags",
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("imm12",12)],
                                                                                        @{theory} ),
                                                                                     @{theory} ),qTy)))),
                                                                        (bop(And,
                                                                             eq(mop(Cast w4,
                                                                                    ll[var_b"b'24",
                                                                                       var_b"b'23",
                                                                                       var_b"b'22",
                                                                                       var_b"b'21"]),
                                                                                lw(8,4)),
                                                                             bop(And,
                                                                                 eq(var_w("Rd",4),
                                                                                    lw(15,4)),
                                                                                 eq(var_w("S",1),
                                                                                    lw(1,1)))),
                                                                         mb(ite(eq(var_w("Rn",4),
                                                                                   lw(15,4)),
                                                                                call
                                                                                  ("DECODE_UNPREDICTABLE",
                                                                                   @{typ
                                                                                   "'b state_scheme \<Rightarrow>
                                                                                    (unit \<times>
                                                                                     'b state_scheme)"},
                                                                                   tp[var("mc",
                                                                                          @{typ MachineCode}),
                                                                                      ls
                                                                                       "CMN (immediate)"],
                                                                                   @{theory} ),
                                                                                mu(lu,qTy)),
                                                                            close
                                                                              (var_a HOLogic.unitT,
                                                                               mu(call
                                                                                    ("instruction.Data",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Data.TestCompareImmediate",
                                                                                        @{typ Data},
                                                                                        tp[lw(3,2),
                                                                                           var_w("Rn",4),
                                                                                           var_w("imm12",12)],
                                                                                        @{theory} ),
                                                                                     @{theory} ),qTy)))),
                                                                        (eq(mop(Cast w4,
                                                                                ll[var_b"b'24",
                                                                                   var_b"b'23",
                                                                                   var_b"b'22",
                                                                                   var_b"b'21"]),
                                                                            lw(8,4)),
                                                                         mb(ite(bop(Or,
                                                                                    eq(var_w("Rd",4),
                                                                                       lw(13,4)),
                                                                                    bop(Or,
                                                                                        bop(And,
                                                                                            eq(var_w("Rd",4),
                                                                                               lw(15,
                                                                                                  4)),
                                                                                            mop(Not,
                                                                                                var_b"setflags")),
                                                                                        eq(var_w("Rn",4),
                                                                                           lw(15,4)))),
                                                                                call
                                                                                  ("DECODE_UNPREDICTABLE",
                                                                                   @{typ
                                                                                   "'b state_scheme \<Rightarrow>
                                                                                    (unit \<times>
                                                                                     'b state_scheme)"},
                                                                                   tp[var("mc",
                                                                                          @{typ MachineCode}),
                                                                                      ls
                                                                                       "ADD (immediate)"],
                                                                                   @{theory} ),
                                                                                mu(lu,qTy)),
                                                                            close
                                                                              (var_a HOLogic.unitT,
                                                                               mu(call
                                                                                    ("instruction.Data",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Data.ArithLogicImmediate",
                                                                                        @{typ Data},
                                                                                        tp[lw(4,4),
                                                                                           var_b"setflags",
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("imm12",12)],
                                                                                        @{theory} ),
                                                                                     @{theory} ),qTy)))),
                                                                        (eq(mop(Cast w4,
                                                                                ll[var_b"b'24",
                                                                                   var_b"b'23",
                                                                                   var_b"b'22",
                                                                                   var_b"b'21"]),
                                                                            lw(10,4)),
                                                                         mb(ite(bop(Or,
                                                                                    bop(In,
                                                                                        var_w("Rd",4),
                                                                                        sl[lw(13,4),
                                                                                           lw(15,4)]),
                                                                                    bop(In,
                                                                                        var_w("Rn",4),
                                                                                        sl[lw(13,4),
                                                                                           lw(15,4)])),
                                                                                call
                                                                                  ("DECODE_UNPREDICTABLE",
                                                                                   @{typ
                                                                                   "'b state_scheme \<Rightarrow>
                                                                                    (unit \<times>
                                                                                     'b state_scheme)"},
                                                                                   tp[var("mc",
                                                                                          @{typ MachineCode}),
                                                                                      ls
                                                                                       "ADC (immediate)"],
                                                                                   @{theory} ),
                                                                                mu(lu,qTy)),
                                                                            close
                                                                              (var_a HOLogic.unitT,
                                                                               mu(call
                                                                                    ("instruction.Data",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Data.ArithLogicImmediate",
                                                                                        @{typ Data},
                                                                                        tp[lw(5,4),
                                                                                           var_b"setflags",
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("imm12",12)],
                                                                                        @{theory} ),
                                                                                     @{theory} ),qTy)))),
                                                                        (eq(mop(Cast w4,
                                                                                ll[var_b"b'24",
                                                                                   var_b"b'23",
                                                                                   var_b"b'22",
                                                                                   var_b"b'21"]),
                                                                            lw(11,4)),
                                                                         mb(ite(bop(Or,
                                                                                    bop(In,
                                                                                        var_w("Rd",4),
                                                                                        sl[lw(13,4),
                                                                                           lw(15,4)]),
                                                                                    bop(In,
                                                                                        var_w("Rn",4),
                                                                                        sl[lw(13,4),
                                                                                           lw(15,4)])),
                                                                                call
                                                                                  ("DECODE_UNPREDICTABLE",
                                                                                   @{typ
                                                                                   "'b state_scheme \<Rightarrow>
                                                                                    (unit \<times>
                                                                                     'b state_scheme)"},
                                                                                   tp[var("mc",
                                                                                          @{typ MachineCode}),
                                                                                      ls
                                                                                       "SBC (immediate)"],
                                                                                   @{theory} ),
                                                                                mu(lu,qTy)),
                                                                            close
                                                                              (var_a HOLogic.unitT,
                                                                               mu(call
                                                                                    ("instruction.Data",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Data.ArithLogicImmediate",
                                                                                        @{typ Data},
                                                                                        tp[lw(6,4),
                                                                                           var_b"setflags",
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("imm12",12)],
                                                                                        @{theory} ),
                                                                                     @{theory} ),qTy)))),
                                                                        (bop(And,
                                                                             eq(mop(Cast w4,
                                                                                    ll[var_b"b'24",
                                                                                       var_b"b'23",
                                                                                       var_b"b'22",
                                                                                       var_b"b'21"]),
                                                                                lw(13,4)),
                                                                             bop(And,
                                                                                 eq(var_w("Rd",4),
                                                                                    lw(15,4)),
                                                                                 eq(var_w("S",1),
                                                                                    lw(1,1)))),
                                                                         mb(ite(eq(var_w("Rn",4),
                                                                                   lw(15,4)),
                                                                                call
                                                                                  ("DECODE_UNPREDICTABLE",
                                                                                   @{typ
                                                                                   "'b state_scheme \<Rightarrow>
                                                                                    (unit \<times>
                                                                                     'b state_scheme)"},
                                                                                   tp[var("mc",
                                                                                          @{typ MachineCode}),
                                                                                      ls
                                                                                       "CMP (immediate)"],
                                                                                   @{theory} ),
                                                                                mu(lu,qTy)),
                                                                            close
                                                                              (var_a HOLogic.unitT,
                                                                               mu(call
                                                                                    ("instruction.Data",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Data.TestCompareImmediate",
                                                                                        @{typ Data},
                                                                                        tp[lw(2,2),
                                                                                           var_w("Rn",4),
                                                                                           var_w("imm12",12)],
                                                                                        @{theory} ),
                                                                                     @{theory} ),qTy)))),
                                                                        (eq(mop(Cast w4,
                                                                                ll[var_b"b'24",
                                                                                   var_b"b'23",
                                                                                   var_b"b'22",
                                                                                   var_b"b'21"]),
                                                                            lw(13,4)),
                                                                         mb(ite(bop(Or,
                                                                                    eq(var_w("Rd",4),
                                                                                       lw(13,4)),
                                                                                    bop(Or,
                                                                                        bop(And,
                                                                                            eq(var_w("Rd",4),
                                                                                               lw(15,
                                                                                                  4)),
                                                                                            mop(Not,
                                                                                                var_b"setflags")),
                                                                                        eq(var_w("Rn",4),
                                                                                           lw(15,4)))),
                                                                                call
                                                                                  ("DECODE_UNPREDICTABLE",
                                                                                   @{typ
                                                                                   "'b state_scheme \<Rightarrow>
                                                                                    (unit \<times>
                                                                                     'b state_scheme)"},
                                                                                   tp[var("mc",
                                                                                          @{typ MachineCode}),
                                                                                      ls
                                                                                       "SUB (immediate)"],
                                                                                   @{theory} ),
                                                                                mu(lu,qTy)),
                                                                            close
                                                                              (var_a HOLogic.unitT,
                                                                               mu(call
                                                                                    ("instruction.Data",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Data.ArithLogicImmediate",
                                                                                        @{typ Data},
                                                                                        tp[lw(2,4),
                                                                                           var_b"setflags",
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("imm12",12)],
                                                                                        @{theory} ),
                                                                                     @{theory} ),qTy)))),
                                                                        (eq(mop(Cast w4,
                                                                                ll[var_b"b'24",
                                                                                   var_b"b'23",
                                                                                   var_b"b'22",
                                                                                   var_b"b'21"]),
                                                                            lw(14,4)),
                                                                         mb(ite(bop(Or,
                                                                                    bop(In,
                                                                                        var_w("Rd",4),
                                                                                        sl[lw(13,4),
                                                                                           lw(15,4)]),
                                                                                    bop(In,
                                                                                        var_w("Rn",4),
                                                                                        sl[lw(13,4),
                                                                                           lw(15,4)])),
                                                                                call
                                                                                  ("DECODE_UNPREDICTABLE",
                                                                                   @{typ
                                                                                   "'b state_scheme \<Rightarrow>
                                                                                    (unit \<times>
                                                                                     'b state_scheme)"},
                                                                                   tp[var("mc",
                                                                                          @{typ MachineCode}),
                                                                                      ls
                                                                                       "RSB (immediate)"],
                                                                                   @{theory} ),
                                                                                mu(lu,qTy)),
                                                                            close
                                                                              (var_a HOLogic.unitT,
                                                                               mu(call
                                                                                    ("instruction.Data",
                                                                                     @{typ instruction},
                                                                                     call
                                                                                       ("Data.ArithLogicImmediate",
                                                                                        @{typ Data},
                                                                                        tp[lw(3,4),
                                                                                           var_b"setflags",
                                                                                           var_w("Rd",4),
                                                                                           var_w("Rn",4),
                                                                                           var_w("imm12",12)],
                                                                                        @{theory} ),
                                                                                     @{theory} ),qTy))))],
                                                                       mu(call
                                                                            ("instruction.Undefined",
                                                                             @{typ instruction},
                                                                             lw(0,32),@{theory} ),qTy)))))))),
                                                 call
                                                   ("Skip",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow>
                                                     (instruction \<times> 'b state_scheme)"},lu,@{theory} )))))))))),
                       (bop(And,var_b"b'25",
                            bop(And,mop(Not,var_b"b'24"),
                                bop(And,mop(Not,var_b"b'23"),
                                    bop(And,mop(Not,var_b"b'22"),
                                        bop(And,mop(Not,var_b"b'21"),mop(Not,var_b"b'20")))))),
                        let'
                          (var_w("Rd",4),
                           mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                           mb(call
                                ("ThumbCondition",
                                 @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,@{theory} ),
                              close
                                (var_w("v",4),
                                 mb(mb(mb(call
                                            ("HaveThumb2",
                                             @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                             @{theory} ),
                                          close(var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                       close
                                         (var("v",@{typ "4 word \<times> bool"}),
                                          call
                                            ("Do",
                                             @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                             var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                    close
                                      (var_b"b",
                                       ite(var_b"b",
                                           mb(ite(bop(In,var_w("Rd",4),sl[lw(13,4),lw(15,4)]),
                                                  call
                                                    ("DECODE_UNPREDICTABLE",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                     tp[var("mc",@{typ MachineCode}),
                                                        ls"ADDW (immediate)"],@{theory} ),mu(lu,qTy)),
                                              close
                                                (var_a HOLogic.unitT,
                                                 mu(call
                                                      ("instruction.Data",@{typ instruction},
                                                       call
                                                         ("Data.AddSub",@{typ Data},
                                                          tp[lf,var_w("Rd",4),
                                                             mop(Cast w4,
                                                                 ll[var_b"b'19",var_b"b'18",
                                                                    var_b"b'17",var_b"b'16"]),
                                                             cc[mop(Cast w1,ll[var_b"b'26"]),
                                                                mop(Cast (Word_Lib.mk_wordT 3),
                                                                    ll[var_b"b'14",var_b"b'13",
                                                                       var_b"b'12"]),
                                                                mop(Cast w8,
                                                                    ll[var_b"b'7",var_b"b'6",
                                                                       var_b"b'5",var_b"b'4",
                                                                       var_b"b'3",var_b"b'2",
                                                                       var_b"b'1",var_b"b'0"])]],
                                                          @{theory} ),@{theory} ),qTy))),
                                           call
                                             ("Skip",
                                              @{typ
                                              "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                              lu,@{theory} )))))))),
                       (bop(And,var_b"b'25",
                            bop(And,mop(Not,var_b"b'24"),
                                bop(And,var_b"b'23",
                                    bop(And,mop(Not,var_b"b'22"),
                                        bop(And,var_b"b'21",mop(Not,var_b"b'20")))))),
                        let'
                          (var_w("Rd",4),
                           mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                           mb(call
                                ("ThumbCondition",
                                 @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,@{theory} ),
                              close
                                (var_w("v",4),
                                 mb(mb(mb(call
                                            ("HaveThumb2",
                                             @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                             @{theory} ),
                                          close(var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                       close
                                         (var("v",@{typ "4 word \<times> bool"}),
                                          call
                                            ("Do",
                                             @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                             var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                    close
                                      (var_b"b",
                                       ite(var_b"b",
                                           mb(ite(bop(In,var_w("Rd",4),sl[lw(13,4),lw(15,4)]),
                                                  call
                                                    ("DECODE_UNPREDICTABLE",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                     tp[var("mc",@{typ MachineCode}),
                                                        ls"SUBW (immediate)"],@{theory} ),mu(lu,qTy)),
                                              close
                                                (var_a HOLogic.unitT,
                                                 mu(call
                                                      ("instruction.Data",@{typ instruction},
                                                       call
                                                         ("Data.AddSub",@{typ Data},
                                                          tp[lt,var_w("Rd",4),
                                                             mop(Cast w4,
                                                                 ll[var_b"b'19",var_b"b'18",
                                                                    var_b"b'17",var_b"b'16"]),
                                                             cc[mop(Cast w1,ll[var_b"b'26"]),
                                                                mop(Cast (Word_Lib.mk_wordT 3),
                                                                    ll[var_b"b'14",var_b"b'13",
                                                                       var_b"b'12"]),
                                                                mop(Cast w8,
                                                                    ll[var_b"b'7",var_b"b'6",
                                                                       var_b"b'5",var_b"b'4",
                                                                       var_b"b'3",var_b"b'2",
                                                                       var_b"b'1",var_b"b'0"])]],
                                                          @{theory} ),@{theory} ),qTy))),
                                           call
                                             ("Skip",
                                              @{typ
                                              "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                              lu,@{theory} )))))))),
                       (bop(And,var_b"b'25",
                            bop(And,mop(Not,var_b"b'24"),
                                bop(And,var_b"b'22",
                                    bop(And,mop(Not,var_b"b'21"),mop(Not,var_b"b'20"))))),
                        let'
                          (var_w("Rd",4),
                           mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                           mb(call
                                ("ThumbCondition",
                                 @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,@{theory} ),
                              close
                                (var_w("v",4),
                                 mb(mb(mb(call
                                            ("HaveThumb2",
                                             @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                             @{theory} ),
                                          close(var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                       close
                                         (var("v",@{typ "4 word \<times> bool"}),
                                          call
                                            ("Do",
                                             @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                             var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                    close
                                      (var_b"b",
                                       ite(var_b"b",
                                           mb(ite(bop(In,var_w("Rd",4),sl[lw(13,4),lw(15,4)]),
                                                  call
                                                    ("DECODE_UNPREDICTABLE",
                                                     @{typ
                                                     "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                                                     tp[var("mc",@{typ MachineCode}),
                                                        ls"MOVT or MOVW (immediate)"],@{theory} ),
                                                  mu(lu,qTy)),
                                              close
                                                (var_a HOLogic.unitT,
                                                 mu(call
                                                      ("instruction.Data",@{typ instruction},
                                                       call
                                                         ("Data.MoveHalfword",@{typ Data},
                                                          tp[eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),
                                                             var_w("Rd",4),
                                                             cc[mop(Cast w4,
                                                                    ll[var_b"b'19",var_b"b'18",
                                                                       var_b"b'17",var_b"b'16"]),
                                                                mop(Cast w1,ll[var_b"b'26"]),
                                                                mop(Cast (Word_Lib.mk_wordT 3),
                                                                    ll[var_b"b'14",var_b"b'13",
                                                                       var_b"b'12"]),
                                                                mop(Cast w8,
                                                                    ll[var_b"b'7",var_b"b'6",
                                                                       var_b"b'5",var_b"b'4",
                                                                       var_b"b'3",var_b"b'2",
                                                                       var_b"b'1",var_b"b'0"])]],
                                                          @{theory} ),@{theory} ),qTy))),
                                           call
                                             ("Skip",
                                              @{typ
                                              "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                              lu,@{theory} )))))))),
                       (bop(And,var_b"b'25",
                            bop(And,var_b"b'24",
                                bop(And,mop(Not,var_b"b'22"),
                                    bop(And,var_b"b'21",
                                        bop(And,mop(Not,var_b"b'20"),
                                            bop(And,mop(Not,var_b"b'14"),
                                                bop(And,mop(Not,var_b"b'13"),
                                                    bop(And,mop(Not,var_b"b'12"),
                                                        bop(And,mop(Not,var_b"b'7"),
                                                            mop(Not,var_b"b'6")))))))))),
                        let'
                          (var_w("Rn",4),
                           mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           let'
                             (var_w("sat_imm",4),
                              mop(Cast w4,ll[var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                              let'
                                (var_w("Rd",4),
                                 mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                 mb(call
                                      ("ThumbCondition",
                                       @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                       @{theory} ),
                                    close
                                      (var_w("v",4),
                                       mb(mb(mb(call
                                                  ("HaveThumb2",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                                   @{theory} ),
                                                close(var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                             close
                                               (var("v",@{typ "4 word \<times> bool"}),
                                                call
                                                  ("Do",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                   var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                          close
                                            (var_b"b",
                                             ite(var_b"b",
                                                 mb(ite(bop(Or,
                                                            bop(In,var_w("Rd",4),
                                                                sl[lw(13,4),lw(15,4)]),
                                                            bop(In,var_w("Rn",4),
                                                                sl[lw(13,4),lw(15,4)])),
                                                        call
                                                          ("DECODE_UNPREDICTABLE",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (unit \<times> 'b state_scheme)"},
                                                           tp[var("mc",@{typ MachineCode}),
                                                              ls"Saturate16"],@{theory} ),mu(lu,qTy)),
                                                    close
                                                      (var_a HOLogic.unitT,
                                                       mu(let'
                                                            (var_b"unsigned",
                                                             eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),
                                                             call
                                                               ("instruction.Media",
                                                                @{typ instruction},
                                                                call
                                                                  ("Media.Saturate16",@{typ Media},
                                                                   tp[ite(var_b"unsigned",
                                                                          mop(Cast HOLogic.natT,
                                                                              var_w("sat_imm",4)),
                                                                          bop(Add,
                                                                              mop(Cast HOLogic.natT,
                                                                                  var_w("sat_imm",4)),
                                                                              ln 1)),
                                                                      var_b"unsigned",var_w("Rd",4),
                                                                      var_w("Rn",4)],@{theory} ),
                                                                @{theory} )),qTy))),
                                                 call
                                                   ("Skip",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow>
                                                     (instruction \<times> 'b state_scheme)"},lu,@{theory} )))))))))),
                       (bop(And,var_b"b'25",
                            bop(And,var_b"b'24",bop(And,mop(Not,var_b"b'22"),mop(Not,var_b"b'20")))),
                        let'
                          (var_w("Rn",4),
                           mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           let'
                             (var_w("sat_imm",5),
                              mop(Cast (Word_Lib.mk_wordT 5),
                                  ll[var_b"b'4",var_b"b'3",var_b"b'2",var_b"b'1",var_b"b'0"]),
                              let'
                                (var_w("Rd",4),
                                 mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                                 mb(call
                                      ("ThumbCondition",
                                       @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                       @{theory} ),
                                    close
                                      (var_w("v",4),
                                       mb(mb(mb(call
                                                  ("HaveThumb2",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},lu,
                                                   @{theory} ),
                                                close(var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                             close
                                               (var("v",@{typ "4 word \<times> bool"}),
                                                call
                                                  ("Do",
                                                   @{typ
                                                   "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                   var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                          close
                                            (var_b"b",
                                             ite(var_b"b",
                                                 mb(ite(bop(Or,
                                                            bop(In,var_w("Rd",4),
                                                                sl[lw(13,4),lw(15,4)]),
                                                            bop(In,var_w("Rn",4),
                                                                sl[lw(13,4),lw(15,4)])),
                                                        call
                                                          ("DECODE_UNPREDICTABLE",
                                                           @{typ
                                                           "'b state_scheme \<Rightarrow>
                                                            (unit \<times> 'b state_scheme)"},
                                                           tp[var("mc",@{typ MachineCode}),
                                                              ls"Saturate"],@{theory} ),mu(lu,qTy)),
                                                    close
                                                      (var_a HOLogic.unitT,
                                                       mu(let'
                                                            (var_b"unsigned",
                                                             eq(mop(Cast w1,ll[var_b"b'23"]),lw(1,1)),
                                                             let'
                                                               (tp[var("shift_t",@{typ SRType}),
                                                                   var_n"shift_n"],
                                                                call
                                                                  ("DecodeImmShift",
                                                                   @{typ "SRType \<times> nat"},
                                                                   tp[cc[mop(Cast w1,ll[var_b"b'21"]),
                                                                         lw(0,1)],
                                                                      cc[mop(Cast
                                                                               (Word_Lib.mk_wordT 3),
                                                                             ll[var_b"b'14",
                                                                                var_b"b'13",
                                                                                var_b"b'12"]),
                                                                         mop(Cast
                                                                               (Word_Lib.mk_wordT 2),
                                                                             ll[var_b"b'7",
                                                                                var_b"b'6"])]],
                                                                   @{theory} ),
                                                                call
                                                                  ("instruction.Media",
                                                                   @{typ instruction},
                                                                   call
                                                                     ("Media.Saturate",@{typ Media},
                                                                      tp[var("shift_t",@{typ SRType}),
                                                                         var_n"shift_n",
                                                                         ite(var_b"unsigned",
                                                                             mop(Cast HOLogic.natT,
                                                                                 var_w("sat_imm",5)),
                                                                             bop(Add,
                                                                                 mop(Cast
                                                                                       HOLogic.natT,
                                                                                     var_w("sat_imm",5)),
                                                                                 ln 1)),
                                                                         var_b"unsigned",
                                                                         var_w("Rd",4),var_w("Rn",4)],
                                                                      @{theory} ),@{theory} ))),qTy))),
                                                 call
                                                   ("Skip",
                                                    @{typ
                                                    "'b state_scheme \<Rightarrow>
                                                     (instruction \<times> 'b state_scheme)"},lu,@{theory} )))))))))),
                       (bop(And,var_b"b'25",
                            bop(And,var_b"b'24",
                                bop(And,var_b"b'22",
                                    bop(And,mop(Not,var_b"b'21"),mop(Not,var_b"b'20"))))),
                        let'
                          (var_w("Rn",4),
                           mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           let'
                             (var_w("Rd",4),
                              mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                              mb(call
                                   ("ThumbCondition",
                                    @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                    @{theory} ),
                                 close
                                   (var_w("v",4),
                                    mb(mb(mb(call
                                               ("HaveThumb2",
                                                @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                lu,@{theory} ),
                                             close(var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                          close
                                            (var("v",@{typ "4 word \<times> bool"}),
                                             call
                                               ("Do",
                                                @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                       close
                                         (var_b"b",
                                          ite(var_b"b",
                                              let'
                                                (var_n"widthminus1",
                                                 mop(Cast HOLogic.natT,
                                                     mop(Cast (Word_Lib.mk_wordT 5),
                                                         ll[var_b"b'4",var_b"b'3",var_b"b'2",
                                                            var_b"b'1",var_b"b'0"])),
                                                 let'
                                                   (var_n"lsbit",
                                                    mop(Cast HOLogic.natT,
                                                        cc[mop(Cast (Word_Lib.mk_wordT 3),
                                                               ll[var_b"b'14",var_b"b'13",
                                                                  var_b"b'12"]),
                                                           mop(Cast (Word_Lib.mk_wordT 2),
                                                               ll[var_b"b'7",var_b"b'6"])]),
                                                    mb(ite(bop(Or,
                                                               bop(In,var_w("Rd",4),
                                                                   sl[lw(13,4),lw(15,4)]),
                                                               bop(Or,
                                                                   bop(In,var_w("Rn",4),
                                                                       sl[lw(13,4),lw(15,4)]),
                                                                   bop(Lt,ln 31,
                                                                       bop(Add,var_n"lsbit",
                                                                           var_n"widthminus1")))),
                                                           call
                                                             ("DECODE_UNPREDICTABLE",
                                                              @{typ
                                                              "'b state_scheme \<Rightarrow>
                                                               (unit \<times> 'b state_scheme)"},
                                                              tp[var("mc",@{typ MachineCode}),
                                                                 ls"BitFieldExtract"],@{theory} ),
                                                           mu(lu,qTy)),
                                                       close
                                                         (var_a HOLogic.unitT,
                                                          mu(call
                                                               ("instruction.Media",
                                                                @{typ instruction},
                                                                call
                                                                  ("Media.BitFieldExtract",
                                                                   @{typ Media},
                                                                   tp[eq(mop(Cast w1,ll[var_b"b'23"]),
                                                                         lw(1,1)),var_w("Rd",4),
                                                                      var_w("Rn",4),var_n"lsbit",
                                                                      var_n"widthminus1"],@{theory} ),
                                                                @{theory} ),qTy))))),
                                              call
                                                ("Skip",
                                                 @{typ
                                                 "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                 lu,@{theory} ))))))))),
                       (bop(And,var_b"b'25",
                            bop(And,var_b"b'24",
                                bop(And,mop(Not,var_b"b'23"),
                                    bop(And,var_b"b'22",bop(And,var_b"b'21",mop(Not,var_b"b'20")))))),
                        let'
                          (var_w("Rn",4),
                           mop(Cast w4,ll[var_b"b'19",var_b"b'18",var_b"b'17",var_b"b'16"]),
                           let'
                             (var_w("Rd",4),
                              mop(Cast w4,ll[var_b"b'11",var_b"b'10",var_b"b'9",var_b"b'8"]),
                              mb(call
                                   ("ThumbCondition",
                                    @{typ "'b state_scheme \<Rightarrow> (4 word \<times> 'b state_scheme)"},lu,
                                    @{theory} ),
                                 close
                                   (var_w("v",4),
                                    mb(mb(mb(call
                                               ("HaveThumb2",
                                                @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                lu,@{theory} ),
                                             close(var_b"v0",mu(tp[var_w("v",4),var_b"v0"],qTy))),
                                          close
                                            (var("v",@{typ "4 word \<times> bool"}),
                                             call
                                               ("Do",
                                                @{typ "'b state_scheme \<Rightarrow> (bool \<times> 'b state_scheme)"},
                                                var("v",@{typ "4 word \<times> bool"}),@{theory} ))),
                                       close
                                         (var_b"b",
                                          ite(var_b"b",
                                              let'
                                                (var_n"msbit",
                                                 mop(Cast HOLogic.natT,
                                                     mop(Cast (Word_Lib.mk_wordT 5),
                                                         ll[var_b"b'4",var_b"b'3",var_b"b'2",
                                                            var_b"b'1",var_b"b'0"])),
                                                 let'
                                                   (var_n"lsbit",
                                                    mop(Cast HOLogic.natT,
                                                        cc[mop(Cast (Word_Lib.mk_wordT 3),
                                                               ll[var_b"b'14",var_b"b'13",
                                                                  var_b"b'12"]),
                                                           mop(Cast (Word_Lib.mk_wordT 2),
                                                               ll[var_b"b'7",var_b"b'6"])]),
                                                    mb(ite(bop(Or,
                                                               bop(In,var_w("Rd",4),
                                                                   sl[lw(13,4),lw(15,4)]),
                                                               bop(Or,eq(var_w("Rn",4),lw(13,4)),
                                                                   bop(Lt,var_n"msbit",var_n"lsbit"))),
                                                           call
                                                             ("DECODE_UNPREDICTABLE",
                                                              @{typ
                                                              "'b state_scheme \<Rightarrow>
                                                               (unit \<times> 'b state_scheme)"},
                                                              tp[var("mc",@{typ MachineCode}),
                                                                 ls"BitFieldClearOrInsert"],
                                                              @{theory} ),mu(lu,qTy)),
                                                       close
                                                         (var_a HOLogic.unitT,
                                                          mu(call
                                                               ("instruction.Media",
                                                                @{typ instruction},
                                                                call
                                                                  ("Media.BitFieldClearOrInsert",
                                                                   @{typ Media},
                                                                   tp[var_w("Rd",4),var_w("Rn",4),
                                                                      var_n"lsbit",var_n"msbit"],
                                                                   @{theory} ),@{theory} ),qTy))))),
                                              call
                                                ("Skip",
                                                 @{typ
                                                 "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                                                 lu,@{theory} )))))))))],
                      call
                        ("UndefinedThumb",@{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                         lu,@{theory} )))],
                call
                  ("UndefinedThumb",@{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},lu,
                   @{theory} ))))))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("Decode",
   close
     (var("mc",@{typ MachineCode}),
      cs(var("mc",@{typ MachineCode}),
         [(call("MachineCode.ARM",@{typ MachineCode},var_w("w",32),@{theory} ),
           call
             ("DecodeARM",@{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},var_w("w",32),
              @{theory} )),
          (call("MachineCode.Thumb",@{typ MachineCode},var_w("h",16),@{theory} ),
           call
             ("DecodeThumb",@{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},var_w("h",16),
              @{theory} )),
          (call("MachineCode.ThumbEE",@{typ MachineCode},var_w("h",16),@{theory} ),
           call
             ("DecodeThumbEE",@{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
              var_w("h",16),@{theory} )),
          (call
             ("MachineCode.Thumb2",@{typ MachineCode},var("hs",@{typ "16 word \<times> 16 word"}),
              @{theory} ),
           call
             ("DecodeThumb2",@{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
              var("hs",@{typ "16 word \<times> 16 word"}),@{theory} )),
          (call("MachineCode.BadCode",@{typ MachineCode},var_s"s",@{theory} ),
           call
             ("raise'exception",@{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
              call("exception.UNPREDICTABLE",@{typ exception},var_s"s",@{theory ARM_Monadic}),@{theory ARM_Monadic}))],
         @{context})))
end
\<close>

ML \<open>
local 
open L3 
in
val () = def
  ("Next",
   mb(const("Fetch",@{typ "'b state_scheme \<Rightarrow> (MachineCode \<times> 'b state_scheme)"},@{theory} ),
      close
        (var("v",@{typ MachineCode}),
         mb(mb(call
                 ("Decode",@{typ "'b state_scheme \<Rightarrow> (instruction \<times> 'b state_scheme)"},
                  var("v",@{typ MachineCode}),@{theory} ),
               close
                 (var("v",@{typ instruction}),
                  call
                    ("Run",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},
                     var("v",@{typ instruction}),@{theory} ))),
            close
              (var_a HOLogic.unitT,
               call("ITAdvance",@{typ "'b state_scheme \<Rightarrow> (unit \<times> 'b state_scheme)"},lu,@{theory ARM_Monadic}))))))
end
\<close>
end